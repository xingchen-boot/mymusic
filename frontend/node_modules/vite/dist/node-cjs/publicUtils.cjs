'use***REMOVED***strict';

var***REMOVED***path$3***REMOVED***=***REMOVED***require('node:path');
var***REMOVED***node_url***REMOVED***=***REMOVED***require('node:url');
var***REMOVED***fs$1***REMOVED***=***REMOVED***require('node:fs');
var***REMOVED***esbuild***REMOVED***=***REMOVED***require('esbuild');
var***REMOVED***rollup***REMOVED***=***REMOVED***require('rollup');
var***REMOVED***os$1***REMOVED***=***REMOVED***require('node:os');
var***REMOVED***node_module***REMOVED***=***REMOVED***require('node:module');
var***REMOVED***require$$0***REMOVED***=***REMOVED***require('tty');
var***REMOVED***require$$1***REMOVED***=***REMOVED***require('util');
var***REMOVED***require$$0$1***REMOVED***=***REMOVED***require('path');
var***REMOVED***require$$0$2***REMOVED***=***REMOVED***require('crypto');
var***REMOVED***fs$2***REMOVED***=***REMOVED***require('fs');
var***REMOVED***readline***REMOVED***=***REMOVED***require('node:readline');
var***REMOVED***require$$2***REMOVED***=***REMOVED***require('os');

const***REMOVED***{***REMOVED***version:***REMOVED***version$2***REMOVED***}***REMOVED***=***REMOVED***JSON.parse(fs$1.readFileSync(new***REMOVED***URL('../../package.json',***REMOVED***(typeof***REMOVED***document***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***require('u'***REMOVED***+***REMOVED***'rl').pathToFileURL(__filename).href***REMOVED***:***REMOVED***(document.currentScript***REMOVED***&&***REMOVED***document.currentScript.src***REMOVED***||***REMOVED***new***REMOVED***URL('node-cjs/publicUtils.cjs',***REMOVED***document.baseURI).href)))).toString());
const***REMOVED***VERSION***REMOVED***=***REMOVED***version$2;
/**
***REMOVED*******REMOVED***Prefix***REMOVED***for***REMOVED***resolved***REMOVED***fs***REMOVED***paths,***REMOVED***since***REMOVED***windows***REMOVED***paths***REMOVED***may***REMOVED***not***REMOVED***be***REMOVED***valid***REMOVED***as***REMOVED***URLs.
***REMOVED****/
const***REMOVED***FS_PREFIX***REMOVED***=***REMOVED***`/@fs/`;
const***REMOVED***VITE_PACKAGE_DIR***REMOVED***=***REMOVED***path$3.resolve(
//***REMOVED***import.meta.url***REMOVED***is***REMOVED***`dist/node/constants.js`***REMOVED***after***REMOVED***bundle
node_url.fileURLToPath((typeof***REMOVED***document***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***require('u'***REMOVED***+***REMOVED***'rl').pathToFileURL(__filename).href***REMOVED***:***REMOVED***(document.currentScript***REMOVED***&&***REMOVED***document.currentScript.src***REMOVED***||***REMOVED***new***REMOVED***URL('node-cjs/publicUtils.cjs',***REMOVED***document.baseURI).href))),***REMOVED***'../../..');
const***REMOVED***CLIENT_ENTRY***REMOVED***=***REMOVED***path$3.resolve(VITE_PACKAGE_DIR,***REMOVED***'dist/client/client.mjs');
path$3.resolve(VITE_PACKAGE_DIR,***REMOVED***'dist/client/env.mjs');
path$3.dirname(CLIENT_ENTRY);

const***REMOVED***chars$1***REMOVED***=***REMOVED***'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
const***REMOVED***intToChar$1***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(64);***REMOVED***//***REMOVED***64***REMOVED***possible***REMOVED***chars.
const***REMOVED***charToInt$1***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(128);***REMOVED***//***REMOVED***z***REMOVED***is***REMOVED***122***REMOVED***in***REMOVED***ASCII
for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***chars$1.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***c***REMOVED***=***REMOVED***chars$1.charCodeAt(i);
***REMOVED******REMOVED******REMOVED******REMOVED***intToChar$1[i]***REMOVED***=***REMOVED***c;
***REMOVED******REMOVED******REMOVED******REMOVED***charToInt$1[c]***REMOVED***=***REMOVED***i;
}

//***REMOVED***Matches***REMOVED***the***REMOVED***scheme***REMOVED***of***REMOVED***a***REMOVED***URL,***REMOVED***eg***REMOVED***"http://"
var***REMOVED***UrlType;
(function***REMOVED***(UrlType)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Empty"]***REMOVED***=***REMOVED***1]***REMOVED***=***REMOVED***"Empty";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Hash"]***REMOVED***=***REMOVED***2]***REMOVED***=***REMOVED***"Hash";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Query"]***REMOVED***=***REMOVED***3]***REMOVED***=***REMOVED***"Query";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["RelativePath"]***REMOVED***=***REMOVED***4]***REMOVED***=***REMOVED***"RelativePath";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["AbsolutePath"]***REMOVED***=***REMOVED***5]***REMOVED***=***REMOVED***"AbsolutePath";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["SchemeRelative"]***REMOVED***=***REMOVED***6]***REMOVED***=***REMOVED***"SchemeRelative";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Absolute"]***REMOVED***=***REMOVED***7]***REMOVED***=***REMOVED***"Absolute";
})(UrlType***REMOVED***||***REMOVED***(UrlType***REMOVED***=***REMOVED***{}));

const***REMOVED***chars***REMOVED***=***REMOVED***'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
const***REMOVED***intToChar***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(64);***REMOVED***//***REMOVED***64***REMOVED***possible***REMOVED***chars.
const***REMOVED***charToInt***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(128);***REMOVED***//***REMOVED***z***REMOVED***is***REMOVED***122***REMOVED***in***REMOVED***ASCII
for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***chars.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***c***REMOVED***=***REMOVED***chars.charCodeAt(i);
***REMOVED******REMOVED******REMOVED******REMOVED***intToChar[i]***REMOVED***=***REMOVED***c;
***REMOVED******REMOVED******REMOVED******REMOVED***charToInt[c]***REMOVED***=***REMOVED***i;
}

function***REMOVED***getDefaultExportFromCjs***REMOVED***(x)***REMOVED***{
	return***REMOVED***x***REMOVED***&&***REMOVED***x.__esModule***REMOVED***&&***REMOVED***Object.prototype.hasOwnProperty.call(x,***REMOVED***'default')***REMOVED***?***REMOVED***x['default']***REMOVED***:***REMOVED***x;
}

var***REMOVED***picocolors***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

let***REMOVED***tty***REMOVED***=***REMOVED***require$$0;

let***REMOVED***isColorSupported***REMOVED***=
	!("NO_COLOR"***REMOVED***in***REMOVED***process.env***REMOVED***||***REMOVED***process.argv.includes("--no-color"))***REMOVED***&&
	("FORCE_COLOR"***REMOVED***in***REMOVED***process.env***REMOVED***||
		process.argv.includes("--color")***REMOVED***||
		process.platform***REMOVED***===***REMOVED***"win32"***REMOVED***||
		(tty.isatty(1)***REMOVED***&&***REMOVED***process.env.TERM***REMOVED***!==***REMOVED***"dumb")***REMOVED***||
		"CI"***REMOVED***in***REMOVED***process.env);

let***REMOVED***formatter***REMOVED***=
	(open,***REMOVED***close,***REMOVED***replace***REMOVED***=***REMOVED***open)***REMOVED***=>
	input***REMOVED***=>***REMOVED***{
		let***REMOVED***string***REMOVED***=***REMOVED***""***REMOVED***+***REMOVED***input;
		let***REMOVED***index***REMOVED***=***REMOVED***string.indexOf(close,***REMOVED***open.length);
		return***REMOVED***~index
			?***REMOVED***open***REMOVED***+***REMOVED***replaceClose(string,***REMOVED***close,***REMOVED***replace,***REMOVED***index)***REMOVED***+***REMOVED***close
			:***REMOVED***open***REMOVED***+***REMOVED***string***REMOVED***+***REMOVED***close
	};

let***REMOVED***replaceClose***REMOVED***=***REMOVED***(string,***REMOVED***close,***REMOVED***replace,***REMOVED***index)***REMOVED***=>***REMOVED***{
	let***REMOVED***start***REMOVED***=***REMOVED***string.substring(0,***REMOVED***index)***REMOVED***+***REMOVED***replace;
	let***REMOVED***end***REMOVED***=***REMOVED***string.substring(index***REMOVED***+***REMOVED***close.length);
	let***REMOVED***nextIndex***REMOVED***=***REMOVED***end.indexOf(close);
	return***REMOVED***~nextIndex***REMOVED***?***REMOVED***start***REMOVED***+***REMOVED***replaceClose(end,***REMOVED***close,***REMOVED***replace,***REMOVED***nextIndex)***REMOVED***:***REMOVED***start***REMOVED***+***REMOVED***end
};

let***REMOVED***createColors***REMOVED***=***REMOVED***(enabled***REMOVED***=***REMOVED***isColorSupported)***REMOVED***=>***REMOVED***({
	isColorSupported:***REMOVED***enabled,
	reset:***REMOVED***enabled***REMOVED***?***REMOVED***s***REMOVED***=>***REMOVED***`\x1b[0m${s}\x1b[0m`***REMOVED***:***REMOVED***String,
	bold:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[1m",***REMOVED***"\x1b[22m",***REMOVED***"\x1b[22m\x1b[1m")***REMOVED***:***REMOVED***String,
	dim:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[2m",***REMOVED***"\x1b[22m",***REMOVED***"\x1b[22m\x1b[2m")***REMOVED***:***REMOVED***String,
	italic:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[3m",***REMOVED***"\x1b[23m")***REMOVED***:***REMOVED***String,
	underline:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[4m",***REMOVED***"\x1b[24m")***REMOVED***:***REMOVED***String,
	inverse:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[7m",***REMOVED***"\x1b[27m")***REMOVED***:***REMOVED***String,
	hidden:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[8m",***REMOVED***"\x1b[28m")***REMOVED***:***REMOVED***String,
	strikethrough:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[9m",***REMOVED***"\x1b[29m")***REMOVED***:***REMOVED***String,
	black:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[30m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	red:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[31m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	green:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[32m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	yellow:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[33m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	blue:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[34m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	magenta:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[35m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	cyan:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[36m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	white:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[37m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	gray:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[90m",***REMOVED***"\x1b[39m")***REMOVED***:***REMOVED***String,
	bgBlack:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[40m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgRed:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[41m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgGreen:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[42m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgYellow:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[43m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgBlue:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[44m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgMagenta:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[45m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgCyan:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[46m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
	bgWhite:***REMOVED***enabled***REMOVED***?***REMOVED***formatter("\x1b[47m",***REMOVED***"\x1b[49m")***REMOVED***:***REMOVED***String,
});

picocolors.exports***REMOVED***=***REMOVED***createColors();
picocolors.exports.createColors***REMOVED***=***REMOVED***createColors;

var***REMOVED***picocolorsExports***REMOVED***=***REMOVED***picocolors.exports;
var***REMOVED***colors***REMOVED***=***REMOVED***/*@__PURE__*/getDefaultExportFromCjs(picocolorsExports);

var***REMOVED***src***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

var***REMOVED***browser$1***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

/**
***REMOVED*******REMOVED***Helpers.
***REMOVED****/

var***REMOVED***ms;
var***REMOVED***hasRequiredMs;

function***REMOVED***requireMs***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredMs)***REMOVED***return***REMOVED***ms;
	hasRequiredMs***REMOVED***=***REMOVED***1;
	var***REMOVED***s***REMOVED***=***REMOVED***1000;
	var***REMOVED***m***REMOVED***=***REMOVED***s***REMOVED*******REMOVED***60;
	var***REMOVED***h***REMOVED***=***REMOVED***m***REMOVED*******REMOVED***60;
	var***REMOVED***d***REMOVED***=***REMOVED***h***REMOVED*******REMOVED***24;
	var***REMOVED***w***REMOVED***=***REMOVED***d***REMOVED*******REMOVED***7;
	var***REMOVED***y***REMOVED***=***REMOVED***d***REMOVED*******REMOVED***365.25;

	/**
	***REMOVED*******REMOVED***Parse***REMOVED***or***REMOVED***format***REMOVED***the***REMOVED***given***REMOVED***`val`.
	***REMOVED****
	***REMOVED*******REMOVED***Options:
	***REMOVED****
	***REMOVED*******REMOVED******REMOVED***-***REMOVED***`long`***REMOVED***verbose***REMOVED***formatting***REMOVED***[false]
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{String|Number}***REMOVED***val
	***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[options]
	***REMOVED*******REMOVED***@throws***REMOVED***{Error}***REMOVED***throw***REMOVED***an***REMOVED***error***REMOVED***if***REMOVED***val***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***non-empty***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***number
	***REMOVED*******REMOVED***@return***REMOVED***{String|Number}
	***REMOVED*******REMOVED***@api***REMOVED***public
	***REMOVED****/

	ms***REMOVED***=***REMOVED***function(val,***REMOVED***options)***REMOVED***{
	***REMOVED******REMOVED***options***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
	***REMOVED******REMOVED***var***REMOVED***type***REMOVED***=***REMOVED***typeof***REMOVED***val;
	***REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***val.length***REMOVED***>***REMOVED***0)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parse(val);
	***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'number'***REMOVED***&&***REMOVED***isFinite(val))***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.long***REMOVED***?***REMOVED***fmtLong(val)***REMOVED***:***REMOVED***fmtShort(val);
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(
	***REMOVED******REMOVED******REMOVED******REMOVED***'val***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***non-empty***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***valid***REMOVED***number.***REMOVED***val='***REMOVED***+
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***JSON.stringify(val)
	***REMOVED******REMOVED***);
	};

	/**
	***REMOVED*******REMOVED***Parse***REMOVED***the***REMOVED***given***REMOVED***`str`***REMOVED***and***REMOVED***return***REMOVED***milliseconds.
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***str
	***REMOVED*******REMOVED***@return***REMOVED***{Number}
	***REMOVED*******REMOVED***@api***REMOVED***private
	***REMOVED****/

	function***REMOVED***parse(str)***REMOVED***{
	***REMOVED******REMOVED***str***REMOVED***=***REMOVED***String(str);
	***REMOVED******REMOVED***if***REMOVED***(str.length***REMOVED***>***REMOVED***100)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***var***REMOVED***match***REMOVED***=***REMOVED***/^(-?(?:\d+)?\.?\d+)***REMOVED****(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	***REMOVED******REMOVED******REMOVED******REMOVED***str
	***REMOVED******REMOVED***);
	***REMOVED******REMOVED***if***REMOVED***(!match)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***var***REMOVED***n***REMOVED***=***REMOVED***parseFloat(match[1]);
	***REMOVED******REMOVED***var***REMOVED***type***REMOVED***=***REMOVED***(match[2]***REMOVED***||***REMOVED***'ms').toLowerCase();
	***REMOVED******REMOVED***switch***REMOVED***(type)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'years':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'year':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'yrs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'yr':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'y':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***y;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'weeks':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'week':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'w':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***w;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'days':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'day':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'d':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***d;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hours':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hour':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hrs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hr':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'h':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***h;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'minutes':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'minute':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'mins':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'min':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'m':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***m;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'seconds':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'second':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'secs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'sec':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'s':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***s;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'milliseconds':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'millisecond':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'msecs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'msec':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'ms':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n;
	***REMOVED******REMOVED******REMOVED******REMOVED***default:
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***undefined;
	***REMOVED******REMOVED***}
	}

	/**
	***REMOVED*******REMOVED***Short***REMOVED***format***REMOVED***for***REMOVED***`ms`.
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***ms
	***REMOVED*******REMOVED***@return***REMOVED***{String}
	***REMOVED*******REMOVED***@api***REMOVED***private
	***REMOVED****/

	function***REMOVED***fmtShort(ms)***REMOVED***{
	***REMOVED******REMOVED***var***REMOVED***msAbs***REMOVED***=***REMOVED***Math.abs(ms);
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***d)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***d)***REMOVED***+***REMOVED***'d';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***h)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***h)***REMOVED***+***REMOVED***'h';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***m)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***m)***REMOVED***+***REMOVED***'m';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***s)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***s)***REMOVED***+***REMOVED***'s';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***ms***REMOVED***+***REMOVED***'ms';
	}

	/**
	***REMOVED*******REMOVED***Long***REMOVED***format***REMOVED***for***REMOVED***`ms`.
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***ms
	***REMOVED*******REMOVED***@return***REMOVED***{String}
	***REMOVED*******REMOVED***@api***REMOVED***private
	***REMOVED****/

	function***REMOVED***fmtLong(ms)***REMOVED***{
	***REMOVED******REMOVED***var***REMOVED***msAbs***REMOVED***=***REMOVED***Math.abs(ms);
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***d)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***d,***REMOVED***'day');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***h)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***h,***REMOVED***'hour');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***m)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***m,***REMOVED***'minute');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***s)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***s,***REMOVED***'second');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***ms***REMOVED***+***REMOVED***'***REMOVED***ms';
	}

	/**
	***REMOVED*******REMOVED***Pluralization***REMOVED***helper.
	***REMOVED****/

	function***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***n,***REMOVED***name)***REMOVED***{
	***REMOVED******REMOVED***var***REMOVED***isPlural***REMOVED***=***REMOVED***msAbs***REMOVED***>=***REMOVED***n***REMOVED*******REMOVED***1.5;
	***REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***n)***REMOVED***+***REMOVED***'***REMOVED***'***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***(isPlural***REMOVED***?***REMOVED***'s'***REMOVED***:***REMOVED***'');
	}
	return***REMOVED***ms;
}

var***REMOVED***common;
var***REMOVED***hasRequiredCommon;

function***REMOVED***requireCommon***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredCommon)***REMOVED***return***REMOVED***common;
	hasRequiredCommon***REMOVED***=***REMOVED***1;
	/**
	***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***the***REMOVED***common***REMOVED***logic***REMOVED***for***REMOVED***both***REMOVED***the***REMOVED***Node.js***REMOVED***and***REMOVED***web***REMOVED***browser
	***REMOVED*******REMOVED***implementations***REMOVED***of***REMOVED***`debug()`.
	***REMOVED****/

	function***REMOVED***setup(env)***REMOVED***{
		createDebug.debug***REMOVED***=***REMOVED***createDebug;
		createDebug.default***REMOVED***=***REMOVED***createDebug;
		createDebug.coerce***REMOVED***=***REMOVED***coerce;
		createDebug.disable***REMOVED***=***REMOVED***disable;
		createDebug.enable***REMOVED***=***REMOVED***enable;
		createDebug.enabled***REMOVED***=***REMOVED***enabled;
		createDebug.humanize***REMOVED***=***REMOVED***requireMs();
		createDebug.destroy***REMOVED***=***REMOVED***destroy;

		Object.keys(env).forEach(key***REMOVED***=>***REMOVED***{
			createDebug[key]***REMOVED***=***REMOVED***env[key];
		});

		/**
		****REMOVED***The***REMOVED***currently***REMOVED***active***REMOVED***debug***REMOVED***mode***REMOVED***names,***REMOVED***and***REMOVED***names***REMOVED***to***REMOVED***skip.
		*/

		createDebug.names***REMOVED***=***REMOVED***[];
		createDebug.skips***REMOVED***=***REMOVED***[];

		/**
		****REMOVED***Map***REMOVED***of***REMOVED***special***REMOVED***"%n"***REMOVED***handling***REMOVED***functions,***REMOVED***for***REMOVED***the***REMOVED***debug***REMOVED***"format"***REMOVED***argument.
		*
		****REMOVED***Valid***REMOVED***key***REMOVED***names***REMOVED***are***REMOVED***a***REMOVED***single,***REMOVED***lower***REMOVED***or***REMOVED***upper-case***REMOVED***letter,***REMOVED***i.e.***REMOVED***"n"***REMOVED***and***REMOVED***"N".
		*/
		createDebug.formatters***REMOVED***=***REMOVED***{};

		/**
		****REMOVED***Selects***REMOVED***a***REMOVED***color***REMOVED***for***REMOVED***a***REMOVED***debug***REMOVED***namespace
		****REMOVED***@param***REMOVED***{String}***REMOVED***namespace***REMOVED***The***REMOVED***namespace***REMOVED***string***REMOVED***for***REMOVED***the***REMOVED***debug***REMOVED***instance***REMOVED***to***REMOVED***be***REMOVED***colored
		****REMOVED***@return***REMOVED***{Number|String}***REMOVED***An***REMOVED***ANSI***REMOVED***color***REMOVED***code***REMOVED***for***REMOVED***the***REMOVED***given***REMOVED***namespace
		****REMOVED***@api***REMOVED***private
		*/
		function***REMOVED***selectColor(namespace)***REMOVED***{
			let***REMOVED***hash***REMOVED***=***REMOVED***0;

			for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***namespace.length;***REMOVED***i++)***REMOVED***{
				hash***REMOVED***=***REMOVED***((hash***REMOVED***<<***REMOVED***5)***REMOVED***-***REMOVED***hash)***REMOVED***+***REMOVED***namespace.charCodeAt(i);
				hash***REMOVED***|=***REMOVED***0;***REMOVED***//***REMOVED***Convert***REMOVED***to***REMOVED***32bit***REMOVED***integer
			}

			return***REMOVED***createDebug.colors[Math.abs(hash)***REMOVED***%***REMOVED***createDebug.colors.length];
		}
		createDebug.selectColor***REMOVED***=***REMOVED***selectColor;

		/**
		****REMOVED***Create***REMOVED***a***REMOVED***debugger***REMOVED***with***REMOVED***the***REMOVED***given***REMOVED***`namespace`.
		*
		****REMOVED***@param***REMOVED***{String}***REMOVED***namespace
		****REMOVED***@return***REMOVED***{Function}
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***createDebug(namespace)***REMOVED***{
			let***REMOVED***prevTime;
			let***REMOVED***enableOverride***REMOVED***=***REMOVED***null;
			let***REMOVED***namespacesCache;
			let***REMOVED***enabledCache;

			function***REMOVED***debug(...args)***REMOVED***{
				//***REMOVED***Disabled?
				if***REMOVED***(!debug.enabled)***REMOVED***{
					return;
				}

				const***REMOVED***self***REMOVED***=***REMOVED***debug;

				//***REMOVED***Set***REMOVED***`diff`***REMOVED***timestamp
				const***REMOVED***curr***REMOVED***=***REMOVED***Number(new***REMOVED***Date());
				const***REMOVED***ms***REMOVED***=***REMOVED***curr***REMOVED***-***REMOVED***(prevTime***REMOVED***||***REMOVED***curr);
				self.diff***REMOVED***=***REMOVED***ms;
				self.prev***REMOVED***=***REMOVED***prevTime;
				self.curr***REMOVED***=***REMOVED***curr;
				prevTime***REMOVED***=***REMOVED***curr;

				args[0]***REMOVED***=***REMOVED***createDebug.coerce(args[0]);

				if***REMOVED***(typeof***REMOVED***args[0]***REMOVED***!==***REMOVED***'string')***REMOVED***{
					//***REMOVED***Anything***REMOVED***else***REMOVED***let's***REMOVED***inspect***REMOVED***with***REMOVED***%O
					args.unshift('%O');
				}

				//***REMOVED***Apply***REMOVED***any***REMOVED***`formatters`***REMOVED***transformations
				let***REMOVED***index***REMOVED***=***REMOVED***0;
				args[0]***REMOVED***=***REMOVED***args[0].replace(/%([a-zA-Z%])/g,***REMOVED***(match,***REMOVED***format)***REMOVED***=>***REMOVED***{
					//***REMOVED***If***REMOVED***we***REMOVED***encounter***REMOVED***an***REMOVED***escaped***REMOVED***%***REMOVED***then***REMOVED***don't***REMOVED***increase***REMOVED***the***REMOVED***array***REMOVED***index
					if***REMOVED***(match***REMOVED***===***REMOVED***'%%')***REMOVED***{
						return***REMOVED***'%';
					}
					index++;
					const***REMOVED***formatter***REMOVED***=***REMOVED***createDebug.formatters[format];
					if***REMOVED***(typeof***REMOVED***formatter***REMOVED***===***REMOVED***'function')***REMOVED***{
						const***REMOVED***val***REMOVED***=***REMOVED***args[index];
						match***REMOVED***=***REMOVED***formatter.call(self,***REMOVED***val);

						//***REMOVED***Now***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***remove***REMOVED***`args[index]`***REMOVED***since***REMOVED***it's***REMOVED***inlined***REMOVED***in***REMOVED***the***REMOVED***`format`
						args.splice(index,***REMOVED***1);
						index--;
					}
					return***REMOVED***match;
				});

				//***REMOVED***Apply***REMOVED***env-specific***REMOVED***formatting***REMOVED***(colors,***REMOVED***etc.)
				createDebug.formatArgs.call(self,***REMOVED***args);

				const***REMOVED***logFn***REMOVED***=***REMOVED***self.log***REMOVED***||***REMOVED***createDebug.log;
				logFn.apply(self,***REMOVED***args);
			}

			debug.namespace***REMOVED***=***REMOVED***namespace;
			debug.useColors***REMOVED***=***REMOVED***createDebug.useColors();
			debug.color***REMOVED***=***REMOVED***createDebug.selectColor(namespace);
			debug.extend***REMOVED***=***REMOVED***extend;
			debug.destroy***REMOVED***=***REMOVED***createDebug.destroy;***REMOVED***//***REMOVED***XXX***REMOVED***Temporary.***REMOVED***Will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***release.

			Object.defineProperty(debug,***REMOVED***'enabled',***REMOVED***{
				enumerable:***REMOVED***true,
				configurable:***REMOVED***false,
				get:***REMOVED***()***REMOVED***=>***REMOVED***{
					if***REMOVED***(enableOverride***REMOVED***!==***REMOVED***null)***REMOVED***{
						return***REMOVED***enableOverride;
					}
					if***REMOVED***(namespacesCache***REMOVED***!==***REMOVED***createDebug.namespaces)***REMOVED***{
						namespacesCache***REMOVED***=***REMOVED***createDebug.namespaces;
						enabledCache***REMOVED***=***REMOVED***createDebug.enabled(namespace);
					}

					return***REMOVED***enabledCache;
				},
				set:***REMOVED***v***REMOVED***=>***REMOVED***{
					enableOverride***REMOVED***=***REMOVED***v;
				}
			});

			//***REMOVED***Env-specific***REMOVED***initialization***REMOVED***logic***REMOVED***for***REMOVED***debug***REMOVED***instances
			if***REMOVED***(typeof***REMOVED***createDebug.init***REMOVED***===***REMOVED***'function')***REMOVED***{
				createDebug.init(debug);
			}

			return***REMOVED***debug;
		}

		function***REMOVED***extend(namespace,***REMOVED***delimiter)***REMOVED***{
			const***REMOVED***newDebug***REMOVED***=***REMOVED***createDebug(this.namespace***REMOVED***+***REMOVED***(typeof***REMOVED***delimiter***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***':'***REMOVED***:***REMOVED***delimiter)***REMOVED***+***REMOVED***namespace);
			newDebug.log***REMOVED***=***REMOVED***this.log;
			return***REMOVED***newDebug;
		}

		/**
		****REMOVED***Enables***REMOVED***a***REMOVED***debug***REMOVED***mode***REMOVED***by***REMOVED***namespaces.***REMOVED***This***REMOVED***can***REMOVED***include***REMOVED***modes
		****REMOVED***separated***REMOVED***by***REMOVED***a***REMOVED***colon***REMOVED***and***REMOVED***wildcards.
		*
		****REMOVED***@param***REMOVED***{String}***REMOVED***namespaces
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***enable(namespaces)***REMOVED***{
			createDebug.save(namespaces);
			createDebug.namespaces***REMOVED***=***REMOVED***namespaces;

			createDebug.names***REMOVED***=***REMOVED***[];
			createDebug.skips***REMOVED***=***REMOVED***[];

			let***REMOVED***i;
			const***REMOVED***split***REMOVED***=***REMOVED***(typeof***REMOVED***namespaces***REMOVED***===***REMOVED***'string'***REMOVED***?***REMOVED***namespaces***REMOVED***:***REMOVED***'').split(/[\s,]+/);
			const***REMOVED***len***REMOVED***=***REMOVED***split.length;

			for***REMOVED***(i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
				if***REMOVED***(!split[i])***REMOVED***{
					//***REMOVED***ignore***REMOVED***empty***REMOVED***strings
					continue;
				}

				namespaces***REMOVED***=***REMOVED***split[i].replace(/\*/g,***REMOVED***'.*?');

				if***REMOVED***(namespaces[0]***REMOVED***===***REMOVED***'-')***REMOVED***{
					createDebug.skips.push(new***REMOVED***RegExp('^'***REMOVED***+***REMOVED***namespaces.slice(1)***REMOVED***+***REMOVED***'$'));
				}***REMOVED***else***REMOVED***{
					createDebug.names.push(new***REMOVED***RegExp('^'***REMOVED***+***REMOVED***namespaces***REMOVED***+***REMOVED***'$'));
				}
			}
		}

		/**
		****REMOVED***Disable***REMOVED***debug***REMOVED***output.
		*
		****REMOVED***@return***REMOVED***{String}***REMOVED***namespaces
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***disable()***REMOVED***{
			const***REMOVED***namespaces***REMOVED***=***REMOVED***[
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace***REMOVED***=>***REMOVED***'-'***REMOVED***+***REMOVED***namespace)
			].join(',');
			createDebug.enable('');
			return***REMOVED***namespaces;
		}

		/**
		****REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***the***REMOVED***given***REMOVED***mode***REMOVED***name***REMOVED***is***REMOVED***enabled,***REMOVED***false***REMOVED***otherwise.
		*
		****REMOVED***@param***REMOVED***{String}***REMOVED***name
		****REMOVED***@return***REMOVED***{Boolean}
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***enabled(name)***REMOVED***{
			if***REMOVED***(name[name.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'*')***REMOVED***{
				return***REMOVED***true;
			}

			let***REMOVED***i;
			let***REMOVED***len;

			for***REMOVED***(i***REMOVED***=***REMOVED***0,***REMOVED***len***REMOVED***=***REMOVED***createDebug.skips.length;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
				if***REMOVED***(createDebug.skips[i].test(name))***REMOVED***{
					return***REMOVED***false;
				}
			}

			for***REMOVED***(i***REMOVED***=***REMOVED***0,***REMOVED***len***REMOVED***=***REMOVED***createDebug.names.length;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
				if***REMOVED***(createDebug.names[i].test(name))***REMOVED***{
					return***REMOVED***true;
				}
			}

			return***REMOVED***false;
		}

		/**
		****REMOVED***Convert***REMOVED***regexp***REMOVED***to***REMOVED***namespace
		*
		****REMOVED***@param***REMOVED***{RegExp}***REMOVED***regxep
		****REMOVED***@return***REMOVED***{String}***REMOVED***namespace
		****REMOVED***@api***REMOVED***private
		*/
		function***REMOVED***toNamespace(regexp)***REMOVED***{
			return***REMOVED***regexp.toString()
				.substring(2,***REMOVED***regexp.toString().length***REMOVED***-***REMOVED***2)
				.replace(/\.\*\?$/,***REMOVED***'*');
		}

		/**
		****REMOVED***Coerce***REMOVED***`val`.
		*
		****REMOVED***@param***REMOVED***{Mixed}***REMOVED***val
		****REMOVED***@return***REMOVED***{Mixed}
		****REMOVED***@api***REMOVED***private
		*/
		function***REMOVED***coerce(val)***REMOVED***{
			if***REMOVED***(val***REMOVED***instanceof***REMOVED***Error)***REMOVED***{
				return***REMOVED***val.stack***REMOVED***||***REMOVED***val.message;
			}
			return***REMOVED***val;
		}

		/**
		****REMOVED***XXX***REMOVED***DO***REMOVED***NOT***REMOVED***USE.***REMOVED***This***REMOVED***is***REMOVED***a***REMOVED***temporary***REMOVED***stub***REMOVED***function.
		****REMOVED***XXX***REMOVED***It***REMOVED***WILL***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***release.
		*/
		function***REMOVED***destroy()***REMOVED***{
			console.warn('Instance***REMOVED***method***REMOVED***`debug.destroy()`***REMOVED***is***REMOVED***deprecated***REMOVED***and***REMOVED***no***REMOVED***longer***REMOVED***does***REMOVED***anything.***REMOVED***It***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***version***REMOVED***of***REMOVED***`debug`.');
		}

		createDebug.enable(createDebug.load());

		return***REMOVED***createDebug;
	}

	common***REMOVED***=***REMOVED***setup;
	return***REMOVED***common;
}

/****REMOVED***eslint-env***REMOVED***browser***REMOVED****/

var***REMOVED***hasRequiredBrowser;

function***REMOVED***requireBrowser***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredBrowser)***REMOVED***return***REMOVED***browser$1.exports;
	hasRequiredBrowser***REMOVED***=***REMOVED***1;
	(function***REMOVED***(module,***REMOVED***exports)***REMOVED***{
		/**
		***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***the***REMOVED***web***REMOVED***browser***REMOVED***implementation***REMOVED***of***REMOVED***`debug()`.
		***REMOVED****/

		exports.formatArgs***REMOVED***=***REMOVED***formatArgs;
		exports.save***REMOVED***=***REMOVED***save;
		exports.load***REMOVED***=***REMOVED***load;
		exports.useColors***REMOVED***=***REMOVED***useColors;
		exports.storage***REMOVED***=***REMOVED***localstorage();
		exports.destroy***REMOVED***=***REMOVED***(()***REMOVED***=>***REMOVED***{
			let***REMOVED***warned***REMOVED***=***REMOVED***false;

			return***REMOVED***()***REMOVED***=>***REMOVED***{
				if***REMOVED***(!warned)***REMOVED***{
					warned***REMOVED***=***REMOVED***true;
					console.warn('Instance***REMOVED***method***REMOVED***`debug.destroy()`***REMOVED***is***REMOVED***deprecated***REMOVED***and***REMOVED***no***REMOVED***longer***REMOVED***does***REMOVED***anything.***REMOVED***It***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***version***REMOVED***of***REMOVED***`debug`.');
				}
			};
		})();

		/**
		***REMOVED*******REMOVED***Colors.
		***REMOVED****/

		exports.colors***REMOVED***=***REMOVED***[
			'#0000CC',
			'#0000FF',
			'#0033CC',
			'#0033FF',
			'#0066CC',
			'#0066FF',
			'#0099CC',
			'#0099FF',
			'#00CC00',
			'#00CC33',
			'#00CC66',
			'#00CC99',
			'#00CCCC',
			'#00CCFF',
			'#3300CC',
			'#3300FF',
			'#3333CC',
			'#3333FF',
			'#3366CC',
			'#3366FF',
			'#3399CC',
			'#3399FF',
			'#33CC00',
			'#33CC33',
			'#33CC66',
			'#33CC99',
			'#33CCCC',
			'#33CCFF',
			'#6600CC',
			'#6600FF',
			'#6633CC',
			'#6633FF',
			'#66CC00',
			'#66CC33',
			'#9900CC',
			'#9900FF',
			'#9933CC',
			'#9933FF',
			'#99CC00',
			'#99CC33',
			'#CC0000',
			'#CC0033',
			'#CC0066',
			'#CC0099',
			'#CC00CC',
			'#CC00FF',
			'#CC3300',
			'#CC3333',
			'#CC3366',
			'#CC3399',
			'#CC33CC',
			'#CC33FF',
			'#CC6600',
			'#CC6633',
			'#CC9900',
			'#CC9933',
			'#CCCC00',
			'#CCCC33',
			'#FF0000',
			'#FF0033',
			'#FF0066',
			'#FF0099',
			'#FF00CC',
			'#FF00FF',
			'#FF3300',
			'#FF3333',
			'#FF3366',
			'#FF3399',
			'#FF33CC',
			'#FF33FF',
			'#FF6600',
			'#FF6633',
			'#FF9900',
			'#FF9933',
			'#FFCC00',
			'#FFCC33'
		];

		/**
		***REMOVED*******REMOVED***Currently***REMOVED***only***REMOVED***WebKit-based***REMOVED***Web***REMOVED***Inspectors,***REMOVED***Firefox***REMOVED***>=***REMOVED***v31,
		***REMOVED*******REMOVED***and***REMOVED***the***REMOVED***Firebug***REMOVED***extension***REMOVED***(any***REMOVED***Firefox***REMOVED***version)***REMOVED***are***REMOVED***known
		***REMOVED*******REMOVED***to***REMOVED***support***REMOVED***"%c"***REMOVED***CSS***REMOVED***customizations.
		***REMOVED****
		***REMOVED*******REMOVED***TODO:***REMOVED***add***REMOVED***a***REMOVED***`localStorage`***REMOVED***variable***REMOVED***to***REMOVED***explicitly***REMOVED***enable/disable***REMOVED***colors
		***REMOVED****/

		//***REMOVED***eslint-disable-next-line***REMOVED***complexity
		function***REMOVED***useColors()***REMOVED***{
			//***REMOVED***NB:***REMOVED***In***REMOVED***an***REMOVED***Electron***REMOVED***preload***REMOVED***script,***REMOVED***document***REMOVED***will***REMOVED***be***REMOVED***defined***REMOVED***but***REMOVED***not***REMOVED***fully
			//***REMOVED***initialized.***REMOVED***Since***REMOVED***we***REMOVED***know***REMOVED***we're***REMOVED***in***REMOVED***Chrome,***REMOVED***we'll***REMOVED***just***REMOVED***detect***REMOVED***this***REMOVED***case
			//***REMOVED***explicitly
			if***REMOVED***(typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***window.process***REMOVED***&&***REMOVED***(window.process.type***REMOVED***===***REMOVED***'renderer'***REMOVED***||***REMOVED***window.process.__nwjs))***REMOVED***{
				return***REMOVED***true;
			}

			//***REMOVED***Internet***REMOVED***Explorer***REMOVED***and***REMOVED***Edge***REMOVED***do***REMOVED***not***REMOVED***support***REMOVED***colors.
			if***REMOVED***(typeof***REMOVED***navigator***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***navigator.userAgent***REMOVED***&&***REMOVED***navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))***REMOVED***{
				return***REMOVED***false;
			}

			//***REMOVED***Is***REMOVED***webkit?***REMOVED***http://stackoverflow.com/a/16459606/376773
			//***REMOVED***document***REMOVED***is***REMOVED***undefined***REMOVED***in***REMOVED***react-native:***REMOVED***https://github.com/facebook/react-native/pull/1632
			return***REMOVED***(typeof***REMOVED***document***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***document.documentElement***REMOVED***&&***REMOVED***document.documentElement.style***REMOVED***&&***REMOVED***document.documentElement.style.WebkitAppearance)***REMOVED***||
				//***REMOVED***Is***REMOVED***firebug?***REMOVED***http://stackoverflow.com/a/398120/376773
				(typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***window.console***REMOVED***&&***REMOVED***(window.console.firebug***REMOVED***||***REMOVED***(window.console.exception***REMOVED***&&***REMOVED***window.console.table)))***REMOVED***||
				//***REMOVED***Is***REMOVED***firefox***REMOVED***>=***REMOVED***v31?
				//***REMOVED***https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
				(typeof***REMOVED***navigator***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***navigator.userAgent***REMOVED***&&***REMOVED***navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)***REMOVED***&&***REMOVED***parseInt(RegExp.$1,***REMOVED***10)***REMOVED***>=***REMOVED***31)***REMOVED***||
				//***REMOVED***Double***REMOVED***check***REMOVED***webkit***REMOVED***in***REMOVED***userAgent***REMOVED***just***REMOVED***in***REMOVED***case***REMOVED***we***REMOVED***are***REMOVED***in***REMOVED***a***REMOVED***worker
				(typeof***REMOVED***navigator***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***navigator.userAgent***REMOVED***&&***REMOVED***navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		***REMOVED*******REMOVED***Colorize***REMOVED***log***REMOVED***arguments***REMOVED***if***REMOVED***enabled.
		***REMOVED****
		***REMOVED*******REMOVED***@api***REMOVED***public
		***REMOVED****/

		function***REMOVED***formatArgs(args)***REMOVED***{
			args[0]***REMOVED***=***REMOVED***(this.useColors***REMOVED***?***REMOVED***'%c'***REMOVED***:***REMOVED***'')***REMOVED***+
				this.namespace***REMOVED***+
				(this.useColors***REMOVED***?***REMOVED***'***REMOVED***%c'***REMOVED***:***REMOVED***'***REMOVED***')***REMOVED***+
				args[0]***REMOVED***+
				(this.useColors***REMOVED***?***REMOVED***'%c***REMOVED***'***REMOVED***:***REMOVED***'***REMOVED***')***REMOVED***+
				'+'***REMOVED***+***REMOVED***module.exports.humanize(this.diff);

			if***REMOVED***(!this.useColors)***REMOVED***{
				return;
			}

			const***REMOVED***c***REMOVED***=***REMOVED***'color:***REMOVED***'***REMOVED***+***REMOVED***this.color;
			args.splice(1,***REMOVED***0,***REMOVED***c,***REMOVED***'color:***REMOVED***inherit');

			//***REMOVED***The***REMOVED***final***REMOVED***"%c"***REMOVED***is***REMOVED***somewhat***REMOVED***tricky,***REMOVED***because***REMOVED***there***REMOVED***could***REMOVED***be***REMOVED***other
			//***REMOVED***arguments***REMOVED***passed***REMOVED***either***REMOVED***before***REMOVED***or***REMOVED***after***REMOVED***the***REMOVED***%c,***REMOVED***so***REMOVED***we***REMOVED***need***REMOVED***to
			//***REMOVED***figure***REMOVED***out***REMOVED***the***REMOVED***correct***REMOVED***index***REMOVED***to***REMOVED***insert***REMOVED***the***REMOVED***CSS***REMOVED***into
			let***REMOVED***index***REMOVED***=***REMOVED***0;
			let***REMOVED***lastC***REMOVED***=***REMOVED***0;
			args[0].replace(/%[a-zA-Z%]/g,***REMOVED***match***REMOVED***=>***REMOVED***{
				if***REMOVED***(match***REMOVED***===***REMOVED***'%%')***REMOVED***{
					return;
				}
				index++;
				if***REMOVED***(match***REMOVED***===***REMOVED***'%c')***REMOVED***{
					//***REMOVED***We***REMOVED***only***REMOVED***are***REMOVED***interested***REMOVED***in***REMOVED***the***REMOVED****last****REMOVED***%c
					//***REMOVED***(the***REMOVED***user***REMOVED***may***REMOVED***have***REMOVED***provided***REMOVED***their***REMOVED***own)
					lastC***REMOVED***=***REMOVED***index;
				}
			});

			args.splice(lastC,***REMOVED***0,***REMOVED***c);
		}

		/**
		***REMOVED*******REMOVED***Invokes***REMOVED***`console.debug()`***REMOVED***when***REMOVED***available.
		***REMOVED*******REMOVED***No-op***REMOVED***when***REMOVED***`console.debug`***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***"function".
		***REMOVED*******REMOVED***If***REMOVED***`console.debug`***REMOVED***is***REMOVED***not***REMOVED***available,***REMOVED***falls***REMOVED***back
		***REMOVED*******REMOVED***to***REMOVED***`console.log`.
		***REMOVED****
		***REMOVED*******REMOVED***@api***REMOVED***public
		***REMOVED****/
		exports.log***REMOVED***=***REMOVED***console.debug***REMOVED***||***REMOVED***console.log***REMOVED***||***REMOVED***(()***REMOVED***=>***REMOVED***{});

		/**
		***REMOVED*******REMOVED***Save***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***namespaces
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/
		function***REMOVED***save(namespaces)***REMOVED***{
			try***REMOVED***{
				if***REMOVED***(namespaces)***REMOVED***{
					exports.storage.setItem('debug',***REMOVED***namespaces);
				}***REMOVED***else***REMOVED***{
					exports.storage.removeItem('debug');
				}
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				//***REMOVED***Swallow
				//***REMOVED***XXX***REMOVED***(@Qix-)***REMOVED***should***REMOVED***we***REMOVED***be***REMOVED***logging***REMOVED***these?
			}
		}

		/**
		***REMOVED*******REMOVED***Load***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@return***REMOVED***{String}***REMOVED***returns***REMOVED***the***REMOVED***previously***REMOVED***persisted***REMOVED***debug***REMOVED***modes
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/
		function***REMOVED***load()***REMOVED***{
			let***REMOVED***r;
			try***REMOVED***{
				r***REMOVED***=***REMOVED***exports.storage.getItem('debug');
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				//***REMOVED***Swallow
				//***REMOVED***XXX***REMOVED***(@Qix-)***REMOVED***should***REMOVED***we***REMOVED***be***REMOVED***logging***REMOVED***these?
			}

			//***REMOVED***If***REMOVED***debug***REMOVED***isn't***REMOVED***set***REMOVED***in***REMOVED***LS,***REMOVED***and***REMOVED***we're***REMOVED***in***REMOVED***Electron,***REMOVED***try***REMOVED***to***REMOVED***load***REMOVED***$DEBUG
			if***REMOVED***(!r***REMOVED***&&***REMOVED***typeof***REMOVED***process***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***'env'***REMOVED***in***REMOVED***process)***REMOVED***{
				r***REMOVED***=***REMOVED***process.env.DEBUG;
			}

			return***REMOVED***r;
		}

		/**
		***REMOVED*******REMOVED***Localstorage***REMOVED***attempts***REMOVED***to***REMOVED***return***REMOVED***the***REMOVED***localstorage.
		***REMOVED****
		***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***necessary***REMOVED***because***REMOVED***safari***REMOVED***throws
		***REMOVED*******REMOVED***when***REMOVED***a***REMOVED***user***REMOVED***disables***REMOVED***cookies/localstorage
		***REMOVED*******REMOVED***and***REMOVED***you***REMOVED***attempt***REMOVED***to***REMOVED***access***REMOVED***it.
		***REMOVED****
		***REMOVED*******REMOVED***@return***REMOVED***{LocalStorage}
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/

		function***REMOVED***localstorage()***REMOVED***{
			try***REMOVED***{
				//***REMOVED***TVMLKit***REMOVED***(Apple***REMOVED***TV***REMOVED***JS***REMOVED***Runtime)***REMOVED***does***REMOVED***not***REMOVED***have***REMOVED***a***REMOVED***window***REMOVED***object,***REMOVED***just***REMOVED***localStorage***REMOVED***in***REMOVED***the***REMOVED***global***REMOVED***context
				//***REMOVED***The***REMOVED***Browser***REMOVED***also***REMOVED***has***REMOVED***localStorage***REMOVED***in***REMOVED***the***REMOVED***global***REMOVED***context.
				return***REMOVED***localStorage;
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				//***REMOVED***Swallow
				//***REMOVED***XXX***REMOVED***(@Qix-)***REMOVED***should***REMOVED***we***REMOVED***be***REMOVED***logging***REMOVED***these?
			}
		}

		module.exports***REMOVED***=***REMOVED***requireCommon()(exports);

		const***REMOVED***{formatters}***REMOVED***=***REMOVED***module.exports;

		/**
		***REMOVED*******REMOVED***Map***REMOVED***%j***REMOVED***to***REMOVED***`JSON.stringify()`,***REMOVED***since***REMOVED***no***REMOVED***Web***REMOVED***Inspectors***REMOVED***do***REMOVED***that***REMOVED***by***REMOVED***default.
		***REMOVED****/

		formatters.j***REMOVED***=***REMOVED***function***REMOVED***(v)***REMOVED***{
			try***REMOVED***{
				return***REMOVED***JSON.stringify(v);
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				return***REMOVED***'[UnexpectedJSONParseError]:***REMOVED***'***REMOVED***+***REMOVED***error.message;
			}
		};***REMOVED***
	}***REMOVED***(browser$1,***REMOVED***browser$1.exports));
	return***REMOVED***browser$1.exports;
}

var***REMOVED***node***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

/**
***REMOVED*******REMOVED***Module***REMOVED***dependencies.
***REMOVED****/

var***REMOVED***hasRequiredNode;

function***REMOVED***requireNode***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredNode)***REMOVED***return***REMOVED***node.exports;
	hasRequiredNode***REMOVED***=***REMOVED***1;
	(function***REMOVED***(module,***REMOVED***exports)***REMOVED***{
		const***REMOVED***tty***REMOVED***=***REMOVED***require$$0;
		const***REMOVED***util***REMOVED***=***REMOVED***require$$1;

		/**
		***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***the***REMOVED***Node.js***REMOVED***implementation***REMOVED***of***REMOVED***`debug()`.
		***REMOVED****/

		exports.init***REMOVED***=***REMOVED***init;
		exports.log***REMOVED***=***REMOVED***log;
		exports.formatArgs***REMOVED***=***REMOVED***formatArgs;
		exports.save***REMOVED***=***REMOVED***save;
		exports.load***REMOVED***=***REMOVED***load;
		exports.useColors***REMOVED***=***REMOVED***useColors;
		exports.destroy***REMOVED***=***REMOVED***util.deprecate(
			()***REMOVED***=>***REMOVED***{},
			'Instance***REMOVED***method***REMOVED***`debug.destroy()`***REMOVED***is***REMOVED***deprecated***REMOVED***and***REMOVED***no***REMOVED***longer***REMOVED***does***REMOVED***anything.***REMOVED***It***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***version***REMOVED***of***REMOVED***`debug`.'
		);

		/**
		***REMOVED*******REMOVED***Colors.
		***REMOVED****/

		exports.colors***REMOVED***=***REMOVED***[6,***REMOVED***2,***REMOVED***3,***REMOVED***4,***REMOVED***5,***REMOVED***1];

		try***REMOVED***{
			//***REMOVED***Optional***REMOVED***dependency***REMOVED***(as***REMOVED***in,***REMOVED***doesn't***REMOVED***need***REMOVED***to***REMOVED***be***REMOVED***installed,***REMOVED***NOT***REMOVED***like***REMOVED***optionalDependencies***REMOVED***in***REMOVED***package.json)
			//***REMOVED***eslint-disable-next-line***REMOVED***import/no-extraneous-dependencies
			const***REMOVED***supportsColor***REMOVED***=***REMOVED***require('supports-color');

			if***REMOVED***(supportsColor***REMOVED***&&***REMOVED***(supportsColor.stderr***REMOVED***||***REMOVED***supportsColor).level***REMOVED***>=***REMOVED***2)***REMOVED***{
				exports.colors***REMOVED***=***REMOVED***[
					20,
					21,
					26,
					27,
					32,
					33,
					38,
					39,
					40,
					41,
					42,
					43,
					44,
					45,
					56,
					57,
					62,
					63,
					68,
					69,
					74,
					75,
					76,
					77,
					78,
					79,
					80,
					81,
					92,
					93,
					98,
					99,
					112,
					113,
					128,
					129,
					134,
					135,
					148,
					149,
					160,
					161,
					162,
					163,
					164,
					165,
					166,
					167,
					168,
					169,
					170,
					171,
					172,
					173,
					178,
					179,
					184,
					185,
					196,
					197,
					198,
					199,
					200,
					201,
					202,
					203,
					204,
					205,
					206,
					207,
					208,
					209,
					214,
					215,
					220,
					221
				];
			}
		}***REMOVED***catch***REMOVED***(error)***REMOVED***{
			//***REMOVED***Swallow***REMOVED***-***REMOVED***we***REMOVED***only***REMOVED***care***REMOVED***if***REMOVED***`supports-color`***REMOVED***is***REMOVED***available;***REMOVED***it***REMOVED***doesn't***REMOVED***have***REMOVED***to***REMOVED***be.
		}

		/**
		***REMOVED*******REMOVED***Build***REMOVED***up***REMOVED***the***REMOVED***default***REMOVED***`inspectOpts`***REMOVED***object***REMOVED***from***REMOVED***the***REMOVED***environment***REMOVED***variables.
		***REMOVED****
		***REMOVED*******REMOVED******REMOVED******REMOVED***$***REMOVED***DEBUG_COLORS=no***REMOVED***DEBUG_DEPTH=10***REMOVED***DEBUG_SHOW_HIDDEN=enabled***REMOVED***node***REMOVED***script.js
		***REMOVED****/

		exports.inspectOpts***REMOVED***=***REMOVED***Object.keys(process.env).filter(key***REMOVED***=>***REMOVED***{
			return***REMOVED***/^debug_/i.test(key);
		}).reduce((obj,***REMOVED***key)***REMOVED***=>***REMOVED***{
			//***REMOVED***Camel-case
			const***REMOVED***prop***REMOVED***=***REMOVED***key
				.substring(6)
				.toLowerCase()
				.replace(/_([a-z])/g,***REMOVED***(_,***REMOVED***k)***REMOVED***=>***REMOVED***{
					return***REMOVED***k.toUpperCase();
				});

			//***REMOVED***Coerce***REMOVED***string***REMOVED***value***REMOVED***into***REMOVED***JS***REMOVED***value
			let***REMOVED***val***REMOVED***=***REMOVED***process.env[key];
			if***REMOVED***(/^(yes|on|true|enabled)$/i.test(val))***REMOVED***{
				val***REMOVED***=***REMOVED***true;
			}***REMOVED***else***REMOVED***if***REMOVED***(/^(no|off|false|disabled)$/i.test(val))***REMOVED***{
				val***REMOVED***=***REMOVED***false;
			}***REMOVED***else***REMOVED***if***REMOVED***(val***REMOVED***===***REMOVED***'null')***REMOVED***{
				val***REMOVED***=***REMOVED***null;
			}***REMOVED***else***REMOVED***{
				val***REMOVED***=***REMOVED***Number(val);
			}

			obj[prop]***REMOVED***=***REMOVED***val;
			return***REMOVED***obj;
		},***REMOVED***{});

		/**
		***REMOVED*******REMOVED***Is***REMOVED***stdout***REMOVED***a***REMOVED***TTY?***REMOVED***Colored***REMOVED***output***REMOVED***is***REMOVED***enabled***REMOVED***when***REMOVED***`true`.
		***REMOVED****/

		function***REMOVED***useColors()***REMOVED***{
			return***REMOVED***'colors'***REMOVED***in***REMOVED***exports.inspectOpts***REMOVED***?
				Boolean(exports.inspectOpts.colors)***REMOVED***:
				tty.isatty(process.stderr.fd);
		}

		/**
		***REMOVED*******REMOVED***Adds***REMOVED***ANSI***REMOVED***color***REMOVED***escape***REMOVED***codes***REMOVED***if***REMOVED***enabled.
		***REMOVED****
		***REMOVED*******REMOVED***@api***REMOVED***public
		***REMOVED****/

		function***REMOVED***formatArgs(args)***REMOVED***{
			const***REMOVED***{namespace:***REMOVED***name,***REMOVED***useColors}***REMOVED***=***REMOVED***this;

			if***REMOVED***(useColors)***REMOVED***{
				const***REMOVED***c***REMOVED***=***REMOVED***this.color;
				const***REMOVED***colorCode***REMOVED***=***REMOVED***'\u001B[3'***REMOVED***+***REMOVED***(c***REMOVED***<***REMOVED***8***REMOVED***?***REMOVED***c***REMOVED***:***REMOVED***'8;5;'***REMOVED***+***REMOVED***c);
				const***REMOVED***prefix***REMOVED***=***REMOVED***`***REMOVED******REMOVED***${colorCode};1m${name}***REMOVED***\u001B[0m`;

				args[0]***REMOVED***=***REMOVED***prefix***REMOVED***+***REMOVED***args[0].split('\n').join('\n'***REMOVED***+***REMOVED***prefix);
				args.push(colorCode***REMOVED***+***REMOVED***'m+'***REMOVED***+***REMOVED***module.exports.humanize(this.diff)***REMOVED***+***REMOVED***'\u001B[0m');
			}***REMOVED***else***REMOVED***{
				args[0]***REMOVED***=***REMOVED***getDate()***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***'***REMOVED***'***REMOVED***+***REMOVED***args[0];
			}
		}

		function***REMOVED***getDate()***REMOVED***{
			if***REMOVED***(exports.inspectOpts.hideDate)***REMOVED***{
				return***REMOVED***'';
			}
			return***REMOVED***new***REMOVED***Date().toISOString()***REMOVED***+***REMOVED***'***REMOVED***';
		}

		/**
		***REMOVED*******REMOVED***Invokes***REMOVED***`util.format()`***REMOVED***with***REMOVED***the***REMOVED***specified***REMOVED***arguments***REMOVED***and***REMOVED***writes***REMOVED***to***REMOVED***stderr.
		***REMOVED****/

		function***REMOVED***log(...args)***REMOVED***{
			return***REMOVED***process.stderr.write(util.format(...args)***REMOVED***+***REMOVED***'\n');
		}

		/**
		***REMOVED*******REMOVED***Save***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***namespaces
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/
		function***REMOVED***save(namespaces)***REMOVED***{
			if***REMOVED***(namespaces)***REMOVED***{
				process.env.DEBUG***REMOVED***=***REMOVED***namespaces;
			}***REMOVED***else***REMOVED***{
				//***REMOVED***If***REMOVED***you***REMOVED***set***REMOVED***a***REMOVED***process.env***REMOVED***field***REMOVED***to***REMOVED***null***REMOVED***or***REMOVED***undefined,***REMOVED***it***REMOVED***gets***REMOVED***cast***REMOVED***to***REMOVED***the
				//***REMOVED***string***REMOVED***'null'***REMOVED***or***REMOVED***'undefined'.***REMOVED***Just***REMOVED***delete***REMOVED***instead.
				delete***REMOVED***process.env.DEBUG;
			}
		}

		/**
		***REMOVED*******REMOVED***Load***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@return***REMOVED***{String}***REMOVED***returns***REMOVED***the***REMOVED***previously***REMOVED***persisted***REMOVED***debug***REMOVED***modes
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/

		function***REMOVED***load()***REMOVED***{
			return***REMOVED***process.env.DEBUG;
		}

		/**
		***REMOVED*******REMOVED***Init***REMOVED***logic***REMOVED***for***REMOVED***`debug`***REMOVED***instances.
		***REMOVED****
		***REMOVED*******REMOVED***Create***REMOVED***a***REMOVED***new***REMOVED***`inspectOpts`***REMOVED***object***REMOVED***in***REMOVED***case***REMOVED***`useColors`***REMOVED***is***REMOVED***set
		***REMOVED*******REMOVED***differently***REMOVED***for***REMOVED***a***REMOVED***particular***REMOVED***`debug`***REMOVED***instance.
		***REMOVED****/

		function***REMOVED***init(debug)***REMOVED***{
			debug.inspectOpts***REMOVED***=***REMOVED***{};

			const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(exports.inspectOpts);
			for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***keys.length;***REMOVED***i++)***REMOVED***{
				debug.inspectOpts[keys[i]]***REMOVED***=***REMOVED***exports.inspectOpts[keys[i]];
			}
		}

		module.exports***REMOVED***=***REMOVED***requireCommon()(exports);

		const***REMOVED***{formatters}***REMOVED***=***REMOVED***module.exports;

		/**
		***REMOVED*******REMOVED***Map***REMOVED***%o***REMOVED***to***REMOVED***`util.inspect()`,***REMOVED***all***REMOVED***on***REMOVED***a***REMOVED***single***REMOVED***line.
		***REMOVED****/

		formatters.o***REMOVED***=***REMOVED***function***REMOVED***(v)***REMOVED***{
			this.inspectOpts.colors***REMOVED***=***REMOVED***this.useColors;
			return***REMOVED***util.inspect(v,***REMOVED***this.inspectOpts)
				.split('\n')
				.map(str***REMOVED***=>***REMOVED***str.trim())
				.join('***REMOVED***');
		};

		/**
		***REMOVED*******REMOVED***Map***REMOVED***%O***REMOVED***to***REMOVED***`util.inspect()`,***REMOVED***allowing***REMOVED***multiple***REMOVED***lines***REMOVED***if***REMOVED***needed.
		***REMOVED****/

		formatters.O***REMOVED***=***REMOVED***function***REMOVED***(v)***REMOVED***{
			this.inspectOpts.colors***REMOVED***=***REMOVED***this.useColors;
			return***REMOVED***util.inspect(v,***REMOVED***this.inspectOpts);
		};***REMOVED***
	}***REMOVED***(node,***REMOVED***node.exports));
	return***REMOVED***node.exports;
}

/**
***REMOVED*******REMOVED***Detect***REMOVED***Electron***REMOVED***renderer***REMOVED***/***REMOVED***nwjs***REMOVED***process,***REMOVED***which***REMOVED***is***REMOVED***node,***REMOVED***but***REMOVED***we***REMOVED***should
***REMOVED*******REMOVED***treat***REMOVED***as***REMOVED***a***REMOVED***browser.
***REMOVED****/

if***REMOVED***(typeof***REMOVED***process***REMOVED***===***REMOVED***'undefined'***REMOVED***||***REMOVED***process.type***REMOVED***===***REMOVED***'renderer'***REMOVED***||***REMOVED***process.browser***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***process.__nwjs)***REMOVED***{
	src.exports***REMOVED***=***REMOVED***requireBrowser();
}***REMOVED***else***REMOVED***{
	src.exports***REMOVED***=***REMOVED***requireNode();
}

var***REMOVED***srcExports***REMOVED***=***REMOVED***src.exports;
var***REMOVED***debug$1***REMOVED***=***REMOVED***/*@__PURE__*/getDefaultExportFromCjs(srcExports);

var***REMOVED***utils$3***REMOVED***=***REMOVED***{};

const***REMOVED***path$2***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***WIN_SLASH***REMOVED***=***REMOVED***'\\\\/';
const***REMOVED***WIN_NO_SLASH***REMOVED***=***REMOVED***`[^${WIN_SLASH}]`;

/**
***REMOVED*******REMOVED***Posix***REMOVED***glob***REMOVED***regex
***REMOVED****/

const***REMOVED***DOT_LITERAL***REMOVED***=***REMOVED***'\\.';
const***REMOVED***PLUS_LITERAL***REMOVED***=***REMOVED***'\\+';
const***REMOVED***QMARK_LITERAL***REMOVED***=***REMOVED***'\\?';
const***REMOVED***SLASH_LITERAL***REMOVED***=***REMOVED***'\\/';
const***REMOVED***ONE_CHAR***REMOVED***=***REMOVED***'(?=.)';
const***REMOVED***QMARK***REMOVED***=***REMOVED***'[^/]';
const***REMOVED***END_ANCHOR***REMOVED***=***REMOVED***`(?:${SLASH_LITERAL}|$)`;
const***REMOVED***START_ANCHOR***REMOVED***=***REMOVED***`(?:^|${SLASH_LITERAL})`;
const***REMOVED***DOTS_SLASH***REMOVED***=***REMOVED***`${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const***REMOVED***NO_DOT***REMOVED***=***REMOVED***`(?!${DOT_LITERAL})`;
const***REMOVED***NO_DOTS***REMOVED***=***REMOVED***`(?!${START_ANCHOR}${DOTS_SLASH})`;
const***REMOVED***NO_DOT_SLASH***REMOVED***=***REMOVED***`(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const***REMOVED***NO_DOTS_SLASH***REMOVED***=***REMOVED***`(?!${DOTS_SLASH})`;
const***REMOVED***QMARK_NO_DOT***REMOVED***=***REMOVED***`[^.${SLASH_LITERAL}]`;
const***REMOVED***STAR***REMOVED***=***REMOVED***`${QMARK}*?`;

const***REMOVED***POSIX_CHARS***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***DOT_LITERAL,
***REMOVED******REMOVED***PLUS_LITERAL,
***REMOVED******REMOVED***QMARK_LITERAL,
***REMOVED******REMOVED***SLASH_LITERAL,
***REMOVED******REMOVED***ONE_CHAR,
***REMOVED******REMOVED***QMARK,
***REMOVED******REMOVED***END_ANCHOR,
***REMOVED******REMOVED***DOTS_SLASH,
***REMOVED******REMOVED***NO_DOT,
***REMOVED******REMOVED***NO_DOTS,
***REMOVED******REMOVED***NO_DOT_SLASH,
***REMOVED******REMOVED***NO_DOTS_SLASH,
***REMOVED******REMOVED***QMARK_NO_DOT,
***REMOVED******REMOVED***STAR,
***REMOVED******REMOVED***START_ANCHOR
};

/**
***REMOVED*******REMOVED***Windows***REMOVED***glob***REMOVED***regex
***REMOVED****/

const***REMOVED***WINDOWS_CHARS***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***...POSIX_CHARS,

***REMOVED******REMOVED***SLASH_LITERAL:***REMOVED***`[${WIN_SLASH}]`,
***REMOVED******REMOVED***QMARK:***REMOVED***WIN_NO_SLASH,
***REMOVED******REMOVED***STAR:***REMOVED***`${WIN_NO_SLASH}*?`,
***REMOVED******REMOVED***DOTS_SLASH:***REMOVED***`${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
***REMOVED******REMOVED***NO_DOT:***REMOVED***`(?!${DOT_LITERAL})`,
***REMOVED******REMOVED***NO_DOTS:***REMOVED***`(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
***REMOVED******REMOVED***NO_DOT_SLASH:***REMOVED***`(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
***REMOVED******REMOVED***NO_DOTS_SLASH:***REMOVED***`(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
***REMOVED******REMOVED***QMARK_NO_DOT:***REMOVED***`[^.${WIN_SLASH}]`,
***REMOVED******REMOVED***START_ANCHOR:***REMOVED***`(?:^|[${WIN_SLASH}])`,
***REMOVED******REMOVED***END_ANCHOR:***REMOVED***`(?:[${WIN_SLASH}]|$)`
};

/**
***REMOVED*******REMOVED***POSIX***REMOVED***Bracket***REMOVED***Regex
***REMOVED****/

const***REMOVED***POSIX_REGEX_SOURCE$1***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***alnum:***REMOVED***'a-zA-Z0-9',
***REMOVED******REMOVED***alpha:***REMOVED***'a-zA-Z',
***REMOVED******REMOVED***ascii:***REMOVED***'\\x00-\\x7F',
***REMOVED******REMOVED***blank:***REMOVED***'***REMOVED***\\t',
***REMOVED******REMOVED***cntrl:***REMOVED***'\\x00-\\x1F\\x7F',
***REMOVED******REMOVED***digit:***REMOVED***'0-9',
***REMOVED******REMOVED***graph:***REMOVED***'\\x21-\\x7E',
***REMOVED******REMOVED***lower:***REMOVED***'a-z',
***REMOVED******REMOVED***print:***REMOVED***'\\x20-\\x7E***REMOVED***',
***REMOVED******REMOVED***punct:***REMOVED***'\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
***REMOVED******REMOVED***space:***REMOVED***'***REMOVED***\\t\\r\\n\\v\\f',
***REMOVED******REMOVED***upper:***REMOVED***'A-Z',
***REMOVED******REMOVED***word:***REMOVED***'A-Za-z0-9_',
***REMOVED******REMOVED***xdigit:***REMOVED***'A-Fa-f0-9'
};

var***REMOVED***constants$2***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***MAX_LENGTH:***REMOVED***1024***REMOVED*******REMOVED***64,
***REMOVED******REMOVED***POSIX_REGEX_SOURCE:***REMOVED***POSIX_REGEX_SOURCE$1,

***REMOVED******REMOVED***//***REMOVED***regular***REMOVED***expressions
***REMOVED******REMOVED***REGEX_BACKSLASH:***REMOVED***/\\(?![*+?^${}(|)[\]])/g,
***REMOVED******REMOVED***REGEX_NON_SPECIAL_CHARS:***REMOVED***/^[^@![\].,$*+?^{}()|\\/]+/,
***REMOVED******REMOVED***REGEX_SPECIAL_CHARS:***REMOVED***/[-*+?.^${}(|)[\]]/,
***REMOVED******REMOVED***REGEX_SPECIAL_CHARS_BACKREF:***REMOVED***/(\\?)((\W)(\3*))/g,
***REMOVED******REMOVED***REGEX_SPECIAL_CHARS_GLOBAL:***REMOVED***/([-*+?.^${}(|)[\]])/g,
***REMOVED******REMOVED***REGEX_REMOVE_BACKSLASH:***REMOVED***/(?:\[.*?[^\\]\]|\\(?=.))/g,

***REMOVED******REMOVED***//***REMOVED***Replace***REMOVED***globs***REMOVED***with***REMOVED***equivalent***REMOVED***patterns***REMOVED***to***REMOVED***reduce***REMOVED***parsing***REMOVED***time.
***REMOVED******REMOVED***REPLACEMENTS:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***'***':***REMOVED***'*',
***REMOVED******REMOVED******REMOVED******REMOVED***'**/**':***REMOVED***'**',
***REMOVED******REMOVED******REMOVED******REMOVED***'**/**/**':***REMOVED***'**'
***REMOVED******REMOVED***},

***REMOVED******REMOVED***//***REMOVED***Digits
***REMOVED******REMOVED***CHAR_0:***REMOVED***48,***REMOVED***/****REMOVED***0***REMOVED****/
***REMOVED******REMOVED***CHAR_9:***REMOVED***57,***REMOVED***/****REMOVED***9***REMOVED****/

***REMOVED******REMOVED***//***REMOVED***Alphabet***REMOVED***chars.
***REMOVED******REMOVED***CHAR_UPPERCASE_A:***REMOVED***65,***REMOVED***/****REMOVED***A***REMOVED****/
***REMOVED******REMOVED***CHAR_LOWERCASE_A:***REMOVED***97,***REMOVED***/****REMOVED***a***REMOVED****/
***REMOVED******REMOVED***CHAR_UPPERCASE_Z:***REMOVED***90,***REMOVED***/****REMOVED***Z***REMOVED****/
***REMOVED******REMOVED***CHAR_LOWERCASE_Z:***REMOVED***122,***REMOVED***/****REMOVED***z***REMOVED****/

***REMOVED******REMOVED***CHAR_LEFT_PARENTHESES:***REMOVED***40,***REMOVED***/****REMOVED***(***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_PARENTHESES:***REMOVED***41,***REMOVED***/****REMOVED***)***REMOVED****/

***REMOVED******REMOVED***CHAR_ASTERISK:***REMOVED***42,***REMOVED***/****REMOVED*******REMOVED****/

***REMOVED******REMOVED***//***REMOVED***Non-alphabetic***REMOVED***chars.
***REMOVED******REMOVED***CHAR_AMPERSAND:***REMOVED***38,***REMOVED***/****REMOVED***&***REMOVED****/
***REMOVED******REMOVED***CHAR_AT:***REMOVED***64,***REMOVED***/****REMOVED***@***REMOVED****/
***REMOVED******REMOVED***CHAR_BACKWARD_SLASH:***REMOVED***92,***REMOVED***/****REMOVED***\***REMOVED****/
***REMOVED******REMOVED***CHAR_CARRIAGE_RETURN:***REMOVED***13,***REMOVED***/****REMOVED***\r***REMOVED****/
***REMOVED******REMOVED***CHAR_CIRCUMFLEX_ACCENT:***REMOVED***94,***REMOVED***/****REMOVED***^***REMOVED****/
***REMOVED******REMOVED***CHAR_COLON:***REMOVED***58,***REMOVED***/****REMOVED***:***REMOVED****/
***REMOVED******REMOVED***CHAR_COMMA:***REMOVED***44,***REMOVED***/****REMOVED***,***REMOVED****/
***REMOVED******REMOVED***CHAR_DOT:***REMOVED***46,***REMOVED***/****REMOVED***.***REMOVED****/
***REMOVED******REMOVED***CHAR_DOUBLE_QUOTE:***REMOVED***34,***REMOVED***/****REMOVED***"***REMOVED****/
***REMOVED******REMOVED***CHAR_EQUAL:***REMOVED***61,***REMOVED***/****REMOVED***=***REMOVED****/
***REMOVED******REMOVED***CHAR_EXCLAMATION_MARK:***REMOVED***33,***REMOVED***/****REMOVED***!***REMOVED****/
***REMOVED******REMOVED***CHAR_FORM_FEED:***REMOVED***12,***REMOVED***/****REMOVED***\f***REMOVED****/
***REMOVED******REMOVED***CHAR_FORWARD_SLASH:***REMOVED***47,***REMOVED***/****REMOVED***/***REMOVED****/
***REMOVED******REMOVED***CHAR_GRAVE_ACCENT:***REMOVED***96,***REMOVED***/****REMOVED***`***REMOVED****/
***REMOVED******REMOVED***CHAR_HASH:***REMOVED***35,***REMOVED***/****REMOVED***#***REMOVED****/
***REMOVED******REMOVED***CHAR_HYPHEN_MINUS:***REMOVED***45,***REMOVED***/****REMOVED***-***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_ANGLE_BRACKET:***REMOVED***60,***REMOVED***/****REMOVED***<***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_CURLY_BRACE:***REMOVED***123,***REMOVED***/****REMOVED***{***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_SQUARE_BRACKET:***REMOVED***91,***REMOVED***/****REMOVED***[***REMOVED****/
***REMOVED******REMOVED***CHAR_LINE_FEED:***REMOVED***10,***REMOVED***/****REMOVED***\n***REMOVED****/
***REMOVED******REMOVED***CHAR_NO_BREAK_SPACE:***REMOVED***160,***REMOVED***/****REMOVED***\u00A0***REMOVED****/
***REMOVED******REMOVED***CHAR_PERCENT:***REMOVED***37,***REMOVED***/****REMOVED***%***REMOVED****/
***REMOVED******REMOVED***CHAR_PLUS:***REMOVED***43,***REMOVED***/****REMOVED***+***REMOVED****/
***REMOVED******REMOVED***CHAR_QUESTION_MARK:***REMOVED***63,***REMOVED***/****REMOVED***?***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_ANGLE_BRACKET:***REMOVED***62,***REMOVED***/****REMOVED***>***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_CURLY_BRACE:***REMOVED***125,***REMOVED***/****REMOVED***}***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_SQUARE_BRACKET:***REMOVED***93,***REMOVED***/****REMOVED***]***REMOVED****/
***REMOVED******REMOVED***CHAR_SEMICOLON:***REMOVED***59,***REMOVED***/****REMOVED***;***REMOVED****/
***REMOVED******REMOVED***CHAR_SINGLE_QUOTE:***REMOVED***39,***REMOVED***/****REMOVED***'***REMOVED****/
***REMOVED******REMOVED***CHAR_SPACE:***REMOVED***32,***REMOVED***/****REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***CHAR_TAB:***REMOVED***9,***REMOVED***/****REMOVED***\t***REMOVED****/
***REMOVED******REMOVED***CHAR_UNDERSCORE:***REMOVED***95,***REMOVED***/****REMOVED***_***REMOVED****/
***REMOVED******REMOVED***CHAR_VERTICAL_LINE:***REMOVED***124,***REMOVED***/****REMOVED***|***REMOVED****/
***REMOVED******REMOVED***CHAR_ZERO_WIDTH_NOBREAK_SPACE:***REMOVED***65279,***REMOVED***/****REMOVED***\uFEFF***REMOVED****/

***REMOVED******REMOVED***SEP:***REMOVED***path$2.sep,

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Create***REMOVED***EXTGLOB_CHARS
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***extglobChars(chars)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'!':***REMOVED***{***REMOVED***type:***REMOVED***'negate',***REMOVED***open:***REMOVED***'(?:(?!(?:',***REMOVED***close:***REMOVED***`))${chars.STAR})`***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'?':***REMOVED***{***REMOVED***type:***REMOVED***'qmark',***REMOVED***open:***REMOVED***'(?:',***REMOVED***close:***REMOVED***')?'***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'+':***REMOVED***{***REMOVED***type:***REMOVED***'plus',***REMOVED***open:***REMOVED***'(?:',***REMOVED***close:***REMOVED***')+'***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'*':***REMOVED***{***REMOVED***type:***REMOVED***'star',***REMOVED***open:***REMOVED***'(?:',***REMOVED***close:***REMOVED***')*'***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'@':***REMOVED***{***REMOVED***type:***REMOVED***'at',***REMOVED***open:***REMOVED***'(?:',***REMOVED***close:***REMOVED***')'***REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***},

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Create***REMOVED***GLOB_CHARS
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***globChars(win32)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***win32***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***WINDOWS_CHARS***REMOVED***:***REMOVED***POSIX_CHARS;
***REMOVED******REMOVED***}
};

(function***REMOVED***(exports)***REMOVED***{

	const***REMOVED***path***REMOVED***=***REMOVED***require$$0$1;
	const***REMOVED***win32***REMOVED***=***REMOVED***process.platform***REMOVED***===***REMOVED***'win32';
	const***REMOVED***{
	***REMOVED******REMOVED***REGEX_BACKSLASH,
	***REMOVED******REMOVED***REGEX_REMOVE_BACKSLASH,
	***REMOVED******REMOVED***REGEX_SPECIAL_CHARS,
	***REMOVED******REMOVED***REGEX_SPECIAL_CHARS_GLOBAL
	}***REMOVED***=***REMOVED***constants$2;

	exports.isObject***REMOVED***=***REMOVED***val***REMOVED***=>***REMOVED***val***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***val***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***!Array.isArray(val);
	exports.hasRegexChars***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***REGEX_SPECIAL_CHARS.test(str);
	exports.isRegexChar***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***str.length***REMOVED***===***REMOVED***1***REMOVED***&&***REMOVED***exports.hasRegexChars(str);
	exports.escapeRegex***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***str.replace(REGEX_SPECIAL_CHARS_GLOBAL,***REMOVED***'\\$1');
	exports.toPosixSlashes***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***str.replace(REGEX_BACKSLASH,***REMOVED***'/');

	exports.removeBackslashes***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***return***REMOVED***str.replace(REGEX_REMOVE_BACKSLASH,***REMOVED***match***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***match***REMOVED***===***REMOVED***'\\'***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***match;
	***REMOVED******REMOVED***});
	};

	exports.supportsLookbehinds***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***const***REMOVED***segs***REMOVED***=***REMOVED***process.version.slice(1).split('.').map(Number);
	***REMOVED******REMOVED***if***REMOVED***(segs.length***REMOVED***===***REMOVED***3***REMOVED***&&***REMOVED***segs[0]***REMOVED***>=***REMOVED***9***REMOVED***||***REMOVED***(segs[0]***REMOVED***===***REMOVED***8***REMOVED***&&***REMOVED***segs[1]***REMOVED***>=***REMOVED***10))***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***false;
	};

	exports.isWindows***REMOVED***=***REMOVED***options***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***typeof***REMOVED***options.windows***REMOVED***===***REMOVED***'boolean')***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.windows;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***win32***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***path.sep***REMOVED***===***REMOVED***'\\';
	};

	exports.escapeLast***REMOVED***=***REMOVED***(input,***REMOVED***char,***REMOVED***lastIdx)***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***const***REMOVED***idx***REMOVED***=***REMOVED***input.lastIndexOf(char,***REMOVED***lastIdx);
	***REMOVED******REMOVED***if***REMOVED***(idx***REMOVED***===***REMOVED***-1)***REMOVED***return***REMOVED***input;
	***REMOVED******REMOVED***if***REMOVED***(input[idx***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'\\')***REMOVED***return***REMOVED***exports.escapeLast(input,***REMOVED***char,***REMOVED***idx***REMOVED***-***REMOVED***1);
	***REMOVED******REMOVED***return***REMOVED***`${input.slice(0,***REMOVED***idx)}\\${input.slice(idx)}`;
	};

	exports.removePrefix***REMOVED***=***REMOVED***(input,***REMOVED***state***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***input;
	***REMOVED******REMOVED***if***REMOVED***(output.startsWith('./'))***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***output.slice(2);
	***REMOVED******REMOVED******REMOVED******REMOVED***state.prefix***REMOVED***=***REMOVED***'./';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***output;
	};

	exports.wrapOutput***REMOVED***=***REMOVED***(input,***REMOVED***state***REMOVED***=***REMOVED***{},***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***const***REMOVED***prepend***REMOVED***=***REMOVED***options.contains***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'^';
	***REMOVED******REMOVED***const***REMOVED***append***REMOVED***=***REMOVED***options.contains***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'$';

	***REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***`${prepend}(?:${input})${append}`;
	***REMOVED******REMOVED***if***REMOVED***(state.negated***REMOVED***===***REMOVED***true)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***`(?:^(?!${output}).*$)`;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***output;
	};***REMOVED***
}***REMOVED***(utils$3));

const***REMOVED***utils$2***REMOVED***=***REMOVED***utils$3;
const***REMOVED***{
***REMOVED******REMOVED***CHAR_ASTERISK,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED*******REMOVED****/
***REMOVED******REMOVED***CHAR_AT,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***@***REMOVED****/
***REMOVED******REMOVED***CHAR_BACKWARD_SLASH,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***\***REMOVED****/
***REMOVED******REMOVED***CHAR_COMMA,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***,***REMOVED****/
***REMOVED******REMOVED***CHAR_DOT,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***.***REMOVED****/
***REMOVED******REMOVED***CHAR_EXCLAMATION_MARK,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***!***REMOVED****/
***REMOVED******REMOVED***CHAR_FORWARD_SLASH,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***/***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_CURLY_BRACE,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***{***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_PARENTHESES,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***(***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_SQUARE_BRACKET,***REMOVED******REMOVED***/****REMOVED***[***REMOVED****/
***REMOVED******REMOVED***CHAR_PLUS,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***+***REMOVED****/
***REMOVED******REMOVED***CHAR_QUESTION_MARK,***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***?***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_CURLY_BRACE,***REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***}***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_PARENTHESES,***REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***)***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_SQUARE_BRACKET***REMOVED******REMOVED***/****REMOVED***]***REMOVED****/
}***REMOVED***=***REMOVED***constants$2;

const***REMOVED***isPathSeparator***REMOVED***=***REMOVED***code***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***code***REMOVED***===***REMOVED***CHAR_FORWARD_SLASH***REMOVED***||***REMOVED***code***REMOVED***===***REMOVED***CHAR_BACKWARD_SLASH;
};

const***REMOVED***depth***REMOVED***=***REMOVED***token***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(token.isPrefix***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***token.depth***REMOVED***=***REMOVED***token.isGlobstar***REMOVED***?***REMOVED***Infinity***REMOVED***:***REMOVED***1;
***REMOVED******REMOVED***}
};

/**
***REMOVED*******REMOVED***Quickly***REMOVED***scans***REMOVED***a***REMOVED***glob***REMOVED***pattern***REMOVED***and***REMOVED***returns***REMOVED***an***REMOVED***object***REMOVED***with***REMOVED***a***REMOVED***handful***REMOVED***of
***REMOVED*******REMOVED***useful***REMOVED***properties,***REMOVED***like***REMOVED***`isGlob`,***REMOVED***`path`***REMOVED***(the***REMOVED***leading***REMOVED***non-glob,***REMOVED***if***REMOVED***it***REMOVED***exists),
***REMOVED*******REMOVED***`glob`***REMOVED***(the***REMOVED***actual***REMOVED***pattern),***REMOVED***`negated`***REMOVED***(true***REMOVED***if***REMOVED***the***REMOVED***path***REMOVED***starts***REMOVED***with***REMOVED***`!`***REMOVED***but***REMOVED***not
***REMOVED*******REMOVED***with***REMOVED***`!(`)***REMOVED***and***REMOVED***`negatedExtglob`***REMOVED***(true***REMOVED***if***REMOVED***the***REMOVED***path***REMOVED***starts***REMOVED***with***REMOVED***`!(`).
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***pm***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***console.log(pm.scan('foo/bar/*.js'));
***REMOVED*******REMOVED***{***REMOVED***isGlob:***REMOVED***true,***REMOVED***input:***REMOVED***'foo/bar/*.js',***REMOVED***base:***REMOVED***'foo/bar',***REMOVED***glob:***REMOVED***'*.js'***REMOVED***}
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`str`
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Object}***REMOVED***Returns***REMOVED***an***REMOVED***object***REMOVED***with***REMOVED***tokens***REMOVED***and***REMOVED***regex***REMOVED***source***REMOVED***string.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

const***REMOVED***scan$1***REMOVED***=***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};

***REMOVED******REMOVED***const***REMOVED***length***REMOVED***=***REMOVED***input.length***REMOVED***-***REMOVED***1;
***REMOVED******REMOVED***const***REMOVED***scanToEnd***REMOVED***=***REMOVED***opts.parts***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***opts.scanToEnd***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED***const***REMOVED***slashes***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***tokens***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***parts***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***let***REMOVED***str***REMOVED***=***REMOVED***input;
***REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***-1;
***REMOVED******REMOVED***let***REMOVED***start***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***lastIndex***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***isBrace***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***isBracket***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***isGlob***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***isExtglob***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***isGlobstar***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***braceEscaped***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***backslashes***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***negated***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***negatedExtglob***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***finished***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***braces***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***prev;
***REMOVED******REMOVED***let***REMOVED***code;
***REMOVED******REMOVED***let***REMOVED***token***REMOVED***=***REMOVED***{***REMOVED***value:***REMOVED***'',***REMOVED***depth:***REMOVED***0,***REMOVED***isGlob:***REMOVED***false***REMOVED***};

***REMOVED******REMOVED***const***REMOVED***eos***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***index***REMOVED***>=***REMOVED***length;
***REMOVED******REMOVED***const***REMOVED***peek***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***str.charCodeAt(index***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED***const***REMOVED***advance***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***prev***REMOVED***=***REMOVED***code;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***str.charCodeAt(++index);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***=***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***next;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_BACKWARD_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backslashes***REMOVED***=***REMOVED***token.backslashes***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***=***REMOVED***advance();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_LEFT_CURLY_BRACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braceEscaped***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(braceEscaped***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***code***REMOVED***===***REMOVED***CHAR_LEFT_CURLY_BRACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braces++;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(eos()***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***(code***REMOVED***=***REMOVED***advance()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_BACKWARD_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backslashes***REMOVED***=***REMOVED***token.backslashes***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_LEFT_CURLY_BRACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braces++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(braceEscaped***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***code***REMOVED***===***REMOVED***CHAR_DOT***REMOVED***&&***REMOVED***(code***REMOVED***=***REMOVED***advance())***REMOVED***===***REMOVED***CHAR_DOT)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isBrace***REMOVED***=***REMOVED***token.isBrace***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(braceEscaped***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***code***REMOVED***===***REMOVED***CHAR_COMMA)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isBrace***REMOVED***=***REMOVED***token.isBrace***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_RIGHT_CURLY_BRACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braces--;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(braces***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braceEscaped***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isBrace***REMOVED***=***REMOVED***token.isBrace***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_FORWARD_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***slashes.push(index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens.push(token);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token***REMOVED***=***REMOVED***{***REMOVED***value:***REMOVED***'',***REMOVED***depth:***REMOVED***0,***REMOVED***isGlob:***REMOVED***false***REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(finished***REMOVED***===***REMOVED***true)***REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***===***REMOVED***CHAR_DOT***REMOVED***&&***REMOVED***index***REMOVED***===***REMOVED***(start***REMOVED***+***REMOVED***1))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***start***REMOVED***+=***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastIndex***REMOVED***=***REMOVED***index***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noext***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isExtglobChar***REMOVED***=***REMOVED***code***REMOVED***===***REMOVED***CHAR_PLUS
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***||***REMOVED***code***REMOVED***===***REMOVED***CHAR_AT
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***||***REMOVED***code***REMOVED***===***REMOVED***CHAR_ASTERISK
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***||***REMOVED***code***REMOVED***===***REMOVED***CHAR_QUESTION_MARK
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***||***REMOVED***code***REMOVED***===***REMOVED***CHAR_EXCLAMATION_MARK;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isExtglobChar***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***peek()***REMOVED***===***REMOVED***CHAR_LEFT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isExtglob***REMOVED***=***REMOVED***token.isExtglob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_EXCLAMATION_MARK***REMOVED***&&***REMOVED***index***REMOVED***===***REMOVED***start)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***negatedExtglob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(eos()***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***(code***REMOVED***=***REMOVED***advance()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_BACKWARD_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backslashes***REMOVED***=***REMOVED***token.backslashes***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***=***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_RIGHT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_ASTERISK)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***===***REMOVED***CHAR_ASTERISK)***REMOVED***isGlobstar***REMOVED***=***REMOVED***token.isGlobstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_QUESTION_MARK)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_LEFT_SQUARE_BRACKET)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(eos()***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***(next***REMOVED***=***REMOVED***advance()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***CHAR_BACKWARD_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backslashes***REMOVED***=***REMOVED***token.backslashes***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***CHAR_RIGHT_SQUARE_BRACKET)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isBracket***REMOVED***=***REMOVED***token.isBracket***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.nonegate***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***code***REMOVED***===***REMOVED***CHAR_EXCLAMATION_MARK***REMOVED***&&***REMOVED***index***REMOVED***===***REMOVED***start)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***negated***REMOVED***=***REMOVED***token.negated***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***start++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noparen***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***code***REMOVED***===***REMOVED***CHAR_LEFT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***token.isGlob***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(eos()***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***(code***REMOVED***=***REMOVED***advance()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_LEFT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backslashes***REMOVED***=***REMOVED***token.backslashes***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***=***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(code***REMOVED***===***REMOVED***CHAR_RIGHT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isGlob***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***finished***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scanToEnd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.noext***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***isExtglob***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***isGlob***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***base***REMOVED***=***REMOVED***str;
***REMOVED******REMOVED***let***REMOVED***prefix***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***let***REMOVED***glob***REMOVED***=***REMOVED***'';

***REMOVED******REMOVED***if***REMOVED***(start***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***prefix***REMOVED***=***REMOVED***str.slice(0,***REMOVED***start);
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***=***REMOVED***str.slice(start);
***REMOVED******REMOVED******REMOVED******REMOVED***lastIndex***REMOVED***-=***REMOVED***start;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(base***REMOVED***&&***REMOVED***isGlob***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***lastIndex***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***=***REMOVED***str.slice(0,***REMOVED***lastIndex);
***REMOVED******REMOVED******REMOVED******REMOVED***glob***REMOVED***=***REMOVED***str.slice(lastIndex);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(isGlob***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***glob***REMOVED***=***REMOVED***str;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***=***REMOVED***str;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(base***REMOVED***&&***REMOVED***base***REMOVED***!==***REMOVED***''***REMOVED***&&***REMOVED***base***REMOVED***!==***REMOVED***'/'***REMOVED***&&***REMOVED***base***REMOVED***!==***REMOVED***str)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isPathSeparator(base.charCodeAt(base.length***REMOVED***-***REMOVED***1)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***=***REMOVED***base.slice(0,***REMOVED***-1);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.unescape***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(glob)***REMOVED***glob***REMOVED***=***REMOVED***utils$2.removeBackslashes(glob);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(base***REMOVED***&&***REMOVED***backslashes***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***=***REMOVED***utils$2.removeBackslashes(base);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***prefix,
***REMOVED******REMOVED******REMOVED******REMOVED***input,
***REMOVED******REMOVED******REMOVED******REMOVED***start,
***REMOVED******REMOVED******REMOVED******REMOVED***base,
***REMOVED******REMOVED******REMOVED******REMOVED***glob,
***REMOVED******REMOVED******REMOVED******REMOVED***isBrace,
***REMOVED******REMOVED******REMOVED******REMOVED***isBracket,
***REMOVED******REMOVED******REMOVED******REMOVED***isGlob,
***REMOVED******REMOVED******REMOVED******REMOVED***isExtglob,
***REMOVED******REMOVED******REMOVED******REMOVED***isGlobstar,
***REMOVED******REMOVED******REMOVED******REMOVED***negated,
***REMOVED******REMOVED******REMOVED******REMOVED***negatedExtglob
***REMOVED******REMOVED***};

***REMOVED******REMOVED***if***REMOVED***(opts.tokens***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.maxDepth***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isPathSeparator(code))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens.push(token);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***state.tokens***REMOVED***=***REMOVED***tokens;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.parts***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***opts.tokens***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***prevIndex;

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***idx***REMOVED***=***REMOVED***0;***REMOVED***idx***REMOVED***<***REMOVED***slashes.length;***REMOVED***idx++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***n***REMOVED***=***REMOVED***prevIndex***REMOVED***?***REMOVED***prevIndex***REMOVED***+***REMOVED***1***REMOVED***:***REMOVED***start;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***i***REMOVED***=***REMOVED***slashes[idx];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***input.slice(n,***REMOVED***i);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.tokens)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(idx***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***start***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens[idx].isPrefix***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens[idx].value***REMOVED***=***REMOVED***prefix;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens[idx].value***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***depth(tokens[idx]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.maxDepth***REMOVED***+=***REMOVED***tokens[idx].depth;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(idx***REMOVED***!==***REMOVED***0***REMOVED***||***REMOVED***value***REMOVED***!==***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.push(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prevIndex***REMOVED***=***REMOVED***i;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prevIndex***REMOVED***&&***REMOVED***prevIndex***REMOVED***+***REMOVED***1***REMOVED***<***REMOVED***input.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***input.slice(prevIndex***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.push(value);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.tokens)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens[tokens.length***REMOVED***-***REMOVED***1].value***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***depth(tokens[tokens.length***REMOVED***-***REMOVED***1]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.maxDepth***REMOVED***+=***REMOVED***tokens[tokens.length***REMOVED***-***REMOVED***1].depth;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***state.slashes***REMOVED***=***REMOVED***slashes;
***REMOVED******REMOVED******REMOVED******REMOVED***state.parts***REMOVED***=***REMOVED***parts;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***state;
};

var***REMOVED***scan_1***REMOVED***=***REMOVED***scan$1;

const***REMOVED***constants$1***REMOVED***=***REMOVED***constants$2;
const***REMOVED***utils$1***REMOVED***=***REMOVED***utils$3;

/**
***REMOVED*******REMOVED***Constants
***REMOVED****/

const***REMOVED***{
***REMOVED******REMOVED***MAX_LENGTH,
***REMOVED******REMOVED***POSIX_REGEX_SOURCE,
***REMOVED******REMOVED***REGEX_NON_SPECIAL_CHARS,
***REMOVED******REMOVED***REGEX_SPECIAL_CHARS_BACKREF,
***REMOVED******REMOVED***REPLACEMENTS
}***REMOVED***=***REMOVED***constants$1;

/**
***REMOVED*******REMOVED***Helpers
***REMOVED****/

const***REMOVED***expandRange***REMOVED***=***REMOVED***(args,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***options.expandRange***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.expandRange(...args,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***args.sort();
***REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***`[${args.join('-')}]`;

***REMOVED******REMOVED***return***REMOVED***value;
};

/**
***REMOVED*******REMOVED***Create***REMOVED***the***REMOVED***message***REMOVED***for***REMOVED***a***REMOVED***syntax***REMOVED***error
***REMOVED****/

const***REMOVED***syntaxError***REMOVED***=***REMOVED***(type,***REMOVED***char)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***`Missing***REMOVED***${type}:***REMOVED***"${char}"***REMOVED***-***REMOVED***use***REMOVED***"\\\\${char}"***REMOVED***to***REMOVED***match***REMOVED***literal***REMOVED***characters`;
};

/**
***REMOVED*******REMOVED***Parse***REMOVED***the***REMOVED***given***REMOVED***input***REMOVED***string.
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***input
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***options
***REMOVED*******REMOVED***@return***REMOVED***{Object}
***REMOVED****/

const***REMOVED***parse$2***REMOVED***=***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('Expected***REMOVED***a***REMOVED***string');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***input***REMOVED***=***REMOVED***REPLACEMENTS[input]***REMOVED***||***REMOVED***input;

***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***{***REMOVED***...options***REMOVED***};
***REMOVED******REMOVED***const***REMOVED***max***REMOVED***=***REMOVED***typeof***REMOVED***opts.maxLength***REMOVED***===***REMOVED***'number'***REMOVED***?***REMOVED***Math.min(MAX_LENGTH,***REMOVED***opts.maxLength)***REMOVED***:***REMOVED***MAX_LENGTH;

***REMOVED******REMOVED***let***REMOVED***len***REMOVED***=***REMOVED***input.length;
***REMOVED******REMOVED***if***REMOVED***(len***REMOVED***>***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(`Input***REMOVED***length:***REMOVED***${len},***REMOVED***exceeds***REMOVED***maximum***REMOVED***allowed***REMOVED***length:***REMOVED***${max}`);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***bos***REMOVED***=***REMOVED***{***REMOVED***type:***REMOVED***'bos',***REMOVED***value:***REMOVED***'',***REMOVED***output:***REMOVED***opts.prepend***REMOVED***||***REMOVED***''***REMOVED***};
***REMOVED******REMOVED***const***REMOVED***tokens***REMOVED***=***REMOVED***[bos];

***REMOVED******REMOVED***const***REMOVED***capture***REMOVED***=***REMOVED***opts.capture***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'?:';
***REMOVED******REMOVED***const***REMOVED***win32***REMOVED***=***REMOVED***utils$1.isWindows(options);

***REMOVED******REMOVED***//***REMOVED***create***REMOVED***constants***REMOVED***based***REMOVED***on***REMOVED***platform,***REMOVED***for***REMOVED***windows***REMOVED***or***REMOVED***posix
***REMOVED******REMOVED***const***REMOVED***PLATFORM_CHARS***REMOVED***=***REMOVED***constants$1.globChars(win32);
***REMOVED******REMOVED***const***REMOVED***EXTGLOB_CHARS***REMOVED***=***REMOVED***constants$1.extglobChars(PLATFORM_CHARS);

***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***DOT_LITERAL,
***REMOVED******REMOVED******REMOVED******REMOVED***PLUS_LITERAL,
***REMOVED******REMOVED******REMOVED******REMOVED***SLASH_LITERAL,
***REMOVED******REMOVED******REMOVED******REMOVED***ONE_CHAR,
***REMOVED******REMOVED******REMOVED******REMOVED***DOTS_SLASH,
***REMOVED******REMOVED******REMOVED******REMOVED***NO_DOT,
***REMOVED******REMOVED******REMOVED******REMOVED***NO_DOT_SLASH,
***REMOVED******REMOVED******REMOVED******REMOVED***NO_DOTS_SLASH,
***REMOVED******REMOVED******REMOVED******REMOVED***QMARK,
***REMOVED******REMOVED******REMOVED******REMOVED***QMARK_NO_DOT,
***REMOVED******REMOVED******REMOVED******REMOVED***STAR,
***REMOVED******REMOVED******REMOVED******REMOVED***START_ANCHOR
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***PLATFORM_CHARS;

***REMOVED******REMOVED***const***REMOVED***globstar***REMOVED***=***REMOVED***opts***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(${capture}(?:(?!${START_ANCHOR}${opts.dot***REMOVED***?***REMOVED***DOTS_SLASH***REMOVED***:***REMOVED***DOT_LITERAL}).)*?)`;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***nodot***REMOVED***=***REMOVED***opts.dot***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***NO_DOT;
***REMOVED******REMOVED***const***REMOVED***qmarkNoDot***REMOVED***=***REMOVED***opts.dot***REMOVED***?***REMOVED***QMARK***REMOVED***:***REMOVED***QMARK_NO_DOT;
***REMOVED******REMOVED***let***REMOVED***star***REMOVED***=***REMOVED***opts.bash***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***globstar(opts)***REMOVED***:***REMOVED***STAR;

***REMOVED******REMOVED***if***REMOVED***(opts.capture)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***star***REMOVED***=***REMOVED***`(${star})`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***minimatch***REMOVED***options***REMOVED***support
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***opts.noext***REMOVED***===***REMOVED***'boolean')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***opts.noextglob***REMOVED***=***REMOVED***opts.noext;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***input,
***REMOVED******REMOVED******REMOVED******REMOVED***index:***REMOVED***-1,
***REMOVED******REMOVED******REMOVED******REMOVED***start:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***dot:***REMOVED***opts.dot***REMOVED***===***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***consumed:***REMOVED***'',
***REMOVED******REMOVED******REMOVED******REMOVED***output:***REMOVED***'',
***REMOVED******REMOVED******REMOVED******REMOVED***prefix:***REMOVED***'',
***REMOVED******REMOVED******REMOVED******REMOVED***backtrack:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***negated:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***brackets:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***braces:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***parens:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***quotes:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***globstar:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***tokens
***REMOVED******REMOVED***};

***REMOVED******REMOVED***input***REMOVED***=***REMOVED***utils$1.removePrefix(input,***REMOVED***state);
***REMOVED******REMOVED***len***REMOVED***=***REMOVED***input.length;

***REMOVED******REMOVED***const***REMOVED***extglobs***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***braces***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***stack***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***prev***REMOVED***=***REMOVED***bos;
***REMOVED******REMOVED***let***REMOVED***value;

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Tokenizing***REMOVED***helpers
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***const***REMOVED***eos***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***state.index***REMOVED***===***REMOVED***len***REMOVED***-***REMOVED***1;
***REMOVED******REMOVED***const***REMOVED***peek***REMOVED***=***REMOVED***state.peek***REMOVED***=***REMOVED***(n***REMOVED***=***REMOVED***1)***REMOVED***=>***REMOVED***input[state.index***REMOVED***+***REMOVED***n];
***REMOVED******REMOVED***const***REMOVED***advance***REMOVED***=***REMOVED***state.advance***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***input[++state.index]***REMOVED***||***REMOVED***'';
***REMOVED******REMOVED***const***REMOVED***remaining***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***input.slice(state.index***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED***const***REMOVED***consume***REMOVED***=***REMOVED***(value***REMOVED***=***REMOVED***'',***REMOVED***num***REMOVED***=***REMOVED***0)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.consumed***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***state.index***REMOVED***+=***REMOVED***num;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***append***REMOVED***=***REMOVED***token***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***token.output***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***token.output***REMOVED***:***REMOVED***token.value;
***REMOVED******REMOVED******REMOVED******REMOVED***consume(token.value);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***negate***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***count***REMOVED***=***REMOVED***1;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(peek()***REMOVED***===***REMOVED***'!'***REMOVED***&&***REMOVED***(peek(2)***REMOVED***!==***REMOVED***'('***REMOVED***||***REMOVED***peek(3)***REMOVED***===***REMOVED***'?'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.start++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***count++;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(count***REMOVED***%***REMOVED***2***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***state.negated***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***state.start++;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***increment***REMOVED***=***REMOVED***type***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state[type]++;
***REMOVED******REMOVED******REMOVED******REMOVED***stack.push(type);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***decrement***REMOVED***=***REMOVED***type***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state[type]--;
***REMOVED******REMOVED******REMOVED******REMOVED***stack.pop();
***REMOVED******REMOVED***};

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Push***REMOVED***tokens***REMOVED***onto***REMOVED***the***REMOVED***tokens***REMOVED***array.***REMOVED***This***REMOVED***helper***REMOVED***speeds***REMOVED***up
***REMOVED******REMOVED******REMOVED*******REMOVED***tokenizing***REMOVED***by***REMOVED***1)***REMOVED***helping***REMOVED***us***REMOVED***avoid***REMOVED***backtracking***REMOVED***as***REMOVED***much***REMOVED***as***REMOVED***possible,
***REMOVED******REMOVED******REMOVED*******REMOVED***and***REMOVED***2)***REMOVED***helping***REMOVED***us***REMOVED***avoid***REMOVED***creating***REMOVED***extra***REMOVED***tokens***REMOVED***when***REMOVED***consecutive
***REMOVED******REMOVED******REMOVED*******REMOVED***characters***REMOVED***are***REMOVED***plain***REMOVED***text.***REMOVED***This***REMOVED***improves***REMOVED***performance***REMOVED***and***REMOVED***simplifies
***REMOVED******REMOVED******REMOVED*******REMOVED***lookbehinds.
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***const***REMOVED***push***REMOVED***=***REMOVED***tok***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'globstar')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isBrace***REMOVED***=***REMOVED***state.braces***REMOVED***>***REMOVED***0***REMOVED***&&***REMOVED***(tok.type***REMOVED***===***REMOVED***'comma'***REMOVED***||***REMOVED***tok.type***REMOVED***===***REMOVED***'brace');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isExtglob***REMOVED***=***REMOVED***tok.extglob***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***(extglobs.length***REMOVED***&&***REMOVED***(tok.type***REMOVED***===***REMOVED***'pipe'***REMOVED***||***REMOVED***tok.type***REMOVED***===***REMOVED***'paren'));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(tok.type***REMOVED***!==***REMOVED***'slash'***REMOVED***&&***REMOVED***tok.type***REMOVED***!==***REMOVED***'paren'***REMOVED***&&***REMOVED***!isBrace***REMOVED***&&***REMOVED***!isExtglob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***state.output.slice(0,***REMOVED***-prev.output.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'star';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***=***REMOVED***'*';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***star;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***prev.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(extglobs.length***REMOVED***&&***REMOVED***tok.type***REMOVED***!==***REMOVED***'paren')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobs[extglobs.length***REMOVED***-***REMOVED***1].inner***REMOVED***+=***REMOVED***tok.value;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(tok.value***REMOVED***||***REMOVED***tok.output)***REMOVED***append(tok);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***&&***REMOVED***prev.type***REMOVED***===***REMOVED***'text'***REMOVED***&&***REMOVED***tok.type***REMOVED***===***REMOVED***'text')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***tok.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***(prev.output***REMOVED***||***REMOVED***'')***REMOVED***+***REMOVED***tok.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***tok.prev***REMOVED***=***REMOVED***prev;
***REMOVED******REMOVED******REMOVED******REMOVED***tokens.push(tok);
***REMOVED******REMOVED******REMOVED******REMOVED***prev***REMOVED***=***REMOVED***tok;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***extglobOpen***REMOVED***=***REMOVED***(type,***REMOVED***value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***token***REMOVED***=***REMOVED***{***REMOVED***...EXTGLOB_CHARS[value],***REMOVED***conditions:***REMOVED***1,***REMOVED***inner:***REMOVED***''***REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***token.prev***REMOVED***=***REMOVED***prev;
***REMOVED******REMOVED******REMOVED******REMOVED***token.parens***REMOVED***=***REMOVED***state.parens;
***REMOVED******REMOVED******REMOVED******REMOVED***token.output***REMOVED***=***REMOVED***state.output;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***output***REMOVED***=***REMOVED***(opts.capture***REMOVED***?***REMOVED***'('***REMOVED***:***REMOVED***'')***REMOVED***+***REMOVED***token.open;

***REMOVED******REMOVED******REMOVED******REMOVED***increment('parens');
***REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type,***REMOVED***value,***REMOVED***output:***REMOVED***state.output***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***ONE_CHAR***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'paren',***REMOVED***extglob:***REMOVED***true,***REMOVED***value:***REMOVED***advance(),***REMOVED***output***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***extglobs.push(token);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***extglobClose***REMOVED***=***REMOVED***token***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***token.close***REMOVED***+***REMOVED***(opts.capture***REMOVED***?***REMOVED***')'***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***rest;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(token.type***REMOVED***===***REMOVED***'negate')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***extglobStar***REMOVED***=***REMOVED***star;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(token.inner***REMOVED***&&***REMOVED***token.inner.length***REMOVED***>***REMOVED***1***REMOVED***&&***REMOVED***token.inner.includes('/'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobStar***REMOVED***=***REMOVED***globstar(opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(extglobStar***REMOVED***!==***REMOVED***star***REMOVED***||***REMOVED***eos()***REMOVED***||***REMOVED***/^\)+$/.test(remaining()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***token.close***REMOVED***=***REMOVED***`)$))${extglobStar}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(token.inner.includes('*')***REMOVED***&&***REMOVED***(rest***REMOVED***=***REMOVED***remaining())***REMOVED***&&***REMOVED***/^\.[^\\/.]+$/.test(rest))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Any***REMOVED***non-magical***REMOVED***string***REMOVED***(`.ts`)***REMOVED***or***REMOVED***even***REMOVED***nested***REMOVED***expression***REMOVED***(`.{ts,tsx}`)***REMOVED***can***REMOVED***follow***REMOVED***after***REMOVED***the***REMOVED***closing***REMOVED***parenthesis.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***In***REMOVED***this***REMOVED***case,***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***parse***REMOVED***the***REMOVED***string***REMOVED***and***REMOVED***use***REMOVED***it***REMOVED***in***REMOVED***the***REMOVED***output***REMOVED***of***REMOVED***the***REMOVED***original***REMOVED***pattern.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Suitable***REMOVED***patterns:***REMOVED***`/!(*.d).ts`,***REMOVED***`/!(*.d).{ts,tsx}`,***REMOVED***`**/!(*-dbg).@(js)`.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Disabling***REMOVED***the***REMOVED***`fastpaths`***REMOVED***option***REMOVED***due***REMOVED***to***REMOVED***a***REMOVED***problem***REMOVED***with***REMOVED***parsing***REMOVED***strings***REMOVED***as***REMOVED***`.ts`***REMOVED***in***REMOVED***the***REMOVED***pattern***REMOVED***like***REMOVED***`**/!(*.d).ts`.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expression***REMOVED***=***REMOVED***parse$2(rest,***REMOVED***{***REMOVED***...options,***REMOVED***fastpaths:***REMOVED***false***REMOVED***}).output;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***token.close***REMOVED***=***REMOVED***`)${expression})${extglobStar})`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(token.prev.type***REMOVED***===***REMOVED***'bos')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.negatedExtglob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'paren',***REMOVED***extglob:***REMOVED***true,***REMOVED***value,***REMOVED***output***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***decrement('parens');
***REMOVED******REMOVED***};

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Fast***REMOVED***paths
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***if***REMOVED***(opts.fastpaths***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***!/(^[*!]|[/()[\]{}"])/.test(input))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***backslashes***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***input.replace(REGEX_SPECIAL_CHARS_BACKREF,***REMOVED***(m,***REMOVED***esc,***REMOVED***chars,***REMOVED***first,***REMOVED***rest,***REMOVED***index)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(first***REMOVED***===***REMOVED***'\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backslashes***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***m;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(first***REMOVED***===***REMOVED***'?')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(esc)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***esc***REMOVED***+***REMOVED***first***REMOVED***+***REMOVED***(rest***REMOVED***?***REMOVED***QMARK.repeat(rest.length)***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***qmarkNoDot***REMOVED***+***REMOVED***(rest***REMOVED***?***REMOVED***QMARK.repeat(rest.length)***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***QMARK.repeat(chars.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(first***REMOVED***===***REMOVED***'.')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***DOT_LITERAL.repeat(chars.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(first***REMOVED***===***REMOVED***'*')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(esc)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***esc***REMOVED***+***REMOVED***first***REMOVED***+***REMOVED***(rest***REMOVED***?***REMOVED***star***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***star;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***esc***REMOVED***?***REMOVED***m***REMOVED***:***REMOVED***`\\${m}`;
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(backslashes***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.unescape***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***output.replace(/\\/g,***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***output.replace(/\\+/g,***REMOVED***m***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***m.length***REMOVED***%***REMOVED***2***REMOVED***===***REMOVED***0***REMOVED***?***REMOVED***'\\\\'***REMOVED***:***REMOVED***(m***REMOVED***?***REMOVED***'\\'***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(output***REMOVED***===***REMOVED***input***REMOVED***&&***REMOVED***opts.contains***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***input;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***state;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***utils$1.wrapOutput(output,***REMOVED***state,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***state;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Tokenize***REMOVED***input***REMOVED***until***REMOVED***we***REMOVED***reach***REMOVED***end-of-string
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***while***REMOVED***(!eos())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***advance();

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'\u0000')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Escaped***REMOVED***characters
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***next***REMOVED***=***REMOVED***peek();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***'/'***REMOVED***&&***REMOVED***opts.bash***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***'.'***REMOVED***||***REMOVED***next***REMOVED***===***REMOVED***';')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!next)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***'\\';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***collapse***REMOVED***slashes***REMOVED***to***REMOVED***reduce***REMOVED***potential***REMOVED***for***REMOVED***exploits
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***/^\\+/.exec(remaining());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***slashes***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match***REMOVED***&&***REMOVED***match[0].length***REMOVED***>***REMOVED***2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***slashes***REMOVED***=***REMOVED***match[0].length;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.index***REMOVED***+=***REMOVED***slashes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(slashes***REMOVED***%***REMOVED***2***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***'\\';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.unescape***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.brackets***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***If***REMOVED***we're***REMOVED***inside***REMOVED***a***REMOVED***regex***REMOVED***character***REMOVED***class,***REMOVED***continue
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***until***REMOVED***we***REMOVED***reach***REMOVED***the***REMOVED***closing***REMOVED***bracket.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.brackets***REMOVED***>***REMOVED***0***REMOVED***&&***REMOVED***(value***REMOVED***!==***REMOVED***']'***REMOVED***||***REMOVED***prev.value***REMOVED***===***REMOVED***'['***REMOVED***||***REMOVED***prev.value***REMOVED***===***REMOVED***'[^'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.posix***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***value***REMOVED***===***REMOVED***':')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***inner***REMOVED***=***REMOVED***prev.value.slice(1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(inner.includes('['))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.posix***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(inner.includes(':'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***idx***REMOVED***=***REMOVED***prev.value.lastIndexOf('[');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pre***REMOVED***=***REMOVED***prev.value.slice(0,***REMOVED***idx);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rest***REMOVED***=***REMOVED***prev.value.slice(idx***REMOVED***+***REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***posix***REMOVED***=***REMOVED***POSIX_REGEX_SOURCE[rest];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(posix)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***=***REMOVED***pre***REMOVED***+***REMOVED***posix;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.backtrack***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***advance();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!bos.output***REMOVED***&&***REMOVED***tokens.indexOf(prev)***REMOVED***===***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bos.output***REMOVED***=***REMOVED***ONE_CHAR;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((value***REMOVED***===***REMOVED***'['***REMOVED***&&***REMOVED***peek()***REMOVED***!==***REMOVED***':')***REMOVED***||***REMOVED***(value***REMOVED***===***REMOVED***'-'***REMOVED***&&***REMOVED***peek()***REMOVED***===***REMOVED***']'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***`\\${value}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***']'***REMOVED***&&***REMOVED***(prev.value***REMOVED***===***REMOVED***'['***REMOVED***||***REMOVED***prev.value***REMOVED***===***REMOVED***'[^'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***`\\${value}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.posix***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***value***REMOVED***===***REMOVED***'!'***REMOVED***&&***REMOVED***prev.value***REMOVED***===***REMOVED***'[')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***'^';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***append({***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***If***REMOVED***we're***REMOVED***inside***REMOVED***a***REMOVED***quoted***REMOVED***string,***REMOVED***continue
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***until***REMOVED***we***REMOVED***reach***REMOVED***the***REMOVED***closing***REMOVED***double***REMOVED***quote.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.quotes***REMOVED***===***REMOVED***1***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***'"')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***utils$1.escapeRegex(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***append({***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Double***REMOVED***quotes
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'"')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.quotes***REMOVED***=***REMOVED***state.quotes***REMOVED***===***REMOVED***1***REMOVED***?***REMOVED***0***REMOVED***:***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.keepQuotes***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Parentheses
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'(')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***increment('parens');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'paren',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***')')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.parens***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***opts.strictBrackets***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(syntaxError('opening',***REMOVED***'('));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***extglob***REMOVED***=***REMOVED***extglobs[extglobs.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(extglob***REMOVED***&&***REMOVED***state.parens***REMOVED***===***REMOVED***extglob.parens***REMOVED***+***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobClose(extglobs.pop());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'paren',***REMOVED***value,***REMOVED***output:***REMOVED***state.parens***REMOVED***?***REMOVED***')'***REMOVED***:***REMOVED***'\\)'***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decrement('parens');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Square***REMOVED***brackets
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'[')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.nobracket***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***!remaining().includes(']'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.nobracket***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***opts.strictBrackets***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(syntaxError('closing',***REMOVED***']'));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***`\\${value}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***increment('brackets');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'bracket',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***']')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.nobracket***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***(prev***REMOVED***&&***REMOVED***prev.type***REMOVED***===***REMOVED***'bracket'***REMOVED***&&***REMOVED***prev.value.length***REMOVED***===***REMOVED***1))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value,***REMOVED***output:***REMOVED***`\\${value}`***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.brackets***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.strictBrackets***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(syntaxError('opening',***REMOVED***'['));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value,***REMOVED***output:***REMOVED***`\\${value}`***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decrement('brackets');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prevValue***REMOVED***=***REMOVED***prev.value.slice(1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.posix***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***prevValue[0]***REMOVED***===***REMOVED***'^'***REMOVED***&&***REMOVED***!prevValue.includes('/'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***`/${value}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***append({***REMOVED***value***REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***when***REMOVED***literal***REMOVED***brackets***REMOVED***are***REMOVED***explicitly***REMOVED***disabled
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***assume***REMOVED***we***REMOVED***should***REMOVED***match***REMOVED***with***REMOVED***a***REMOVED***regex***REMOVED***character***REMOVED***class
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.literalBrackets***REMOVED***===***REMOVED***false***REMOVED***||***REMOVED***utils$1.hasRegexChars(prevValue))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***escaped***REMOVED***=***REMOVED***utils$1.escapeRegex(prev.value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***state.output.slice(0,***REMOVED***-prev.value.length);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***when***REMOVED***literal***REMOVED***brackets***REMOVED***are***REMOVED***explicitly***REMOVED***enabled
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***assume***REMOVED***we***REMOVED***should***REMOVED***escape***REMOVED***the***REMOVED***brackets***REMOVED***to***REMOVED***match***REMOVED***literal***REMOVED***characters
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.literalBrackets***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***escaped;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***=***REMOVED***escaped;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***when***REMOVED***the***REMOVED***user***REMOVED***specifies***REMOVED***nothing,***REMOVED***try***REMOVED***to***REMOVED***match***REMOVED***both
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***=***REMOVED***`(${capture}${escaped}|${prev.value})`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***prev.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Braces
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'{'***REMOVED***&&***REMOVED***opts.nobrace***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***increment('braces');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***open***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***type:***REMOVED***'brace',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output:***REMOVED***'(',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***outputIndex:***REMOVED***state.output.length,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokensIndex:***REMOVED***state.tokens.length
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braces.push(open);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push(open);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'}')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***brace***REMOVED***=***REMOVED***braces[braces.length***REMOVED***-***REMOVED***1];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.nobrace***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***!brace)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value,***REMOVED***output:***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***')';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(brace.dots***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***arr***REMOVED***=***REMOVED***tokens.slice();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***range***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***arr.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(arr[i].type***REMOVED***===***REMOVED***'brace')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(arr[i].type***REMOVED***!==***REMOVED***'dots')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***range.unshift(arr[i].value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***expandRange(range,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.backtrack***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(brace.comma***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***brace.dots***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***out***REMOVED***=***REMOVED***state.output.slice(0,***REMOVED***brace.outputIndex);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***toks***REMOVED***=***REMOVED***state.tokens.slice(brace.tokensIndex);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***brace.value***REMOVED***=***REMOVED***brace.output***REMOVED***=***REMOVED***'\\{';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***output***REMOVED***=***REMOVED***'\\}';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***out;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***t***REMOVED***of***REMOVED***toks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***(t.output***REMOVED***||***REMOVED***t.value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'brace',***REMOVED***value,***REMOVED***output***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decrement('braces');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***braces.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Pipes
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'|')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(extglobs.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobs[extglobs.length***REMOVED***-***REMOVED***1].conditions++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Commas
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***',')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***value;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***brace***REMOVED***=***REMOVED***braces[braces.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(brace***REMOVED***&&***REMOVED***stack[stack.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'braces')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***brace.comma***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***'|';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'comma',***REMOVED***value,***REMOVED***output***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Slashes
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***the***REMOVED***beginning***REMOVED***of***REMOVED***the***REMOVED***glob***REMOVED***is***REMOVED***"./",***REMOVED***advance***REMOVED***the***REMOVED***start
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***to***REMOVED***the***REMOVED***current***REMOVED***index,***REMOVED***and***REMOVED***don't***REMOVED***add***REMOVED***the***REMOVED***"./"***REMOVED***characters
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***to***REMOVED***the***REMOVED***state.***REMOVED***This***REMOVED***greatly***REMOVED***simplifies***REMOVED***lookbehinds***REMOVED***when
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***checking***REMOVED***for***REMOVED***BOS***REMOVED***characters***REMOVED***like***REMOVED***"!"***REMOVED***and***REMOVED***"."***REMOVED***(not***REMOVED***"./")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'dot'***REMOVED***&&***REMOVED***state.index***REMOVED***===***REMOVED***state.start***REMOVED***+***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.start***REMOVED***=***REMOVED***state.index***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.consumed***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tokens.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev***REMOVED***=***REMOVED***bos;***REMOVED***//***REMOVED***reset***REMOVED***"prev"***REMOVED***to***REMOVED***the***REMOVED***first***REMOVED***token
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'slash',***REMOVED***value,***REMOVED***output:***REMOVED***SLASH_LITERAL***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Dots
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'.')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.braces***REMOVED***>***REMOVED***0***REMOVED***&&***REMOVED***prev.type***REMOVED***===***REMOVED***'dot')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.value***REMOVED***===***REMOVED***'.')***REMOVED***prev.output***REMOVED***=***REMOVED***DOT_LITERAL;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***brace***REMOVED***=***REMOVED***braces[braces.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'dots';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***brace.dots***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((state.braces***REMOVED***+***REMOVED***state.parens)***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***prev.type***REMOVED***!==***REMOVED***'bos'***REMOVED***&&***REMOVED***prev.type***REMOVED***!==***REMOVED***'slash')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value,***REMOVED***output:***REMOVED***DOT_LITERAL***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'dot',***REMOVED***value,***REMOVED***output:***REMOVED***DOT_LITERAL***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Question***REMOVED***marks
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'?')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isGroup***REMOVED***=***REMOVED***prev***REMOVED***&&***REMOVED***prev.value***REMOVED***===***REMOVED***'(';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isGroup***REMOVED***&&***REMOVED***opts.noextglob***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***peek()***REMOVED***===***REMOVED***'('***REMOVED***&&***REMOVED***peek(2)***REMOVED***!==***REMOVED***'?')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobOpen('qmark',***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***&&***REMOVED***prev.type***REMOVED***===***REMOVED***'paren')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***next***REMOVED***=***REMOVED***peek();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***value;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***'<'***REMOVED***&&***REMOVED***!utils$1.supportsLookbehinds())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('Node.js***REMOVED***v10***REMOVED***or***REMOVED***higher***REMOVED***is***REMOVED***required***REMOVED***for***REMOVED***regex***REMOVED***lookbehinds');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((prev.value***REMOVED***===***REMOVED***'('***REMOVED***&&***REMOVED***!/[!=<:]/.test(next))***REMOVED***||***REMOVED***(next***REMOVED***===***REMOVED***'<'***REMOVED***&&***REMOVED***!/<([!=]|\w+>)/.test(remaining())))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***`\\${value}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value,***REMOVED***output***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.dot***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***(prev.type***REMOVED***===***REMOVED***'slash'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'bos'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'qmark',***REMOVED***value,***REMOVED***output:***REMOVED***QMARK_NO_DOT***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'qmark',***REMOVED***value,***REMOVED***output:***REMOVED***QMARK***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Exclamation
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'!')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noextglob***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***peek()***REMOVED***===***REMOVED***'(')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(peek(2)***REMOVED***!==***REMOVED***'?'***REMOVED***||***REMOVED***!/[!=<:]/.test(peek(3)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobOpen('negate',***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.nonegate***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***state.index***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***negate();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Plus
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'+')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noextglob***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***peek()***REMOVED***===***REMOVED***'('***REMOVED***&&***REMOVED***peek(2)***REMOVED***!==***REMOVED***'?')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobOpen('plus',***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((prev***REMOVED***&&***REMOVED***prev.value***REMOVED***===***REMOVED***'(')***REMOVED***||***REMOVED***opts.regex***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'plus',***REMOVED***value,***REMOVED***output:***REMOVED***PLUS_LITERAL***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((prev***REMOVED***&&***REMOVED***(prev.type***REMOVED***===***REMOVED***'bracket'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'paren'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'brace'))***REMOVED***||***REMOVED***state.parens***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'plus',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'plus',***REMOVED***value:***REMOVED***PLUS_LITERAL***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Plain***REMOVED***text
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'@')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noextglob***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***peek()***REMOVED***===***REMOVED***'('***REMOVED***&&***REMOVED***peek(2)***REMOVED***!==***REMOVED***'?')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'at',***REMOVED***extglob:***REMOVED***true,***REMOVED***value,***REMOVED***output:***REMOVED***''***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Plain***REMOVED***text
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***!==***REMOVED***'*')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'$'***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***'^')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***`\\${value}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***REGEX_NON_SPECIAL_CHARS.exec(remaining());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***match[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.index***REMOVED***+=***REMOVED***match[0].length;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Stars
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***&&***REMOVED***(prev.type***REMOVED***===***REMOVED***'globstar'***REMOVED***||***REMOVED***prev.star***REMOVED***===***REMOVED***true))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'star';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.star***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***star;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.backtrack***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.globstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***rest***REMOVED***=***REMOVED***remaining();
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noextglob***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***/^\([^?]/.test(rest))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extglobOpen('star',***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'star')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noglobstar***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prior***REMOVED***=***REMOVED***prev.prev;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***before***REMOVED***=***REMOVED***prior.prev;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isStart***REMOVED***=***REMOVED***prior.type***REMOVED***===***REMOVED***'slash'***REMOVED***||***REMOVED***prior.type***REMOVED***===***REMOVED***'bos';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***afterStar***REMOVED***=***REMOVED***before***REMOVED***&&***REMOVED***(before.type***REMOVED***===***REMOVED***'star'***REMOVED***||***REMOVED***before.type***REMOVED***===***REMOVED***'globstar');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.bash***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***(!isStart***REMOVED***||***REMOVED***(rest[0]***REMOVED***&&***REMOVED***rest[0]***REMOVED***!==***REMOVED***'/')))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'star',***REMOVED***value,***REMOVED***output:***REMOVED***''***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isBrace***REMOVED***=***REMOVED***state.braces***REMOVED***>***REMOVED***0***REMOVED***&&***REMOVED***(prior.type***REMOVED***===***REMOVED***'comma'***REMOVED***||***REMOVED***prior.type***REMOVED***===***REMOVED***'brace');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isExtglob***REMOVED***=***REMOVED***extglobs.length***REMOVED***&&***REMOVED***(prior.type***REMOVED***===***REMOVED***'pipe'***REMOVED***||***REMOVED***prior.type***REMOVED***===***REMOVED***'paren');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isStart***REMOVED***&&***REMOVED***prior.type***REMOVED***!==***REMOVED***'paren'***REMOVED***&&***REMOVED***!isBrace***REMOVED***&&***REMOVED***!isExtglob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'star',***REMOVED***value,***REMOVED***output:***REMOVED***''***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***strip***REMOVED***consecutive***REMOVED***`/**/`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(rest.slice(0,***REMOVED***3)***REMOVED***===***REMOVED***'/**')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***after***REMOVED***=***REMOVED***input[state.index***REMOVED***+***REMOVED***4];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(after***REMOVED***&&***REMOVED***after***REMOVED***!==***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rest***REMOVED***=***REMOVED***rest.slice(3);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume('/**',***REMOVED***3);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prior.type***REMOVED***===***REMOVED***'bos'***REMOVED***&&***REMOVED***eos())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'globstar';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***globstar(opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***prev.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.globstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prior.type***REMOVED***===***REMOVED***'slash'***REMOVED***&&***REMOVED***prior.prev.type***REMOVED***!==***REMOVED***'bos'***REMOVED***&&***REMOVED***!afterStar***REMOVED***&&***REMOVED***eos())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***state.output.slice(0,***REMOVED***-(prior.output***REMOVED***+***REMOVED***prev.output).length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prior.output***REMOVED***=***REMOVED***`(?:${prior.output}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'globstar';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***globstar(opts)***REMOVED***+***REMOVED***(opts.strictSlashes***REMOVED***?***REMOVED***')'***REMOVED***:***REMOVED***'|$)');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.globstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***prior.output***REMOVED***+***REMOVED***prev.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prior.type***REMOVED***===***REMOVED***'slash'***REMOVED***&&***REMOVED***prior.prev.type***REMOVED***!==***REMOVED***'bos'***REMOVED***&&***REMOVED***rest[0]***REMOVED***===***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***end***REMOVED***=***REMOVED***rest[1]***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***'|$'***REMOVED***:***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***state.output.slice(0,***REMOVED***-(prior.output***REMOVED***+***REMOVED***prev.output).length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prior.output***REMOVED***=***REMOVED***`(?:${prior.output}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'globstar';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***`${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***prior.output***REMOVED***+***REMOVED***prev.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.globstar***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value***REMOVED***+***REMOVED***advance());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'slash',***REMOVED***value:***REMOVED***'/',***REMOVED***output:***REMOVED***''***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prior.type***REMOVED***===***REMOVED***'bos'***REMOVED***&&***REMOVED***rest[0]***REMOVED***===***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'globstar';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***`(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***prev.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.globstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value***REMOVED***+***REMOVED***advance());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'slash',***REMOVED***value:***REMOVED***'/',***REMOVED***output:***REMOVED***''***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***single***REMOVED***star***REMOVED***from***REMOVED***output
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***state.output.slice(0,***REMOVED***-prev.output.length);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***reset***REMOVED***previous***REMOVED***token***REMOVED***to***REMOVED***globstar
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'globstar';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***=***REMOVED***globstar(opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***reset***REMOVED***output***REMOVED***with***REMOVED***globstar
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***prev.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.globstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***consume(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***token***REMOVED***=***REMOVED***{***REMOVED***type:***REMOVED***'star',***REMOVED***value,***REMOVED***output:***REMOVED***star***REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.bash***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token.output***REMOVED***=***REMOVED***'.*?';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'bos'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'slash')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token.output***REMOVED***=***REMOVED***nodot***REMOVED***+***REMOVED***token.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push(token);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***&&***REMOVED***(prev.type***REMOVED***===***REMOVED***'bracket'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'paren')***REMOVED***&&***REMOVED***opts.regex***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token.output***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push(token);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state.index***REMOVED***===***REMOVED***state.start***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'slash'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'dot')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'dot')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***NO_DOT_SLASH;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***+=***REMOVED***NO_DOT_SLASH;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(opts.dot***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***NO_DOTS_SLASH;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***+=***REMOVED***NO_DOTS_SLASH;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***nodot;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***+=***REMOVED***nodot;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(peek()***REMOVED***!==***REMOVED***'*')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***ONE_CHAR;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.output***REMOVED***+=***REMOVED***ONE_CHAR;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***push(token);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***while***REMOVED***(state.brackets***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.strictBrackets***REMOVED***===***REMOVED***true)***REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(syntaxError('closing',***REMOVED***']'));
***REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***utils$1.escapeLast(state.output,***REMOVED***'[');
***REMOVED******REMOVED******REMOVED******REMOVED***decrement('brackets');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***while***REMOVED***(state.parens***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.strictBrackets***REMOVED***===***REMOVED***true)***REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(syntaxError('closing',***REMOVED***')'));
***REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***utils$1.escapeLast(state.output,***REMOVED***'(');
***REMOVED******REMOVED******REMOVED******REMOVED***decrement('parens');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***while***REMOVED***(state.braces***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.strictBrackets***REMOVED***===***REMOVED***true)***REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(syntaxError('closing',***REMOVED***'}'));
***REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***utils$1.escapeLast(state.output,***REMOVED***'{');
***REMOVED******REMOVED******REMOVED******REMOVED***decrement('braces');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.strictSlashes***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***(prev.type***REMOVED***===***REMOVED***'star'***REMOVED***||***REMOVED***prev.type***REMOVED***===***REMOVED***'bracket'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'maybe_slash',***REMOVED***value:***REMOVED***'',***REMOVED***output:***REMOVED***`${SLASH_LITERAL}?`***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***rebuild***REMOVED***the***REMOVED***output***REMOVED***if***REMOVED***we***REMOVED***had***REMOVED***to***REMOVED***backtrack***REMOVED***at***REMOVED***any***REMOVED***point
***REMOVED******REMOVED***if***REMOVED***(state.backtrack***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***=***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***token***REMOVED***of***REMOVED***state.tokens)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***token.output***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***token.output***REMOVED***:***REMOVED***token.value;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(token.suffix)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state.output***REMOVED***+=***REMOVED***token.suffix;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***state;
};

/**
***REMOVED*******REMOVED***Fast***REMOVED***paths***REMOVED***for***REMOVED***creating***REMOVED***regular***REMOVED***expressions***REMOVED***for***REMOVED***common***REMOVED***glob***REMOVED***patterns.
***REMOVED*******REMOVED***This***REMOVED***can***REMOVED***significantly***REMOVED***speed***REMOVED***up***REMOVED***processing***REMOVED***and***REMOVED***has***REMOVED***very***REMOVED***little***REMOVED***downside
***REMOVED*******REMOVED***impact***REMOVED***when***REMOVED***none***REMOVED***of***REMOVED***the***REMOVED***fast***REMOVED***paths***REMOVED***match.
***REMOVED****/

parse$2.fastpaths***REMOVED***=***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***{***REMOVED***...options***REMOVED***};
***REMOVED******REMOVED***const***REMOVED***max***REMOVED***=***REMOVED***typeof***REMOVED***opts.maxLength***REMOVED***===***REMOVED***'number'***REMOVED***?***REMOVED***Math.min(MAX_LENGTH,***REMOVED***opts.maxLength)***REMOVED***:***REMOVED***MAX_LENGTH;
***REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***input.length;
***REMOVED******REMOVED***if***REMOVED***(len***REMOVED***>***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(`Input***REMOVED***length:***REMOVED***${len},***REMOVED***exceeds***REMOVED***maximum***REMOVED***allowed***REMOVED***length:***REMOVED***${max}`);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***input***REMOVED***=***REMOVED***REPLACEMENTS[input]***REMOVED***||***REMOVED***input;
***REMOVED******REMOVED***const***REMOVED***win32***REMOVED***=***REMOVED***utils$1.isWindows(options);

***REMOVED******REMOVED***//***REMOVED***create***REMOVED***constants***REMOVED***based***REMOVED***on***REMOVED***platform,***REMOVED***for***REMOVED***windows***REMOVED***or***REMOVED***posix
***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***DOT_LITERAL,
***REMOVED******REMOVED******REMOVED******REMOVED***SLASH_LITERAL,
***REMOVED******REMOVED******REMOVED******REMOVED***ONE_CHAR,
***REMOVED******REMOVED******REMOVED******REMOVED***DOTS_SLASH,
***REMOVED******REMOVED******REMOVED******REMOVED***NO_DOT,
***REMOVED******REMOVED******REMOVED******REMOVED***NO_DOTS,
***REMOVED******REMOVED******REMOVED******REMOVED***NO_DOTS_SLASH,
***REMOVED******REMOVED******REMOVED******REMOVED***STAR,
***REMOVED******REMOVED******REMOVED******REMOVED***START_ANCHOR
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***constants$1.globChars(win32);

***REMOVED******REMOVED***const***REMOVED***nodot***REMOVED***=***REMOVED***opts.dot***REMOVED***?***REMOVED***NO_DOTS***REMOVED***:***REMOVED***NO_DOT;
***REMOVED******REMOVED***const***REMOVED***slashDot***REMOVED***=***REMOVED***opts.dot***REMOVED***?***REMOVED***NO_DOTS_SLASH***REMOVED***:***REMOVED***NO_DOT;
***REMOVED******REMOVED***const***REMOVED***capture***REMOVED***=***REMOVED***opts.capture***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'?:';
***REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***{***REMOVED***negated:***REMOVED***false,***REMOVED***prefix:***REMOVED***''***REMOVED***};
***REMOVED******REMOVED***let***REMOVED***star***REMOVED***=***REMOVED***opts.bash***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***'.*?'***REMOVED***:***REMOVED***STAR;

***REMOVED******REMOVED***if***REMOVED***(opts.capture)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***star***REMOVED***=***REMOVED***`(${star})`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***globstar***REMOVED***=***REMOVED***opts***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.noglobstar***REMOVED***===***REMOVED***true)***REMOVED***return***REMOVED***star;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(${capture}(?:(?!${START_ANCHOR}${opts.dot***REMOVED***?***REMOVED***DOTS_SLASH***REMOVED***:***REMOVED***DOT_LITERAL}).)*?)`;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***create***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(str)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${nodot}${ONE_CHAR}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'.*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${DOT_LITERAL}${ONE_CHAR}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'*.*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'*/*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'**':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***nodot***REMOVED***+***REMOVED***globstar(opts);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'**/*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'**/*.*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'**/.*':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***default:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***/^(.*?)\.(\w+)$/.exec(str);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!match)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***source***REMOVED***=***REMOVED***create(match[1]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!source)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source***REMOVED***+***REMOVED***DOT_LITERAL***REMOVED***+***REMOVED***match[2];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***output***REMOVED***=***REMOVED***utils$1.removePrefix(input,***REMOVED***state);
***REMOVED******REMOVED***let***REMOVED***source***REMOVED***=***REMOVED***create(output);

***REMOVED******REMOVED***if***REMOVED***(source***REMOVED***&&***REMOVED***opts.strictSlashes***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***source***REMOVED***+=***REMOVED***`${SLASH_LITERAL}?`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***source;
};

var***REMOVED***parse_1$1***REMOVED***=***REMOVED***parse$2;

const***REMOVED***path$1***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***scan***REMOVED***=***REMOVED***scan_1;
const***REMOVED***parse$1***REMOVED***=***REMOVED***parse_1$1;
const***REMOVED***utils***REMOVED***=***REMOVED***utils$3;
const***REMOVED***constants***REMOVED***=***REMOVED***constants$2;
const***REMOVED***isObject$1***REMOVED***=***REMOVED***val***REMOVED***=>***REMOVED***val***REMOVED***&&***REMOVED***typeof***REMOVED***val***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***!Array.isArray(val);

/**
***REMOVED*******REMOVED***Creates***REMOVED***a***REMOVED***matcher***REMOVED***function***REMOVED***from***REMOVED***one***REMOVED***or***REMOVED***more***REMOVED***glob***REMOVED***patterns.***REMOVED***The
***REMOVED*******REMOVED***returned***REMOVED***function***REMOVED***takes***REMOVED***a***REMOVED***string***REMOVED***to***REMOVED***match***REMOVED***as***REMOVED***its***REMOVED***first***REMOVED***argument,
***REMOVED*******REMOVED***and***REMOVED***returns***REMOVED***true***REMOVED***if***REMOVED***the***REMOVED***string***REMOVED***is***REMOVED***a***REMOVED***match.***REMOVED***The***REMOVED***returned***REMOVED***matcher
***REMOVED*******REMOVED***function***REMOVED***also***REMOVED***takes***REMOVED***a***REMOVED***boolean***REMOVED***as***REMOVED***the***REMOVED***second***REMOVED***argument***REMOVED***that,***REMOVED***when***REMOVED***true,
***REMOVED*******REMOVED***returns***REMOVED***an***REMOVED***object***REMOVED***with***REMOVED***additional***REMOVED***information.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***//***REMOVED***picomatch(glob[,***REMOVED***options]);
***REMOVED****
***REMOVED*******REMOVED***const***REMOVED***isMatch***REMOVED***=***REMOVED***picomatch('*.!(*a)');
***REMOVED*******REMOVED***console.log(isMatch('a.a'));***REMOVED***//=>***REMOVED***false
***REMOVED*******REMOVED***console.log(isMatch('a.b'));***REMOVED***//=>***REMOVED***true
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@name***REMOVED***picomatch
***REMOVED*******REMOVED***@param***REMOVED***{String|Array}***REMOVED***`globs`***REMOVED***One***REMOVED***or***REMOVED***more***REMOVED***glob***REMOVED***patterns.
***REMOVED*******REMOVED***@param***REMOVED***{Object=}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Function=}***REMOVED***Returns***REMOVED***a***REMOVED***matcher***REMOVED***function.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

const***REMOVED***picomatch$1***REMOVED***=***REMOVED***(glob,***REMOVED***options,***REMOVED***returnState***REMOVED***=***REMOVED***false)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(Array.isArray(glob))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fns***REMOVED***=***REMOVED***glob.map(input***REMOVED***=>***REMOVED***picomatch$1(input,***REMOVED***options,***REMOVED***returnState));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***arrayMatcher***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***isMatch***REMOVED***of***REMOVED***fns)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***isMatch(str);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(state)***REMOVED***return***REMOVED***state;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***arrayMatcher;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***isState***REMOVED***=***REMOVED***isObject$1(glob)***REMOVED***&&***REMOVED***glob.tokens***REMOVED***&&***REMOVED***glob.input;

***REMOVED******REMOVED***if***REMOVED***(glob***REMOVED***===***REMOVED***''***REMOVED***||***REMOVED***(typeof***REMOVED***glob***REMOVED***!==***REMOVED***'string'***REMOVED***&&***REMOVED***!isState))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('Expected***REMOVED***pattern***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***non-empty***REMOVED***string');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***posix***REMOVED***=***REMOVED***utils.isWindows(options);
***REMOVED******REMOVED***const***REMOVED***regex***REMOVED***=***REMOVED***isState
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***picomatch$1.compileRe(glob,***REMOVED***options)
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***picomatch$1.makeRe(glob,***REMOVED***options,***REMOVED***false,***REMOVED***true);

***REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***regex.state;
***REMOVED******REMOVED***delete***REMOVED***regex.state;

***REMOVED******REMOVED***let***REMOVED***isIgnored***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(opts.ignore)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ignoreOpts***REMOVED***=***REMOVED***{***REMOVED***...options,***REMOVED***ignore:***REMOVED***null,***REMOVED***onMatch:***REMOVED***null,***REMOVED***onResult:***REMOVED***null***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***isIgnored***REMOVED***=***REMOVED***picomatch$1(opts.ignore,***REMOVED***ignoreOpts,***REMOVED***returnState);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***matcher***REMOVED***=***REMOVED***(input,***REMOVED***returnObject***REMOVED***=***REMOVED***false)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***isMatch,***REMOVED***match,***REMOVED***output***REMOVED***}***REMOVED***=***REMOVED***picomatch$1.test(input,***REMOVED***regex,***REMOVED***options,***REMOVED***{***REMOVED***glob,***REMOVED***posix***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***{***REMOVED***glob,***REMOVED***state,***REMOVED***regex,***REMOVED***posix,***REMOVED***input,***REMOVED***output,***REMOVED***match,***REMOVED***isMatch***REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***opts.onResult***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.onResult(result);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isMatch***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.isMatch***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***returnObject***REMOVED***?***REMOVED***result***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isIgnored(input))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***opts.onIgnore***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.onIgnore(result);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.isMatch***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***returnObject***REMOVED***?***REMOVED***result***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***opts.onMatch***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.onMatch(result);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***returnObject***REMOVED***?***REMOVED***result***REMOVED***:***REMOVED***true;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***if***REMOVED***(returnState)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***matcher.state***REMOVED***=***REMOVED***state;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***matcher;
};

/**
***REMOVED*******REMOVED***Test***REMOVED***`input`***REMOVED***with***REMOVED***the***REMOVED***given***REMOVED***`regex`.***REMOVED***This***REMOVED***is***REMOVED***used***REMOVED***by***REMOVED***the***REMOVED***main
***REMOVED*******REMOVED***`picomatch()`***REMOVED***function***REMOVED***to***REMOVED***test***REMOVED***the***REMOVED***input***REMOVED***string.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***//***REMOVED***picomatch.test(input,***REMOVED***regex[,***REMOVED***options]);
***REMOVED****
***REMOVED*******REMOVED***console.log(picomatch.test('foo/bar',***REMOVED***/^(?:([^/]*?)\/([^/]*?))$/));
***REMOVED*******REMOVED***//***REMOVED***{***REMOVED***isMatch:***REMOVED***true,***REMOVED***match:***REMOVED***[***REMOVED***'foo/',***REMOVED***'foo',***REMOVED***'bar'***REMOVED***],***REMOVED***output:***REMOVED***'foo/bar'***REMOVED***}
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`input`***REMOVED***String***REMOVED***to***REMOVED***test.
***REMOVED*******REMOVED***@param***REMOVED***{RegExp}***REMOVED***`regex`
***REMOVED*******REMOVED***@return***REMOVED***{Object}***REMOVED***Returns***REMOVED***an***REMOVED***object***REMOVED***with***REMOVED***matching***REMOVED***info.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.test***REMOVED***=***REMOVED***(input,***REMOVED***regex,***REMOVED***options,***REMOVED***{***REMOVED***glob,***REMOVED***posix***REMOVED***}***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('Expected***REMOVED***input***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***string');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(input***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***isMatch:***REMOVED***false,***REMOVED***output:***REMOVED***''***REMOVED***};
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***format***REMOVED***=***REMOVED***opts.format***REMOVED***||***REMOVED***(posix***REMOVED***?***REMOVED***utils.toPosixSlashes***REMOVED***:***REMOVED***null);
***REMOVED******REMOVED***let***REMOVED***match***REMOVED***=***REMOVED***input***REMOVED***===***REMOVED***glob;
***REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***(match***REMOVED***&&***REMOVED***format)***REMOVED***?***REMOVED***format(input)***REMOVED***:***REMOVED***input;

***REMOVED******REMOVED***if***REMOVED***(match***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***format***REMOVED***?***REMOVED***format(input)***REMOVED***:***REMOVED***input;
***REMOVED******REMOVED******REMOVED******REMOVED***match***REMOVED***=***REMOVED***output***REMOVED***===***REMOVED***glob;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(match***REMOVED***===***REMOVED***false***REMOVED***||***REMOVED***opts.capture***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.matchBase***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***opts.basename***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***match***REMOVED***=***REMOVED***picomatch$1.matchBase(input,***REMOVED***regex,***REMOVED***options,***REMOVED***posix);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***match***REMOVED***=***REMOVED***regex.exec(output);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***{***REMOVED***isMatch:***REMOVED***Boolean(match),***REMOVED***match,***REMOVED***output***REMOVED***};
};

/**
***REMOVED*******REMOVED***Match***REMOVED***the***REMOVED***basename***REMOVED***of***REMOVED***a***REMOVED***filepath.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***//***REMOVED***picomatch.matchBase(input,***REMOVED***glob[,***REMOVED***options]);
***REMOVED*******REMOVED***console.log(picomatch.matchBase('foo/bar.js',***REMOVED***'*.js');***REMOVED***//***REMOVED***true
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`input`***REMOVED***String***REMOVED***to***REMOVED***test.
***REMOVED*******REMOVED***@param***REMOVED***{RegExp|String}***REMOVED***`glob`***REMOVED***Glob***REMOVED***pattern***REMOVED***or***REMOVED***regex***REMOVED***created***REMOVED***by***REMOVED***[.makeRe](#makeRe).
***REMOVED*******REMOVED***@return***REMOVED***{Boolean}
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.matchBase***REMOVED***=***REMOVED***(input,***REMOVED***glob,***REMOVED***options,***REMOVED***posix***REMOVED***=***REMOVED***utils.isWindows(options))***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***regex***REMOVED***=***REMOVED***glob***REMOVED***instanceof***REMOVED***RegExp***REMOVED***?***REMOVED***glob***REMOVED***:***REMOVED***picomatch$1.makeRe(glob,***REMOVED***options);
***REMOVED******REMOVED***return***REMOVED***regex.test(path$1.basename(input));
};

/**
***REMOVED*******REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED*****any*****REMOVED***of***REMOVED***the***REMOVED***given***REMOVED***glob***REMOVED***`patterns`***REMOVED***match***REMOVED***the***REMOVED***specified***REMOVED***`string`.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***//***REMOVED***picomatch.isMatch(string,***REMOVED***patterns[,***REMOVED***options]);
***REMOVED****
***REMOVED*******REMOVED***console.log(picomatch.isMatch('a.a',***REMOVED***['b.*',***REMOVED***'*.a']));***REMOVED***//=>***REMOVED***true
***REMOVED*******REMOVED***console.log(picomatch.isMatch('a.a',***REMOVED***'b.*'));***REMOVED***//=>***REMOVED***false
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String|Array}***REMOVED***str***REMOVED***The***REMOVED***string***REMOVED***to***REMOVED***test.
***REMOVED*******REMOVED***@param***REMOVED***{String|Array}***REMOVED***patterns***REMOVED***One***REMOVED***or***REMOVED***more***REMOVED***glob***REMOVED***patterns***REMOVED***to***REMOVED***use***REMOVED***for***REMOVED***matching.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[options]***REMOVED***See***REMOVED***available***REMOVED***[options](#options).
***REMOVED*******REMOVED***@return***REMOVED***{Boolean}***REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***any***REMOVED***patterns***REMOVED***match***REMOVED***`str`
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.isMatch***REMOVED***=***REMOVED***(str,***REMOVED***patterns,***REMOVED***options)***REMOVED***=>***REMOVED***picomatch$1(patterns,***REMOVED***options)(str);

/**
***REMOVED*******REMOVED***Parse***REMOVED***a***REMOVED***glob***REMOVED***pattern***REMOVED***to***REMOVED***create***REMOVED***the***REMOVED***source***REMOVED***string***REMOVED***for***REMOVED***a***REMOVED***regular
***REMOVED*******REMOVED***expression.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***picomatch.parse(pattern[,***REMOVED***options]);
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`pattern`
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Object}***REMOVED***Returns***REMOVED***an***REMOVED***object***REMOVED***with***REMOVED***useful***REMOVED***properties***REMOVED***and***REMOVED***output***REMOVED***to***REMOVED***be***REMOVED***used***REMOVED***as***REMOVED***a***REMOVED***regex***REMOVED***source***REMOVED***string.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.parse***REMOVED***=***REMOVED***(pattern,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(Array.isArray(pattern))***REMOVED***return***REMOVED***pattern.map(p***REMOVED***=>***REMOVED***picomatch$1.parse(p,***REMOVED***options));
***REMOVED******REMOVED***return***REMOVED***parse$1(pattern,***REMOVED***{***REMOVED***...options,***REMOVED***fastpaths:***REMOVED***false***REMOVED***});
};

/**
***REMOVED*******REMOVED***Scan***REMOVED***a***REMOVED***glob***REMOVED***pattern***REMOVED***to***REMOVED***separate***REMOVED***the***REMOVED***pattern***REMOVED***into***REMOVED***segments.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***//***REMOVED***picomatch.scan(input[,***REMOVED***options]);
***REMOVED****
***REMOVED*******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***picomatch.scan('!./foo/*.js');
***REMOVED*******REMOVED***console.log(result);
***REMOVED*******REMOVED***{***REMOVED***prefix:***REMOVED***'!./',
***REMOVED*******REMOVED******REMOVED******REMOVED***input:***REMOVED***'!./foo/*.js',
***REMOVED*******REMOVED******REMOVED******REMOVED***start:***REMOVED***3,
***REMOVED*******REMOVED******REMOVED******REMOVED***base:***REMOVED***'foo',
***REMOVED*******REMOVED******REMOVED******REMOVED***glob:***REMOVED***'*.js',
***REMOVED*******REMOVED******REMOVED******REMOVED***isBrace:***REMOVED***false,
***REMOVED*******REMOVED******REMOVED******REMOVED***isBracket:***REMOVED***false,
***REMOVED*******REMOVED******REMOVED******REMOVED***isGlob:***REMOVED***true,
***REMOVED*******REMOVED******REMOVED******REMOVED***isExtglob:***REMOVED***false,
***REMOVED*******REMOVED******REMOVED******REMOVED***isGlobstar:***REMOVED***false,
***REMOVED*******REMOVED******REMOVED******REMOVED***negated:***REMOVED***true***REMOVED***}
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`input`***REMOVED***Glob***REMOVED***pattern***REMOVED***to***REMOVED***scan.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Object}***REMOVED***Returns***REMOVED***an***REMOVED***object***REMOVED***with
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.scan***REMOVED***=***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***scan(input,***REMOVED***options);

/**
***REMOVED*******REMOVED***Compile***REMOVED***a***REMOVED***regular***REMOVED***expression***REMOVED***from***REMOVED***the***REMOVED***`state`***REMOVED***object***REMOVED***returned***REMOVED***by***REMOVED***the
***REMOVED*******REMOVED***[parse()](#parse)***REMOVED***method.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`state`
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***`returnOutput`***REMOVED***Intended***REMOVED***for***REMOVED***implementors,***REMOVED***this***REMOVED***argument***REMOVED***allows***REMOVED***you***REMOVED***to***REMOVED***return***REMOVED***the***REMOVED***raw***REMOVED***output***REMOVED***from***REMOVED***the***REMOVED***parser.
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***`returnState`***REMOVED***Adds***REMOVED***the***REMOVED***state***REMOVED***to***REMOVED***a***REMOVED***`state`***REMOVED***property***REMOVED***on***REMOVED***the***REMOVED***returned***REMOVED***regex.***REMOVED***Useful***REMOVED***for***REMOVED***implementors***REMOVED***and***REMOVED***debugging.
***REMOVED*******REMOVED***@return***REMOVED***{RegExp}
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.compileRe***REMOVED***=***REMOVED***(state,***REMOVED***options,***REMOVED***returnOutput***REMOVED***=***REMOVED***false,***REMOVED***returnState***REMOVED***=***REMOVED***false)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(returnOutput***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***state.output;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***prepend***REMOVED***=***REMOVED***opts.contains***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'^';
***REMOVED******REMOVED***const***REMOVED***append***REMOVED***=***REMOVED***opts.contains***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'$';

***REMOVED******REMOVED***let***REMOVED***source***REMOVED***=***REMOVED***`${prepend}(?:${state.output})${append}`;
***REMOVED******REMOVED***if***REMOVED***(state***REMOVED***&&***REMOVED***state.negated***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***source***REMOVED***=***REMOVED***`^(?!${source}).*$`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***regex***REMOVED***=***REMOVED***picomatch$1.toRegex(source,***REMOVED***options);
***REMOVED******REMOVED***if***REMOVED***(returnState***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***regex.state***REMOVED***=***REMOVED***state;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***regex;
};

/**
***REMOVED*******REMOVED***Create***REMOVED***a***REMOVED***regular***REMOVED***expression***REMOVED***from***REMOVED***a***REMOVED***parsed***REMOVED***glob***REMOVED***pattern.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***picomatch.parse('*.js');
***REMOVED*******REMOVED***//***REMOVED***picomatch.compileRe(state[,***REMOVED***options]);
***REMOVED****
***REMOVED*******REMOVED***console.log(picomatch.compileRe(state));
***REMOVED*******REMOVED***//=>***REMOVED***/^(?:(?!\.)(?=.)[^/]*?\.js)$/
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`state`***REMOVED***The***REMOVED***object***REMOVED***returned***REMOVED***from***REMOVED***the***REMOVED***`.parse`***REMOVED***method.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***`returnOutput`***REMOVED***Implementors***REMOVED***may***REMOVED***use***REMOVED***this***REMOVED***argument***REMOVED***to***REMOVED***return***REMOVED***the***REMOVED***compiled***REMOVED***output,***REMOVED***instead***REMOVED***of***REMOVED***a***REMOVED***regular***REMOVED***expression.***REMOVED***This***REMOVED***is***REMOVED***not***REMOVED***exposed***REMOVED***on***REMOVED***the***REMOVED***options***REMOVED***to***REMOVED***prevent***REMOVED***end-users***REMOVED***from***REMOVED***mutating***REMOVED***the***REMOVED***result.
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***`returnState`***REMOVED***Implementors***REMOVED***may***REMOVED***use***REMOVED***this***REMOVED***argument***REMOVED***to***REMOVED***return***REMOVED***the***REMOVED***state***REMOVED***from***REMOVED***the***REMOVED***parsed***REMOVED***glob***REMOVED***with***REMOVED***the***REMOVED***returned***REMOVED***regular***REMOVED***expression.
***REMOVED*******REMOVED***@return***REMOVED***{RegExp}***REMOVED***Returns***REMOVED***a***REMOVED***regex***REMOVED***created***REMOVED***from***REMOVED***the***REMOVED***given***REMOVED***pattern.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.makeRe***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{},***REMOVED***returnOutput***REMOVED***=***REMOVED***false,***REMOVED***returnState***REMOVED***=***REMOVED***false)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!input***REMOVED***||***REMOVED***typeof***REMOVED***input***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('Expected***REMOVED***a***REMOVED***non-empty***REMOVED***string');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***parsed***REMOVED***=***REMOVED***{***REMOVED***negated:***REMOVED***false,***REMOVED***fastpaths:***REMOVED***true***REMOVED***};

***REMOVED******REMOVED***if***REMOVED***(options.fastpaths***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***(input[0]***REMOVED***===***REMOVED***'.'***REMOVED***||***REMOVED***input[0]***REMOVED***===***REMOVED***'*'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***parsed.output***REMOVED***=***REMOVED***parse$1.fastpaths(input,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(!parsed.output)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***parsed***REMOVED***=***REMOVED***parse$1(input,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***picomatch$1.compileRe(parsed,***REMOVED***options,***REMOVED***returnOutput,***REMOVED***returnState);
};

/**
***REMOVED*******REMOVED***Create***REMOVED***a***REMOVED***regular***REMOVED***expression***REMOVED***from***REMOVED***the***REMOVED***given***REMOVED***regex***REMOVED***source***REMOVED***string.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***picomatch***REMOVED***=***REMOVED***require('picomatch');
***REMOVED*******REMOVED***//***REMOVED***picomatch.toRegex(source[,***REMOVED***options]);
***REMOVED****
***REMOVED*******REMOVED***const***REMOVED***{***REMOVED***output***REMOVED***}***REMOVED***=***REMOVED***picomatch.parse('*.js');
***REMOVED*******REMOVED***console.log(picomatch.toRegex(output));
***REMOVED*******REMOVED***//=>***REMOVED***/^(?:(?!\.)(?=.)[^/]*?\.js)$/
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`source`***REMOVED***Regular***REMOVED***expression***REMOVED***source***REMOVED***string.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{RegExp}
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

picomatch$1.toRegex***REMOVED***=***REMOVED***(source,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***new***REMOVED***RegExp(source,***REMOVED***opts.flags***REMOVED***||***REMOVED***(opts.nocase***REMOVED***?***REMOVED***'i'***REMOVED***:***REMOVED***''));
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.debug***REMOVED***===***REMOVED***true)***REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***/$^/;
***REMOVED******REMOVED***}
};

/**
***REMOVED*******REMOVED***Picomatch***REMOVED***constants.
***REMOVED*******REMOVED***@return***REMOVED***{Object}
***REMOVED****/

picomatch$1.constants***REMOVED***=***REMOVED***constants;

/**
***REMOVED*******REMOVED***Expose***REMOVED***"picomatch"
***REMOVED****/

var***REMOVED***picomatch_1***REMOVED***=***REMOVED***picomatch$1;

var***REMOVED***picomatch***REMOVED***=***REMOVED***picomatch_1;

var***REMOVED***pm***REMOVED***=***REMOVED***/*@__PURE__*/getDefaultExportFromCjs(picomatch);

//***REMOVED***Helper***REMOVED***since***REMOVED***Typescript***REMOVED***can't***REMOVED***detect***REMOVED***readonly***REMOVED***arrays***REMOVED***with***REMOVED***Array.isArray
function***REMOVED***isArray(arg)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Array.isArray(arg);
}
function***REMOVED***ensureArray(thing)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isArray(thing))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***thing;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(thing***REMOVED***==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[thing];
}

const***REMOVED***normalizePath$1***REMOVED***=***REMOVED***function***REMOVED***normalizePath(filename)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***filename.split(require$$0$1.win32.sep).join(require$$0$1.posix.sep);
};

function***REMOVED***getMatcherString(id,***REMOVED***resolutionBase)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(resolutionBase***REMOVED***===***REMOVED***false***REMOVED***||***REMOVED***require$$0$1.isAbsolute(id)***REMOVED***||***REMOVED***id.startsWith('*'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***normalizePath$1(id);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***resolve('')***REMOVED***is***REMOVED***valid***REMOVED***and***REMOVED***will***REMOVED***default***REMOVED***to***REMOVED***process.cwd()
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***basePath***REMOVED***=***REMOVED***normalizePath$1(require$$0$1.resolve(resolutionBase***REMOVED***||***REMOVED***''))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***escape***REMOVED***all***REMOVED***possible***REMOVED***(posix***REMOVED***+***REMOVED***win)***REMOVED***path***REMOVED***characters***REMOVED***that***REMOVED***might***REMOVED***interfere***REMOVED***with***REMOVED***regex
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.replace(/[-^$*+?.()|[\]{}]/g,***REMOVED***'\\$&');
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Note***REMOVED***that***REMOVED***we***REMOVED***use***REMOVED***posix.join***REMOVED***because:
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***1.***REMOVED***the***REMOVED***basePath***REMOVED***has***REMOVED***been***REMOVED***normalized***REMOVED***to***REMOVED***use***REMOVED***/
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***2.***REMOVED***the***REMOVED***incoming***REMOVED***glob***REMOVED***(id)***REMOVED***matcher,***REMOVED***also***REMOVED***uses***REMOVED***/
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***otherwise***REMOVED***Node***REMOVED***will***REMOVED***force***REMOVED***backslash***REMOVED***(\)***REMOVED***on***REMOVED***windows
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***require$$0$1.posix.join(basePath,***REMOVED***normalizePath$1(id));
}
const***REMOVED***createFilter$1***REMOVED***=***REMOVED***function***REMOVED***createFilter(include,***REMOVED***exclude,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***resolutionBase***REMOVED***=***REMOVED***options***REMOVED***&&***REMOVED***options.resolve;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***getMatcher***REMOVED***=***REMOVED***(id)***REMOVED***=>***REMOVED***id***REMOVED***instanceof***REMOVED***RegExp
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***id
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***test:***REMOVED***(what)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***this***REMOVED***refactor***REMOVED***is***REMOVED***a***REMOVED***tad***REMOVED***overly***REMOVED***verbose***REMOVED***but***REMOVED***makes***REMOVED***for***REMOVED***easy***REMOVED***debugging
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pattern***REMOVED***=***REMOVED***getMatcherString(id,***REMOVED***resolutionBase);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fn***REMOVED***=***REMOVED***pm(pattern,***REMOVED***{***REMOVED***dot:***REMOVED***true***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***fn(what);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***includeMatchers***REMOVED***=***REMOVED***ensureArray(include).map(getMatcher);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***excludeMatchers***REMOVED***=***REMOVED***ensureArray(exclude).map(getMatcher);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***function***REMOVED***result(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***id***REMOVED***!==***REMOVED***'string')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(/\0/.test(id))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pathId***REMOVED***=***REMOVED***normalizePath$1(id);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***excludeMatchers.length;***REMOVED***++i)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***matcher***REMOVED***=***REMOVED***excludeMatchers[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(matcher.test(pathId))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***includeMatchers.length;***REMOVED***++i)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***matcher***REMOVED***=***REMOVED***includeMatchers[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(matcher.test(pathId))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!includeMatchers.length;
***REMOVED******REMOVED******REMOVED******REMOVED***};
};

const***REMOVED***reservedWords***REMOVED***=***REMOVED***'break***REMOVED***case***REMOVED***class***REMOVED***catch***REMOVED***const***REMOVED***continue***REMOVED***debugger***REMOVED***default***REMOVED***delete***REMOVED***do***REMOVED***else***REMOVED***export***REMOVED***extends***REMOVED***finally***REMOVED***for***REMOVED***function***REMOVED***if***REMOVED***import***REMOVED***in***REMOVED***instanceof***REMOVED***let***REMOVED***new***REMOVED***return***REMOVED***super***REMOVED***switch***REMOVED***this***REMOVED***throw***REMOVED***try***REMOVED***typeof***REMOVED***var***REMOVED***void***REMOVED***while***REMOVED***with***REMOVED***yield***REMOVED***enum***REMOVED***await***REMOVED***implements***REMOVED***package***REMOVED***protected***REMOVED***static***REMOVED***interface***REMOVED***private***REMOVED***public';
const***REMOVED***builtins$1***REMOVED***=***REMOVED***'arguments***REMOVED***Infinity***REMOVED***NaN***REMOVED***undefined***REMOVED***null***REMOVED***true***REMOVED***false***REMOVED***eval***REMOVED***uneval***REMOVED***isFinite***REMOVED***isNaN***REMOVED***parseFloat***REMOVED***parseInt***REMOVED***decodeURI***REMOVED***decodeURIComponent***REMOVED***encodeURI***REMOVED***encodeURIComponent***REMOVED***escape***REMOVED***unescape***REMOVED***Object***REMOVED***Function***REMOVED***Boolean***REMOVED***Symbol***REMOVED***Error***REMOVED***EvalError***REMOVED***InternalError***REMOVED***RangeError***REMOVED***ReferenceError***REMOVED***SyntaxError***REMOVED***TypeError***REMOVED***URIError***REMOVED***Number***REMOVED***Math***REMOVED***Date***REMOVED***String***REMOVED***RegExp***REMOVED***Array***REMOVED***Int8Array***REMOVED***Uint8Array***REMOVED***Uint8ClampedArray***REMOVED***Int16Array***REMOVED***Uint16Array***REMOVED***Int32Array***REMOVED***Uint32Array***REMOVED***Float32Array***REMOVED***Float64Array***REMOVED***Map***REMOVED***Set***REMOVED***WeakMap***REMOVED***WeakSet***REMOVED***SIMD***REMOVED***ArrayBuffer***REMOVED***DataView***REMOVED***JSON***REMOVED***Promise***REMOVED***Generator***REMOVED***GeneratorFunction***REMOVED***Reflect***REMOVED***Proxy***REMOVED***Intl';
const***REMOVED***forbiddenIdentifiers***REMOVED***=***REMOVED***new***REMOVED***Set(`${reservedWords}***REMOVED***${builtins$1}`.split('***REMOVED***'));
forbiddenIdentifiers.add('');

if***REMOVED***(process.versions.pnp)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node_module.createRequire((typeof***REMOVED***document***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***require('u'***REMOVED***+***REMOVED***'rl').pathToFileURL(__filename).href***REMOVED***:***REMOVED***(document.currentScript***REMOVED***&&***REMOVED***document.currentScript.src***REMOVED***||***REMOVED***new***REMOVED***URL('node-cjs/publicUtils.cjs',***REMOVED***document.baseURI).href)))('pnpapi');
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***catch***REMOVED***{***REMOVED***}
}

const***REMOVED***createFilter***REMOVED***=***REMOVED***createFilter$1;
const***REMOVED***windowsSlashRE***REMOVED***=***REMOVED***/\\/g;
function***REMOVED***slash(p)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***p.replace(windowsSlashRE,***REMOVED***'/');
}
//TODO:***REMOVED***revisit***REMOVED***later***REMOVED***to***REMOVED***see***REMOVED***if***REMOVED***the***REMOVED***edge***REMOVED***case***REMOVED***that***REMOVED***"compiling***REMOVED***using***REMOVED***node***REMOVED***v12***REMOVED***code***REMOVED***to***REMOVED***be***REMOVED***run***REMOVED***in***REMOVED***node***REMOVED***v16***REMOVED***in***REMOVED***the***REMOVED***server"***REMOVED***is***REMOVED***what***REMOVED***we***REMOVED***intend***REMOVED***to***REMOVED***support.
const***REMOVED***builtins***REMOVED***=***REMOVED***new***REMOVED***Set([
***REMOVED******REMOVED******REMOVED******REMOVED***...node_module.builtinModules,
***REMOVED******REMOVED******REMOVED******REMOVED***'assert/strict',
***REMOVED******REMOVED******REMOVED******REMOVED***'diagnostics_channel',
***REMOVED******REMOVED******REMOVED******REMOVED***'dns/promises',
***REMOVED******REMOVED******REMOVED******REMOVED***'fs/promises',
***REMOVED******REMOVED******REMOVED******REMOVED***'path/posix',
***REMOVED******REMOVED******REMOVED******REMOVED***'path/win32',
***REMOVED******REMOVED******REMOVED******REMOVED***'readline/promises',
***REMOVED******REMOVED******REMOVED******REMOVED***'stream/consumers',
***REMOVED******REMOVED******REMOVED******REMOVED***'stream/promises',
***REMOVED******REMOVED******REMOVED******REMOVED***'stream/web',
***REMOVED******REMOVED******REMOVED******REMOVED***'timers/promises',
***REMOVED******REMOVED******REMOVED******REMOVED***'util/types',
***REMOVED******REMOVED******REMOVED******REMOVED***'wasi',
]);
//***REMOVED***Some***REMOVED***runtimes***REMOVED***like***REMOVED***Bun***REMOVED***injects***REMOVED***namespaced***REMOVED***modules***REMOVED***here,***REMOVED***which***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***node***REMOVED***builtin
[...builtins].filter((id)***REMOVED***=>***REMOVED***!id.includes(':'));
function***REMOVED***isInNodeModules(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***id.includes('node_modules');
}
//***REMOVED***TODO:***REMOVED***use***REMOVED***import()
const***REMOVED***_require***REMOVED***=***REMOVED***node_module.createRequire((typeof***REMOVED***document***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***require('u'***REMOVED***+***REMOVED***'rl').pathToFileURL(__filename).href***REMOVED***:***REMOVED***(document.currentScript***REMOVED***&&***REMOVED***document.currentScript.src***REMOVED***||***REMOVED***new***REMOVED***URL('node-cjs/publicUtils.cjs',***REMOVED***document.baseURI).href)));
//***REMOVED***set***REMOVED***in***REMOVED***bin/vite.js
const***REMOVED***filter***REMOVED***=***REMOVED***process.env.VITE_DEBUG_FILTER;
const***REMOVED***DEBUG***REMOVED***=***REMOVED***process.env.DEBUG;
function***REMOVED***createDebugger(namespace,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***log***REMOVED***=***REMOVED***debug$1(namespace);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***onlyWhenFocused***REMOVED***}***REMOVED***=***REMOVED***options;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***enabled***REMOVED***=***REMOVED***log.enabled;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(enabled***REMOVED***&&***REMOVED***onlyWhenFocused)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ns***REMOVED***=***REMOVED***typeof***REMOVED***onlyWhenFocused***REMOVED***===***REMOVED***'string'***REMOVED***?***REMOVED***onlyWhenFocused***REMOVED***:***REMOVED***namespace;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***enabled***REMOVED***=***REMOVED***!!DEBUG?.includes(ns);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(enabled)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(...args)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!filter***REMOVED***||***REMOVED***args.some((a)***REMOVED***=>***REMOVED***a?.includes?.(filter)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***log(...args);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
function***REMOVED***testCaseInsensitiveFS()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!CLIENT_ENTRY.endsWith('client.mjs'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`cannot***REMOVED***test***REMOVED***case***REMOVED***insensitive***REMOVED***FS,***REMOVED***CLIENT_ENTRY***REMOVED***const***REMOVED***doesn't***REMOVED***contain***REMOVED***client.mjs`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs$1.existsSync(CLIENT_ENTRY))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('cannot***REMOVED***test***REMOVED***case***REMOVED***insensitive***REMOVED***FS,***REMOVED***CLIENT_ENTRY***REMOVED***does***REMOVED***not***REMOVED***point***REMOVED***to***REMOVED***an***REMOVED***existing***REMOVED***file:***REMOVED***'***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***CLIENT_ENTRY);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fs$1.existsSync(CLIENT_ENTRY.replace('client.mjs',***REMOVED***'cLiEnT.mjs'));
}
const***REMOVED***isCaseInsensitiveFS***REMOVED***=***REMOVED***testCaseInsensitiveFS();
const***REMOVED***isWindows***REMOVED***=***REMOVED***os$1.platform()***REMOVED***===***REMOVED***'win32';
const***REMOVED***VOLUME_RE***REMOVED***=***REMOVED***/^[A-Z]:/i;
function***REMOVED***normalizePath(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path$3.posix.normalize(isWindows***REMOVED***?***REMOVED***slash(id)***REMOVED***:***REMOVED***id);
}
function***REMOVED***fsPathFromId(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fsPath***REMOVED***=***REMOVED***normalizePath(id.startsWith(FS_PREFIX)***REMOVED***?***REMOVED***id.slice(FS_PREFIX.length)***REMOVED***:***REMOVED***id);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fsPath[0]***REMOVED***===***REMOVED***'/'***REMOVED***||***REMOVED***fsPath.match(VOLUME_RE)***REMOVED***?***REMOVED***fsPath***REMOVED***:***REMOVED***`/${fsPath}`;
}
function***REMOVED***fsPathFromUrl(url)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fsPathFromId(cleanUrl(url));
}
function***REMOVED***withTrailingSlash(path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path[path.length***REMOVED***-***REMOVED***1]***REMOVED***!==***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${path}/`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path;
}
/**
***REMOVED*******REMOVED***Check***REMOVED***if***REMOVED***dir***REMOVED***is***REMOVED***a***REMOVED***parent***REMOVED***of***REMOVED***file
***REMOVED****
***REMOVED*******REMOVED***Warning:***REMOVED***parameters***REMOVED***are***REMOVED***not***REMOVED***validated,***REMOVED***only***REMOVED***works***REMOVED***with***REMOVED***normalized***REMOVED***absolute***REMOVED***paths
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***dir***REMOVED***-***REMOVED***normalized***REMOVED***absolute***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***file***REMOVED***-***REMOVED***normalized***REMOVED***absolute***REMOVED***path
***REMOVED*******REMOVED***@returns***REMOVED***true***REMOVED***if***REMOVED***dir***REMOVED***is***REMOVED***a***REMOVED***parent***REMOVED***of***REMOVED***file
***REMOVED****/
function***REMOVED***isParentDirectory(dir,***REMOVED***file)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***dir***REMOVED***=***REMOVED***withTrailingSlash(dir);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(file.startsWith(dir)***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(isCaseInsensitiveFS***REMOVED***&&***REMOVED***file.toLowerCase().startsWith(dir.toLowerCase())));
}
/**
***REMOVED*******REMOVED***Check***REMOVED***if***REMOVED***2***REMOVED***file***REMOVED***name***REMOVED***are***REMOVED***identical
***REMOVED****
***REMOVED*******REMOVED***Warning:***REMOVED***parameters***REMOVED***are***REMOVED***not***REMOVED***validated,***REMOVED***only***REMOVED***works***REMOVED***with***REMOVED***normalized***REMOVED***absolute***REMOVED***paths
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***file1***REMOVED***-***REMOVED***normalized***REMOVED***absolute***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***file2***REMOVED***-***REMOVED***normalized***REMOVED***absolute***REMOVED***path
***REMOVED*******REMOVED***@returns***REMOVED***true***REMOVED***if***REMOVED***both***REMOVED***files***REMOVED***url***REMOVED***are***REMOVED***identical
***REMOVED****/
function***REMOVED***isSameFileUri(file1,***REMOVED***file2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(file1***REMOVED***===***REMOVED***file2***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(isCaseInsensitiveFS***REMOVED***&&***REMOVED***file1.toLowerCase()***REMOVED***===***REMOVED***file2.toLowerCase()));
}
const***REMOVED***postfixRE***REMOVED***=***REMOVED***/[?#].*$/s;
function***REMOVED***cleanUrl(url)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url.replace(postfixRE,***REMOVED***'');
}
function***REMOVED***isObject(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.prototype.toString.call(value)***REMOVED***===***REMOVED***'[object***REMOVED***Object]';
}
function***REMOVED***tryStatSync(file)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fs$1.statSync(file,***REMOVED***{***REMOVED***throwIfNoEntry:***REMOVED***false***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Ignore***REMOVED***errors
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
function***REMOVED***isFileReadable(filename)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***"throwIfNoEntry"***REMOVED***is***REMOVED***a***REMOVED***performance***REMOVED***optimization***REMOVED***for***REMOVED***cases***REMOVED***where***REMOVED***the***REMOVED***file***REMOVED***does***REMOVED***not***REMOVED***exist
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs$1.statSync(filename,***REMOVED***{***REMOVED***throwIfNoEntry:***REMOVED***false***REMOVED***}))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Check***REMOVED***if***REMOVED***current***REMOVED***process***REMOVED***has***REMOVED***read***REMOVED***permission***REMOVED***to***REMOVED***the***REMOVED***file
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs$1.accessSync(filename,***REMOVED***fs$1.constants.R_OK);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
function***REMOVED***arraify(target)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Array.isArray(target)***REMOVED***?***REMOVED***target***REMOVED***:***REMOVED***[target];
}
//***REMOVED***@ts-expect-error***REMOVED***jest***REMOVED***only***REMOVED***exists***REMOVED***when***REMOVED***running***REMOVED***Jest
const***REMOVED***usingDynamicImport***REMOVED***=***REMOVED***typeof***REMOVED***jest***REMOVED***===***REMOVED***'undefined';
/**
***REMOVED*******REMOVED***Dynamically***REMOVED***import***REMOVED***files.***REMOVED***It***REMOVED***will***REMOVED***make***REMOVED***sure***REMOVED***it's***REMOVED***not***REMOVED***being***REMOVED***compiled***REMOVED***away***REMOVED***by***REMOVED***TS/Rollup.
***REMOVED****
***REMOVED*******REMOVED***As***REMOVED***a***REMOVED***temporary***REMOVED***workaround***REMOVED***for***REMOVED***Jest's***REMOVED***lack***REMOVED***of***REMOVED***stable***REMOVED***ESM***REMOVED***support,***REMOVED***we***REMOVED***fallback***REMOVED***to***REMOVED***require
***REMOVED*******REMOVED***if***REMOVED***we're***REMOVED***in***REMOVED***a***REMOVED***Jest***REMOVED***environment.
***REMOVED*******REMOVED***See***REMOVED***https://github.com/vitejs/vite/pull/5197#issuecomment-938054077
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***file***REMOVED***File***REMOVED***path***REMOVED***to***REMOVED***import.
***REMOVED****/
usingDynamicImport
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***new***REMOVED***Function('file',***REMOVED***'return***REMOVED***import(file)')
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***_require;
path$3.dirname(node_url.fileURLToPath((typeof***REMOVED***document***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***require('u'***REMOVED***+***REMOVED***'rl').pathToFileURL(__filename).href***REMOVED***:***REMOVED***(document.currentScript***REMOVED***&&***REMOVED***document.currentScript.src***REMOVED***||***REMOVED***new***REMOVED***URL('node-cjs/publicUtils.cjs',***REMOVED***document.baseURI).href))));
function***REMOVED***mergeConfigRecursively(defaults,***REMOVED***overrides,***REMOVED***rootPath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***merged***REMOVED***=***REMOVED***{***REMOVED***...defaults***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***key***REMOVED***in***REMOVED***overrides)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***overrides[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***existing***REMOVED***=***REMOVED***merged[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(existing***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***fields***REMOVED***that***REMOVED***require***REMOVED***special***REMOVED***handling
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***'alias'***REMOVED***&&***REMOVED***(rootPath***REMOVED***===***REMOVED***'resolve'***REMOVED***||***REMOVED***rootPath***REMOVED***===***REMOVED***''))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***mergeAlias(existing,***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***'assetsInclude'***REMOVED***&&***REMOVED***rootPath***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***[].concat(existing,***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***'noExternal'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rootPath***REMOVED***===***REMOVED***'ssr'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(existing***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***true))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Array.isArray(existing)***REMOVED***||***REMOVED***Array.isArray(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***[...arraify(existing***REMOVED***??***REMOVED***[]),***REMOVED***...arraify(value***REMOVED***??***REMOVED***[])];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObject(existing)***REMOVED***&&***REMOVED***isObject(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***mergeConfigRecursively(existing,***REMOVED***value,***REMOVED***rootPath***REMOVED***?***REMOVED***`${rootPath}.${key}`***REMOVED***:***REMOVED***key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[key]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***merged;
}
function***REMOVED***mergeConfig(defaults,***REMOVED***overrides,***REMOVED***isRoot***REMOVED***=***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***defaults***REMOVED***===***REMOVED***'function'***REMOVED***||***REMOVED***typeof***REMOVED***overrides***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Cannot***REMOVED***merge***REMOVED***config***REMOVED***in***REMOVED***form***REMOVED***of***REMOVED***callback`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mergeConfigRecursively(defaults,***REMOVED***overrides,***REMOVED***isRoot***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'.');
}
function***REMOVED***mergeAlias(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!a)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***b;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!b)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***a;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObject(a)***REMOVED***&&***REMOVED***isObject(b))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***...a,***REMOVED***...b***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***the***REMOVED***order***REMOVED***is***REMOVED***flipped***REMOVED***because***REMOVED***the***REMOVED***alias***REMOVED***is***REMOVED***resolved***REMOVED***from***REMOVED***top-down,
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***where***REMOVED***the***REMOVED***later***REMOVED***should***REMOVED***have***REMOVED***higher***REMOVED***priority
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[...normalizeAlias(b),***REMOVED***...normalizeAlias(a)];
}
function***REMOVED***normalizeAlias(o***REMOVED***=***REMOVED***[])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Array.isArray(o)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***o.map(normalizeSingleAlias)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***Object.keys(o).map((find)***REMOVED***=>***REMOVED***normalizeSingleAlias({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***find,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***replacement:***REMOVED***o[find],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}));
}
//***REMOVED***https://github.com/vitejs/vite/issues/1363
//***REMOVED***work***REMOVED***around***REMOVED***https://github.com/rollup/plugins/issues/759
function***REMOVED***normalizeSingleAlias({***REMOVED***find,***REMOVED***replacement,***REMOVED***customResolver,***REMOVED***})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***find***REMOVED***===***REMOVED***'string'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***find[find.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'/'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***replacement[replacement.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***find***REMOVED***=***REMOVED***find.slice(0,***REMOVED***find.length***REMOVED***-***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***replacement***REMOVED***=***REMOVED***replacement.slice(0,***REMOVED***replacement.length***REMOVED***-***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***alias***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***find,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***replacement,
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(customResolver)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***alias.customResolver***REMOVED***=***REMOVED***customResolver;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***alias;
}

//***REMOVED***This***REMOVED***file***REMOVED***will***REMOVED***be***REMOVED***built***REMOVED***for***REMOVED***both***REMOVED***ESM***REMOVED***and***REMOVED***CJS.***REMOVED***Avoid***REMOVED***relying***REMOVED***on***REMOVED***other***REMOVED***modules***REMOVED***as***REMOVED***possible.
//***REMOVED***copy***REMOVED***from***REMOVED***constants.ts
const***REMOVED***CSS_LANGS_RE***REMOVED***=***REMOVED***
//***REMOVED***eslint-disable-next-line***REMOVED***regexp/no-unused-capturing-group
/\.(css|less|sass|scss|styl|stylus|pcss|postcss|sss)(?:$|\?)/;
const***REMOVED***isCSSRequest***REMOVED***=***REMOVED***(request)***REMOVED***=>***REMOVED***CSS_LANGS_RE.test(request);
//***REMOVED***Use***REMOVED***splitVendorChunkPlugin()***REMOVED***to***REMOVED***get***REMOVED***the***REMOVED***same***REMOVED***manualChunks***REMOVED***strategy***REMOVED***as***REMOVED***Vite***REMOVED***2.7
//***REMOVED***We***REMOVED***don't***REMOVED***recommend***REMOVED***using***REMOVED***this***REMOVED***strategy***REMOVED***as***REMOVED***a***REMOVED***general***REMOVED***solution***REMOVED***moving***REMOVED***forward
//***REMOVED***splitVendorChunk***REMOVED***is***REMOVED***a***REMOVED***simple***REMOVED***index/vendor***REMOVED***strategy***REMOVED***that***REMOVED***was***REMOVED***used***REMOVED***in***REMOVED***Vite
//***REMOVED***until***REMOVED***v2.8.***REMOVED***It***REMOVED***is***REMOVED***exposed***REMOVED***to***REMOVED***let***REMOVED***people***REMOVED***continue***REMOVED***to***REMOVED***use***REMOVED***it***REMOVED***in***REMOVED***case***REMOVED***it***REMOVED***was
//***REMOVED***working***REMOVED***well***REMOVED***for***REMOVED***their***REMOVED***setups.
//***REMOVED***The***REMOVED***cache***REMOVED***needs***REMOVED***to***REMOVED***be***REMOVED***reset***REMOVED***on***REMOVED***buildStart***REMOVED***for***REMOVED***watch***REMOVED***mode***REMOVED***to***REMOVED***work***REMOVED***correctly
//***REMOVED***Don't***REMOVED***use***REMOVED***this***REMOVED***manualChunks***REMOVED***strategy***REMOVED***for***REMOVED***ssr,***REMOVED***lib***REMOVED***mode,***REMOVED***and***REMOVED***'umd'***REMOVED***or***REMOVED***'iife'
class***REMOVED***SplitVendorChunkCache***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.cache***REMOVED***=***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***reset()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.cache***REMOVED***=***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
function***REMOVED***splitVendorChunk(options***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cache***REMOVED***=***REMOVED***options.cache***REMOVED***??***REMOVED***new***REMOVED***SplitVendorChunkCache();
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(id,***REMOVED***{***REMOVED***getModuleInfo***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isInNodeModules(id)***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!isCSSRequest(id)***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***staticImportedByEntry(id,***REMOVED***getModuleInfo,***REMOVED***cache.cache))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'vendor';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
}
function***REMOVED***staticImportedByEntry(id,***REMOVED***getModuleInfo,***REMOVED***cache,***REMOVED***importStack***REMOVED***=***REMOVED***[])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cache.has(id))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cache.get(id);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(importStack.includes(id))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***circular***REMOVED***deps!
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache.set(id,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mod***REMOVED***=***REMOVED***getModuleInfo(id);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!mod)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache.set(id,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mod.isEntry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache.set(id,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***someImporterIs***REMOVED***=***REMOVED***mod.importers.some((importer)***REMOVED***=>***REMOVED***staticImportedByEntry(importer,***REMOVED***getModuleInfo,***REMOVED***cache,***REMOVED***importStack.concat(id)));
***REMOVED******REMOVED******REMOVED******REMOVED***cache.set(id,***REMOVED***someImporterIs);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***someImporterIs;
}
function***REMOVED***splitVendorChunkPlugin()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***caches***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***createSplitVendorChunk(output,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cache***REMOVED***=***REMOVED***new***REMOVED***SplitVendorChunkCache();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***caches.push(cache);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***build***REMOVED***=***REMOVED***config.build***REMOVED***??***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***format***REMOVED***=***REMOVED***output?.format;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!build.ssr***REMOVED***&&***REMOVED***!build.lib***REMOVED***&&***REMOVED***format***REMOVED***!==***REMOVED***'umd'***REMOVED***&&***REMOVED***format***REMOVED***!==***REMOVED***'iife')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***splitVendorChunk({***REMOVED***cache***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***name:***REMOVED***'vite:split-vendor-chunk',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config(config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***outputs***REMOVED***=***REMOVED***config?.build?.rollupOptions?.output;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(outputs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***outputs***REMOVED***=***REMOVED***Array.isArray(outputs)***REMOVED***?***REMOVED***outputs***REMOVED***:***REMOVED***[outputs];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***output***REMOVED***of***REMOVED***outputs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***viteManualChunks***REMOVED***=***REMOVED***createSplitVendorChunk(output,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(viteManualChunks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(output.manualChunks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***output.manualChunks***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***userManualChunks***REMOVED***=***REMOVED***output.manualChunks;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output.manualChunks***REMOVED***=***REMOVED***(id,***REMOVED***api)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***userManualChunks(id,***REMOVED***api)***REMOVED***??***REMOVED***viteManualChunks(id,***REMOVED***api);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***else,***REMOVED***leave***REMOVED***the***REMOVED***object***REMOVED***form***REMOVED***of***REMOVED***manualChunks***REMOVED***untouched,***REMOVED***as
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***we***REMOVED***can't***REMOVED***safely***REMOVED***replicate***REMOVED***rollup***REMOVED***handling.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-console
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.warn("(!)***REMOVED***the***REMOVED***`splitVendorChunk`***REMOVED***plugin***REMOVED***doesn't***REMOVED***have***REMOVED***any***REMOVED***effect***REMOVED***when***REMOVED***using***REMOVED***the***REMOVED***object***REMOVED***form***REMOVED***of***REMOVED***`build.rollupOptions.output.manualChunks`.***REMOVED***Consider***REMOVED***using***REMOVED***the***REMOVED***function***REMOVED***form***REMOVED***instead.");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output.manualChunks***REMOVED***=***REMOVED***viteManualChunks;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***build:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rollupOptions:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***manualChunks:***REMOVED***createSplitVendorChunk({},***REMOVED***config),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildStart()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***caches.forEach((cache)***REMOVED***=>***REMOVED***cache.reset());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***};
}

/*!
***REMOVED*******REMOVED***etag
***REMOVED*******REMOVED***Copyright(c)***REMOVED***2014-2016***REMOVED***Douglas***REMOVED***Christopher***REMOVED***Wilson
***REMOVED*******REMOVED***MIT***REMOVED***Licensed
***REMOVED****/

/**
***REMOVED*******REMOVED***Module***REMOVED***exports.
***REMOVED*******REMOVED***@public
***REMOVED****/

var***REMOVED***etag_1***REMOVED***=***REMOVED***etag;

/**
***REMOVED*******REMOVED***Module***REMOVED***dependencies.
***REMOVED*******REMOVED***@private
***REMOVED****/

var***REMOVED***crypto$1***REMOVED***=***REMOVED***require$$0$2;
var***REMOVED***Stats***REMOVED***=***REMOVED***fs$2.Stats;

/**
***REMOVED*******REMOVED***Module***REMOVED***variables.
***REMOVED*******REMOVED***@private
***REMOVED****/

var***REMOVED***toString***REMOVED***=***REMOVED***Object.prototype.toString;

/**
***REMOVED*******REMOVED***Generate***REMOVED***an***REMOVED***entity***REMOVED***tag.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Buffer|string}***REMOVED***entity
***REMOVED*******REMOVED***@return***REMOVED***{string}
***REMOVED*******REMOVED***@private
***REMOVED****/

function***REMOVED***entitytag***REMOVED***(entity)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(entity.length***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***fast-path***REMOVED***empty
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"'
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***compute***REMOVED***hash***REMOVED***of***REMOVED***entity
***REMOVED******REMOVED***var***REMOVED***hash***REMOVED***=***REMOVED***crypto$1
***REMOVED******REMOVED******REMOVED******REMOVED***.createHash('sha1')
***REMOVED******REMOVED******REMOVED******REMOVED***.update(entity,***REMOVED***'utf8')
***REMOVED******REMOVED******REMOVED******REMOVED***.digest('base64')
***REMOVED******REMOVED******REMOVED******REMOVED***.substring(0,***REMOVED***27);

***REMOVED******REMOVED***//***REMOVED***compute***REMOVED***length***REMOVED***of***REMOVED***entity
***REMOVED******REMOVED***var***REMOVED***len***REMOVED***=***REMOVED***typeof***REMOVED***entity***REMOVED***===***REMOVED***'string'
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***Buffer.byteLength(entity,***REMOVED***'utf8')
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***entity.length;

***REMOVED******REMOVED***return***REMOVED***'"'***REMOVED***+***REMOVED***len.toString(16)***REMOVED***+***REMOVED***'-'***REMOVED***+***REMOVED***hash***REMOVED***+***REMOVED***'"'
}

/**
***REMOVED*******REMOVED***Create***REMOVED***a***REMOVED***simple***REMOVED***ETag.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string|Buffer|Stats}***REMOVED***entity
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***[options]
***REMOVED*******REMOVED***@param***REMOVED***{boolean}***REMOVED***[options.weak]
***REMOVED*******REMOVED***@return***REMOVED***{String}
***REMOVED*******REMOVED***@public
***REMOVED****/

function***REMOVED***etag***REMOVED***(entity,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(entity***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('argument***REMOVED***entity***REMOVED***is***REMOVED***required')
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***support***REMOVED***fs.Stats***REMOVED***object
***REMOVED******REMOVED***var***REMOVED***isStats***REMOVED***=***REMOVED***isstats(entity);
***REMOVED******REMOVED***var***REMOVED***weak***REMOVED***=***REMOVED***options***REMOVED***&&***REMOVED***typeof***REMOVED***options.weak***REMOVED***===***REMOVED***'boolean'
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***options.weak
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***isStats;

***REMOVED******REMOVED***//***REMOVED***validate***REMOVED***argument
***REMOVED******REMOVED***if***REMOVED***(!isStats***REMOVED***&&***REMOVED***typeof***REMOVED***entity***REMOVED***!==***REMOVED***'string'***REMOVED***&&***REMOVED***!Buffer.isBuffer(entity))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('argument***REMOVED***entity***REMOVED***must***REMOVED***be***REMOVED***string,***REMOVED***Buffer,***REMOVED***or***REMOVED***fs.Stats')
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***generate***REMOVED***entity***REMOVED***tag
***REMOVED******REMOVED***var***REMOVED***tag***REMOVED***=***REMOVED***isStats
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***stattag(entity)
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***entitytag(entity);

***REMOVED******REMOVED***return***REMOVED***weak
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***'W/'***REMOVED***+***REMOVED***tag
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***tag
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***object***REMOVED***is***REMOVED***a***REMOVED***Stats***REMOVED***object.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***obj
***REMOVED*******REMOVED***@return***REMOVED***{boolean}
***REMOVED*******REMOVED***@api***REMOVED***private
***REMOVED****/

function***REMOVED***isstats***REMOVED***(obj)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***genuine***REMOVED***fs.Stats
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***Stats***REMOVED***===***REMOVED***'function'***REMOVED***&&***REMOVED***obj***REMOVED***instanceof***REMOVED***Stats)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***quack***REMOVED***quack
***REMOVED******REMOVED***return***REMOVED***obj***REMOVED***&&***REMOVED***typeof***REMOVED***obj***REMOVED***===***REMOVED***'object'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***'ctime'***REMOVED***in***REMOVED***obj***REMOVED***&&***REMOVED***toString.call(obj.ctime)***REMOVED***===***REMOVED***'[object***REMOVED***Date]'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***'mtime'***REMOVED***in***REMOVED***obj***REMOVED***&&***REMOVED***toString.call(obj.mtime)***REMOVED***===***REMOVED***'[object***REMOVED***Date]'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***'ino'***REMOVED***in***REMOVED***obj***REMOVED***&&***REMOVED***typeof***REMOVED***obj.ino***REMOVED***===***REMOVED***'number'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***'size'***REMOVED***in***REMOVED***obj***REMOVED***&&***REMOVED***typeof***REMOVED***obj.size***REMOVED***===***REMOVED***'number'
}

/**
***REMOVED*******REMOVED***Generate***REMOVED***a***REMOVED***tag***REMOVED***for***REMOVED***a***REMOVED***stat.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***stat
***REMOVED*******REMOVED***@return***REMOVED***{string}
***REMOVED*******REMOVED***@private
***REMOVED****/

function***REMOVED***stattag***REMOVED***(stat)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***mtime***REMOVED***=***REMOVED***stat.mtime.getTime().toString(16);
***REMOVED******REMOVED***var***REMOVED***size***REMOVED***=***REMOVED***stat.size.toString(16);

***REMOVED******REMOVED***return***REMOVED***'"'***REMOVED***+***REMOVED***size***REMOVED***+***REMOVED***'-'***REMOVED***+***REMOVED***mtime***REMOVED***+***REMOVED***'"'
}

var***REMOVED***getEtag***REMOVED***=***REMOVED***/*@__PURE__*/getDefaultExportFromCjs(etag_1);

const***REMOVED***debug***REMOVED***=***REMOVED***createDebugger('vite:sourcemap',***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***onlyWhenFocused:***REMOVED***true,
});
function***REMOVED***genSourceMapUrl(map)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***map***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map***REMOVED***=***REMOVED***JSON.stringify(map);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`data:application/json;base64,${Buffer.from(map).toString('base64')}`;
}
function***REMOVED***getCodeWithSourcemap(type,***REMOVED***code,***REMOVED***map)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(debug)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***+=***REMOVED***`\n/*${JSON.stringify(map,***REMOVED***null,***REMOVED***2).replace(/\*\//g,***REMOVED***'*\\/')}*/\n`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'js')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***+=***REMOVED***`\n//#***REMOVED***sourceMappingURL=${genSourceMapUrl(map)}`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'css')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***+=***REMOVED***`\n/*#***REMOVED***sourceMappingURL=${genSourceMapUrl(map)}***REMOVED****/`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***code;
}

const***REMOVED***alias***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***js:***REMOVED***'application/javascript',
***REMOVED******REMOVED******REMOVED******REMOVED***css:***REMOVED***'text/css',
***REMOVED******REMOVED******REMOVED******REMOVED***html:***REMOVED***'text/html',
***REMOVED******REMOVED******REMOVED******REMOVED***json:***REMOVED***'application/json',
};
function***REMOVED***send(req,***REMOVED***res,***REMOVED***content,***REMOVED***type,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***etag***REMOVED***=***REMOVED***getEtag(content,***REMOVED***{***REMOVED***weak:***REMOVED***true***REMOVED***}),***REMOVED***cacheControl***REMOVED***=***REMOVED***'no-cache',***REMOVED***headers,***REMOVED***map,***REMOVED***}***REMOVED***=***REMOVED***options;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(res.writableEnded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(req.headers['if-none-match']***REMOVED***===***REMOVED***etag)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res.statusCode***REMOVED***=***REMOVED***304;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res.end();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***res.setHeader('Content-Type',***REMOVED***alias[type]***REMOVED***||***REMOVED***type);
***REMOVED******REMOVED******REMOVED******REMOVED***res.setHeader('Cache-Control',***REMOVED***cacheControl);
***REMOVED******REMOVED******REMOVED******REMOVED***res.setHeader('Etag',***REMOVED***etag);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(headers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***name***REMOVED***in***REMOVED***headers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res.setHeader(name,***REMOVED***headers[name]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***inject***REMOVED***source***REMOVED***map***REMOVED***reference
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(map***REMOVED***&&***REMOVED***map.mappings)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'js'***REMOVED***||***REMOVED***type***REMOVED***===***REMOVED***'css')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***content***REMOVED***=***REMOVED***getCodeWithSourcemap(type,***REMOVED***content.toString(),***REMOVED***map);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***res.statusCode***REMOVED***=***REMOVED***200;
***REMOVED******REMOVED******REMOVED******REMOVED***res.end(content);
***REMOVED******REMOVED******REMOVED******REMOVED***return;
}

/****REMOVED***eslint***REMOVED***no-console:***REMOVED***0***REMOVED****/
const***REMOVED***LogLevels***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***silent:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***error:***REMOVED***1,
***REMOVED******REMOVED******REMOVED******REMOVED***warn:***REMOVED***2,
***REMOVED******REMOVED******REMOVED******REMOVED***info:***REMOVED***3,
};
let***REMOVED***lastType;
let***REMOVED***lastMsg;
let***REMOVED***sameCount***REMOVED***=***REMOVED***0;
function***REMOVED***clearScreen()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***repeatCount***REMOVED***=***REMOVED***process.stdout.rows***REMOVED***-***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***blank***REMOVED***=***REMOVED***repeatCount***REMOVED***>***REMOVED***0***REMOVED***?***REMOVED***'\n'.repeat(repeatCount)***REMOVED***:***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***console.log(blank);
***REMOVED******REMOVED******REMOVED******REMOVED***readline.cursorTo(process.stdout,***REMOVED***0,***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***readline.clearScreenDown(process.stdout);
}
function***REMOVED***createLogger(level***REMOVED***=***REMOVED***'info',***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.customLogger)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.customLogger;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***timeFormatter***REMOVED***=***REMOVED***new***REMOVED***Intl.DateTimeFormat(undefined,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hour:***REMOVED***'numeric',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***minute:***REMOVED***'numeric',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***second:***REMOVED***'numeric',
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***loggedErrors***REMOVED***=***REMOVED***new***REMOVED***WeakSet();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***prefix***REMOVED***=***REMOVED***'[vite]',***REMOVED***allowClearScreen***REMOVED***=***REMOVED***true***REMOVED***}***REMOVED***=***REMOVED***options;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***thresh***REMOVED***=***REMOVED***LogLevels[level];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***canClearScreen***REMOVED***=***REMOVED***allowClearScreen***REMOVED***&&***REMOVED***process.stdout.isTTY***REMOVED***&&***REMOVED***!process.env.CI;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***clear***REMOVED***=***REMOVED***canClearScreen***REMOVED***?***REMOVED***clearScreen***REMOVED***:***REMOVED***()***REMOVED***=>***REMOVED***{***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***output(type,***REMOVED***msg,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(thresh***REMOVED***>=***REMOVED***LogLevels[type])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***method***REMOVED***=***REMOVED***type***REMOVED***===***REMOVED***'info'***REMOVED***?***REMOVED***'log'***REMOVED***:***REMOVED***type;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***format***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.timestamp)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***tag***REMOVED***=***REMOVED***type***REMOVED***===***REMOVED***'info'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***colors.cyan(colors.bold(prefix))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***type***REMOVED***===***REMOVED***'warn'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***colors.yellow(colors.bold(prefix))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***colors.red(colors.bold(prefix));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${colors.dim(timeFormatter.format(new***REMOVED***Date()))}***REMOVED***${tag}***REMOVED***${msg}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***msg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loggedErrors.add(options.error);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(canClearScreen)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***lastType***REMOVED***&&***REMOVED***msg***REMOVED***===***REMOVED***lastMsg)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sameCount++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clear();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console[method](format(),***REMOVED***colors.yellow(`(x${sameCount***REMOVED***+***REMOVED***1})`));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sameCount***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastMsg***REMOVED***=***REMOVED***msg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastType***REMOVED***=***REMOVED***type;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.clear)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clear();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console[method](format());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console[method](format());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***warnedMessages***REMOVED***=***REMOVED***new***REMOVED***Set();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***logger***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hasWarned:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***info(msg,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output('info',***REMOVED***msg,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warn(msg,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.hasWarned***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output('warn',***REMOVED***msg,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warnOnce(msg,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(warnedMessages.has(msg))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.hasWarned***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output('warn',***REMOVED***msg,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warnedMessages.add(msg);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***error(msg,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.hasWarned***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output('error',***REMOVED***msg,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clearScreen(type)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(thresh***REMOVED***>=***REMOVED***LogLevels[type])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clear();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hasErrorLogged(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***loggedErrors.has(error);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***logger;
}

//***REMOVED***https://github.com/vitejs/vite/issues/2820#issuecomment-812495079
const***REMOVED***ROOT_FILES***REMOVED***=***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***'.git',
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://pnpm.io/workspaces/
***REMOVED******REMOVED******REMOVED******REMOVED***'pnpm-workspace.yaml',
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://rushjs.io/pages/advanced/config_files/
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***'rush.json',
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://nx.dev/latest/react/getting-started/nx-setup
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***'workspace.json',
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***'nx.json',
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://github.com/lerna/lerna#lernajson
***REMOVED******REMOVED******REMOVED******REMOVED***'lerna.json',
];
//***REMOVED***npm:***REMOVED***https://docs.npmjs.com/cli/v7/using-npm/workspaces#installing-workspaces
//***REMOVED***yarn:***REMOVED***https://classic.yarnpkg.com/en/docs/workspaces/#toc-how-to-use-it
function***REMOVED***hasWorkspacePackageJSON(root)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***path$3.join(root,***REMOVED***'package.json');
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isFileReadable(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***content***REMOVED***=***REMOVED***JSON.parse(fs$1.readFileSync(path,***REMOVED***'utf-8'))***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!content.workspaces;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
function***REMOVED***hasRootFile(root)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***ROOT_FILES.some((file)***REMOVED***=>***REMOVED***fs$1.existsSync(path$3.join(root,***REMOVED***file)));
}
function***REMOVED***hasPackageJSON(root)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***path$3.join(root,***REMOVED***'package.json');
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fs$1.existsSync(path);
}
/**
***REMOVED*******REMOVED***Search***REMOVED***up***REMOVED***for***REMOVED***the***REMOVED***nearest***REMOVED***`package.json`
***REMOVED****/
function***REMOVED***searchForPackageRoot(current,***REMOVED***root***REMOVED***=***REMOVED***current)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hasPackageJSON(current))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***current;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***dir***REMOVED***=***REMOVED***path$3.dirname(current);
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***reach***REMOVED***the***REMOVED***fs***REMOVED***root
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!dir***REMOVED***||***REMOVED***dir***REMOVED***===***REMOVED***current)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***root;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***searchForPackageRoot(dir,***REMOVED***root);
}
/**
***REMOVED*******REMOVED***Search***REMOVED***up***REMOVED***for***REMOVED***the***REMOVED***nearest***REMOVED***workspace***REMOVED***root
***REMOVED****/
function***REMOVED***searchForWorkspaceRoot(current,***REMOVED***root***REMOVED***=***REMOVED***searchForPackageRoot(current))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hasRootFile(current))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***current;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hasWorkspacePackageJSON(current))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***current;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***dir***REMOVED***=***REMOVED***path$3.dirname(current);
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***reach***REMOVED***the***REMOVED***fs***REMOVED***root
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!dir***REMOVED***||***REMOVED***dir***REMOVED***===***REMOVED***current)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***root;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***searchForWorkspaceRoot(dir,***REMOVED***root);
}

/**
***REMOVED*******REMOVED***Check***REMOVED***if***REMOVED***the***REMOVED***url***REMOVED***is***REMOVED***allowed***REMOVED***to***REMOVED***be***REMOVED***served,***REMOVED***via***REMOVED***the***REMOVED***`server.fs`***REMOVED***config.
***REMOVED*******REMOVED***@deprecated***REMOVED***Use***REMOVED***the***REMOVED***`isFileLoadingAllowed`***REMOVED***function***REMOVED***instead.
***REMOVED****/
function***REMOVED***isFileServingAllowed(url,***REMOVED***server)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!server.config.server.fs.strict)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***filePath***REMOVED***=***REMOVED***fsPathFromUrl(url);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***isFileLoadingAllowed(server,***REMOVED***filePath);
}
function***REMOVED***isUriInFilePath(uri,***REMOVED***filePath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***isSameFileUri(uri,***REMOVED***filePath)***REMOVED***||***REMOVED***isParentDirectory(uri,***REMOVED***filePath);
}
function***REMOVED***isFileLoadingAllowed(server,***REMOVED***filePath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***fs***REMOVED***}***REMOVED***=***REMOVED***server.config.server;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.strict)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(server._fsDenyGlob(filePath))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(server.moduleGraph.safeModulesPath.has(filePath))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(fs.allow.some((uri)***REMOVED***=>***REMOVED***isUriInFilePath(uri,***REMOVED***filePath)))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
}

var***REMOVED***main$1***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

var***REMOVED***name***REMOVED***=***REMOVED***"dotenv";
var***REMOVED***version$1***REMOVED***=***REMOVED***"16.3.1";
var***REMOVED***description***REMOVED***=***REMOVED***"Loads***REMOVED***environment***REMOVED***variables***REMOVED***from***REMOVED***.env***REMOVED***file";
var***REMOVED***main***REMOVED***=***REMOVED***"lib/main.js";
var***REMOVED***types***REMOVED***=***REMOVED***"lib/main.d.ts";
var***REMOVED***exports$1***REMOVED***=***REMOVED***{
	".":***REMOVED***{
		types:***REMOVED***"./lib/main.d.ts",
		require:***REMOVED***"./lib/main.js",
		"default":***REMOVED***"./lib/main.js"
	},
	"./config":***REMOVED***"./config.js",
	"./config.js":***REMOVED***"./config.js",
	"./lib/env-options":***REMOVED***"./lib/env-options.js",
	"./lib/env-options.js":***REMOVED***"./lib/env-options.js",
	"./lib/cli-options":***REMOVED***"./lib/cli-options.js",
	"./lib/cli-options.js":***REMOVED***"./lib/cli-options.js",
	"./package.json":***REMOVED***"./package.json"
};
var***REMOVED***scripts***REMOVED***=***REMOVED***{
	"dts-check":***REMOVED***"tsc***REMOVED***--project***REMOVED***tests/types/tsconfig.json",
	lint:***REMOVED***"standard",
	"lint-readme":***REMOVED***"standard-markdown",
	pretest:***REMOVED***"npm***REMOVED***run***REMOVED***lint***REMOVED***&&***REMOVED***npm***REMOVED***run***REMOVED***dts-check",
	test:***REMOVED***"tap***REMOVED***tests/*.js***REMOVED***--100***REMOVED***-Rspec",
	prerelease:***REMOVED***"npm***REMOVED***test",
	release:***REMOVED***"standard-version"
};
var***REMOVED***repository***REMOVED***=***REMOVED***{
	type:***REMOVED***"git",
	url:***REMOVED***"git://github.com/motdotla/dotenv.git"
};
var***REMOVED***funding***REMOVED***=***REMOVED***"https://github.com/motdotla/dotenv?sponsor=1";
var***REMOVED***keywords***REMOVED***=***REMOVED***[
	"dotenv",
	"env",
	".env",
	"environment",
	"variables",
	"config",
	"settings"
];
var***REMOVED***readmeFilename***REMOVED***=***REMOVED***"README.md";
var***REMOVED***license***REMOVED***=***REMOVED***"BSD-2-Clause";
var***REMOVED***devDependencies***REMOVED***=***REMOVED***{
	"@definitelytyped/dtslint":***REMOVED***"^0.0.133",
	"@types/node":***REMOVED***"^18.11.3",
	decache:***REMOVED***"^4.6.1",
	sinon:***REMOVED***"^14.0.1",
	standard:***REMOVED***"^17.0.0",
	"standard-markdown":***REMOVED***"^7.1.0",
	"standard-version":***REMOVED***"^9.5.0",
	tap:***REMOVED***"^16.3.0",
	tar:***REMOVED***"^6.1.11",
	typescript:***REMOVED***"^4.8.4"
};
var***REMOVED***engines***REMOVED***=***REMOVED***{
	node:***REMOVED***">=12"
};
var***REMOVED***browser***REMOVED***=***REMOVED***{
	fs:***REMOVED***false
};
var***REMOVED***require$$4***REMOVED***=***REMOVED***{
	name:***REMOVED***name,
	version:***REMOVED***version$1,
	description:***REMOVED***description,
	main:***REMOVED***main,
	types:***REMOVED***types,
	exports:***REMOVED***exports$1,
	scripts:***REMOVED***scripts,
	repository:***REMOVED***repository,
	funding:***REMOVED***funding,
	keywords:***REMOVED***keywords,
	readmeFilename:***REMOVED***readmeFilename,
	license:***REMOVED***license,
	devDependencies:***REMOVED***devDependencies,
	engines:***REMOVED***engines,
	browser:***REMOVED***browser
};

const***REMOVED***fs***REMOVED***=***REMOVED***fs$2;
const***REMOVED***path***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***os***REMOVED***=***REMOVED***require$$2;
const***REMOVED***crypto***REMOVED***=***REMOVED***require$$0$2;
const***REMOVED***packageJson***REMOVED***=***REMOVED***require$$4;

const***REMOVED***version***REMOVED***=***REMOVED***packageJson.version;

const***REMOVED***LINE***REMOVED***=***REMOVED***/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;

//***REMOVED***Parse***REMOVED***src***REMOVED***into***REMOVED***an***REMOVED***Object
function***REMOVED***parse***REMOVED***(src)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***//***REMOVED***Convert***REMOVED***buffer***REMOVED***to***REMOVED***string
***REMOVED******REMOVED***let***REMOVED***lines***REMOVED***=***REMOVED***src.toString();

***REMOVED******REMOVED***//***REMOVED***Convert***REMOVED***line***REMOVED***breaks***REMOVED***to***REMOVED***same***REMOVED***format
***REMOVED******REMOVED***lines***REMOVED***=***REMOVED***lines.replace(/\r\n?/mg,***REMOVED***'\n');

***REMOVED******REMOVED***let***REMOVED***match;
***REMOVED******REMOVED***while***REMOVED***((match***REMOVED***=***REMOVED***LINE.exec(lines))***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***match[1];

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Default***REMOVED***undefined***REMOVED***or***REMOVED***null***REMOVED***to***REMOVED***empty***REMOVED***string
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***value***REMOVED***=***REMOVED***(match[2]***REMOVED***||***REMOVED***'');

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Remove***REMOVED***whitespace
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***value.trim();

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Check***REMOVED***if***REMOVED***double***REMOVED***quoted
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***maybeQuote***REMOVED***=***REMOVED***value[0];

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Remove***REMOVED***surrounding***REMOVED***quotes
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***value.replace(/^(['"`])([\s\S]*)\1$/mg,***REMOVED***'$2');

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Expand***REMOVED***newlines***REMOVED***if***REMOVED***double***REMOVED***quoted
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(maybeQuote***REMOVED***===***REMOVED***'"')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***value.replace(/\\n/g,***REMOVED***'\n');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***value.replace(/\\r/g,***REMOVED***'\r');
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***to***REMOVED***object
***REMOVED******REMOVED******REMOVED******REMOVED***obj[key]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***obj
}

function***REMOVED***_parseVault***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***vaultPath***REMOVED***=***REMOVED***_vaultPath(options);

***REMOVED******REMOVED***//***REMOVED***Parse***REMOVED***.env.vault
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***DotenvModule.configDotenv({***REMOVED***path:***REMOVED***vaultPath***REMOVED***});
***REMOVED******REMOVED***if***REMOVED***(!result.parsed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`MISSING_DATA:***REMOVED***Cannot***REMOVED***parse***REMOVED***${vaultPath}***REMOVED***for***REMOVED***an***REMOVED***unknown***REMOVED***reason`)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***handle***REMOVED***scenario***REMOVED***for***REMOVED***comma***REMOVED***separated***REMOVED***keys***REMOVED***-***REMOVED***for***REMOVED***use***REMOVED***with***REMOVED***key***REMOVED***rotation
***REMOVED******REMOVED***//***REMOVED***example:***REMOVED***DOTENV_KEY="dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod"
***REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***_dotenvKey(options).split(',');
***REMOVED******REMOVED***const***REMOVED***length***REMOVED***=***REMOVED***keys.length;

***REMOVED******REMOVED***let***REMOVED***decrypted;
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Get***REMOVED***full***REMOVED***key
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***keys[i].trim();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Get***REMOVED***instructions***REMOVED***for***REMOVED***decrypt
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***attrs***REMOVED***=***REMOVED***_instructions(result,***REMOVED***key);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Decrypt
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decrypted***REMOVED***=***REMOVED***DotenvModule.decrypt(attrs.ciphertext,***REMOVED***attrs.key);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***last***REMOVED***key
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(i***REMOVED***+***REMOVED***1***REMOVED***>=***REMOVED***length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***error
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***try***REMOVED***next***REMOVED***key
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Parse***REMOVED***decrypted***REMOVED***.env***REMOVED***string
***REMOVED******REMOVED***return***REMOVED***DotenvModule.parse(decrypted)
}

function***REMOVED***_log***REMOVED***(message)***REMOVED***{
***REMOVED******REMOVED***console.log(`[dotenv@${version}][INFO]***REMOVED***${message}`);
}

function***REMOVED***_warn***REMOVED***(message)***REMOVED***{
***REMOVED******REMOVED***console.log(`[dotenv@${version}][WARN]***REMOVED***${message}`);
}

function***REMOVED***_debug***REMOVED***(message)***REMOVED***{
***REMOVED******REMOVED***console.log(`[dotenv@${version}][DEBUG]***REMOVED***${message}`);
}

function***REMOVED***_dotenvKey***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***prioritize***REMOVED***developer***REMOVED***directly***REMOVED***setting***REMOVED***options.DOTENV_KEY
***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.DOTENV_KEY***REMOVED***&&***REMOVED***options.DOTENV_KEY.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.DOTENV_KEY
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***secondary***REMOVED***infra***REMOVED***already***REMOVED***contains***REMOVED***a***REMOVED***DOTENV_KEY***REMOVED***environment***REMOVED***variable
***REMOVED******REMOVED***if***REMOVED***(process.env.DOTENV_KEY***REMOVED***&&***REMOVED***process.env.DOTENV_KEY.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***process.env.DOTENV_KEY
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***fallback***REMOVED***to***REMOVED***empty***REMOVED***string
***REMOVED******REMOVED***return***REMOVED***''
}

function***REMOVED***_instructions***REMOVED***(result,***REMOVED***dotenvKey)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Parse***REMOVED***DOTENV_KEY.***REMOVED***Format***REMOVED***is***REMOVED***a***REMOVED***URI
***REMOVED******REMOVED***let***REMOVED***uri;
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***uri***REMOVED***=***REMOVED***new***REMOVED***URL(dotenvKey);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error.code***REMOVED***===***REMOVED***'ERR_INVALID_URL')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('INVALID_DOTENV_KEY:***REMOVED***Wrong***REMOVED***format.***REMOVED***Must***REMOVED***be***REMOVED***in***REMOVED***valid***REMOVED***uri***REMOVED***format***REMOVED***like***REMOVED***dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***error
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Get***REMOVED***decrypt***REMOVED***key
***REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***uri.password;
***REMOVED******REMOVED***if***REMOVED***(!key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('INVALID_DOTENV_KEY:***REMOVED***Missing***REMOVED***key***REMOVED***part')
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Get***REMOVED***environment
***REMOVED******REMOVED***const***REMOVED***environment***REMOVED***=***REMOVED***uri.searchParams.get('environment');
***REMOVED******REMOVED***if***REMOVED***(!environment)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('INVALID_DOTENV_KEY:***REMOVED***Missing***REMOVED***environment***REMOVED***part')
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Get***REMOVED***ciphertext***REMOVED***payload
***REMOVED******REMOVED***const***REMOVED***environmentKey***REMOVED***=***REMOVED***`DOTENV_VAULT_${environment.toUpperCase()}`;
***REMOVED******REMOVED***const***REMOVED***ciphertext***REMOVED***=***REMOVED***result.parsed[environmentKey];***REMOVED***//***REMOVED***DOTENV_VAULT_PRODUCTION
***REMOVED******REMOVED***if***REMOVED***(!ciphertext)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`NOT_FOUND_DOTENV_ENVIRONMENT:***REMOVED***Cannot***REMOVED***locate***REMOVED***environment***REMOVED***${environmentKey}***REMOVED***in***REMOVED***your***REMOVED***.env.vault***REMOVED***file.`)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***{***REMOVED***ciphertext,***REMOVED***key***REMOVED***}
}

function***REMOVED***_vaultPath***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***dotenvPath***REMOVED***=***REMOVED***path.resolve(process.cwd(),***REMOVED***'.env');

***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.path***REMOVED***&&***REMOVED***options.path.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***dotenvPath***REMOVED***=***REMOVED***options.path;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Locate***REMOVED***.env.vault
***REMOVED******REMOVED***return***REMOVED***dotenvPath.endsWith('.vault')***REMOVED***?***REMOVED***dotenvPath***REMOVED***:***REMOVED***`${dotenvPath}.vault`
}

function***REMOVED***_resolveHome***REMOVED***(envPath)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***envPath[0]***REMOVED***===***REMOVED***'~'***REMOVED***?***REMOVED***path.join(os.homedir(),***REMOVED***envPath.slice(1))***REMOVED***:***REMOVED***envPath
}

function***REMOVED***_configVault***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED***_log('Loading***REMOVED***env***REMOVED***from***REMOVED***encrypted***REMOVED***.env.vault');

***REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***DotenvModule._parseVault(options);

***REMOVED******REMOVED***let***REMOVED***processEnv***REMOVED***=***REMOVED***process.env;
***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.processEnv***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***processEnv***REMOVED***=***REMOVED***options.processEnv;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***DotenvModule.populate(processEnv,***REMOVED***parsed,***REMOVED***options);

***REMOVED******REMOVED***return***REMOVED***{***REMOVED***parsed***REMOVED***}
}

function***REMOVED***configDotenv***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***dotenvPath***REMOVED***=***REMOVED***path.resolve(process.cwd(),***REMOVED***'.env');
***REMOVED******REMOVED***let***REMOVED***encoding***REMOVED***=***REMOVED***'utf8';
***REMOVED******REMOVED***const***REMOVED***debug***REMOVED***=***REMOVED***Boolean(options***REMOVED***&&***REMOVED***options.debug);

***REMOVED******REMOVED***if***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.path***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***dotenvPath***REMOVED***=***REMOVED***_resolveHome(options.path);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.encoding***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***encoding***REMOVED***=***REMOVED***options.encoding;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Specifying***REMOVED***an***REMOVED***encoding***REMOVED***returns***REMOVED***a***REMOVED***string***REMOVED***instead***REMOVED***of***REMOVED***a***REMOVED***buffer
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***DotenvModule.parse(fs.readFileSync(dotenvPath,***REMOVED***{***REMOVED***encoding***REMOVED***}));

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***processEnv***REMOVED***=***REMOVED***process.env;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.processEnv***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***processEnv***REMOVED***=***REMOVED***options.processEnv;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***DotenvModule.populate(processEnv,***REMOVED***parsed,***REMOVED***options);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***parsed***REMOVED***}
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(debug)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_debug(`Failed***REMOVED***to***REMOVED***load***REMOVED***${dotenvPath}***REMOVED***${e.message}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***error:***REMOVED***e***REMOVED***}
***REMOVED******REMOVED***}
}

//***REMOVED***Populates***REMOVED***process.env***REMOVED***from***REMOVED***.env***REMOVED***file
function***REMOVED***config***REMOVED***(options)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***vaultPath***REMOVED***=***REMOVED***_vaultPath(options);

***REMOVED******REMOVED***//***REMOVED***fallback***REMOVED***to***REMOVED***original***REMOVED***dotenv***REMOVED***if***REMOVED***DOTENV_KEY***REMOVED***is***REMOVED***not***REMOVED***set
***REMOVED******REMOVED***if***REMOVED***(_dotenvKey(options).length***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***DotenvModule.configDotenv(options)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***dotenvKey***REMOVED***exists***REMOVED***but***REMOVED***.env.vault***REMOVED***file***REMOVED***does***REMOVED***not***REMOVED***exist
***REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(vaultPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***_warn(`You***REMOVED***set***REMOVED***DOTENV_KEY***REMOVED***but***REMOVED***you***REMOVED***are***REMOVED***missing***REMOVED***a***REMOVED***.env.vault***REMOVED***file***REMOVED***at***REMOVED***${vaultPath}.***REMOVED***Did***REMOVED***you***REMOVED***forget***REMOVED***to***REMOVED***build***REMOVED***it?`);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***DotenvModule.configDotenv(options)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***DotenvModule._configVault(options)
}

function***REMOVED***decrypt***REMOVED***(encrypted,***REMOVED***keyStr)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***Buffer.from(keyStr.slice(-64),***REMOVED***'hex');
***REMOVED******REMOVED***let***REMOVED***ciphertext***REMOVED***=***REMOVED***Buffer.from(encrypted,***REMOVED***'base64');

***REMOVED******REMOVED***const***REMOVED***nonce***REMOVED***=***REMOVED***ciphertext.slice(0,***REMOVED***12);
***REMOVED******REMOVED***const***REMOVED***authTag***REMOVED***=***REMOVED***ciphertext.slice(-16);
***REMOVED******REMOVED***ciphertext***REMOVED***=***REMOVED***ciphertext.slice(12,***REMOVED***-16);

***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***aesgcm***REMOVED***=***REMOVED***crypto.createDecipheriv('aes-256-gcm',***REMOVED***key,***REMOVED***nonce);
***REMOVED******REMOVED******REMOVED******REMOVED***aesgcm.setAuthTag(authTag);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`${aesgcm.update(ciphertext)}${aesgcm.final()}`
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isRange***REMOVED***=***REMOVED***error***REMOVED***instanceof***REMOVED***RangeError;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***invalidKeyLength***REMOVED***=***REMOVED***error.message***REMOVED***===***REMOVED***'Invalid***REMOVED***key***REMOVED***length';
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***decryptionFailed***REMOVED***=***REMOVED***error.message***REMOVED***===***REMOVED***'Unsupported***REMOVED***state***REMOVED***or***REMOVED***unable***REMOVED***to***REMOVED***authenticate***REMOVED***data';

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isRange***REMOVED***||***REMOVED***invalidKeyLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***msg***REMOVED***=***REMOVED***'INVALID_DOTENV_KEY:***REMOVED***It***REMOVED***must***REMOVED***be***REMOVED***64***REMOVED***characters***REMOVED***long***REMOVED***(or***REMOVED***more)';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(msg)
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(decryptionFailed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***msg***REMOVED***=***REMOVED***'DECRYPTION_FAILED:***REMOVED***Please***REMOVED***check***REMOVED***your***REMOVED***DOTENV_KEY';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(msg)
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.error('Error:***REMOVED***',***REMOVED***error.code);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.error('Error:***REMOVED***',***REMOVED***error.message);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***error
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

//***REMOVED***Populate***REMOVED***process.env***REMOVED***with***REMOVED***parsed***REMOVED***values
function***REMOVED***populate***REMOVED***(processEnv,***REMOVED***parsed,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***debug***REMOVED***=***REMOVED***Boolean(options***REMOVED***&&***REMOVED***options.debug);
***REMOVED******REMOVED***const***REMOVED***override***REMOVED***=***REMOVED***Boolean(options***REMOVED***&&***REMOVED***options.override);

***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***parsed***REMOVED***!==***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('OBJECT_REQUIRED:***REMOVED***Please***REMOVED***check***REMOVED***the***REMOVED***processEnv***REMOVED***argument***REMOVED***being***REMOVED***passed***REMOVED***to***REMOVED***populate')
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Set***REMOVED***process.env
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***key***REMOVED***of***REMOVED***Object.keys(parsed))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Object.prototype.hasOwnProperty.call(processEnv,***REMOVED***key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(override***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***processEnv[key]***REMOVED***=***REMOVED***parsed[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(debug)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(override***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_debug(`"${key}"***REMOVED***is***REMOVED***already***REMOVED***defined***REMOVED***and***REMOVED***WAS***REMOVED***overwritten`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_debug(`"${key}"***REMOVED***is***REMOVED***already***REMOVED***defined***REMOVED***and***REMOVED***was***REMOVED***NOT***REMOVED***overwritten`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***processEnv[key]***REMOVED***=***REMOVED***parsed[key];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

const***REMOVED***DotenvModule***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***configDotenv,
***REMOVED******REMOVED***_configVault,
***REMOVED******REMOVED***_parseVault,
***REMOVED******REMOVED***config,
***REMOVED******REMOVED***decrypt,
***REMOVED******REMOVED***parse,
***REMOVED******REMOVED***populate
};

main$1.exports.configDotenv***REMOVED***=***REMOVED***DotenvModule.configDotenv;
main$1.exports._configVault***REMOVED***=***REMOVED***DotenvModule._configVault;
main$1.exports._parseVault***REMOVED***=***REMOVED***DotenvModule._parseVault;
main$1.exports.config***REMOVED***=***REMOVED***DotenvModule.config;
main$1.exports.decrypt***REMOVED***=***REMOVED***DotenvModule.decrypt;
var***REMOVED***parse_1***REMOVED***=***REMOVED***main$1.exports.parse***REMOVED***=***REMOVED***DotenvModule.parse;
main$1.exports.populate***REMOVED***=***REMOVED***DotenvModule.populate;

main$1.exports***REMOVED***=***REMOVED***DotenvModule;

function***REMOVED***_interpolate***REMOVED***(envValue,***REMOVED***environment,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***matches***REMOVED***=***REMOVED***envValue.match(/(.?\${*[\w]*(?::-[\w/]*)?}*)/g)***REMOVED***||***REMOVED***[];

***REMOVED******REMOVED***return***REMOVED***matches.reduce(function***REMOVED***(newEnv,***REMOVED***match,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parts***REMOVED***=***REMOVED***/(.?)\${*([\w]*(?::-[\w/]*)?)?}*/g.exec(match);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!parts***REMOVED***||***REMOVED***parts.length***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***newEnv
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prefix***REMOVED***=***REMOVED***parts[1];

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***value,***REMOVED***replacePart;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prefix***REMOVED***===***REMOVED***'\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***replacePart***REMOVED***=***REMOVED***parts[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***replacePart.replace('\\$',***REMOVED***'$');
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***PATCH:***REMOVED***compatible***REMOVED***with***REMOVED***env***REMOVED***variables***REMOVED***ended***REMOVED***with***REMOVED***unescaped***REMOVED***$
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!parts[2])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***newEnv
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keyParts***REMOVED***=***REMOVED***parts[2].split(':-');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***keyParts[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***replacePart***REMOVED***=***REMOVED***parts[0].substring(prefix.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***process.env***REMOVED***value***REMOVED***'wins'***REMOVED***over***REMOVED***.env***REMOVED***file's***REMOVED***value
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty.call(environment,***REMOVED***key)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***environment[key]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***(config.parsed[key]***REMOVED***||***REMOVED***keyParts[1]***REMOVED***||***REMOVED***'');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***value***REMOVED***is***REMOVED***found,***REMOVED***remove***REMOVED***nested***REMOVED***expansions.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(keyParts.length***REMOVED***>***REMOVED***1***REMOVED***&&***REMOVED***value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***replaceNested***REMOVED***=***REMOVED***matches[index***REMOVED***+***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***matches[index***REMOVED***+***REMOVED***1]***REMOVED***=***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newEnv***REMOVED***=***REMOVED***newEnv.replace(replaceNested,***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Resolve***REMOVED***recursive***REMOVED***interpolations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***_interpolate(value,***REMOVED***environment,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***newEnv.replace(replacePart,***REMOVED***value)
***REMOVED******REMOVED***},***REMOVED***envValue)
}

function***REMOVED***expand***REMOVED***(config)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***if***REMOVED***ignoring***REMOVED***process.env,***REMOVED***use***REMOVED***a***REMOVED***blank***REMOVED***object
***REMOVED******REMOVED***const***REMOVED***environment***REMOVED***=***REMOVED***config.ignoreProcessEnv***REMOVED***?***REMOVED***{}***REMOVED***:***REMOVED***process.env;

***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***configKey***REMOVED***in***REMOVED***config.parsed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty.call(environment,***REMOVED***configKey)***REMOVED***?***REMOVED***environment[configKey]***REMOVED***:***REMOVED***config.parsed[configKey];

***REMOVED******REMOVED******REMOVED******REMOVED***config.parsed[configKey]***REMOVED***=***REMOVED***_interpolate(value,***REMOVED***environment,***REMOVED***config);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***PATCH:***REMOVED***don't***REMOVED***write***REMOVED***to***REMOVED***process.env
***REMOVED******REMOVED***//***REMOVED***for***REMOVED***(const***REMOVED***processKey***REMOVED***in***REMOVED***config.parsed)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***environment[processKey]***REMOVED***=***REMOVED***config.parsed[processKey]
***REMOVED******REMOVED***//***REMOVED***}

***REMOVED******REMOVED***return***REMOVED***config
}

var***REMOVED***expand_1***REMOVED***=***REMOVED***expand;

function***REMOVED***loadEnv(mode,***REMOVED***envDir,***REMOVED***prefixes***REMOVED***=***REMOVED***'VITE_')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mode***REMOVED***===***REMOVED***'local')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`"local"***REMOVED***cannot***REMOVED***be***REMOVED***used***REMOVED***as***REMOVED***a***REMOVED***mode***REMOVED***name***REMOVED***because***REMOVED***it***REMOVED***conflicts***REMOVED***with***REMOVED***`***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`the***REMOVED***.local***REMOVED***postfix***REMOVED***for***REMOVED***.env***REMOVED***files.`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***prefixes***REMOVED***=***REMOVED***arraify(prefixes);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***env***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***envFiles***REMOVED***=***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*****REMOVED***default***REMOVED***file***REMOVED****/***REMOVED***`.env`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*****REMOVED***local***REMOVED***file***REMOVED****/***REMOVED***`.env.local`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*****REMOVED***mode***REMOVED***file***REMOVED****/***REMOVED***`.env.${mode}`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*****REMOVED***mode***REMOVED***local***REMOVED***file***REMOVED****/***REMOVED***`.env.${mode}.local`,
***REMOVED******REMOVED******REMOVED******REMOVED***];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***Object.fromEntries(envFiles.flatMap((file)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***filePath***REMOVED***=***REMOVED***path$3.join(envDir,***REMOVED***file);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!tryStatSync(filePath)?.isFile())
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.entries(parse_1(fs$1.readFileSync(filePath)));
***REMOVED******REMOVED******REMOVED******REMOVED***}));
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***test***REMOVED***NODE_ENV***REMOVED***override***REMOVED***before***REMOVED***expand***REMOVED***as***REMOVED***otherwise***REMOVED***process.env.NODE_ENV***REMOVED***would***REMOVED***override***REMOVED***this
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parsed.NODE_ENV***REMOVED***&&***REMOVED***process.env.VITE_USER_NODE_ENV***REMOVED***===***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.env.VITE_USER_NODE_ENV***REMOVED***=***REMOVED***parsed.NODE_ENV;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***support***REMOVED***BROWSER***REMOVED***and***REMOVED***BROWSER_ARGS***REMOVED***env***REMOVED***variables
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parsed.BROWSER***REMOVED***&&***REMOVED***process.env.BROWSER***REMOVED***===***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.env.BROWSER***REMOVED***=***REMOVED***parsed.BROWSER;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parsed.BROWSER_ARGS***REMOVED***&&***REMOVED***process.env.BROWSER_ARGS***REMOVED***===***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.env.BROWSER_ARGS***REMOVED***=***REMOVED***parsed.BROWSER_ARGS;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***let***REMOVED***environment***REMOVED***variables***REMOVED***use***REMOVED***each***REMOVED***other
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***`expand`***REMOVED***patched***REMOVED***in***REMOVED***patches/dotenv-expand@9.0.0.patch
***REMOVED******REMOVED******REMOVED******REMOVED***expand_1({***REMOVED***parsed***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***only***REMOVED***keys***REMOVED***that***REMOVED***start***REMOVED***with***REMOVED***prefix***REMOVED***are***REMOVED***exposed***REMOVED***to***REMOVED***client
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***[key,***REMOVED***value]***REMOVED***of***REMOVED***Object.entries(parsed))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prefixes.some((prefix)***REMOVED***=>***REMOVED***key.startsWith(prefix)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***env[key]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***check***REMOVED***if***REMOVED***there***REMOVED***are***REMOVED***actual***REMOVED***env***REMOVED***variables***REMOVED***starting***REMOVED***with***REMOVED***VITE_*
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***these***REMOVED***are***REMOVED***typically***REMOVED***provided***REMOVED***inline***REMOVED***and***REMOVED***should***REMOVED***be***REMOVED***prioritized
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***key***REMOVED***in***REMOVED***process.env)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prefixes.some((prefix)***REMOVED***=>***REMOVED***key.startsWith(prefix)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***env[key]***REMOVED***=***REMOVED***process.env[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***env;
}
function***REMOVED***resolveEnvPrefix({***REMOVED***envPrefix***REMOVED***=***REMOVED***'VITE_',***REMOVED***})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***envPrefix***REMOVED***=***REMOVED***arraify(envPrefix);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(envPrefix.some((prefix)***REMOVED***=>***REMOVED***prefix***REMOVED***===***REMOVED***''))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`envPrefix***REMOVED***option***REMOVED***contains***REMOVED***value***REMOVED***'',***REMOVED***which***REMOVED***could***REMOVED***lead***REMOVED***unexpected***REMOVED***exposure***REMOVED***of***REMOVED***sensitive***REMOVED***information.`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***envPrefix;
}

exports.esbuildVersion***REMOVED***=***REMOVED***esbuild.version;
exports.rollupVersion***REMOVED***=***REMOVED***rollup.VERSION;
exports.createFilter***REMOVED***=***REMOVED***createFilter;
exports.createLogger***REMOVED***=***REMOVED***createLogger;
exports.isCSSRequest***REMOVED***=***REMOVED***isCSSRequest;
exports.isFileLoadingAllowed***REMOVED***=***REMOVED***isFileLoadingAllowed;
exports.isFileServingAllowed***REMOVED***=***REMOVED***isFileServingAllowed;
exports.loadEnv***REMOVED***=***REMOVED***loadEnv;
exports.mergeAlias***REMOVED***=***REMOVED***mergeAlias;
exports.mergeConfig***REMOVED***=***REMOVED***mergeConfig;
exports.normalizePath***REMOVED***=***REMOVED***normalizePath;
exports.resolveEnvPrefix***REMOVED***=***REMOVED***resolveEnvPrefix;
exports.searchForWorkspaceRoot***REMOVED***=***REMOVED***searchForWorkspaceRoot;
exports.send***REMOVED***=***REMOVED***send;
exports.splitVendorChunk***REMOVED***=***REMOVED***splitVendorChunk;
exports.splitVendorChunkPlugin***REMOVED***=***REMOVED***splitVendorChunkPlugin;
exports.version***REMOVED***=***REMOVED***VERSION;
