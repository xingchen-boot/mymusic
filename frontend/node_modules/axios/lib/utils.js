'use***REMOVED***strict';

import***REMOVED***bind***REMOVED***from***REMOVED***'./helpers/bind.js';

//***REMOVED***utils***REMOVED***is***REMOVED***a***REMOVED***library***REMOVED***of***REMOVED***generic***REMOVED***helper***REMOVED***functions***REMOVED***non-specific***REMOVED***to***REMOVED***axios

const***REMOVED***{toString}***REMOVED***=***REMOVED***Object.prototype;
const***REMOVED***{getPrototypeOf}***REMOVED***=***REMOVED***Object;
const***REMOVED***{iterator,***REMOVED***toStringTag}***REMOVED***=***REMOVED***Symbol;

const***REMOVED***kindOf***REMOVED***=***REMOVED***(cache***REMOVED***=>***REMOVED***thing***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***str***REMOVED***=***REMOVED***toString.call(thing);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cache[str]***REMOVED***||***REMOVED***(cache[str]***REMOVED***=***REMOVED***str.slice(8,***REMOVED***-1).toLowerCase());
})(Object.create(null));

const***REMOVED***kindOfTest***REMOVED***=***REMOVED***(type)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***type***REMOVED***=***REMOVED***type.toLowerCase();
***REMOVED******REMOVED***return***REMOVED***(thing)***REMOVED***=>***REMOVED***kindOf(thing)***REMOVED***===***REMOVED***type
}

const***REMOVED***typeOfTest***REMOVED***=***REMOVED***type***REMOVED***=>***REMOVED***thing***REMOVED***=>***REMOVED***typeof***REMOVED***thing***REMOVED***===***REMOVED***type;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Array
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Array,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***{isArray}***REMOVED***=***REMOVED***Array;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***undefined
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***the***REMOVED***value***REMOVED***is***REMOVED***undefined,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isUndefined***REMOVED***=***REMOVED***typeOfTest('undefined');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Buffer
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Buffer,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
function***REMOVED***isBuffer(val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***val***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***!isUndefined(val)***REMOVED***&&***REMOVED***val.constructor***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***!isUndefined(val.constructor)
***REMOVED******REMOVED******REMOVED******REMOVED***&&***REMOVED***isFunction(val.constructor.isBuffer)***REMOVED***&&***REMOVED***val.constructor.isBuffer(val);
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***ArrayBuffer
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***ArrayBuffer,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isArrayBuffer***REMOVED***=***REMOVED***kindOfTest('ArrayBuffer');


/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***view***REMOVED***on***REMOVED***an***REMOVED***ArrayBuffer
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***view***REMOVED***on***REMOVED***an***REMOVED***ArrayBuffer,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
function***REMOVED***isArrayBufferView(val)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***result;
***REMOVED******REMOVED***if***REMOVED***((typeof***REMOVED***ArrayBuffer***REMOVED***!==***REMOVED***'undefined')***REMOVED***&&***REMOVED***(ArrayBuffer.isView))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***ArrayBuffer.isView(val);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***(val)***REMOVED***&&***REMOVED***(val.buffer)***REMOVED***&&***REMOVED***(isArrayBuffer(val.buffer));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***String
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***String,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isString***REMOVED***=***REMOVED***typeOfTest('string');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Function
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Function,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFunction***REMOVED***=***REMOVED***typeOfTest('function');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Number
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Number,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isNumber***REMOVED***=***REMOVED***typeOfTest('number');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***thing***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isObject***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***thing***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***thing***REMOVED***===***REMOVED***'object';

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Boolean
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***thing***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Boolean,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isBoolean***REMOVED***=***REMOVED***thing***REMOVED***=>***REMOVED***thing***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***thing***REMOVED***===***REMOVED***false;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***plain***REMOVED***Object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***plain***REMOVED***Object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isPlainObject***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(kindOf(val)***REMOVED***!==***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***prototype***REMOVED***=***REMOVED***getPrototypeOf(val);
***REMOVED******REMOVED***return***REMOVED***(prototype***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***prototype***REMOVED***===***REMOVED***Object.prototype***REMOVED***||***REMOVED***Object.getPrototypeOf(prototype)***REMOVED***===***REMOVED***null)***REMOVED***&&***REMOVED***!(toStringTag***REMOVED***in***REMOVED***val)***REMOVED***&&***REMOVED***!(iterator***REMOVED***in***REMOVED***val);
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***empty***REMOVED***object***REMOVED***(safely***REMOVED***handles***REMOVED***Buffers)
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***empty***REMOVED***object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isEmptyObject***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Early***REMOVED***return***REMOVED***for***REMOVED***non-objects***REMOVED***or***REMOVED***Buffers***REMOVED***to***REMOVED***prevent***REMOVED***RangeError
***REMOVED******REMOVED***if***REMOVED***(!isObject(val)***REMOVED***||***REMOVED***isBuffer(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.keys(val).length***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***Object.getPrototypeOf(val)***REMOVED***===***REMOVED***Object.prototype;
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Fallback***REMOVED***for***REMOVED***any***REMOVED***other***REMOVED***objects***REMOVED***that***REMOVED***might***REMOVED***cause***REMOVED***RangeError***REMOVED***with***REMOVED***Object.keys()
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Date
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Date,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isDate***REMOVED***=***REMOVED***kindOfTest('Date');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***File
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***File,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFile***REMOVED***=***REMOVED***kindOfTest('File');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Blob
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Blob,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isBlob***REMOVED***=***REMOVED***kindOfTest('Blob');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***FileList
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***File,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFileList***REMOVED***=***REMOVED***kindOfTest('FileList');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Stream
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Stream,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isStream***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***isObject(val)***REMOVED***&&***REMOVED***isFunction(val.pipe);

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***FormData
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***thing***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***FormData,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFormData***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***kind;
***REMOVED******REMOVED***return***REMOVED***thing***REMOVED***&&***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED***(typeof***REMOVED***FormData***REMOVED***===***REMOVED***'function'***REMOVED***&&***REMOVED***thing***REMOVED***instanceof***REMOVED***FormData)***REMOVED***||***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isFunction(thing.append)***REMOVED***&&***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(kind***REMOVED***=***REMOVED***kindOf(thing))***REMOVED***===***REMOVED***'formdata'***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***detect***REMOVED***form-data***REMOVED***instance
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(kind***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***isFunction(thing.toString)***REMOVED***&&***REMOVED***thing.toString()***REMOVED***===***REMOVED***'[object***REMOVED***FormData]')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED***)
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***URLSearchParams***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***URLSearchParams***REMOVED***object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isURLSearchParams***REMOVED***=***REMOVED***kindOfTest('URLSearchParams');

const***REMOVED***[isReadableStream,***REMOVED***isRequest,***REMOVED***isResponse,***REMOVED***isHeaders]***REMOVED***=***REMOVED***['ReadableStream',***REMOVED***'Request',***REMOVED***'Response',***REMOVED***'Headers'].map(kindOfTest);

/**
***REMOVED*******REMOVED***Trim***REMOVED***excess***REMOVED***whitespace***REMOVED***off***REMOVED***the***REMOVED***beginning***REMOVED***and***REMOVED***end***REMOVED***of***REMOVED***a***REMOVED***string
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***str***REMOVED***The***REMOVED***String***REMOVED***to***REMOVED***trim
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{String}***REMOVED***The***REMOVED***String***REMOVED***freed***REMOVED***of***REMOVED***excess***REMOVED***whitespace
***REMOVED****/
const***REMOVED***trim***REMOVED***=***REMOVED***(str)***REMOVED***=>***REMOVED***str.trim***REMOVED***?
***REMOVED******REMOVED***str.trim()***REMOVED***:***REMOVED***str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,***REMOVED***'');

/**
***REMOVED*******REMOVED***Iterate***REMOVED***over***REMOVED***an***REMOVED***Array***REMOVED***or***REMOVED***an***REMOVED***Object***REMOVED***invoking***REMOVED***a***REMOVED***function***REMOVED***for***REMOVED***each***REMOVED***item.
***REMOVED****
***REMOVED*******REMOVED***If***REMOVED***`obj`***REMOVED***is***REMOVED***an***REMOVED***Array***REMOVED***callback***REMOVED***will***REMOVED***be***REMOVED***called***REMOVED***passing
***REMOVED*******REMOVED***the***REMOVED***value,***REMOVED***index,***REMOVED***and***REMOVED***complete***REMOVED***array***REMOVED***for***REMOVED***each***REMOVED***item.
***REMOVED****
***REMOVED*******REMOVED***If***REMOVED***'obj'***REMOVED***is***REMOVED***an***REMOVED***Object***REMOVED***callback***REMOVED***will***REMOVED***be***REMOVED***called***REMOVED***passing
***REMOVED*******REMOVED***the***REMOVED***value,***REMOVED***key,***REMOVED***and***REMOVED***complete***REMOVED***object***REMOVED***for***REMOVED***each***REMOVED***property.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object|Array}***REMOVED***obj***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***iterate
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fn***REMOVED***The***REMOVED***callback***REMOVED***to***REMOVED***invoke***REMOVED***for***REMOVED***each***REMOVED***item
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***[allOwnKeys***REMOVED***=***REMOVED***false]
***REMOVED*******REMOVED***@returns***REMOVED***{any}
***REMOVED****/
function***REMOVED***forEach(obj,***REMOVED***fn,***REMOVED***{allOwnKeys***REMOVED***=***REMOVED***false}***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Don't***REMOVED***bother***REMOVED***if***REMOVED***no***REMOVED***value***REMOVED***provided
***REMOVED******REMOVED***if***REMOVED***(obj***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***typeof***REMOVED***obj***REMOVED***===***REMOVED***'undefined')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***i;
***REMOVED******REMOVED***let***REMOVED***l;

***REMOVED******REMOVED***//***REMOVED***Force***REMOVED***an***REMOVED***array***REMOVED***if***REMOVED***not***REMOVED***already***REMOVED***something***REMOVED***iterable
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***obj***REMOVED***!==***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***no-param-reassign:0*/
***REMOVED******REMOVED******REMOVED******REMOVED***obj***REMOVED***=***REMOVED***[obj];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isArray(obj))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Iterate***REMOVED***over***REMOVED***array***REMOVED***values
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(i***REMOVED***=***REMOVED***0,***REMOVED***l***REMOVED***=***REMOVED***obj.length;***REMOVED***i***REMOVED***<***REMOVED***l;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fn.call(null,***REMOVED***obj[i],***REMOVED***i,***REMOVED***obj);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Buffer***REMOVED***check
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isBuffer(obj))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Iterate***REMOVED***over***REMOVED***object***REMOVED***keys
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***allOwnKeys***REMOVED***?***REMOVED***Object.getOwnPropertyNames(obj)***REMOVED***:***REMOVED***Object.keys(obj);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***key;

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fn.call(null,***REMOVED***obj[key],***REMOVED***key,***REMOVED***obj);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

function***REMOVED***findKey(obj,***REMOVED***key)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isBuffer(obj)){
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***key***REMOVED***=***REMOVED***key.toLowerCase();
***REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(obj);
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED***let***REMOVED***_key;
***REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***_key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***_key.toLowerCase())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***_key;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***null;
}

const***REMOVED***_global***REMOVED***=***REMOVED***(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***/*eslint***REMOVED***no-undef:0*/
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***globalThis***REMOVED***!==***REMOVED***"undefined")***REMOVED***return***REMOVED***globalThis;
***REMOVED******REMOVED***return***REMOVED***typeof***REMOVED***self***REMOVED***!==***REMOVED***"undefined"***REMOVED***?***REMOVED***self***REMOVED***:***REMOVED***(typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***?***REMOVED***window***REMOVED***:***REMOVED***global)
})();

const***REMOVED***isContextDefined***REMOVED***=***REMOVED***(context)***REMOVED***=>***REMOVED***!isUndefined(context)***REMOVED***&&***REMOVED***context***REMOVED***!==***REMOVED***_global;

/**
***REMOVED*******REMOVED***Accepts***REMOVED***varargs***REMOVED***expecting***REMOVED***each***REMOVED***argument***REMOVED***to***REMOVED***be***REMOVED***an***REMOVED***object,***REMOVED***then
***REMOVED*******REMOVED***immutably***REMOVED***merges***REMOVED***the***REMOVED***properties***REMOVED***of***REMOVED***each***REMOVED***object***REMOVED***and***REMOVED***returns***REMOVED***result.
***REMOVED****
***REMOVED*******REMOVED***When***REMOVED***multiple***REMOVED***objects***REMOVED***contain***REMOVED***the***REMOVED***same***REMOVED***key***REMOVED***the***REMOVED***later***REMOVED***object***REMOVED***in
***REMOVED*******REMOVED***the***REMOVED***arguments***REMOVED***list***REMOVED***will***REMOVED***take***REMOVED***precedence.
***REMOVED****
***REMOVED*******REMOVED***Example:
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***merge({foo:***REMOVED***123},***REMOVED***{foo:***REMOVED***456});
***REMOVED*******REMOVED***console.log(result.foo);***REMOVED***//***REMOVED***outputs***REMOVED***456
***REMOVED*******REMOVED***```
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***obj1***REMOVED***Object***REMOVED***to***REMOVED***merge
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***Result***REMOVED***of***REMOVED***all***REMOVED***merge***REMOVED***properties
***REMOVED****/
function***REMOVED***merge(/****REMOVED***obj1,***REMOVED***obj2,***REMOVED***obj3,***REMOVED***...***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{caseless,***REMOVED***skipUndefined}***REMOVED***=***REMOVED***isContextDefined(this)***REMOVED***&&***REMOVED***this***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***assignValue***REMOVED***=***REMOVED***(val,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***targetKey***REMOVED***=***REMOVED***caseless***REMOVED***&&***REMOVED***findKey(result,***REMOVED***key)***REMOVED***||***REMOVED***key;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isPlainObject(result[targetKey])***REMOVED***&&***REMOVED***isPlainObject(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***merge(result[targetKey],***REMOVED***val);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(isPlainObject(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***merge({},***REMOVED***val);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(isArray(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***val.slice();
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(!skipUndefined***REMOVED***||***REMOVED***!isUndefined(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***val;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0,***REMOVED***l***REMOVED***=***REMOVED***arguments.length;***REMOVED***i***REMOVED***<***REMOVED***l;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arguments[i]***REMOVED***&&***REMOVED***forEach(arguments[i],***REMOVED***assignValue);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}

/**
***REMOVED*******REMOVED***Extends***REMOVED***object***REMOVED***a***REMOVED***by***REMOVED***mutably***REMOVED***adding***REMOVED***to***REMOVED***it***REMOVED***the***REMOVED***properties***REMOVED***of***REMOVED***object***REMOVED***b.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***a***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***be***REMOVED***extended
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***b***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***copy***REMOVED***properties***REMOVED***from
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***thisArg***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***bind***REMOVED***function***REMOVED***to
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***[allOwnKeys]
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***The***REMOVED***resulting***REMOVED***value***REMOVED***of***REMOVED***object***REMOVED***a
***REMOVED****/
const***REMOVED***extend***REMOVED***=***REMOVED***(a,***REMOVED***b,***REMOVED***thisArg,***REMOVED***{allOwnKeys}=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***forEach(b,***REMOVED***(val,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(thisArg***REMOVED***&&***REMOVED***isFunction(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***a[key]***REMOVED***=***REMOVED***bind(val,***REMOVED***thisArg);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***a[key]***REMOVED***=***REMOVED***val;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***},***REMOVED***{allOwnKeys});
***REMOVED******REMOVED***return***REMOVED***a;
}

/**
***REMOVED*******REMOVED***Remove***REMOVED***byte***REMOVED***order***REMOVED***marker.***REMOVED***This***REMOVED***catches***REMOVED***EF***REMOVED***BB***REMOVED***BF***REMOVED***(the***REMOVED***UTF-8***REMOVED***BOM)
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***content***REMOVED***with***REMOVED***BOM
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***content***REMOVED***value***REMOVED***without***REMOVED***BOM
***REMOVED****/
const***REMOVED***stripBOM***REMOVED***=***REMOVED***(content)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(content.charCodeAt(0)***REMOVED***===***REMOVED***0xFEFF)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***content***REMOVED***=***REMOVED***content.slice(1);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***content;
}

/**
***REMOVED*******REMOVED***Inherit***REMOVED***the***REMOVED***prototype***REMOVED***methods***REMOVED***from***REMOVED***one***REMOVED***constructor***REMOVED***into***REMOVED***another
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***constructor
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***superConstructor
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***[props]
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***[descriptors]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED****/
const***REMOVED***inherits***REMOVED***=***REMOVED***(constructor,***REMOVED***superConstructor,***REMOVED***props,***REMOVED***descriptors)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***constructor.prototype***REMOVED***=***REMOVED***Object.create(superConstructor.prototype,***REMOVED***descriptors);
***REMOVED******REMOVED***constructor.prototype.constructor***REMOVED***=***REMOVED***constructor;
***REMOVED******REMOVED***Object.defineProperty(constructor,***REMOVED***'super',***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***value:***REMOVED***superConstructor.prototype
***REMOVED******REMOVED***});
***REMOVED******REMOVED***props***REMOVED***&&***REMOVED***Object.assign(constructor.prototype,***REMOVED***props);
}

/**
***REMOVED*******REMOVED***Resolve***REMOVED***object***REMOVED***with***REMOVED***deep***REMOVED***prototype***REMOVED***chain***REMOVED***to***REMOVED***a***REMOVED***flat***REMOVED***object
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***sourceObj***REMOVED***source***REMOVED***object
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[destObj]
***REMOVED*******REMOVED***@param***REMOVED***{Function|Boolean}***REMOVED***[filter]
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***[propFilter]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}
***REMOVED****/
const***REMOVED***toFlatObject***REMOVED***=***REMOVED***(sourceObj,***REMOVED***destObj,***REMOVED***filter,***REMOVED***propFilter)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***props;
***REMOVED******REMOVED***let***REMOVED***i;
***REMOVED******REMOVED***let***REMOVED***prop;
***REMOVED******REMOVED***const***REMOVED***merged***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***destObj***REMOVED***=***REMOVED***destObj***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-eq-null,eqeqeq
***REMOVED******REMOVED***if***REMOVED***(sourceObj***REMOVED***==***REMOVED***null)***REMOVED***return***REMOVED***destObj;

***REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***props***REMOVED***=***REMOVED***Object.getOwnPropertyNames(sourceObj);
***REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***props.length;
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prop***REMOVED***=***REMOVED***props[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((!propFilter***REMOVED***||***REMOVED***propFilter(prop,***REMOVED***sourceObj,***REMOVED***destObj))***REMOVED***&&***REMOVED***!merged[prop])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***destObj[prop]***REMOVED***=***REMOVED***sourceObj[prop];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[prop]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***sourceObj***REMOVED***=***REMOVED***filter***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***getPrototypeOf(sourceObj);
***REMOVED******REMOVED***}***REMOVED***while***REMOVED***(sourceObj***REMOVED***&&***REMOVED***(!filter***REMOVED***||***REMOVED***filter(sourceObj,***REMOVED***destObj))***REMOVED***&&***REMOVED***sourceObj***REMOVED***!==***REMOVED***Object.prototype);

***REMOVED******REMOVED***return***REMOVED***destObj;
}

/**
***REMOVED*******REMOVED***Determines***REMOVED***whether***REMOVED***a***REMOVED***string***REMOVED***ends***REMOVED***with***REMOVED***the***REMOVED***characters***REMOVED***of***REMOVED***a***REMOVED***specified***REMOVED***string
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***str
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***searchString
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***[position=***REMOVED***0]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
const***REMOVED***endsWith***REMOVED***=***REMOVED***(str,***REMOVED***searchString,***REMOVED***position)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***str***REMOVED***=***REMOVED***String(str);
***REMOVED******REMOVED***if***REMOVED***(position***REMOVED***===***REMOVED***undefined***REMOVED***||***REMOVED***position***REMOVED***>***REMOVED***str.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***position***REMOVED***=***REMOVED***str.length;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***position***REMOVED***-=***REMOVED***searchString.length;
***REMOVED******REMOVED***const***REMOVED***lastIndex***REMOVED***=***REMOVED***str.indexOf(searchString,***REMOVED***position);
***REMOVED******REMOVED***return***REMOVED***lastIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***lastIndex***REMOVED***===***REMOVED***position;
}


/**
***REMOVED*******REMOVED***Returns***REMOVED***new***REMOVED***array***REMOVED***from***REMOVED***array***REMOVED***like***REMOVED***object***REMOVED***or***REMOVED***null***REMOVED***if***REMOVED***failed
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***[thing]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{?Array}
***REMOVED****/
const***REMOVED***toArray***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!thing)***REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***if***REMOVED***(isArray(thing))***REMOVED***return***REMOVED***thing;
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***thing.length;
***REMOVED******REMOVED***if***REMOVED***(!isNumber(i))***REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***const***REMOVED***arr***REMOVED***=***REMOVED***new***REMOVED***Array(i);
***REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arr[i]***REMOVED***=***REMOVED***thing[i];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***arr;
}

/**
***REMOVED*******REMOVED***Checking***REMOVED***if***REMOVED***the***REMOVED***Uint8Array***REMOVED***exists***REMOVED***and***REMOVED***if***REMOVED***it***REMOVED***does,***REMOVED***it***REMOVED***returns***REMOVED***a***REMOVED***function***REMOVED***that***REMOVED***checks***REMOVED***if***REMOVED***the
***REMOVED*******REMOVED***thing***REMOVED***passed***REMOVED***in***REMOVED***is***REMOVED***an***REMOVED***instance***REMOVED***of***REMOVED***Uint8Array
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{TypedArray}
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Array}
***REMOVED****/
//***REMOVED***eslint-disable-next-line***REMOVED***func-names
const***REMOVED***isTypedArray***REMOVED***=***REMOVED***(TypedArray***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED***return***REMOVED***thing***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***TypedArray***REMOVED***&&***REMOVED***thing***REMOVED***instanceof***REMOVED***TypedArray;
***REMOVED******REMOVED***};
})(typeof***REMOVED***Uint8Array***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***getPrototypeOf(Uint8Array));

/**
***REMOVED*******REMOVED***For***REMOVED***each***REMOVED***entry***REMOVED***in***REMOVED***the***REMOVED***object,***REMOVED***call***REMOVED***the***REMOVED***function***REMOVED***with***REMOVED***the***REMOVED***key***REMOVED***and***REMOVED***value.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object<any,***REMOVED***any>}***REMOVED***obj***REMOVED***-***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***iterate***REMOVED***over.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fn***REMOVED***-***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***call***REMOVED***for***REMOVED***each***REMOVED***entry.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED****/
const***REMOVED***forEachEntry***REMOVED***=***REMOVED***(obj,***REMOVED***fn)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***generator***REMOVED***=***REMOVED***obj***REMOVED***&&***REMOVED***obj[iterator];

***REMOVED******REMOVED***const***REMOVED***_iterator***REMOVED***=***REMOVED***generator.call(obj);

***REMOVED******REMOVED***let***REMOVED***result;

***REMOVED******REMOVED***while***REMOVED***((result***REMOVED***=***REMOVED***_iterator.next())***REMOVED***&&***REMOVED***!result.done)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pair***REMOVED***=***REMOVED***result.value;
***REMOVED******REMOVED******REMOVED******REMOVED***fn.call(obj,***REMOVED***pair[0],***REMOVED***pair[1]);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***regular***REMOVED***expression***REMOVED***and***REMOVED***a***REMOVED***string,***REMOVED***and***REMOVED***returns***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***all***REMOVED***the***REMOVED***matches
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***regExp***REMOVED***-***REMOVED***The***REMOVED***regular***REMOVED***expression***REMOVED***to***REMOVED***match***REMOVED***against.
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***str***REMOVED***-***REMOVED***The***REMOVED***string***REMOVED***to***REMOVED***search.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Array<boolean>}
***REMOVED****/
const***REMOVED***matchAll***REMOVED***=***REMOVED***(regExp,***REMOVED***str)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***matches;
***REMOVED******REMOVED***const***REMOVED***arr***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***while***REMOVED***((matches***REMOVED***=***REMOVED***regExp.exec(str))***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arr.push(matches);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***arr;
}

/****REMOVED***Checking***REMOVED***if***REMOVED***the***REMOVED***kindOfTest***REMOVED***function***REMOVED***returns***REMOVED***true***REMOVED***when***REMOVED***passed***REMOVED***an***REMOVED***HTMLFormElement.***REMOVED****/
const***REMOVED***isHTMLForm***REMOVED***=***REMOVED***kindOfTest('HTMLFormElement');

const***REMOVED***toCamelCase***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***replacer(m,***REMOVED***p1,***REMOVED***p2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***p1.toUpperCase()***REMOVED***+***REMOVED***p2;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***);
};

/****REMOVED***Creating***REMOVED***a***REMOVED***function***REMOVED***that***REMOVED***will***REMOVED***check***REMOVED***if***REMOVED***an***REMOVED***object***REMOVED***has***REMOVED***a***REMOVED***property.***REMOVED****/
const***REMOVED***hasOwnProperty***REMOVED***=***REMOVED***(({hasOwnProperty})***REMOVED***=>***REMOVED***(obj,***REMOVED***prop)***REMOVED***=>***REMOVED***hasOwnProperty.call(obj,***REMOVED***prop))(Object.prototype);

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***RegExp***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***RegExp***REMOVED***object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isRegExp***REMOVED***=***REMOVED***kindOfTest('RegExp');

const***REMOVED***reduceDescriptors***REMOVED***=***REMOVED***(obj,***REMOVED***reducer)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***descriptors***REMOVED***=***REMOVED***Object.getOwnPropertyDescriptors(obj);
***REMOVED******REMOVED***const***REMOVED***reducedDescriptors***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***forEach(descriptors,***REMOVED***(descriptor,***REMOVED***name)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***ret;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((ret***REMOVED***=***REMOVED***reducer(descriptor,***REMOVED***name,***REMOVED***obj))***REMOVED***!==***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reducedDescriptors[name]***REMOVED***=***REMOVED***ret***REMOVED***||***REMOVED***descriptor;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});

***REMOVED******REMOVED***Object.defineProperties(obj,***REMOVED***reducedDescriptors);
}

/**
***REMOVED*******REMOVED***Makes***REMOVED***all***REMOVED***methods***REMOVED***read-only
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***obj
***REMOVED****/

const***REMOVED***freezeMethods***REMOVED***=***REMOVED***(obj)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***reduceDescriptors(obj,***REMOVED***(descriptor,***REMOVED***name)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***skip***REMOVED***restricted***REMOVED***props***REMOVED***in***REMOVED***strict***REMOVED***mode
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isFunction(obj)***REMOVED***&&***REMOVED***['arguments',***REMOVED***'caller',***REMOVED***'callee'].indexOf(name)***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***obj[name];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isFunction(value))***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED***descriptor.enumerable***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***('writable'***REMOVED***in***REMOVED***descriptor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor.writable***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!descriptor.set)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor.set***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***Error('Can***REMOVED***not***REMOVED***rewrite***REMOVED***read-only***REMOVED***method***REMOVED***\''***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***'\'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});
}

const***REMOVED***toObjectSet***REMOVED***=***REMOVED***(arrayOrString,***REMOVED***delimiter)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***const***REMOVED***define***REMOVED***=***REMOVED***(arr)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arr.forEach(value***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***obj[value]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***isArray(arrayOrString)***REMOVED***?***REMOVED***define(arrayOrString)***REMOVED***:***REMOVED***define(String(arrayOrString).split(delimiter));

***REMOVED******REMOVED***return***REMOVED***obj;
}

const***REMOVED***noop***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{}

const***REMOVED***toFiniteNumber***REMOVED***=***REMOVED***(value,***REMOVED***defaultValue)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***value***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***Number.isFinite(value***REMOVED***=***REMOVED***+value)***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***defaultValue;
}



/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***thing***REMOVED***is***REMOVED***a***REMOVED***FormData***REMOVED***object,***REMOVED***return***REMOVED***true,***REMOVED***otherwise***REMOVED***return***REMOVED***false.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{unknown}***REMOVED***thing***REMOVED***-***REMOVED***The***REMOVED***thing***REMOVED***to***REMOVED***check.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
function***REMOVED***isSpecCompliantForm(thing)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***!!(thing***REMOVED***&&***REMOVED***isFunction(thing.append)***REMOVED***&&***REMOVED***thing[toStringTag]***REMOVED***===***REMOVED***'FormData'***REMOVED***&&***REMOVED***thing[iterator]);
}

const***REMOVED***toJSONObject***REMOVED***=***REMOVED***(obj)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***stack***REMOVED***=***REMOVED***new***REMOVED***Array(10);

***REMOVED******REMOVED***const***REMOVED***visit***REMOVED***=***REMOVED***(source,***REMOVED***i)***REMOVED***=>***REMOVED***{

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObject(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stack.indexOf(source)***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//Buffer***REMOVED***check
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isBuffer(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!('toJSON'***REMOVED***in***REMOVED***source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack[i]***REMOVED***=***REMOVED***source;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***target***REMOVED***=***REMOVED***isArray(source)***REMOVED***?***REMOVED***[]***REMOVED***:***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***forEach(source,***REMOVED***(value,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***reducedValue***REMOVED***=***REMOVED***visit(value,***REMOVED***i***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!isUndefined(reducedValue)***REMOVED***&&***REMOVED***(target[key]***REMOVED***=***REMOVED***reducedValue);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack[i]***REMOVED***=***REMOVED***undefined;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***target;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***visit(obj,***REMOVED***0);
}

const***REMOVED***isAsyncFn***REMOVED***=***REMOVED***kindOfTest('AsyncFunction');

const***REMOVED***isThenable***REMOVED***=***REMOVED***(thing)***REMOVED***=>
***REMOVED******REMOVED***thing***REMOVED***&&***REMOVED***(isObject(thing)***REMOVED***||***REMOVED***isFunction(thing))***REMOVED***&&***REMOVED***isFunction(thing.then)***REMOVED***&&***REMOVED***isFunction(thing.catch);

//***REMOVED***original***REMOVED***code
//***REMOVED***https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const***REMOVED***_setImmediate***REMOVED***=***REMOVED***((setImmediateSupported,***REMOVED***postMessageSupported)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(setImmediateSupported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***setImmediate;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***postMessageSupported***REMOVED***?***REMOVED***((token,***REMOVED***callbacks)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***_global.addEventListener("message",***REMOVED***({source,***REMOVED***data})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(source***REMOVED***===***REMOVED***_global***REMOVED***&&***REMOVED***data***REMOVED***===***REMOVED***token)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callbacks.length***REMOVED***&&***REMOVED***callbacks.shift()();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***false);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(cb)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callbacks.push(cb);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_global.postMessage(token,***REMOVED***"*");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***})(`axios@${Math.random()}`,***REMOVED***[])***REMOVED***:***REMOVED***(cb)***REMOVED***=>***REMOVED***setTimeout(cb);
})(
***REMOVED******REMOVED***typeof***REMOVED***setImmediate***REMOVED***===***REMOVED***'function',
***REMOVED******REMOVED***isFunction(_global.postMessage)
);

const***REMOVED***asap***REMOVED***=***REMOVED***typeof***REMOVED***queueMicrotask***REMOVED***!==***REMOVED***'undefined'***REMOVED***?
***REMOVED******REMOVED***queueMicrotask.bind(_global)***REMOVED***:***REMOVED***(***REMOVED***typeof***REMOVED***process***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***process.nextTick***REMOVED***||***REMOVED***_setImmediate);

//***REMOVED************************


const***REMOVED***isIterable***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***thing***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***isFunction(thing[iterator]);


export***REMOVED***default***REMOVED***{
***REMOVED******REMOVED***isArray,
***REMOVED******REMOVED***isArrayBuffer,
***REMOVED******REMOVED***isBuffer,
***REMOVED******REMOVED***isFormData,
***REMOVED******REMOVED***isArrayBufferView,
***REMOVED******REMOVED***isString,
***REMOVED******REMOVED***isNumber,
***REMOVED******REMOVED***isBoolean,
***REMOVED******REMOVED***isObject,
***REMOVED******REMOVED***isPlainObject,
***REMOVED******REMOVED***isEmptyObject,
***REMOVED******REMOVED***isReadableStream,
***REMOVED******REMOVED***isRequest,
***REMOVED******REMOVED***isResponse,
***REMOVED******REMOVED***isHeaders,
***REMOVED******REMOVED***isUndefined,
***REMOVED******REMOVED***isDate,
***REMOVED******REMOVED***isFile,
***REMOVED******REMOVED***isBlob,
***REMOVED******REMOVED***isRegExp,
***REMOVED******REMOVED***isFunction,
***REMOVED******REMOVED***isStream,
***REMOVED******REMOVED***isURLSearchParams,
***REMOVED******REMOVED***isTypedArray,
***REMOVED******REMOVED***isFileList,
***REMOVED******REMOVED***forEach,
***REMOVED******REMOVED***merge,
***REMOVED******REMOVED***extend,
***REMOVED******REMOVED***trim,
***REMOVED******REMOVED***stripBOM,
***REMOVED******REMOVED***inherits,
***REMOVED******REMOVED***toFlatObject,
***REMOVED******REMOVED***kindOf,
***REMOVED******REMOVED***kindOfTest,
***REMOVED******REMOVED***endsWith,
***REMOVED******REMOVED***toArray,
***REMOVED******REMOVED***forEachEntry,
***REMOVED******REMOVED***matchAll,
***REMOVED******REMOVED***isHTMLForm,
***REMOVED******REMOVED***hasOwnProperty,
***REMOVED******REMOVED***hasOwnProp:***REMOVED***hasOwnProperty,***REMOVED***//***REMOVED***an***REMOVED***alias***REMOVED***to***REMOVED***avoid***REMOVED***ESLint***REMOVED***no-prototype-builtins***REMOVED***detection
***REMOVED******REMOVED***reduceDescriptors,
***REMOVED******REMOVED***freezeMethods,
***REMOVED******REMOVED***toObjectSet,
***REMOVED******REMOVED***toCamelCase,
***REMOVED******REMOVED***noop,
***REMOVED******REMOVED***toFiniteNumber,
***REMOVED******REMOVED***findKey,
***REMOVED******REMOVED***global:***REMOVED***_global,
***REMOVED******REMOVED***isContextDefined,
***REMOVED******REMOVED***isSpecCompliantForm,
***REMOVED******REMOVED***toJSONObject,
***REMOVED******REMOVED***isAsyncFn,
***REMOVED******REMOVED***isThenable,
***REMOVED******REMOVED***setImmediate:***REMOVED***_setImmediate,
***REMOVED******REMOVED***asap,
***REMOVED******REMOVED***isIterable
};
