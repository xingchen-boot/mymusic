'use***REMOVED***strict';

import***REMOVED***utils***REMOVED***from***REMOVED***'../utils.js';
import***REMOVED***parseHeaders***REMOVED***from***REMOVED***'../helpers/parseHeaders.js';

const***REMOVED***$internals***REMOVED***=***REMOVED***Symbol('internals');

function***REMOVED***normalizeHeader(header)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***header***REMOVED***&&***REMOVED***String(header).trim().toLowerCase();
}

function***REMOVED***normalizeValue(value)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***false***REMOVED***||***REMOVED***value***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***utils.isArray(value)***REMOVED***?***REMOVED***value.map(normalizeValue)***REMOVED***:***REMOVED***String(value);
}

function***REMOVED***parseTokens(str)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***tokens***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED***const***REMOVED***tokensRE***REMOVED***=***REMOVED***/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
***REMOVED******REMOVED***let***REMOVED***match;

***REMOVED******REMOVED***while***REMOVED***((match***REMOVED***=***REMOVED***tokensRE.exec(str)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***tokens[match[1]]***REMOVED***=***REMOVED***match[2];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***tokens;
}

const***REMOVED***isValidHeaderName***REMOVED***=***REMOVED***(str)***REMOVED***=>***REMOVED***/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function***REMOVED***matchHeaderValue(context,***REMOVED***value,***REMOVED***header,***REMOVED***filter,***REMOVED***isHeaderNameFilter)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(utils.isFunction(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***filter.call(this,***REMOVED***value,***REMOVED***header);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isHeaderNameFilter)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***header;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(!utils.isString(value))***REMOVED***return;

***REMOVED******REMOVED***if***REMOVED***(utils.isString(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value.indexOf(filter)***REMOVED***!==***REMOVED***-1;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(utils.isRegExp(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***filter.test(value);
***REMOVED******REMOVED***}
}

function***REMOVED***formatHeader(header)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***header.trim()
***REMOVED******REMOVED******REMOVED******REMOVED***.toLowerCase().replace(/([a-z\d])(\w*)/g,***REMOVED***(w,***REMOVED***char,***REMOVED***str)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***char.toUpperCase()***REMOVED***+***REMOVED***str;
***REMOVED******REMOVED******REMOVED******REMOVED***});
}

function***REMOVED***buildAccessors(obj,***REMOVED***header)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***accessorName***REMOVED***=***REMOVED***utils.toCamelCase('***REMOVED***'***REMOVED***+***REMOVED***header);

***REMOVED******REMOVED***['get',***REMOVED***'set',***REMOVED***'has'].forEach(methodName***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***Object.defineProperty(obj,***REMOVED***methodName***REMOVED***+***REMOVED***accessorName,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value:***REMOVED***function(arg1,***REMOVED***arg2,***REMOVED***arg3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this[methodName].call(this,***REMOVED***header,***REMOVED***arg1,***REMOVED***arg2,***REMOVED***arg3);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***configurable:***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***});
}

class***REMOVED***AxiosHeaders***REMOVED***{
***REMOVED******REMOVED***constructor(headers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***headers***REMOVED***&&***REMOVED***this.set(headers);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***set(header,***REMOVED***valueOrRewrite,***REMOVED***rewrite)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***self***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***setHeader(_value,***REMOVED***_header,***REMOVED***_rewrite)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lHeader***REMOVED***=***REMOVED***normalizeHeader(_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lHeader)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('header***REMOVED***name***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***non-empty***REMOVED***string');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils.findKey(self,***REMOVED***lHeader);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!key***REMOVED***||***REMOVED***self[key]***REMOVED***===***REMOVED***undefined***REMOVED***||***REMOVED***_rewrite***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***(_rewrite***REMOVED***===***REMOVED***undefined***REMOVED***&&***REMOVED***self[key]***REMOVED***!==***REMOVED***false))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***self[key***REMOVED***||***REMOVED***_header]***REMOVED***=***REMOVED***normalizeValue(_value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***setHeaders***REMOVED***=***REMOVED***(headers,***REMOVED***_rewrite)***REMOVED***=>
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils.forEach(headers,***REMOVED***(_value,***REMOVED***_header)***REMOVED***=>***REMOVED***setHeader(_value,***REMOVED***_header,***REMOVED***_rewrite));

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isPlainObject(header)***REMOVED***||***REMOVED***header***REMOVED***instanceof***REMOVED***this.constructor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setHeaders(header,***REMOVED***valueOrRewrite)
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if(utils.isString(header)***REMOVED***&&***REMOVED***(header***REMOVED***=***REMOVED***header.trim())***REMOVED***&&***REMOVED***!isValidHeaderName(header))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setHeaders(parseHeaders(header),***REMOVED***valueOrRewrite);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils.isObject(header)***REMOVED***&&***REMOVED***utils.isIterable(header))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***obj***REMOVED***=***REMOVED***{},***REMOVED***dest,***REMOVED***key;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***entry***REMOVED***of***REMOVED***header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils.isArray(entry))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***TypeError('Object***REMOVED***iterator***REMOVED***must***REMOVED***return***REMOVED***a***REMOVED***key-value***REMOVED***pair');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***obj[key***REMOVED***=***REMOVED***entry[0]]***REMOVED***=***REMOVED***(dest***REMOVED***=***REMOVED***obj[key])***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(utils.isArray(dest)***REMOVED***?***REMOVED***[...dest,***REMOVED***entry[1]]***REMOVED***:***REMOVED***[dest,***REMOVED***entry[1]])***REMOVED***:***REMOVED***entry[1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setHeaders(obj,***REMOVED***valueOrRewrite)
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***header***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***setHeader(valueOrRewrite,***REMOVED***header,***REMOVED***rewrite);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***get(header,***REMOVED***parser)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***header***REMOVED***=***REMOVED***normalizeHeader(header);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils.findKey(this,***REMOVED***header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***this[key];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!parser)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parser***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parseTokens(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isFunction(parser))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parser.call(this,***REMOVED***value,***REMOVED***key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isRegExp(parser))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parser.exec(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('parser***REMOVED***must***REMOVED***be***REMOVED***boolean|regexp|function');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***has(header,***REMOVED***matcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***header***REMOVED***=***REMOVED***normalizeHeader(header);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils.findKey(this,***REMOVED***header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!(key***REMOVED***&&***REMOVED***this[key]***REMOVED***!==***REMOVED***undefined***REMOVED***&&***REMOVED***(!matcher***REMOVED***||***REMOVED***matchHeaderValue(this,***REMOVED***this[key],***REMOVED***key,***REMOVED***matcher)));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***delete(header,***REMOVED***matcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***self***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***deleted***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***deleteHeader(_header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_header***REMOVED***=***REMOVED***normalizeHeader(_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils.findKey(self,***REMOVED***_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***&&***REMOVED***(!matcher***REMOVED***||***REMOVED***matchHeaderValue(self,***REMOVED***self[key],***REMOVED***key,***REMOVED***matcher)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***self[key];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deleted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isArray(header))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***header.forEach(deleteHeader);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deleteHeader(header);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***deleted;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***clear(matcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(this);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***deleted***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!matcher***REMOVED***||***REMOVED***matchHeaderValue(this,***REMOVED***this[key],***REMOVED***key,***REMOVED***matcher,***REMOVED***true))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***this[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deleted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***deleted;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***normalize(format)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***self***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***headers***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED***utils.forEach(this,***REMOVED***(value,***REMOVED***header)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils.findKey(headers,***REMOVED***header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***self[key]***REMOVED***=***REMOVED***normalizeValue(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***self[header];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***normalized***REMOVED***=***REMOVED***format***REMOVED***?***REMOVED***formatHeader(header)***REMOVED***:***REMOVED***String(header).trim();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(normalized***REMOVED***!==***REMOVED***header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***self[header];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***self[normalized]***REMOVED***=***REMOVED***normalizeValue(value);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers[normalized]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***concat(...targets)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.constructor.concat(this,***REMOVED***...targets);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toJSON(asStrings)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***Object.create(null);

***REMOVED******REMOVED******REMOVED******REMOVED***utils.forEach(this,***REMOVED***(value,***REMOVED***header)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***(obj[header]***REMOVED***=***REMOVED***asStrings***REMOVED***&&***REMOVED***utils.isArray(value)***REMOVED***?***REMOVED***value.join(',***REMOVED***')***REMOVED***:***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***obj;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***[Symbol.iterator]()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.entries(this.toJSON())[Symbol.iterator]();
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toString()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.entries(this.toJSON()).map(([header,***REMOVED***value])***REMOVED***=>***REMOVED***header***REMOVED***+***REMOVED***':***REMOVED***'***REMOVED***+***REMOVED***value).join('\n');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***getSetCookie()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.get("set-cookie")***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***get***REMOVED***[Symbol.toStringTag]()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'AxiosHeaders';
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***from(thing)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***thing***REMOVED***instanceof***REMOVED***this***REMOVED***?***REMOVED***thing***REMOVED***:***REMOVED***new***REMOVED***this(thing);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***concat(first,***REMOVED***...targets)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***computed***REMOVED***=***REMOVED***new***REMOVED***this(first);

***REMOVED******REMOVED******REMOVED******REMOVED***targets.forEach((target)***REMOVED***=>***REMOVED***computed.set(target));

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***computed;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***accessor(header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***internals***REMOVED***=***REMOVED***this[$internals]***REMOVED***=***REMOVED***(this[$internals]***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***accessors:***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***accessors***REMOVED***=***REMOVED***internals.accessors;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prototype***REMOVED***=***REMOVED***this.prototype;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***defineAccessor(_header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lHeader***REMOVED***=***REMOVED***normalizeHeader(_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!accessors[lHeader])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildAccessors(prototype,***REMOVED***_header);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***accessors[lHeader]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***utils.isArray(header)***REMOVED***?***REMOVED***header.forEach(defineAccessor)***REMOVED***:***REMOVED***defineAccessor(header);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}
}

AxiosHeaders.accessor(['Content-Type',***REMOVED***'Content-Length',***REMOVED***'Accept',***REMOVED***'Accept-Encoding',***REMOVED***'User-Agent',***REMOVED***'Authorization']);

//***REMOVED***reserved***REMOVED***names***REMOVED***hotfix
utils.reduceDescriptors(AxiosHeaders.prototype,***REMOVED***({value},***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***mapped***REMOVED***=***REMOVED***key[0].toUpperCase()***REMOVED***+***REMOVED***key.slice(1);***REMOVED***//***REMOVED***map***REMOVED***`set`***REMOVED***=>***REMOVED***`Set`
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***get:***REMOVED***()***REMOVED***=>***REMOVED***value,
***REMOVED******REMOVED******REMOVED******REMOVED***set(headerValue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this[mapped]***REMOVED***=***REMOVED***headerValue;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
});

utils.freezeMethods(AxiosHeaders);

export***REMOVED***default***REMOVED***AxiosHeaders;
