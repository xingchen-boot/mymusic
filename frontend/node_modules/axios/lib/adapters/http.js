'use***REMOVED***strict';

import***REMOVED***utils***REMOVED***from***REMOVED***'./../utils.js';
import***REMOVED***settle***REMOVED***from***REMOVED***'./../core/settle.js';
import***REMOVED***buildFullPath***REMOVED***from***REMOVED***'../core/buildFullPath.js';
import***REMOVED***buildURL***REMOVED***from***REMOVED***'./../helpers/buildURL.js';
import***REMOVED***proxyFromEnv***REMOVED***from***REMOVED***'proxy-from-env';
import***REMOVED***http***REMOVED***from***REMOVED***'http';
import***REMOVED***https***REMOVED***from***REMOVED***'https';
import***REMOVED***util***REMOVED***from***REMOVED***'util';
import***REMOVED***followRedirects***REMOVED***from***REMOVED***'follow-redirects';
import***REMOVED***zlib***REMOVED***from***REMOVED***'zlib';
import***REMOVED***{VERSION}***REMOVED***from***REMOVED***'../env/data.js';
import***REMOVED***transitionalDefaults***REMOVED***from***REMOVED***'../defaults/transitional.js';
import***REMOVED***AxiosError***REMOVED***from***REMOVED***'../core/AxiosError.js';
import***REMOVED***CanceledError***REMOVED***from***REMOVED***'../cancel/CanceledError.js';
import***REMOVED***platform***REMOVED***from***REMOVED***'../platform/index.js';
import***REMOVED***fromDataURI***REMOVED***from***REMOVED***'../helpers/fromDataURI.js';
import***REMOVED***stream***REMOVED***from***REMOVED***'stream';
import***REMOVED***AxiosHeaders***REMOVED***from***REMOVED***'../core/AxiosHeaders.js';
import***REMOVED***AxiosTransformStream***REMOVED***from***REMOVED***'../helpers/AxiosTransformStream.js';
import***REMOVED***{EventEmitter}***REMOVED***from***REMOVED***'events';
import***REMOVED***formDataToStream***REMOVED***from***REMOVED***"../helpers/formDataToStream.js";
import***REMOVED***readBlob***REMOVED***from***REMOVED***"../helpers/readBlob.js";
import***REMOVED***ZlibHeaderTransformStream***REMOVED***from***REMOVED***'../helpers/ZlibHeaderTransformStream.js';
import***REMOVED***callbackify***REMOVED***from***REMOVED***"../helpers/callbackify.js";
import***REMOVED***{progressEventReducer,***REMOVED***progressEventDecorator,***REMOVED***asyncDecorator}***REMOVED***from***REMOVED***"../helpers/progressEventReducer.js";
import***REMOVED***estimateDataURLDecodedBytes***REMOVED***from***REMOVED***'../helpers/estimateDataURLDecodedBytes.js';

const***REMOVED***zlibOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***flush:***REMOVED***zlib.constants.Z_SYNC_FLUSH,
***REMOVED******REMOVED***finishFlush:***REMOVED***zlib.constants.Z_SYNC_FLUSH
};

const***REMOVED***brotliOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***flush:***REMOVED***zlib.constants.BROTLI_OPERATION_FLUSH,
***REMOVED******REMOVED***finishFlush:***REMOVED***zlib.constants.BROTLI_OPERATION_FLUSH
}

const***REMOVED***isBrotliSupported***REMOVED***=***REMOVED***utils.isFunction(zlib.createBrotliDecompress);

const***REMOVED***{http:***REMOVED***httpFollow,***REMOVED***https:***REMOVED***httpsFollow}***REMOVED***=***REMOVED***followRedirects;

const***REMOVED***isHttps***REMOVED***=***REMOVED***/https:?/;

const***REMOVED***supportedProtocols***REMOVED***=***REMOVED***platform.protocols.map(protocol***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***protocol***REMOVED***+***REMOVED***':';
});


const***REMOVED***flushOnFinish***REMOVED***=***REMOVED***(stream,***REMOVED***[throttled,***REMOVED***flush])***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***stream
***REMOVED******REMOVED******REMOVED******REMOVED***.on('end',***REMOVED***flush)
***REMOVED******REMOVED******REMOVED******REMOVED***.on('error',***REMOVED***flush);

***REMOVED******REMOVED***return***REMOVED***throttled;
}


/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***proxy***REMOVED***or***REMOVED***config***REMOVED***beforeRedirects***REMOVED***functions***REMOVED***are***REMOVED***defined,***REMOVED***call***REMOVED***them***REMOVED***with***REMOVED***the***REMOVED***options
***REMOVED*******REMOVED***object.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object<string,***REMOVED***any>}***REMOVED***options***REMOVED***-***REMOVED***The***REMOVED***options***REMOVED***object***REMOVED***that***REMOVED***was***REMOVED***passed***REMOVED***to***REMOVED***the***REMOVED***request.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object<string,***REMOVED***any>}
***REMOVED****/
function***REMOVED***dispatchBeforeRedirect(options,***REMOVED***responseDetails)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(options.beforeRedirects.proxy)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options.beforeRedirects.proxy(options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(options.beforeRedirects.config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options.beforeRedirects.config(options,***REMOVED***responseDetails);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***proxy***REMOVED***or***REMOVED***config***REMOVED***afterRedirects***REMOVED***functions***REMOVED***are***REMOVED***defined,***REMOVED***call***REMOVED***them***REMOVED***with***REMOVED***the***REMOVED***options
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{http.ClientRequestArgs}***REMOVED***options
***REMOVED*******REMOVED***@param***REMOVED***{AxiosProxyConfig}***REMOVED***configProxy***REMOVED***configuration***REMOVED***from***REMOVED***Axios***REMOVED***options***REMOVED***object
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***location
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{http.ClientRequestArgs}
***REMOVED****/
function***REMOVED***setProxy(options,***REMOVED***configProxy,***REMOVED***location)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***proxy***REMOVED***=***REMOVED***configProxy;
***REMOVED******REMOVED***if***REMOVED***(!proxy***REMOVED***&&***REMOVED***proxy***REMOVED***!==***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***proxyUrl***REMOVED***=***REMOVED***proxyFromEnv.getProxyForUrl(location);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxyUrl)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***proxy***REMOVED***=***REMOVED***new***REMOVED***URL(proxyUrl);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(proxy)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Basic***REMOVED***proxy***REMOVED***authorization
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.username)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***proxy.auth***REMOVED***=***REMOVED***(proxy.username***REMOVED***||***REMOVED***'')***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***(proxy.password***REMOVED***||***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.auth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Support***REMOVED***proxy***REMOVED***auth***REMOVED***object***REMOVED***form
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.auth.username***REMOVED***||***REMOVED***proxy.auth.password)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***proxy.auth***REMOVED***=***REMOVED***(proxy.auth.username***REMOVED***||***REMOVED***'')***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***(proxy.auth.password***REMOVED***||***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***base64***REMOVED***=***REMOVED***Buffer
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.from(proxy.auth,***REMOVED***'utf8')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.toString('base64');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.headers['Proxy-Authorization']***REMOVED***=***REMOVED***'Basic***REMOVED***'***REMOVED***+***REMOVED***base64;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***options.headers.host***REMOVED***=***REMOVED***options.hostname***REMOVED***+***REMOVED***(options.port***REMOVED***?***REMOVED***':'***REMOVED***+***REMOVED***options.port***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***proxyHost***REMOVED***=***REMOVED***proxy.hostname***REMOVED***||***REMOVED***proxy.host;
***REMOVED******REMOVED******REMOVED******REMOVED***options.hostname***REMOVED***=***REMOVED***proxyHost;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Replace***REMOVED***'host'***REMOVED***since***REMOVED***options***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***URL***REMOVED***object
***REMOVED******REMOVED******REMOVED******REMOVED***options.host***REMOVED***=***REMOVED***proxyHost;
***REMOVED******REMOVED******REMOVED******REMOVED***options.port***REMOVED***=***REMOVED***proxy.port;
***REMOVED******REMOVED******REMOVED******REMOVED***options.path***REMOVED***=***REMOVED***location;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.protocol)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.protocol***REMOVED***=***REMOVED***proxy.protocol.includes(':')***REMOVED***?***REMOVED***proxy.protocol***REMOVED***:***REMOVED***`${proxy.protocol}:`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***options.beforeRedirects.proxy***REMOVED***=***REMOVED***function***REMOVED***beforeRedirect(redirectOptions)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Configure***REMOVED***proxy***REMOVED***for***REMOVED***redirected***REMOVED***request,***REMOVED***passing***REMOVED***the***REMOVED***original***REMOVED***config***REMOVED***proxy***REMOVED***to***REMOVED***apply
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***the***REMOVED***exact***REMOVED***same***REMOVED***logic***REMOVED***as***REMOVED***if***REMOVED***the***REMOVED***redirected***REMOVED***request***REMOVED***was***REMOVED***performed***REMOVED***by***REMOVED***axios***REMOVED***directly.
***REMOVED******REMOVED******REMOVED******REMOVED***setProxy(redirectOptions,***REMOVED***configProxy,***REMOVED***redirectOptions.href);
***REMOVED******REMOVED***};
}

const***REMOVED***isHttpAdapterSupported***REMOVED***=***REMOVED***typeof***REMOVED***process***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***utils.kindOf(process)***REMOVED***===***REMOVED***'process';

//***REMOVED***temporary***REMOVED***hotfix

const***REMOVED***wrapAsync***REMOVED***=***REMOVED***(asyncExecutor)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***onDone;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***isDone;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***done***REMOVED***=***REMOVED***(value,***REMOVED***isRejected)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isDone)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isDone***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDone***REMOVED***&&***REMOVED***onDone(value,***REMOVED***isRejected);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_resolve***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve(value);
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_reject***REMOVED***=***REMOVED***(reason)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done(reason,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(reason);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***asyncExecutor(_resolve,***REMOVED***_reject,***REMOVED***(onDoneHandler)***REMOVED***=>***REMOVED***(onDone***REMOVED***=***REMOVED***onDoneHandler)).catch(_reject);
***REMOVED******REMOVED***})
};

const***REMOVED***resolveFamily***REMOVED***=***REMOVED***({address,***REMOVED***family})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!utils.isString(address))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***TypeError('address***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***({
***REMOVED******REMOVED******REMOVED******REMOVED***address,
***REMOVED******REMOVED******REMOVED******REMOVED***family:***REMOVED***family***REMOVED***||***REMOVED***(address.indexOf('.')***REMOVED***<***REMOVED***0***REMOVED***?***REMOVED***6***REMOVED***:***REMOVED***4)
***REMOVED******REMOVED***});
}

const***REMOVED***buildAddressEntry***REMOVED***=***REMOVED***(address,***REMOVED***family)***REMOVED***=>***REMOVED***resolveFamily(utils.isObject(address)***REMOVED***?***REMOVED***address***REMOVED***:***REMOVED***{address,***REMOVED***family});

/*eslint***REMOVED***consistent-return:0*/
export***REMOVED***default***REMOVED***isHttpAdapterSupported***REMOVED***&&***REMOVED***function***REMOVED***httpAdapter(config)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***wrapAsync(async***REMOVED***function***REMOVED***dispatchHttpRequest(resolve,***REMOVED***reject,***REMOVED***onDone)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{data,***REMOVED***lookup,***REMOVED***family}***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{responseType,***REMOVED***responseEncoding}***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***method***REMOVED***=***REMOVED***config.method.toUpperCase();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***isDone;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***rejected***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***req;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lookup)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_lookup***REMOVED***=***REMOVED***callbackify(lookup,***REMOVED***(value)***REMOVED***=>***REMOVED***utils.isArray(value)***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***[value]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***hotfix***REMOVED***to***REMOVED***support***REMOVED***opt.all***REMOVED***option***REMOVED***which***REMOVED***is***REMOVED***required***REMOVED***for***REMOVED***node***REMOVED***20.x
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lookup***REMOVED***=***REMOVED***(hostname,***REMOVED***opt,***REMOVED***cb)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_lookup(hostname,***REMOVED***opt,***REMOVED***(err,***REMOVED***arg0,***REMOVED***arg1)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cb(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***addresses***REMOVED***=***REMOVED***utils.isArray(arg0)***REMOVED***?***REMOVED***arg0.map(addr***REMOVED***=>***REMOVED***buildAddressEntry(addr))***REMOVED***:***REMOVED***[buildAddressEntry(arg0,***REMOVED***arg1)];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opt.all***REMOVED***?***REMOVED***cb(err,***REMOVED***addresses)***REMOVED***:***REMOVED***cb(err,***REMOVED***addresses[0].address,***REMOVED***addresses[0].family);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***temporary***REMOVED***internal***REMOVED***emitter***REMOVED***until***REMOVED***the***REMOVED***AxiosRequest***REMOVED***class***REMOVED***will***REMOVED***be***REMOVED***implemented
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***emitter***REMOVED***=***REMOVED***new***REMOVED***EventEmitter();

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onFinished***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.cancelToken)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.cancelToken.unsubscribe(abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.signal.removeEventListener('abort',***REMOVED***abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emitter.removeAllListeners();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***onDone((value,***REMOVED***isRejected)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isDone***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isRejected)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rejected***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onFinished();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***abort(reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emitter.emit('abort',***REMOVED***!reason***REMOVED***||***REMOVED***reason.type***REMOVED***?***REMOVED***new***REMOVED***CanceledError(null,***REMOVED***config,***REMOVED***req)***REMOVED***:***REMOVED***reason);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***emitter.once('abort',***REMOVED***reject);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.cancelToken***REMOVED***||***REMOVED***config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.cancelToken***REMOVED***&&***REMOVED***config.cancelToken.subscribe(abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.signal.aborted***REMOVED***?***REMOVED***abort()***REMOVED***:***REMOVED***config.signal.addEventListener('abort',***REMOVED***abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Parse***REMOVED***url
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fullPath***REMOVED***=***REMOVED***buildFullPath(config.baseURL,***REMOVED***config.url,***REMOVED***config.allowAbsoluteUrls);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***new***REMOVED***URL(fullPath,***REMOVED***platform.hasBrowserEnv***REMOVED***?***REMOVED***platform.origin***REMOVED***:***REMOVED***undefined);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***protocol***REMOVED***=***REMOVED***parsed.protocol***REMOVED***||***REMOVED***supportedProtocols[0];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(protocol***REMOVED***===***REMOVED***'data:')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Apply***REMOVED***the***REMOVED***same***REMOVED***semantics***REMOVED***as***REMOVED***HTTP:***REMOVED***only***REMOVED***enforce***REMOVED***if***REMOVED***a***REMOVED***finite,***REMOVED***non-negative***REMOVED***cap***REMOVED***is***REMOVED***set.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxContentLength***REMOVED***>***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Use***REMOVED***the***REMOVED***exact***REMOVED***string***REMOVED***passed***REMOVED***to***REMOVED***fromDataURI***REMOVED***(config.url);***REMOVED***fall***REMOVED***back***REMOVED***to***REMOVED***fullPath***REMOVED***if***REMOVED***needed.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***dataUrl***REMOVED***=***REMOVED***String(config.url***REMOVED***||***REMOVED***fullPath***REMOVED***||***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***estimated***REMOVED***=***REMOVED***estimateDataURLDecodedBytes(dataUrl);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(estimated***REMOVED***>***REMOVED***config.maxContentLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'maxContentLength***REMOVED***size***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***config.maxContentLength***REMOVED***+***REMOVED***'***REMOVED***exceeded',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_RESPONSE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***convertedData;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(method***REMOVED***!==***REMOVED***'GET')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***405,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***'method***REMOVED***not***REMOVED***allowed',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***{},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***fromDataURI(config.url,***REMOVED***responseType***REMOVED***===***REMOVED***'blob',***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Blob:***REMOVED***config.env***REMOVED***&&***REMOVED***config.env.Blob
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***AxiosError.from(err,***REMOVED***AxiosError.ERR_BAD_REQUEST,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***===***REMOVED***'text')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***convertedData.toString(responseEncoding);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!responseEncoding***REMOVED***||***REMOVED***responseEncoding***REMOVED***===***REMOVED***'utf8')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***utils.stripBOM(convertedData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(responseType***REMOVED***===***REMOVED***'stream')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***stream.Readable.from(convertedData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***convertedData,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***200,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***'OK',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***new***REMOVED***AxiosHeaders(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(supportedProtocols.indexOf(protocol)***REMOVED***===***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Unsupported***REMOVED***protocol***REMOVED***'***REMOVED***+***REMOVED***protocol,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_REQUEST,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***headers***REMOVED***=***REMOVED***AxiosHeaders.from(config.headers).normalize();

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Set***REMOVED***User-Agent***REMOVED***(required***REMOVED***by***REMOVED***some***REMOVED***servers)
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***See***REMOVED***https://github.com/axios/axios/issues/69
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***User-Agent***REMOVED***is***REMOVED***specified;***REMOVED***handle***REMOVED***case***REMOVED***where***REMOVED***no***REMOVED***UA***REMOVED***header***REMOVED***is***REMOVED***desired
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Only***REMOVED***set***REMOVED***header***REMOVED***if***REMOVED***it***REMOVED***hasn't***REMOVED***been***REMOVED***set***REMOVED***in***REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED***headers.set('User-Agent',***REMOVED***'axios/'***REMOVED***+***REMOVED***VERSION,***REMOVED***false);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{onUploadProgress,***REMOVED***onDownloadProgress}***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***maxRate***REMOVED***=***REMOVED***config.maxRate;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxUploadRate***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxDownloadRate***REMOVED***=***REMOVED***undefined;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***support***REMOVED***for***REMOVED***spec***REMOVED***compliant***REMOVED***FormData***REMOVED***objects
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isSpecCompliantForm(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***userBoundary***REMOVED***=***REMOVED***headers.getContentType(/boundary=([-_\w\d]{10,70})/i);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***formDataToStream(data,***REMOVED***(formHeaders)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.set(formHeaders);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tag:***REMOVED***`axios-${VERSION}-boundary`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***boundary:***REMOVED***userBoundary***REMOVED***&&***REMOVED***userBoundary[1]***REMOVED***||***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***support***REMOVED***for***REMOVED***https://www.npmjs.com/package/form-data***REMOVED***api
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils.isFormData(data)***REMOVED***&&***REMOVED***utils.isFunction(data.getHeaders))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.set(data.getHeaders());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!headers.hasContentLength())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***knownLength***REMOVED***=***REMOVED***await***REMOVED***util.promisify(data.getLength).call(data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Number.isFinite(knownLength)***REMOVED***&&***REMOVED***knownLength***REMOVED***>=***REMOVED***0***REMOVED***&&***REMOVED***headers.setContentLength(knownLength);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***no-empty:0*/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils.isBlob(data)***REMOVED***||***REMOVED***utils.isFile(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.size***REMOVED***&&***REMOVED***headers.setContentType(data.type***REMOVED***||***REMOVED***'application/octet-stream');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentLength(data.size***REMOVED***||***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***stream.Readable.from(readBlob(data));
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(data***REMOVED***&&***REMOVED***!utils.isStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Buffer.isBuffer(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Nothing***REMOVED***to***REMOVED***do...
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils.isArrayBuffer(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***Buffer.from(new***REMOVED***Uint8Array(data));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils.isString(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***Buffer.from(data,***REMOVED***'utf-8');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Data***REMOVED***after***REMOVED***transformation***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string,***REMOVED***an***REMOVED***ArrayBuffer,***REMOVED***a***REMOVED***Buffer,***REMOVED***or***REMOVED***a***REMOVED***Stream',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_REQUEST,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***Content-Length***REMOVED***header***REMOVED***if***REMOVED***data***REMOVED***exists
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentLength(data.length,***REMOVED***false);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxBodyLength***REMOVED***>***REMOVED***-1***REMOVED***&&***REMOVED***data.length***REMOVED***>***REMOVED***config.maxBodyLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Request***REMOVED***body***REMOVED***larger***REMOVED***than***REMOVED***maxBodyLength***REMOVED***limit',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_REQUEST,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***contentLength***REMOVED***=***REMOVED***utils.toFiniteNumber(headers.getContentLength());

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isArray(maxRate))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxUploadRate***REMOVED***=***REMOVED***maxRate[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxDownloadRate***REMOVED***=***REMOVED***maxRate[1];
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxUploadRate***REMOVED***=***REMOVED***maxDownloadRate***REMOVED***=***REMOVED***maxRate;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(data***REMOVED***&&***REMOVED***(onUploadProgress***REMOVED***||***REMOVED***maxUploadRate))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils.isStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***stream.Readable.from(data,***REMOVED***{objectMode:***REMOVED***false});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***stream.pipeline([data,***REMOVED***new***REMOVED***AxiosTransformStream({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxRate:***REMOVED***utils.toFiniteNumber(maxUploadRate)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})],***REMOVED***utils.noop);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress***REMOVED***&&***REMOVED***data.on('progress',***REMOVED***flushOnFinish(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***contentLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onUploadProgress),***REMOVED***false,***REMOVED***3)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***HTTP***REMOVED***basic***REMOVED***authentication
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***auth***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.auth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***username***REMOVED***=***REMOVED***config.auth.username***REMOVED***||***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***password***REMOVED***=***REMOVED***config.auth.password***REMOVED***||***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***auth***REMOVED***=***REMOVED***username***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***password;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!auth***REMOVED***&&***REMOVED***parsed.username)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***urlUsername***REMOVED***=***REMOVED***parsed.username;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***urlPassword***REMOVED***=***REMOVED***parsed.password;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***auth***REMOVED***=***REMOVED***urlUsername***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***urlPassword;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***auth***REMOVED***&&***REMOVED***headers.delete('authorization');

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***path;

***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***buildURL(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parsed.pathname***REMOVED***+***REMOVED***parsed.search,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.params,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.paramsSerializer
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***).replace(/^\?/,***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***customErr***REMOVED***=***REMOVED***new***REMOVED***Error(err.message);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customErr.config***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customErr.url***REMOVED***=***REMOVED***config.url;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customErr.exists***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(customErr);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***headers.set(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Accept-Encoding',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'gzip,***REMOVED***compress,***REMOVED***deflate'***REMOVED***+***REMOVED***(isBrotliSupported***REMOVED***?***REMOVED***',***REMOVED***br'***REMOVED***:***REMOVED***''),***REMOVED***false
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***method,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***headers.toJSON(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***agents:***REMOVED***{***REMOVED***http:***REMOVED***config.httpAgent,***REMOVED***https:***REMOVED***config.httpsAgent***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***auth,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***protocol,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***family,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***beforeRedirect:***REMOVED***dispatchBeforeRedirect,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***beforeRedirects:***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***cacheable-lookup***REMOVED***integration***REMOVED***hotfix
***REMOVED******REMOVED******REMOVED******REMOVED***!utils.isUndefined(lookup)***REMOVED***&&***REMOVED***(options.lookup***REMOVED***=***REMOVED***lookup);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.socketPath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.socketPath***REMOVED***=***REMOVED***config.socketPath;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.hostname***REMOVED***=***REMOVED***parsed.hostname.startsWith("[")***REMOVED***?***REMOVED***parsed.hostname.slice(1,***REMOVED***-1)***REMOVED***:***REMOVED***parsed.hostname;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.port***REMOVED***=***REMOVED***parsed.port;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setProxy(options,***REMOVED***config.proxy,***REMOVED***protocol***REMOVED***+***REMOVED***'//'***REMOVED***+***REMOVED***parsed.hostname***REMOVED***+***REMOVED***(parsed.port***REMOVED***?***REMOVED***':'***REMOVED***+***REMOVED***parsed.port***REMOVED***:***REMOVED***'')***REMOVED***+***REMOVED***options.path);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***transport;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isHttpsRequest***REMOVED***=***REMOVED***isHttps.test(options.protocol);
***REMOVED******REMOVED******REMOVED******REMOVED***options.agent***REMOVED***=***REMOVED***isHttpsRequest***REMOVED***?***REMOVED***config.httpsAgent***REMOVED***:***REMOVED***config.httpAgent;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.transport)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transport***REMOVED***=***REMOVED***config.transport;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(config.maxRedirects***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transport***REMOVED***=***REMOVED***isHttpsRequest***REMOVED***?***REMOVED***https***REMOVED***:***REMOVED***http;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxRedirects)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.maxRedirects***REMOVED***=***REMOVED***config.maxRedirects;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.beforeRedirect)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.beforeRedirects.config***REMOVED***=***REMOVED***config.beforeRedirect;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transport***REMOVED***=***REMOVED***isHttpsRequest***REMOVED***?***REMOVED***httpsFollow***REMOVED***:***REMOVED***httpFollow;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxBodyLength***REMOVED***>***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.maxBodyLength***REMOVED***=***REMOVED***config.maxBodyLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***follow-redirects***REMOVED***does***REMOVED***not***REMOVED***skip***REMOVED***comparison,***REMOVED***so***REMOVED***it***REMOVED***should***REMOVED***always***REMOVED***succeed***REMOVED***for***REMOVED***axios***REMOVED***-1***REMOVED***unlimited
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.maxBodyLength***REMOVED***=***REMOVED***Infinity;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.insecureHTTPParser)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.insecureHTTPParser***REMOVED***=***REMOVED***config.insecureHTTPParser;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Create***REMOVED***the***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED***req***REMOVED***=***REMOVED***transport.request(options,***REMOVED***function***REMOVED***handleResponse(res)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(req.destroyed)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***streams***REMOVED***=***REMOVED***[res];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseLength***REMOVED***=***REMOVED***+res.headers['content-length'];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(onDownloadProgress***REMOVED***||***REMOVED***maxDownloadRate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transformStream***REMOVED***=***REMOVED***new***REMOVED***AxiosTransformStream({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxRate:***REMOVED***utils.toFiniteNumber(maxDownloadRate)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDownloadProgress***REMOVED***&&***REMOVED***transformStream.on('progress',***REMOVED***flushOnFinish(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transformStream,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onDownloadProgress),***REMOVED***true,***REMOVED***3)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(transformStream);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***decompress***REMOVED***the***REMOVED***response***REMOVED***body***REMOVED***transparently***REMOVED***if***REMOVED***required
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***responseStream***REMOVED***=***REMOVED***res;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***return***REMOVED***the***REMOVED***last***REMOVED***request***REMOVED***in***REMOVED***case***REMOVED***of***REMOVED***redirects
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lastRequest***REMOVED***=***REMOVED***res.req***REMOVED***||***REMOVED***req;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***decompress***REMOVED***disabled***REMOVED***we***REMOVED***should***REMOVED***not***REMOVED***decompress
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.decompress***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***res.headers['content-encoding'])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***no***REMOVED***content,***REMOVED***but***REMOVED***headers***REMOVED***still***REMOVED***say***REMOVED***that***REMOVED***it***REMOVED***is***REMOVED***encoded,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***the***REMOVED***header***REMOVED***not***REMOVED***confuse***REMOVED***downstream***REMOVED***operations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(method***REMOVED***===***REMOVED***'HEAD'***REMOVED***||***REMOVED***res.statusCode***REMOVED***===***REMOVED***204)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***((res.headers['content-encoding']***REMOVED***||***REMOVED***'').toLowerCase())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***default-case:0*/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'gzip':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'x-gzip':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'compress':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'x-compress':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***add***REMOVED***the***REMOVED***unzipper***REMOVED***to***REMOVED***the***REMOVED***body***REMOVED***stream***REMOVED***processing***REMOVED***pipeline
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(zlib.createUnzip(zlibOptions));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***the***REMOVED***content-encoding***REMOVED***in***REMOVED***order***REMOVED***to***REMOVED***not***REMOVED***confuse***REMOVED***downstream***REMOVED***operations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'deflate':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(new***REMOVED***ZlibHeaderTransformStream());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***add***REMOVED***the***REMOVED***unzipper***REMOVED***to***REMOVED***the***REMOVED***body***REMOVED***stream***REMOVED***processing***REMOVED***pipeline
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(zlib.createUnzip(zlibOptions));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***the***REMOVED***content-encoding***REMOVED***in***REMOVED***order***REMOVED***to***REMOVED***not***REMOVED***confuse***REMOVED***downstream***REMOVED***operations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'br':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isBrotliSupported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(zlib.createBrotliDecompress(brotliOptions));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream***REMOVED***=***REMOVED***streams.length***REMOVED***>***REMOVED***1***REMOVED***?***REMOVED***stream.pipeline(streams,***REMOVED***utils.noop)***REMOVED***:***REMOVED***streams[0];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***offListeners***REMOVED***=***REMOVED***stream.finished(responseStream,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offListeners();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onFinished();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***response***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***res.statusCode,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***res.statusMessage,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***new***REMOVED***AxiosHeaders(res.headers),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request:***REMOVED***lastRequest
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***===***REMOVED***'stream')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.data***REMOVED***=***REMOVED***responseStream;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseBuffer***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***totalResponseBytes***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('data',***REMOVED***function***REMOVED***handleStreamData(chunk)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseBuffer.push(chunk);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***totalResponseBytes***REMOVED***+=***REMOVED***chunk.length;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***make***REMOVED***sure***REMOVED***the***REMOVED***content***REMOVED***length***REMOVED***is***REMOVED***not***REMOVED***over***REMOVED***the***REMOVED***maxContentLength***REMOVED***if***REMOVED***specified
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxContentLength***REMOVED***>***REMOVED***-1***REMOVED***&&***REMOVED***totalResponseBytes***REMOVED***>***REMOVED***config.maxContentLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***stream.destroy()***REMOVED***emit***REMOVED***aborted***REMOVED***event***REMOVED***before***REMOVED***calling***REMOVED***reject()***REMOVED***on***REMOVED***Node.js***REMOVED***v16
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rejected***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.destroy();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError('maxContentLength***REMOVED***size***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***config.maxContentLength***REMOVED***+***REMOVED***'***REMOVED***exceeded',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_RESPONSE,***REMOVED***config,***REMOVED***lastRequest));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('aborted',***REMOVED***function***REMOVED***handlerStreamAborted()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(rejected)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***err***REMOVED***=***REMOVED***new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'stream***REMOVED***has***REMOVED***been***REMOVED***aborted',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_RESPONSE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastRequest
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('error',***REMOVED***function***REMOVED***handleStreamError(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(req.destroyed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(AxiosError.from(err,***REMOVED***null,***REMOVED***config,***REMOVED***lastRequest));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('end',***REMOVED***function***REMOVED***handleStreamEnd()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***responseData***REMOVED***=***REMOVED***responseBuffer.length***REMOVED***===***REMOVED***1***REMOVED***?***REMOVED***responseBuffer[0]***REMOVED***:***REMOVED***Buffer.concat(responseBuffer);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***!==***REMOVED***'arraybuffer')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseData***REMOVED***=***REMOVED***responseData.toString(responseEncoding);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!responseEncoding***REMOVED***||***REMOVED***responseEncoding***REMOVED***===***REMOVED***'utf8')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseData***REMOVED***=***REMOVED***utils.stripBOM(responseData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.data***REMOVED***=***REMOVED***responseData;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(AxiosError.from(err,***REMOVED***null,***REMOVED***config,***REMOVED***response.request,***REMOVED***response));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emitter.once('abort',***REMOVED***err***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!responseStream.destroyed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.emit('error',***REMOVED***err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.destroy();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***emitter.once('abort',***REMOVED***err***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***errors
***REMOVED******REMOVED******REMOVED******REMOVED***req.on('error',***REMOVED***function***REMOVED***handleRequestError(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@todo***REMOVED***remove
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***(req.aborted***REMOVED***&&***REMOVED***err.code***REMOVED***!==***REMOVED***AxiosError.ERR_FR_TOO_MANY_REDIRECTS)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(AxiosError.from(err,***REMOVED***null,***REMOVED***config,***REMOVED***req));
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***set***REMOVED***tcp***REMOVED***keep***REMOVED***alive***REMOVED***to***REMOVED***prevent***REMOVED***drop***REMOVED***connection***REMOVED***by***REMOVED***peer
***REMOVED******REMOVED******REMOVED******REMOVED***req.on('socket',***REMOVED***function***REMOVED***handleRequestSocket(socket)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***default***REMOVED***interval***REMOVED***of***REMOVED***sending***REMOVED***ack***REMOVED***packet***REMOVED***is***REMOVED***1***REMOVED***minute
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***socket.setKeepAlive(true,***REMOVED***1000***REMOVED*******REMOVED***60);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***request***REMOVED***timeout
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.timeout)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***This***REMOVED***is***REMOVED***forcing***REMOVED***a***REMOVED***int***REMOVED***timeout***REMOVED***to***REMOVED***avoid***REMOVED***problems***REMOVED***if***REMOVED***the***REMOVED***`req`***REMOVED***interface***REMOVED***doesn't***REMOVED***handle***REMOVED***other***REMOVED***types.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***timeout***REMOVED***=***REMOVED***parseInt(config.timeout,***REMOVED***10);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Number.isNaN(timeout))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'error***REMOVED***trying***REMOVED***to***REMOVED***parse***REMOVED***`config.timeout`***REMOVED***to***REMOVED***int',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_OPTION_VALUE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Sometime,***REMOVED***the***REMOVED***response***REMOVED***will***REMOVED***be***REMOVED***very***REMOVED***slow,***REMOVED***and***REMOVED***does***REMOVED***not***REMOVED***respond,***REMOVED***the***REMOVED***connect***REMOVED***event***REMOVED***will***REMOVED***be***REMOVED***block***REMOVED***by***REMOVED***event***REMOVED***loop***REMOVED***system.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***And***REMOVED***timer***REMOVED***callback***REMOVED***will***REMOVED***be***REMOVED***fired,***REMOVED***and***REMOVED***abort()***REMOVED***will***REMOVED***be***REMOVED***invoked***REMOVED***before***REMOVED***connection,***REMOVED***then***REMOVED***get***REMOVED***"socket***REMOVED***hang***REMOVED***up"***REMOVED***and***REMOVED***code***REMOVED***ECONNRESET.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***At***REMOVED***this***REMOVED***time,***REMOVED***if***REMOVED***we***REMOVED***have***REMOVED***a***REMOVED***large***REMOVED***number***REMOVED***of***REMOVED***request,***REMOVED***nodejs***REMOVED***will***REMOVED***hang***REMOVED***up***REMOVED***some***REMOVED***socket***REMOVED***on***REMOVED***background.***REMOVED***and***REMOVED***the***REMOVED***number***REMOVED***will***REMOVED***up***REMOVED***and***REMOVED***up.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***And***REMOVED***then***REMOVED***these***REMOVED***socket***REMOVED***which***REMOVED***be***REMOVED***hang***REMOVED***up***REMOVED***will***REMOVED***devouring***REMOVED***CPU***REMOVED***little***REMOVED***by***REMOVED***little.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***ClientRequest.setTimeout***REMOVED***will***REMOVED***be***REMOVED***fired***REMOVED***on***REMOVED***the***REMOVED***specify***REMOVED***milliseconds,***REMOVED***and***REMOVED***can***REMOVED***make***REMOVED***sure***REMOVED***that***REMOVED***abort()***REMOVED***will***REMOVED***be***REMOVED***fired***REMOVED***after***REMOVED***connect.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.setTimeout(timeout,***REMOVED***function***REMOVED***handleRequestTimeout()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isDone)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***timeoutErrorMessage***REMOVED***=***REMOVED***config.timeout***REMOVED***?***REMOVED***'timeout***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***config.timeout***REMOVED***+***REMOVED***'ms***REMOVED***exceeded'***REMOVED***:***REMOVED***'timeout***REMOVED***exceeded';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transitional***REMOVED***=***REMOVED***config.transitional***REMOVED***||***REMOVED***transitionalDefaults;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.timeoutErrorMessage)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutErrorMessage***REMOVED***=***REMOVED***config.timeoutErrorMessage;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutErrorMessage,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transitional.clarifyTimeoutError***REMOVED***?***REMOVED***AxiosError.ETIMEDOUT***REMOVED***:***REMOVED***AxiosError.ECONNABORTED,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***abort();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}


***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Send***REMOVED***the***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***ended***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errored***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.on('end',***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ended***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.once('error',***REMOVED***err***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errored***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.on('close',***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!ended***REMOVED***&&***REMOVED***!errored)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***abort(new***REMOVED***CanceledError('Request***REMOVED***stream***REMOVED***has***REMOVED***been***REMOVED***aborted',***REMOVED***config,***REMOVED***req));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.pipe(req);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.end(data);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});
}

export***REMOVED***const***REMOVED***__setProxy***REMOVED***=***REMOVED***setProxy;
