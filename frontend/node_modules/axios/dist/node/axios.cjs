/*!***REMOVED***Axios***REMOVED***v1.12.2***REMOVED***Copyright***REMOVED***(c)***REMOVED***2025***REMOVED***Matt***REMOVED***Zabriskie***REMOVED***and***REMOVED***contributors***REMOVED****/
'use***REMOVED***strict';

const***REMOVED***FormData$1***REMOVED***=***REMOVED***require('form-data');
const***REMOVED***crypto***REMOVED***=***REMOVED***require('crypto');
const***REMOVED***url***REMOVED***=***REMOVED***require('url');
const***REMOVED***proxyFromEnv***REMOVED***=***REMOVED***require('proxy-from-env');
const***REMOVED***http***REMOVED***=***REMOVED***require('http');
const***REMOVED***https***REMOVED***=***REMOVED***require('https');
const***REMOVED***util***REMOVED***=***REMOVED***require('util');
const***REMOVED***followRedirects***REMOVED***=***REMOVED***require('follow-redirects');
const***REMOVED***zlib***REMOVED***=***REMOVED***require('zlib');
const***REMOVED***stream***REMOVED***=***REMOVED***require('stream');
const***REMOVED***events***REMOVED***=***REMOVED***require('events');

function***REMOVED***_interopDefaultLegacy***REMOVED***(e)***REMOVED***{***REMOVED***return***REMOVED***e***REMOVED***&&***REMOVED***typeof***REMOVED***e***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***'default'***REMOVED***in***REMOVED***e***REMOVED***?***REMOVED***e***REMOVED***:***REMOVED***{***REMOVED***'default':***REMOVED***e***REMOVED***};***REMOVED***}

const***REMOVED***FormData__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(FormData$1);
const***REMOVED***crypto__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(crypto);
const***REMOVED***url__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(url);
const***REMOVED***proxyFromEnv__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(proxyFromEnv);
const***REMOVED***http__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(http);
const***REMOVED***https__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(https);
const***REMOVED***util__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(util);
const***REMOVED***followRedirects__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(followRedirects);
const***REMOVED***zlib__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(zlib);
const***REMOVED***stream__default***REMOVED***=***REMOVED***/*#__PURE__*/_interopDefaultLegacy(stream);

function***REMOVED***bind(fn,***REMOVED***thisArg)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***function***REMOVED***wrap()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fn.apply(thisArg,***REMOVED***arguments);
***REMOVED******REMOVED***};
}

//***REMOVED***utils***REMOVED***is***REMOVED***a***REMOVED***library***REMOVED***of***REMOVED***generic***REMOVED***helper***REMOVED***functions***REMOVED***non-specific***REMOVED***to***REMOVED***axios

const***REMOVED***{toString}***REMOVED***=***REMOVED***Object.prototype;
const***REMOVED***{getPrototypeOf}***REMOVED***=***REMOVED***Object;
const***REMOVED***{iterator,***REMOVED***toStringTag}***REMOVED***=***REMOVED***Symbol;

const***REMOVED***kindOf***REMOVED***=***REMOVED***(cache***REMOVED***=>***REMOVED***thing***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***str***REMOVED***=***REMOVED***toString.call(thing);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cache[str]***REMOVED***||***REMOVED***(cache[str]***REMOVED***=***REMOVED***str.slice(8,***REMOVED***-1).toLowerCase());
})(Object.create(null));

const***REMOVED***kindOfTest***REMOVED***=***REMOVED***(type)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***type***REMOVED***=***REMOVED***type.toLowerCase();
***REMOVED******REMOVED***return***REMOVED***(thing)***REMOVED***=>***REMOVED***kindOf(thing)***REMOVED***===***REMOVED***type
};

const***REMOVED***typeOfTest***REMOVED***=***REMOVED***type***REMOVED***=>***REMOVED***thing***REMOVED***=>***REMOVED***typeof***REMOVED***thing***REMOVED***===***REMOVED***type;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Array
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Array,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***{isArray}***REMOVED***=***REMOVED***Array;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***undefined
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***the***REMOVED***value***REMOVED***is***REMOVED***undefined,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isUndefined***REMOVED***=***REMOVED***typeOfTest('undefined');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Buffer
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Buffer,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
function***REMOVED***isBuffer(val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***val***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***!isUndefined(val)***REMOVED***&&***REMOVED***val.constructor***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***!isUndefined(val.constructor)
***REMOVED******REMOVED******REMOVED******REMOVED***&&***REMOVED***isFunction$1(val.constructor.isBuffer)***REMOVED***&&***REMOVED***val.constructor.isBuffer(val);
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***ArrayBuffer
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***ArrayBuffer,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isArrayBuffer***REMOVED***=***REMOVED***kindOfTest('ArrayBuffer');


/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***view***REMOVED***on***REMOVED***an***REMOVED***ArrayBuffer
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***view***REMOVED***on***REMOVED***an***REMOVED***ArrayBuffer,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
function***REMOVED***isArrayBufferView(val)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***result;
***REMOVED******REMOVED***if***REMOVED***((typeof***REMOVED***ArrayBuffer***REMOVED***!==***REMOVED***'undefined')***REMOVED***&&***REMOVED***(ArrayBuffer.isView))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***ArrayBuffer.isView(val);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***(val)***REMOVED***&&***REMOVED***(val.buffer)***REMOVED***&&***REMOVED***(isArrayBuffer(val.buffer));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***String
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***String,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isString***REMOVED***=***REMOVED***typeOfTest('string');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Function
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Function,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFunction$1***REMOVED***=***REMOVED***typeOfTest('function');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Number
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Number,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isNumber***REMOVED***=***REMOVED***typeOfTest('number');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***thing***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***Object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isObject***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***thing***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***thing***REMOVED***===***REMOVED***'object';

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Boolean
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***thing***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Boolean,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isBoolean***REMOVED***=***REMOVED***thing***REMOVED***=>***REMOVED***thing***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***thing***REMOVED***===***REMOVED***false;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***plain***REMOVED***Object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***plain***REMOVED***Object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isPlainObject***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(kindOf(val)***REMOVED***!==***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***prototype***REMOVED***=***REMOVED***getPrototypeOf(val);
***REMOVED******REMOVED***return***REMOVED***(prototype***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***prototype***REMOVED***===***REMOVED***Object.prototype***REMOVED***||***REMOVED***Object.getPrototypeOf(prototype)***REMOVED***===***REMOVED***null)***REMOVED***&&***REMOVED***!(toStringTag***REMOVED***in***REMOVED***val)***REMOVED***&&***REMOVED***!(iterator***REMOVED***in***REMOVED***val);
};

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***empty***REMOVED***object***REMOVED***(safely***REMOVED***handles***REMOVED***Buffers)
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***empty***REMOVED***object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isEmptyObject***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Early***REMOVED***return***REMOVED***for***REMOVED***non-objects***REMOVED***or***REMOVED***Buffers***REMOVED***to***REMOVED***prevent***REMOVED***RangeError
***REMOVED******REMOVED***if***REMOVED***(!isObject(val)***REMOVED***||***REMOVED***isBuffer(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.keys(val).length***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***Object.getPrototypeOf(val)***REMOVED***===***REMOVED***Object.prototype;
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Fallback***REMOVED***for***REMOVED***any***REMOVED***other***REMOVED***objects***REMOVED***that***REMOVED***might***REMOVED***cause***REMOVED***RangeError***REMOVED***with***REMOVED***Object.keys()
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
};

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Date
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Date,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isDate***REMOVED***=***REMOVED***kindOfTest('Date');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***File
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***File,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFile***REMOVED***=***REMOVED***kindOfTest('File');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Blob
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Blob,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isBlob***REMOVED***=***REMOVED***kindOfTest('Blob');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***FileList
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***File,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFileList***REMOVED***=***REMOVED***kindOfTest('FileList');

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Stream
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***Stream,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isStream***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***isObject(val)***REMOVED***&&***REMOVED***isFunction$1(val.pipe);

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***FormData
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***thing***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***an***REMOVED***FormData,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isFormData***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***kind;
***REMOVED******REMOVED***return***REMOVED***thing***REMOVED***&&***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED***(typeof***REMOVED***FormData***REMOVED***===***REMOVED***'function'***REMOVED***&&***REMOVED***thing***REMOVED***instanceof***REMOVED***FormData)***REMOVED***||***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isFunction$1(thing.append)***REMOVED***&&***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(kind***REMOVED***=***REMOVED***kindOf(thing))***REMOVED***===***REMOVED***'formdata'***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***detect***REMOVED***form-data***REMOVED***instance
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(kind***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***isFunction$1(thing.toString)***REMOVED***&&***REMOVED***thing.toString()***REMOVED***===***REMOVED***'[object***REMOVED***FormData]')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED***)
};

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***URLSearchParams***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***URLSearchParams***REMOVED***object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isURLSearchParams***REMOVED***=***REMOVED***kindOfTest('URLSearchParams');

const***REMOVED***[isReadableStream,***REMOVED***isRequest,***REMOVED***isResponse,***REMOVED***isHeaders]***REMOVED***=***REMOVED***['ReadableStream',***REMOVED***'Request',***REMOVED***'Response',***REMOVED***'Headers'].map(kindOfTest);

/**
***REMOVED*******REMOVED***Trim***REMOVED***excess***REMOVED***whitespace***REMOVED***off***REMOVED***the***REMOVED***beginning***REMOVED***and***REMOVED***end***REMOVED***of***REMOVED***a***REMOVED***string
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***str***REMOVED***The***REMOVED***String***REMOVED***to***REMOVED***trim
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{String}***REMOVED***The***REMOVED***String***REMOVED***freed***REMOVED***of***REMOVED***excess***REMOVED***whitespace
***REMOVED****/
const***REMOVED***trim***REMOVED***=***REMOVED***(str)***REMOVED***=>***REMOVED***str.trim***REMOVED***?
***REMOVED******REMOVED***str.trim()***REMOVED***:***REMOVED***str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,***REMOVED***'');

/**
***REMOVED*******REMOVED***Iterate***REMOVED***over***REMOVED***an***REMOVED***Array***REMOVED***or***REMOVED***an***REMOVED***Object***REMOVED***invoking***REMOVED***a***REMOVED***function***REMOVED***for***REMOVED***each***REMOVED***item.
***REMOVED****
***REMOVED*******REMOVED***If***REMOVED***`obj`***REMOVED***is***REMOVED***an***REMOVED***Array***REMOVED***callback***REMOVED***will***REMOVED***be***REMOVED***called***REMOVED***passing
***REMOVED*******REMOVED***the***REMOVED***value,***REMOVED***index,***REMOVED***and***REMOVED***complete***REMOVED***array***REMOVED***for***REMOVED***each***REMOVED***item.
***REMOVED****
***REMOVED*******REMOVED***If***REMOVED***'obj'***REMOVED***is***REMOVED***an***REMOVED***Object***REMOVED***callback***REMOVED***will***REMOVED***be***REMOVED***called***REMOVED***passing
***REMOVED*******REMOVED***the***REMOVED***value,***REMOVED***key,***REMOVED***and***REMOVED***complete***REMOVED***object***REMOVED***for***REMOVED***each***REMOVED***property.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object|Array}***REMOVED***obj***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***iterate
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fn***REMOVED***The***REMOVED***callback***REMOVED***to***REMOVED***invoke***REMOVED***for***REMOVED***each***REMOVED***item
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***[allOwnKeys***REMOVED***=***REMOVED***false]
***REMOVED*******REMOVED***@returns***REMOVED***{any}
***REMOVED****/
function***REMOVED***forEach(obj,***REMOVED***fn,***REMOVED***{allOwnKeys***REMOVED***=***REMOVED***false}***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Don't***REMOVED***bother***REMOVED***if***REMOVED***no***REMOVED***value***REMOVED***provided
***REMOVED******REMOVED***if***REMOVED***(obj***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***typeof***REMOVED***obj***REMOVED***===***REMOVED***'undefined')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***i;
***REMOVED******REMOVED***let***REMOVED***l;

***REMOVED******REMOVED***//***REMOVED***Force***REMOVED***an***REMOVED***array***REMOVED***if***REMOVED***not***REMOVED***already***REMOVED***something***REMOVED***iterable
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***obj***REMOVED***!==***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***no-param-reassign:0*/
***REMOVED******REMOVED******REMOVED******REMOVED***obj***REMOVED***=***REMOVED***[obj];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isArray(obj))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Iterate***REMOVED***over***REMOVED***array***REMOVED***values
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(i***REMOVED***=***REMOVED***0,***REMOVED***l***REMOVED***=***REMOVED***obj.length;***REMOVED***i***REMOVED***<***REMOVED***l;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fn.call(null,***REMOVED***obj[i],***REMOVED***i,***REMOVED***obj);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Buffer***REMOVED***check
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isBuffer(obj))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Iterate***REMOVED***over***REMOVED***object***REMOVED***keys
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***allOwnKeys***REMOVED***?***REMOVED***Object.getOwnPropertyNames(obj)***REMOVED***:***REMOVED***Object.keys(obj);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***key;

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fn.call(null,***REMOVED***obj[key],***REMOVED***key,***REMOVED***obj);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

function***REMOVED***findKey(obj,***REMOVED***key)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isBuffer(obj)){
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***key***REMOVED***=***REMOVED***key.toLowerCase();
***REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(obj);
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED***let***REMOVED***_key;
***REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***_key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***_key.toLowerCase())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***_key;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***null;
}

const***REMOVED***_global***REMOVED***=***REMOVED***(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***/*eslint***REMOVED***no-undef:0*/
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***globalThis***REMOVED***!==***REMOVED***"undefined")***REMOVED***return***REMOVED***globalThis;
***REMOVED******REMOVED***return***REMOVED***typeof***REMOVED***self***REMOVED***!==***REMOVED***"undefined"***REMOVED***?***REMOVED***self***REMOVED***:***REMOVED***(typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***?***REMOVED***window***REMOVED***:***REMOVED***global)
})();

const***REMOVED***isContextDefined***REMOVED***=***REMOVED***(context)***REMOVED***=>***REMOVED***!isUndefined(context)***REMOVED***&&***REMOVED***context***REMOVED***!==***REMOVED***_global;

/**
***REMOVED*******REMOVED***Accepts***REMOVED***varargs***REMOVED***expecting***REMOVED***each***REMOVED***argument***REMOVED***to***REMOVED***be***REMOVED***an***REMOVED***object,***REMOVED***then
***REMOVED*******REMOVED***immutably***REMOVED***merges***REMOVED***the***REMOVED***properties***REMOVED***of***REMOVED***each***REMOVED***object***REMOVED***and***REMOVED***returns***REMOVED***result.
***REMOVED****
***REMOVED*******REMOVED***When***REMOVED***multiple***REMOVED***objects***REMOVED***contain***REMOVED***the***REMOVED***same***REMOVED***key***REMOVED***the***REMOVED***later***REMOVED***object***REMOVED***in
***REMOVED*******REMOVED***the***REMOVED***arguments***REMOVED***list***REMOVED***will***REMOVED***take***REMOVED***precedence.
***REMOVED****
***REMOVED*******REMOVED***Example:
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***merge({foo:***REMOVED***123},***REMOVED***{foo:***REMOVED***456});
***REMOVED*******REMOVED***console.log(result.foo);***REMOVED***//***REMOVED***outputs***REMOVED***456
***REMOVED*******REMOVED***```
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***obj1***REMOVED***Object***REMOVED***to***REMOVED***merge
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***Result***REMOVED***of***REMOVED***all***REMOVED***merge***REMOVED***properties
***REMOVED****/
function***REMOVED***merge(/****REMOVED***obj1,***REMOVED***obj2,***REMOVED***obj3,***REMOVED***...***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{caseless,***REMOVED***skipUndefined}***REMOVED***=***REMOVED***isContextDefined(this)***REMOVED***&&***REMOVED***this***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***assignValue***REMOVED***=***REMOVED***(val,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***targetKey***REMOVED***=***REMOVED***caseless***REMOVED***&&***REMOVED***findKey(result,***REMOVED***key)***REMOVED***||***REMOVED***key;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isPlainObject(result[targetKey])***REMOVED***&&***REMOVED***isPlainObject(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***merge(result[targetKey],***REMOVED***val);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(isPlainObject(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***merge({},***REMOVED***val);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(isArray(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***val.slice();
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(!skipUndefined***REMOVED***||***REMOVED***!isUndefined(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result[targetKey]***REMOVED***=***REMOVED***val;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0,***REMOVED***l***REMOVED***=***REMOVED***arguments.length;***REMOVED***i***REMOVED***<***REMOVED***l;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arguments[i]***REMOVED***&&***REMOVED***forEach(arguments[i],***REMOVED***assignValue);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}

/**
***REMOVED*******REMOVED***Extends***REMOVED***object***REMOVED***a***REMOVED***by***REMOVED***mutably***REMOVED***adding***REMOVED***to***REMOVED***it***REMOVED***the***REMOVED***properties***REMOVED***of***REMOVED***object***REMOVED***b.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***a***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***be***REMOVED***extended
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***b***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***copy***REMOVED***properties***REMOVED***from
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***thisArg***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***bind***REMOVED***function***REMOVED***to
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***[allOwnKeys]
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***The***REMOVED***resulting***REMOVED***value***REMOVED***of***REMOVED***object***REMOVED***a
***REMOVED****/
const***REMOVED***extend***REMOVED***=***REMOVED***(a,***REMOVED***b,***REMOVED***thisArg,***REMOVED***{allOwnKeys}=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***forEach(b,***REMOVED***(val,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(thisArg***REMOVED***&&***REMOVED***isFunction$1(val))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***a[key]***REMOVED***=***REMOVED***bind(val,***REMOVED***thisArg);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***a[key]***REMOVED***=***REMOVED***val;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***},***REMOVED***{allOwnKeys});
***REMOVED******REMOVED***return***REMOVED***a;
};

/**
***REMOVED*******REMOVED***Remove***REMOVED***byte***REMOVED***order***REMOVED***marker.***REMOVED***This***REMOVED***catches***REMOVED***EF***REMOVED***BB***REMOVED***BF***REMOVED***(the***REMOVED***UTF-8***REMOVED***BOM)
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***content***REMOVED***with***REMOVED***BOM
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***content***REMOVED***value***REMOVED***without***REMOVED***BOM
***REMOVED****/
const***REMOVED***stripBOM***REMOVED***=***REMOVED***(content)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(content.charCodeAt(0)***REMOVED***===***REMOVED***0xFEFF)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***content***REMOVED***=***REMOVED***content.slice(1);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***content;
};

/**
***REMOVED*******REMOVED***Inherit***REMOVED***the***REMOVED***prototype***REMOVED***methods***REMOVED***from***REMOVED***one***REMOVED***constructor***REMOVED***into***REMOVED***another
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***constructor
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***superConstructor
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***[props]
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***[descriptors]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED****/
const***REMOVED***inherits***REMOVED***=***REMOVED***(constructor,***REMOVED***superConstructor,***REMOVED***props,***REMOVED***descriptors)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***constructor.prototype***REMOVED***=***REMOVED***Object.create(superConstructor.prototype,***REMOVED***descriptors);
***REMOVED******REMOVED***constructor.prototype.constructor***REMOVED***=***REMOVED***constructor;
***REMOVED******REMOVED***Object.defineProperty(constructor,***REMOVED***'super',***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***value:***REMOVED***superConstructor.prototype
***REMOVED******REMOVED***});
***REMOVED******REMOVED***props***REMOVED***&&***REMOVED***Object.assign(constructor.prototype,***REMOVED***props);
};

/**
***REMOVED*******REMOVED***Resolve***REMOVED***object***REMOVED***with***REMOVED***deep***REMOVED***prototype***REMOVED***chain***REMOVED***to***REMOVED***a***REMOVED***flat***REMOVED***object
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***sourceObj***REMOVED***source***REMOVED***object
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[destObj]
***REMOVED*******REMOVED***@param***REMOVED***{Function|Boolean}***REMOVED***[filter]
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***[propFilter]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}
***REMOVED****/
const***REMOVED***toFlatObject***REMOVED***=***REMOVED***(sourceObj,***REMOVED***destObj,***REMOVED***filter,***REMOVED***propFilter)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***props;
***REMOVED******REMOVED***let***REMOVED***i;
***REMOVED******REMOVED***let***REMOVED***prop;
***REMOVED******REMOVED***const***REMOVED***merged***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***destObj***REMOVED***=***REMOVED***destObj***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-eq-null,eqeqeq
***REMOVED******REMOVED***if***REMOVED***(sourceObj***REMOVED***==***REMOVED***null)***REMOVED***return***REMOVED***destObj;

***REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***props***REMOVED***=***REMOVED***Object.getOwnPropertyNames(sourceObj);
***REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***props.length;
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prop***REMOVED***=***REMOVED***props[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((!propFilter***REMOVED***||***REMOVED***propFilter(prop,***REMOVED***sourceObj,***REMOVED***destObj))***REMOVED***&&***REMOVED***!merged[prop])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***destObj[prop]***REMOVED***=***REMOVED***sourceObj[prop];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***merged[prop]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***sourceObj***REMOVED***=***REMOVED***filter***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***getPrototypeOf(sourceObj);
***REMOVED******REMOVED***}***REMOVED***while***REMOVED***(sourceObj***REMOVED***&&***REMOVED***(!filter***REMOVED***||***REMOVED***filter(sourceObj,***REMOVED***destObj))***REMOVED***&&***REMOVED***sourceObj***REMOVED***!==***REMOVED***Object.prototype);

***REMOVED******REMOVED***return***REMOVED***destObj;
};

/**
***REMOVED*******REMOVED***Determines***REMOVED***whether***REMOVED***a***REMOVED***string***REMOVED***ends***REMOVED***with***REMOVED***the***REMOVED***characters***REMOVED***of***REMOVED***a***REMOVED***specified***REMOVED***string
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***str
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***searchString
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***[position=***REMOVED***0]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
const***REMOVED***endsWith***REMOVED***=***REMOVED***(str,***REMOVED***searchString,***REMOVED***position)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***str***REMOVED***=***REMOVED***String(str);
***REMOVED******REMOVED***if***REMOVED***(position***REMOVED***===***REMOVED***undefined***REMOVED***||***REMOVED***position***REMOVED***>***REMOVED***str.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***position***REMOVED***=***REMOVED***str.length;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***position***REMOVED***-=***REMOVED***searchString.length;
***REMOVED******REMOVED***const***REMOVED***lastIndex***REMOVED***=***REMOVED***str.indexOf(searchString,***REMOVED***position);
***REMOVED******REMOVED***return***REMOVED***lastIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***lastIndex***REMOVED***===***REMOVED***position;
};


/**
***REMOVED*******REMOVED***Returns***REMOVED***new***REMOVED***array***REMOVED***from***REMOVED***array***REMOVED***like***REMOVED***object***REMOVED***or***REMOVED***null***REMOVED***if***REMOVED***failed
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***[thing]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{?Array}
***REMOVED****/
const***REMOVED***toArray***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!thing)***REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***if***REMOVED***(isArray(thing))***REMOVED***return***REMOVED***thing;
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***thing.length;
***REMOVED******REMOVED***if***REMOVED***(!isNumber(i))***REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***const***REMOVED***arr***REMOVED***=***REMOVED***new***REMOVED***Array(i);
***REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arr[i]***REMOVED***=***REMOVED***thing[i];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***arr;
};

/**
***REMOVED*******REMOVED***Checking***REMOVED***if***REMOVED***the***REMOVED***Uint8Array***REMOVED***exists***REMOVED***and***REMOVED***if***REMOVED***it***REMOVED***does,***REMOVED***it***REMOVED***returns***REMOVED***a***REMOVED***function***REMOVED***that***REMOVED***checks***REMOVED***if***REMOVED***the
***REMOVED*******REMOVED***thing***REMOVED***passed***REMOVED***in***REMOVED***is***REMOVED***an***REMOVED***instance***REMOVED***of***REMOVED***Uint8Array
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{TypedArray}
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Array}
***REMOVED****/
//***REMOVED***eslint-disable-next-line***REMOVED***func-names
const***REMOVED***isTypedArray***REMOVED***=***REMOVED***(TypedArray***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED***return***REMOVED***thing***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***TypedArray***REMOVED***&&***REMOVED***thing***REMOVED***instanceof***REMOVED***TypedArray;
***REMOVED******REMOVED***};
})(typeof***REMOVED***Uint8Array***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***getPrototypeOf(Uint8Array));

/**
***REMOVED*******REMOVED***For***REMOVED***each***REMOVED***entry***REMOVED***in***REMOVED***the***REMOVED***object,***REMOVED***call***REMOVED***the***REMOVED***function***REMOVED***with***REMOVED***the***REMOVED***key***REMOVED***and***REMOVED***value.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object<any,***REMOVED***any>}***REMOVED***obj***REMOVED***-***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***iterate***REMOVED***over.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fn***REMOVED***-***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***call***REMOVED***for***REMOVED***each***REMOVED***entry.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED****/
const***REMOVED***forEachEntry***REMOVED***=***REMOVED***(obj,***REMOVED***fn)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***generator***REMOVED***=***REMOVED***obj***REMOVED***&&***REMOVED***obj[iterator];

***REMOVED******REMOVED***const***REMOVED***_iterator***REMOVED***=***REMOVED***generator.call(obj);

***REMOVED******REMOVED***let***REMOVED***result;

***REMOVED******REMOVED***while***REMOVED***((result***REMOVED***=***REMOVED***_iterator.next())***REMOVED***&&***REMOVED***!result.done)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pair***REMOVED***=***REMOVED***result.value;
***REMOVED******REMOVED******REMOVED******REMOVED***fn.call(obj,***REMOVED***pair[0],***REMOVED***pair[1]);
***REMOVED******REMOVED***}
};

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***regular***REMOVED***expression***REMOVED***and***REMOVED***a***REMOVED***string,***REMOVED***and***REMOVED***returns***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***all***REMOVED***the***REMOVED***matches
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***regExp***REMOVED***-***REMOVED***The***REMOVED***regular***REMOVED***expression***REMOVED***to***REMOVED***match***REMOVED***against.
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***str***REMOVED***-***REMOVED***The***REMOVED***string***REMOVED***to***REMOVED***search.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Array<boolean>}
***REMOVED****/
const***REMOVED***matchAll***REMOVED***=***REMOVED***(regExp,***REMOVED***str)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***matches;
***REMOVED******REMOVED***const***REMOVED***arr***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***while***REMOVED***((matches***REMOVED***=***REMOVED***regExp.exec(str))***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arr.push(matches);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***arr;
};

/****REMOVED***Checking***REMOVED***if***REMOVED***the***REMOVED***kindOfTest***REMOVED***function***REMOVED***returns***REMOVED***true***REMOVED***when***REMOVED***passed***REMOVED***an***REMOVED***HTMLFormElement.***REMOVED****/
const***REMOVED***isHTMLForm***REMOVED***=***REMOVED***kindOfTest('HTMLFormElement');

const***REMOVED***toCamelCase***REMOVED***=***REMOVED***str***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,
***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***replacer(m,***REMOVED***p1,***REMOVED***p2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***p1.toUpperCase()***REMOVED***+***REMOVED***p2;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***);
};

/****REMOVED***Creating***REMOVED***a***REMOVED***function***REMOVED***that***REMOVED***will***REMOVED***check***REMOVED***if***REMOVED***an***REMOVED***object***REMOVED***has***REMOVED***a***REMOVED***property.***REMOVED****/
const***REMOVED***hasOwnProperty***REMOVED***=***REMOVED***(({hasOwnProperty})***REMOVED***=>***REMOVED***(obj,***REMOVED***prop)***REMOVED***=>***REMOVED***hasOwnProperty.call(obj,***REMOVED***prop))(Object.prototype);

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***a***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***RegExp***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***value***REMOVED***is***REMOVED***a***REMOVED***RegExp***REMOVED***object,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
const***REMOVED***isRegExp***REMOVED***=***REMOVED***kindOfTest('RegExp');

const***REMOVED***reduceDescriptors***REMOVED***=***REMOVED***(obj,***REMOVED***reducer)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***descriptors***REMOVED***=***REMOVED***Object.getOwnPropertyDescriptors(obj);
***REMOVED******REMOVED***const***REMOVED***reducedDescriptors***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***forEach(descriptors,***REMOVED***(descriptor,***REMOVED***name)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***ret;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((ret***REMOVED***=***REMOVED***reducer(descriptor,***REMOVED***name,***REMOVED***obj))***REMOVED***!==***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reducedDescriptors[name]***REMOVED***=***REMOVED***ret***REMOVED***||***REMOVED***descriptor;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});

***REMOVED******REMOVED***Object.defineProperties(obj,***REMOVED***reducedDescriptors);
};

/**
***REMOVED*******REMOVED***Makes***REMOVED***all***REMOVED***methods***REMOVED***read-only
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***obj
***REMOVED****/

const***REMOVED***freezeMethods***REMOVED***=***REMOVED***(obj)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***reduceDescriptors(obj,***REMOVED***(descriptor,***REMOVED***name)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***skip***REMOVED***restricted***REMOVED***props***REMOVED***in***REMOVED***strict***REMOVED***mode
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isFunction$1(obj)***REMOVED***&&***REMOVED***['arguments',***REMOVED***'caller',***REMOVED***'callee'].indexOf(name)***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***obj[name];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isFunction$1(value))***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED***descriptor.enumerable***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***('writable'***REMOVED***in***REMOVED***descriptor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor.writable***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!descriptor.set)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor.set***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***Error('Can***REMOVED***not***REMOVED***rewrite***REMOVED***read-only***REMOVED***method***REMOVED***\''***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***'\'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});
};

const***REMOVED***toObjectSet***REMOVED***=***REMOVED***(arrayOrString,***REMOVED***delimiter)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***const***REMOVED***define***REMOVED***=***REMOVED***(arr)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***arr.forEach(value***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***obj[value]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***};

***REMOVED******REMOVED***isArray(arrayOrString)***REMOVED***?***REMOVED***define(arrayOrString)***REMOVED***:***REMOVED***define(String(arrayOrString).split(delimiter));

***REMOVED******REMOVED***return***REMOVED***obj;
};

const***REMOVED***noop***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{};

const***REMOVED***toFiniteNumber***REMOVED***=***REMOVED***(value,***REMOVED***defaultValue)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***value***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***Number.isFinite(value***REMOVED***=***REMOVED***+value)***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***defaultValue;
};



/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***thing***REMOVED***is***REMOVED***a***REMOVED***FormData***REMOVED***object,***REMOVED***return***REMOVED***true,***REMOVED***otherwise***REMOVED***return***REMOVED***false.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{unknown}***REMOVED***thing***REMOVED***-***REMOVED***The***REMOVED***thing***REMOVED***to***REMOVED***check.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
function***REMOVED***isSpecCompliantForm(thing)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***!!(thing***REMOVED***&&***REMOVED***isFunction$1(thing.append)***REMOVED***&&***REMOVED***thing[toStringTag]***REMOVED***===***REMOVED***'FormData'***REMOVED***&&***REMOVED***thing[iterator]);
}

const***REMOVED***toJSONObject***REMOVED***=***REMOVED***(obj)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***stack***REMOVED***=***REMOVED***new***REMOVED***Array(10);

***REMOVED******REMOVED***const***REMOVED***visit***REMOVED***=***REMOVED***(source,***REMOVED***i)***REMOVED***=>***REMOVED***{

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObject(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stack.indexOf(source)***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//Buffer***REMOVED***check
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isBuffer(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!('toJSON'***REMOVED***in***REMOVED***source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack[i]***REMOVED***=***REMOVED***source;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***target***REMOVED***=***REMOVED***isArray(source)***REMOVED***?***REMOVED***[]***REMOVED***:***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***forEach(source,***REMOVED***(value,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***reducedValue***REMOVED***=***REMOVED***visit(value,***REMOVED***i***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!isUndefined(reducedValue)***REMOVED***&&***REMOVED***(target[key]***REMOVED***=***REMOVED***reducedValue);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack[i]***REMOVED***=***REMOVED***undefined;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***target;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***visit(obj,***REMOVED***0);
};

const***REMOVED***isAsyncFn***REMOVED***=***REMOVED***kindOfTest('AsyncFunction');

const***REMOVED***isThenable***REMOVED***=***REMOVED***(thing)***REMOVED***=>
***REMOVED******REMOVED***thing***REMOVED***&&***REMOVED***(isObject(thing)***REMOVED***||***REMOVED***isFunction$1(thing))***REMOVED***&&***REMOVED***isFunction$1(thing.then)***REMOVED***&&***REMOVED***isFunction$1(thing.catch);

//***REMOVED***original***REMOVED***code
//***REMOVED***https://github.com/DigitalBrainJS/AxiosPromise/blob/16deab13710ec09779922131f3fa5954320f83ab/lib/utils.js#L11-L34

const***REMOVED***_setImmediate***REMOVED***=***REMOVED***((setImmediateSupported,***REMOVED***postMessageSupported)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(setImmediateSupported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***setImmediate;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***postMessageSupported***REMOVED***?***REMOVED***((token,***REMOVED***callbacks)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***_global.addEventListener("message",***REMOVED***({source,***REMOVED***data})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(source***REMOVED***===***REMOVED***_global***REMOVED***&&***REMOVED***data***REMOVED***===***REMOVED***token)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callbacks.length***REMOVED***&&***REMOVED***callbacks.shift()();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***false);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(cb)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callbacks.push(cb);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_global.postMessage(token,***REMOVED***"*");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***})(`axios@${Math.random()}`,***REMOVED***[])***REMOVED***:***REMOVED***(cb)***REMOVED***=>***REMOVED***setTimeout(cb);
})(
***REMOVED******REMOVED***typeof***REMOVED***setImmediate***REMOVED***===***REMOVED***'function',
***REMOVED******REMOVED***isFunction$1(_global.postMessage)
);

const***REMOVED***asap***REMOVED***=***REMOVED***typeof***REMOVED***queueMicrotask***REMOVED***!==***REMOVED***'undefined'***REMOVED***?
***REMOVED******REMOVED***queueMicrotask.bind(_global)***REMOVED***:***REMOVED***(***REMOVED***typeof***REMOVED***process***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***process.nextTick***REMOVED***||***REMOVED***_setImmediate);

//***REMOVED************************


const***REMOVED***isIterable***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***thing***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***isFunction$1(thing[iterator]);


const***REMOVED***utils$1***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***isArray,
***REMOVED******REMOVED***isArrayBuffer,
***REMOVED******REMOVED***isBuffer,
***REMOVED******REMOVED***isFormData,
***REMOVED******REMOVED***isArrayBufferView,
***REMOVED******REMOVED***isString,
***REMOVED******REMOVED***isNumber,
***REMOVED******REMOVED***isBoolean,
***REMOVED******REMOVED***isObject,
***REMOVED******REMOVED***isPlainObject,
***REMOVED******REMOVED***isEmptyObject,
***REMOVED******REMOVED***isReadableStream,
***REMOVED******REMOVED***isRequest,
***REMOVED******REMOVED***isResponse,
***REMOVED******REMOVED***isHeaders,
***REMOVED******REMOVED***isUndefined,
***REMOVED******REMOVED***isDate,
***REMOVED******REMOVED***isFile,
***REMOVED******REMOVED***isBlob,
***REMOVED******REMOVED***isRegExp,
***REMOVED******REMOVED***isFunction:***REMOVED***isFunction$1,
***REMOVED******REMOVED***isStream,
***REMOVED******REMOVED***isURLSearchParams,
***REMOVED******REMOVED***isTypedArray,
***REMOVED******REMOVED***isFileList,
***REMOVED******REMOVED***forEach,
***REMOVED******REMOVED***merge,
***REMOVED******REMOVED***extend,
***REMOVED******REMOVED***trim,
***REMOVED******REMOVED***stripBOM,
***REMOVED******REMOVED***inherits,
***REMOVED******REMOVED***toFlatObject,
***REMOVED******REMOVED***kindOf,
***REMOVED******REMOVED***kindOfTest,
***REMOVED******REMOVED***endsWith,
***REMOVED******REMOVED***toArray,
***REMOVED******REMOVED***forEachEntry,
***REMOVED******REMOVED***matchAll,
***REMOVED******REMOVED***isHTMLForm,
***REMOVED******REMOVED***hasOwnProperty,
***REMOVED******REMOVED***hasOwnProp:***REMOVED***hasOwnProperty,***REMOVED***//***REMOVED***an***REMOVED***alias***REMOVED***to***REMOVED***avoid***REMOVED***ESLint***REMOVED***no-prototype-builtins***REMOVED***detection
***REMOVED******REMOVED***reduceDescriptors,
***REMOVED******REMOVED***freezeMethods,
***REMOVED******REMOVED***toObjectSet,
***REMOVED******REMOVED***toCamelCase,
***REMOVED******REMOVED***noop,
***REMOVED******REMOVED***toFiniteNumber,
***REMOVED******REMOVED***findKey,
***REMOVED******REMOVED***global:***REMOVED***_global,
***REMOVED******REMOVED***isContextDefined,
***REMOVED******REMOVED***isSpecCompliantForm,
***REMOVED******REMOVED***toJSONObject,
***REMOVED******REMOVED***isAsyncFn,
***REMOVED******REMOVED***isThenable,
***REMOVED******REMOVED***setImmediate:***REMOVED***_setImmediate,
***REMOVED******REMOVED***asap,
***REMOVED******REMOVED***isIterable
};

/**
***REMOVED*******REMOVED***Create***REMOVED***an***REMOVED***Error***REMOVED***with***REMOVED***the***REMOVED***specified***REMOVED***message,***REMOVED***config,***REMOVED***error***REMOVED***code,***REMOVED***request***REMOVED***and***REMOVED***response.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***message***REMOVED***The***REMOVED***error***REMOVED***message.
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***[code]***REMOVED***The***REMOVED***error***REMOVED***code***REMOVED***(for***REMOVED***example,***REMOVED***'ECONNABORTED').
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[config]***REMOVED***The***REMOVED***config.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[request]***REMOVED***The***REMOVED***request.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[response]***REMOVED***The***REMOVED***response.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Error}***REMOVED***The***REMOVED***created***REMOVED***error.
***REMOVED****/
function***REMOVED***AxiosError(message,***REMOVED***code,***REMOVED***config,***REMOVED***request,***REMOVED***response)***REMOVED***{
***REMOVED******REMOVED***Error.call(this);

***REMOVED******REMOVED***if***REMOVED***(Error.captureStackTrace)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***Error.captureStackTrace(this,***REMOVED***this.constructor);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.stack***REMOVED***=***REMOVED***(new***REMOVED***Error()).stack;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***this.message***REMOVED***=***REMOVED***message;
***REMOVED******REMOVED***this.name***REMOVED***=***REMOVED***'AxiosError';
***REMOVED******REMOVED***code***REMOVED***&&***REMOVED***(this.code***REMOVED***=***REMOVED***code);
***REMOVED******REMOVED***config***REMOVED***&&***REMOVED***(this.config***REMOVED***=***REMOVED***config);
***REMOVED******REMOVED***request***REMOVED***&&***REMOVED***(this.request***REMOVED***=***REMOVED***request);
***REMOVED******REMOVED***if***REMOVED***(response)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.response***REMOVED***=***REMOVED***response;
***REMOVED******REMOVED******REMOVED******REMOVED***this.status***REMOVED***=***REMOVED***response.status***REMOVED***?***REMOVED***response.status***REMOVED***:***REMOVED***null;
***REMOVED******REMOVED***}
}

utils$1.inherits(AxiosError,***REMOVED***Error,***REMOVED***{
***REMOVED******REMOVED***toJSON:***REMOVED***function***REMOVED***toJSON()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Standard
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***message:***REMOVED***this.message,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***name:***REMOVED***this.name,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Microsoft
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***description:***REMOVED***this.description,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***number:***REMOVED***this.number,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Mozilla
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fileName:***REMOVED***this.fileName,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lineNumber:***REMOVED***this.lineNumber,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***columnNumber:***REMOVED***this.columnNumber,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack:***REMOVED***this.stack,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Axios
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config:***REMOVED***utils$1.toJSONObject(this.config),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***this.code,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***this.status
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
});

const***REMOVED***prototype$1***REMOVED***=***REMOVED***AxiosError.prototype;
const***REMOVED***descriptors***REMOVED***=***REMOVED***{};

[
***REMOVED******REMOVED***'ERR_BAD_OPTION_VALUE',
***REMOVED******REMOVED***'ERR_BAD_OPTION',
***REMOVED******REMOVED***'ECONNABORTED',
***REMOVED******REMOVED***'ETIMEDOUT',
***REMOVED******REMOVED***'ERR_NETWORK',
***REMOVED******REMOVED***'ERR_FR_TOO_MANY_REDIRECTS',
***REMOVED******REMOVED***'ERR_DEPRECATED',
***REMOVED******REMOVED***'ERR_BAD_RESPONSE',
***REMOVED******REMOVED***'ERR_BAD_REQUEST',
***REMOVED******REMOVED***'ERR_CANCELED',
***REMOVED******REMOVED***'ERR_NOT_SUPPORT',
***REMOVED******REMOVED***'ERR_INVALID_URL'
//***REMOVED***eslint-disable-next-line***REMOVED***func-names
].forEach(code***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***descriptors[code]***REMOVED***=***REMOVED***{value:***REMOVED***code};
});

Object.defineProperties(AxiosError,***REMOVED***descriptors);
Object.defineProperty(prototype$1,***REMOVED***'isAxiosError',***REMOVED***{value:***REMOVED***true});

//***REMOVED***eslint-disable-next-line***REMOVED***func-names
AxiosError.from***REMOVED***=***REMOVED***(error,***REMOVED***code,***REMOVED***config,***REMOVED***request,***REMOVED***response,***REMOVED***customProps)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***axiosError***REMOVED***=***REMOVED***Object.create(prototype$1);

***REMOVED******REMOVED***utils$1.toFlatObject(error,***REMOVED***axiosError,***REMOVED***function***REMOVED***filter(obj)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***obj***REMOVED***!==***REMOVED***Error.prototype;
***REMOVED******REMOVED***},***REMOVED***prop***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***prop***REMOVED***!==***REMOVED***'isAxiosError';
***REMOVED******REMOVED***});

***REMOVED******REMOVED***const***REMOVED***msg***REMOVED***=***REMOVED***error***REMOVED***&&***REMOVED***error.message***REMOVED***?***REMOVED***error.message***REMOVED***:***REMOVED***'Error';

***REMOVED******REMOVED***//***REMOVED***Prefer***REMOVED***explicit***REMOVED***code;***REMOVED***otherwise***REMOVED***copy***REMOVED***the***REMOVED***low-level***REMOVED***error's***REMOVED***code***REMOVED***(e.g.***REMOVED***ECONNREFUSED)
***REMOVED******REMOVED***const***REMOVED***errCode***REMOVED***=***REMOVED***code***REMOVED***==***REMOVED***null***REMOVED***&&***REMOVED***error***REMOVED***?***REMOVED***error.code***REMOVED***:***REMOVED***code;
***REMOVED******REMOVED***AxiosError.call(axiosError,***REMOVED***msg,***REMOVED***errCode,***REMOVED***config,***REMOVED***request,***REMOVED***response);

***REMOVED******REMOVED***//***REMOVED***Chain***REMOVED***the***REMOVED***original***REMOVED***error***REMOVED***on***REMOVED***the***REMOVED***standard***REMOVED***field;***REMOVED***non-enumerable***REMOVED***to***REMOVED***avoid***REMOVED***JSON***REMOVED***noise
***REMOVED******REMOVED***if***REMOVED***(error***REMOVED***&&***REMOVED***axiosError.cause***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***Object.defineProperty(axiosError,***REMOVED***'cause',***REMOVED***{***REMOVED***value:***REMOVED***error,***REMOVED***configurable:***REMOVED***true***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***axiosError.name***REMOVED***=***REMOVED***(error***REMOVED***&&***REMOVED***error.name)***REMOVED***||***REMOVED***'Error';

***REMOVED******REMOVED***customProps***REMOVED***&&***REMOVED***Object.assign(axiosError,***REMOVED***customProps);

***REMOVED******REMOVED***return***REMOVED***axiosError;
};

/**
***REMOVED*******REMOVED***Determines***REMOVED***if***REMOVED***the***REMOVED***given***REMOVED***thing***REMOVED***is***REMOVED***a***REMOVED***array***REMOVED***or***REMOVED***js***REMOVED***object.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***thing***REMOVED***-***REMOVED***The***REMOVED***object***REMOVED***or***REMOVED***array***REMOVED***to***REMOVED***be***REMOVED***visited.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
function***REMOVED***isVisitable(thing)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***utils$1.isPlainObject(thing)***REMOVED***||***REMOVED***utils$1.isArray(thing);
}

/**
***REMOVED*******REMOVED***It***REMOVED***removes***REMOVED***the***REMOVED***brackets***REMOVED***from***REMOVED***the***REMOVED***end***REMOVED***of***REMOVED***a***REMOVED***string
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***key***REMOVED***-***REMOVED***The***REMOVED***key***REMOVED***of***REMOVED***the***REMOVED***parameter.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***the***REMOVED***key***REMOVED***without***REMOVED***the***REMOVED***brackets.
***REMOVED****/
function***REMOVED***removeBrackets(key)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***utils$1.endsWith(key,***REMOVED***'[]')***REMOVED***?***REMOVED***key.slice(0,***REMOVED***-2)***REMOVED***:***REMOVED***key;
}

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***path,***REMOVED***a***REMOVED***key,***REMOVED***and***REMOVED***a***REMOVED***boolean,***REMOVED***and***REMOVED***returns***REMOVED***a***REMOVED***string
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***path***REMOVED***-***REMOVED***The***REMOVED***path***REMOVED***to***REMOVED***the***REMOVED***current***REMOVED***key.
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***key***REMOVED***-***REMOVED***The***REMOVED***key***REMOVED***of***REMOVED***the***REMOVED***current***REMOVED***object***REMOVED***being***REMOVED***iterated***REMOVED***over.
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***dots***REMOVED***-***REMOVED***If***REMOVED***true,***REMOVED***the***REMOVED***key***REMOVED***will***REMOVED***be***REMOVED***rendered***REMOVED***with***REMOVED***dots***REMOVED***instead***REMOVED***of***REMOVED***brackets.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***The***REMOVED***path***REMOVED***to***REMOVED***the***REMOVED***current***REMOVED***key.
***REMOVED****/
function***REMOVED***renderKey(path,***REMOVED***key,***REMOVED***dots)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!path)***REMOVED***return***REMOVED***key;
***REMOVED******REMOVED***return***REMOVED***path.concat(key).map(function***REMOVED***each(token,***REMOVED***i)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED******REMOVED******REMOVED***token***REMOVED***=***REMOVED***removeBrackets(token);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!dots***REMOVED***&&***REMOVED***i***REMOVED***?***REMOVED***'['***REMOVED***+***REMOVED***token***REMOVED***+***REMOVED***']'***REMOVED***:***REMOVED***token;
***REMOVED******REMOVED***}).join(dots***REMOVED***?***REMOVED***'.'***REMOVED***:***REMOVED***'');
}

/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***array***REMOVED***is***REMOVED***an***REMOVED***array***REMOVED***and***REMOVED***none***REMOVED***of***REMOVED***its***REMOVED***elements***REMOVED***are***REMOVED***visitable,***REMOVED***then***REMOVED***it's***REMOVED***a***REMOVED***flat***REMOVED***array.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Array<any>}***REMOVED***arr***REMOVED***-***REMOVED***The***REMOVED***array***REMOVED***to***REMOVED***check
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
function***REMOVED***isFlatArray(arr)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***utils$1.isArray(arr)***REMOVED***&&***REMOVED***!arr.some(isVisitable);
}

const***REMOVED***predicates***REMOVED***=***REMOVED***utils$1.toFlatObject(utils$1,***REMOVED***{},***REMOVED***null,***REMOVED***function***REMOVED***filter(prop)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***/^is[A-Z]/.test(prop);
});

/**
***REMOVED*******REMOVED***Convert***REMOVED***a***REMOVED***data***REMOVED***object***REMOVED***to***REMOVED***FormData
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***obj
***REMOVED*******REMOVED***@param***REMOVED***{?Object}***REMOVED***[formData]
***REMOVED*******REMOVED***@param***REMOVED***{?Object}***REMOVED***[options]
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***[options.visitor]
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***[options.metaTokens***REMOVED***=***REMOVED***true]
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***[options.dots***REMOVED***=***REMOVED***false]
***REMOVED*******REMOVED***@param***REMOVED***{?Boolean}***REMOVED***[options.indexes***REMOVED***=***REMOVED***false]
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}
***REMOVED*****/

/**
***REMOVED*******REMOVED***It***REMOVED***converts***REMOVED***an***REMOVED***object***REMOVED***into***REMOVED***a***REMOVED***FormData***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object<any,***REMOVED***any>}***REMOVED***obj***REMOVED***-***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***convert***REMOVED***to***REMOVED***form***REMOVED***data.
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***formData***REMOVED***-***REMOVED***The***REMOVED***FormData***REMOVED***object***REMOVED***to***REMOVED***append***REMOVED***to.
***REMOVED*******REMOVED***@param***REMOVED***{Object<string,***REMOVED***any>}***REMOVED***options
***REMOVED****
***REMOVED*******REMOVED***@returns
***REMOVED****/
function***REMOVED***toFormData(obj,***REMOVED***formData,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!utils$1.isObject(obj))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('target***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***object');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED***formData***REMOVED***=***REMOVED***formData***REMOVED***||***REMOVED***new***REMOVED***(FormData__default["default"]***REMOVED***||***REMOVED***FormData)();

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED***options***REMOVED***=***REMOVED***utils$1.toFlatObject(options,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***metaTokens:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***dots:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***indexes:***REMOVED***false
***REMOVED******REMOVED***},***REMOVED***false,***REMOVED***function***REMOVED***defined(option,***REMOVED***source)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-eq-null,eqeqeq
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!utils$1.isUndefined(source[option]);
***REMOVED******REMOVED***});

***REMOVED******REMOVED***const***REMOVED***metaTokens***REMOVED***=***REMOVED***options.metaTokens;
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-use-before-define
***REMOVED******REMOVED***const***REMOVED***visitor***REMOVED***=***REMOVED***options.visitor***REMOVED***||***REMOVED***defaultVisitor;
***REMOVED******REMOVED***const***REMOVED***dots***REMOVED***=***REMOVED***options.dots;
***REMOVED******REMOVED***const***REMOVED***indexes***REMOVED***=***REMOVED***options.indexes;
***REMOVED******REMOVED***const***REMOVED***_Blob***REMOVED***=***REMOVED***options.Blob***REMOVED***||***REMOVED***typeof***REMOVED***Blob***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***Blob;
***REMOVED******REMOVED***const***REMOVED***useBlob***REMOVED***=***REMOVED***_Blob***REMOVED***&&***REMOVED***utils$1.isSpecCompliantForm(formData);

***REMOVED******REMOVED***if***REMOVED***(!utils$1.isFunction(visitor))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('visitor***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***function');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***function***REMOVED***convertValue(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***null)***REMOVED***return***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isDate(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value.toISOString();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isBoolean(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value.toString();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!useBlob***REMOVED***&&***REMOVED***utils$1.isBlob(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('Blob***REMOVED***is***REMOVED***not***REMOVED***supported.***REMOVED***Use***REMOVED***a***REMOVED***Buffer***REMOVED***instead.');
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isArrayBuffer(value)***REMOVED***||***REMOVED***utils$1.isTypedArray(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***useBlob***REMOVED***&&***REMOVED***typeof***REMOVED***Blob***REMOVED***===***REMOVED***'function'***REMOVED***?***REMOVED***new***REMOVED***Blob([value])***REMOVED***:***REMOVED***Buffer.from(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Default***REMOVED***visitor.
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***value
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{String|Number}***REMOVED***key
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Array<String|Number>}***REMOVED***path
***REMOVED******REMOVED******REMOVED*******REMOVED***@this***REMOVED***{FormData}
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***return***REMOVED***true***REMOVED***to***REMOVED***visit***REMOVED***the***REMOVED***each***REMOVED***prop***REMOVED***of***REMOVED***the***REMOVED***value***REMOVED***recursively
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***function***REMOVED***defaultVisitor(value,***REMOVED***key,***REMOVED***path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***arr***REMOVED***=***REMOVED***value;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***&&***REMOVED***!path***REMOVED***&&***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.endsWith(key,***REMOVED***'{}'))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***metaTokens***REMOVED***?***REMOVED***key***REMOVED***:***REMOVED***key.slice(0,***REMOVED***-2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***JSON.stringify(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(utils$1.isArray(value)***REMOVED***&&***REMOVED***isFlatArray(value))***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***((utils$1.isFileList(value)***REMOVED***||***REMOVED***utils$1.endsWith(key,***REMOVED***'[]'))***REMOVED***&&***REMOVED***(arr***REMOVED***=***REMOVED***utils$1.toArray(value))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***removeBrackets(key);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***arr.forEach(function***REMOVED***each(el,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!(utils$1.isUndefined(el)***REMOVED***||***REMOVED***el***REMOVED***===***REMOVED***null)***REMOVED***&&***REMOVED***formData.append(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-nested-ternary
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***indexes***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***renderKey([key],***REMOVED***index,***REMOVED***dots)***REMOVED***:***REMOVED***(indexes***REMOVED***===***REMOVED***null***REMOVED***?***REMOVED***key***REMOVED***:***REMOVED***key***REMOVED***+***REMOVED***'[]'),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertValue(el)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isVisitable(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***formData.append(renderKey(path,***REMOVED***key,***REMOVED***dots),***REMOVED***convertValue(value));

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***stack***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***const***REMOVED***exposedHelpers***REMOVED***=***REMOVED***Object.assign(predicates,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***defaultVisitor,
***REMOVED******REMOVED******REMOVED******REMOVED***convertValue,
***REMOVED******REMOVED******REMOVED******REMOVED***isVisitable
***REMOVED******REMOVED***});

***REMOVED******REMOVED***function***REMOVED***build(value,***REMOVED***path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isUndefined(value))***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stack.indexOf(value)***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***Error('Circular***REMOVED***reference***REMOVED***detected***REMOVED***in***REMOVED***'***REMOVED***+***REMOVED***path.join('.'));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***stack.push(value);

***REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEach(value,***REMOVED***function***REMOVED***each(el,***REMOVED***key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***!(utils$1.isUndefined(el)***REMOVED***||***REMOVED***el***REMOVED***===***REMOVED***null)***REMOVED***&&***REMOVED***visitor.call(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***formData,***REMOVED***el,***REMOVED***utils$1.isString(key)***REMOVED***?***REMOVED***key.trim()***REMOVED***:***REMOVED***key,***REMOVED***path,***REMOVED***exposedHelpers
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(result***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***build(el,***REMOVED***path***REMOVED***?***REMOVED***path.concat(key)***REMOVED***:***REMOVED***[key]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***stack.pop();
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(!utils$1.isObject(obj))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('data***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***object');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***build(obj);

***REMOVED******REMOVED***return***REMOVED***formData;
}

/**
***REMOVED*******REMOVED***It***REMOVED***encodes***REMOVED***a***REMOVED***string***REMOVED***by***REMOVED***replacing***REMOVED***all***REMOVED***characters***REMOVED***that***REMOVED***are***REMOVED***not***REMOVED***in***REMOVED***the***REMOVED***unreserved***REMOVED***set***REMOVED***with
***REMOVED*******REMOVED***their***REMOVED***percent-encoded***REMOVED***equivalents
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***str***REMOVED***-***REMOVED***The***REMOVED***string***REMOVED***to***REMOVED***encode.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***The***REMOVED***encoded***REMOVED***string.
***REMOVED****/
function***REMOVED***encode$1(str)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***charMap***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***'!':***REMOVED***'%21',
***REMOVED******REMOVED******REMOVED******REMOVED***"'":***REMOVED***'%27',
***REMOVED******REMOVED******REMOVED******REMOVED***'(':***REMOVED***'%28',
***REMOVED******REMOVED******REMOVED******REMOVED***')':***REMOVED***'%29',
***REMOVED******REMOVED******REMOVED******REMOVED***'~':***REMOVED***'%7E',
***REMOVED******REMOVED******REMOVED******REMOVED***'%20':***REMOVED***'+',
***REMOVED******REMOVED******REMOVED******REMOVED***'%00':***REMOVED***'\x00'
***REMOVED******REMOVED***};
***REMOVED******REMOVED***return***REMOVED***encodeURIComponent(str).replace(/[!'()~]|%20|%00/g,***REMOVED***function***REMOVED***replacer(match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***charMap[match];
***REMOVED******REMOVED***});
}

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***params***REMOVED***object***REMOVED***and***REMOVED***converts***REMOVED***it***REMOVED***to***REMOVED***a***REMOVED***FormData***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object<string,***REMOVED***any>}***REMOVED***params***REMOVED***-***REMOVED***The***REMOVED***parameters***REMOVED***to***REMOVED***be***REMOVED***converted***REMOVED***to***REMOVED***a***REMOVED***FormData***REMOVED***object.
***REMOVED*******REMOVED***@param***REMOVED***{Object<string,***REMOVED***any>}***REMOVED***options***REMOVED***-***REMOVED***The***REMOVED***options***REMOVED***object***REMOVED***passed***REMOVED***to***REMOVED***the***REMOVED***Axios***REMOVED***constructor.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED****/
function***REMOVED***AxiosURLSearchParams(params,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***this._pairs***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***params***REMOVED***&&***REMOVED***toFormData(params,***REMOVED***this,***REMOVED***options);
}

const***REMOVED***prototype***REMOVED***=***REMOVED***AxiosURLSearchParams.prototype;

prototype.append***REMOVED***=***REMOVED***function***REMOVED***append(name,***REMOVED***value)***REMOVED***{
***REMOVED******REMOVED***this._pairs.push([name,***REMOVED***value]);
};

prototype.toString***REMOVED***=***REMOVED***function***REMOVED***toString(encoder)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***_encode***REMOVED***=***REMOVED***encoder***REMOVED***?***REMOVED***function(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***encoder.call(this,***REMOVED***value,***REMOVED***encode$1);
***REMOVED******REMOVED***}***REMOVED***:***REMOVED***encode$1;

***REMOVED******REMOVED***return***REMOVED***this._pairs.map(function***REMOVED***each(pair)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***_encode(pair[0])***REMOVED***+***REMOVED***'='***REMOVED***+***REMOVED***_encode(pair[1]);
***REMOVED******REMOVED***},***REMOVED***'').join('&');
};

/**
***REMOVED*******REMOVED***It***REMOVED***replaces***REMOVED***all***REMOVED***instances***REMOVED***of***REMOVED***the***REMOVED***characters***REMOVED***`:`,***REMOVED***`$`,***REMOVED***`,`,***REMOVED***`+`,***REMOVED***`[`,***REMOVED***and***REMOVED***`]`***REMOVED***with***REMOVED***their
***REMOVED*******REMOVED***URI***REMOVED***encoded***REMOVED***counterparts
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***val***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***be***REMOVED***encoded.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***The***REMOVED***encoded***REMOVED***value.
***REMOVED****/
function***REMOVED***encode(val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***encodeURIComponent(val).
***REMOVED******REMOVED******REMOVED******REMOVED***replace(/%3A/gi,***REMOVED***':').
***REMOVED******REMOVED******REMOVED******REMOVED***replace(/%24/g,***REMOVED***'$').
***REMOVED******REMOVED******REMOVED******REMOVED***replace(/%2C/gi,***REMOVED***',').
***REMOVED******REMOVED******REMOVED******REMOVED***replace(/%20/g,***REMOVED***'+');
}

/**
***REMOVED*******REMOVED***Build***REMOVED***a***REMOVED***URL***REMOVED***by***REMOVED***appending***REMOVED***params***REMOVED***to***REMOVED***the***REMOVED***end
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***url***REMOVED***The***REMOVED***base***REMOVED***of***REMOVED***the***REMOVED***url***REMOVED***(e.g.,***REMOVED***http://www.google.com)
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***[params]***REMOVED***The***REMOVED***params***REMOVED***to***REMOVED***be***REMOVED***appended
***REMOVED*******REMOVED***@param***REMOVED***{?(object|Function)}***REMOVED***options
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***The***REMOVED***formatted***REMOVED***url
***REMOVED****/
function***REMOVED***buildURL(url,***REMOVED***params,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***/*eslint***REMOVED***no-param-reassign:0*/
***REMOVED******REMOVED***if***REMOVED***(!params)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***
***REMOVED******REMOVED***const***REMOVED***_encode***REMOVED***=***REMOVED***options***REMOVED***&&***REMOVED***options.encode***REMOVED***||***REMOVED***encode;

***REMOVED******REMOVED***if***REMOVED***(utils$1.isFunction(options))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***serialize:***REMOVED***options
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}***REMOVED***

***REMOVED******REMOVED***const***REMOVED***serializeFn***REMOVED***=***REMOVED***options***REMOVED***&&***REMOVED***options.serialize;

***REMOVED******REMOVED***let***REMOVED***serializedParams;

***REMOVED******REMOVED***if***REMOVED***(serializeFn)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***serializedParams***REMOVED***=***REMOVED***serializeFn(params,***REMOVED***options);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***serializedParams***REMOVED***=***REMOVED***utils$1.isURLSearchParams(params)***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***params.toString()***REMOVED***:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***new***REMOVED***AxiosURLSearchParams(params,***REMOVED***options).toString(_encode);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(serializedParams)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***hashmarkIndex***REMOVED***=***REMOVED***url.indexOf("#");

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hashmarkIndex***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***=***REMOVED***url.slice(0,***REMOVED***hashmarkIndex);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***+=***REMOVED***(url.indexOf('?')***REMOVED***===***REMOVED***-1***REMOVED***?***REMOVED***'?'***REMOVED***:***REMOVED***'&')***REMOVED***+***REMOVED***serializedParams;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***url;
}

class***REMOVED***InterceptorManager***REMOVED***{
***REMOVED******REMOVED***constructor()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.handlers***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Add***REMOVED***a***REMOVED***new***REMOVED***interceptor***REMOVED***to***REMOVED***the***REMOVED***stack
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fulfilled***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***handle***REMOVED***`then`***REMOVED***for***REMOVED***a***REMOVED***`Promise`
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***rejected***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***handle***REMOVED***`reject`***REMOVED***for***REMOVED***a***REMOVED***`Promise`
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@return***REMOVED***{Number}***REMOVED***An***REMOVED***ID***REMOVED***used***REMOVED***to***REMOVED***remove***REMOVED***interceptor***REMOVED***later
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***use(fulfilled,***REMOVED***rejected,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.handlers.push({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fulfilled,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rejected,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***synchronous:***REMOVED***options***REMOVED***?***REMOVED***options.synchronous***REMOVED***:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***runWhen:***REMOVED***options***REMOVED***?***REMOVED***options.runWhen***REMOVED***:***REMOVED***null
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.handlers.length***REMOVED***-***REMOVED***1;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Remove***REMOVED***an***REMOVED***interceptor***REMOVED***from***REMOVED***the***REMOVED***stack
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***id***REMOVED***The***REMOVED***ID***REMOVED***that***REMOVED***was***REMOVED***returned***REMOVED***by***REMOVED***`use`
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@returns***REMOVED***{Boolean}***REMOVED***`true`***REMOVED***if***REMOVED***the***REMOVED***interceptor***REMOVED***was***REMOVED***removed,***REMOVED***`false`***REMOVED***otherwise
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***eject(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.handlers[id])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.handlers[id]***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Clear***REMOVED***all***REMOVED***interceptors***REMOVED***from***REMOVED***the***REMOVED***stack
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***clear()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.handlers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.handlers***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Iterate***REMOVED***over***REMOVED***all***REMOVED***the***REMOVED***registered***REMOVED***interceptors
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***This***REMOVED***method***REMOVED***is***REMOVED***particularly***REMOVED***useful***REMOVED***for***REMOVED***skipping***REMOVED***over***REMOVED***any
***REMOVED******REMOVED******REMOVED*******REMOVED***interceptors***REMOVED***that***REMOVED***may***REMOVED***have***REMOVED***become***REMOVED***`null`***REMOVED***calling***REMOVED***`eject`.
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fn***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***call***REMOVED***for***REMOVED***each***REMOVED***interceptor
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***forEach(fn)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEach(this.handlers,***REMOVED***function***REMOVED***forEachHandler(h)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(h***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fn(h);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
}

const***REMOVED***InterceptorManager$1***REMOVED***=***REMOVED***InterceptorManager;

const***REMOVED***transitionalDefaults***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***silentJSONParsing:***REMOVED***true,
***REMOVED******REMOVED***forcedJSONParsing:***REMOVED***true,
***REMOVED******REMOVED***clarifyTimeoutError:***REMOVED***false
};

const***REMOVED***URLSearchParams***REMOVED***=***REMOVED***url__default["default"].URLSearchParams;

const***REMOVED***ALPHA***REMOVED***=***REMOVED***'abcdefghijklmnopqrstuvwxyz';

const***REMOVED***DIGIT***REMOVED***=***REMOVED***'0123456789';

const***REMOVED***ALPHABET***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***DIGIT,
***REMOVED******REMOVED***ALPHA,
***REMOVED******REMOVED***ALPHA_DIGIT:***REMOVED***ALPHA***REMOVED***+***REMOVED***ALPHA.toUpperCase()***REMOVED***+***REMOVED***DIGIT
};

const***REMOVED***generateString***REMOVED***=***REMOVED***(size***REMOVED***=***REMOVED***16,***REMOVED***alphabet***REMOVED***=***REMOVED***ALPHABET.ALPHA_DIGIT)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***str***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***const***REMOVED***{length}***REMOVED***=***REMOVED***alphabet;
***REMOVED******REMOVED***const***REMOVED***randomValues***REMOVED***=***REMOVED***new***REMOVED***Uint32Array(size);
***REMOVED******REMOVED***crypto__default["default"].randomFillSync(randomValues);
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***size;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***+=***REMOVED***alphabet[randomValues[i]***REMOVED***%***REMOVED***length];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***str;
};


const***REMOVED***platform$1***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***isNode:***REMOVED***true,
***REMOVED******REMOVED***classes:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***URLSearchParams,
***REMOVED******REMOVED******REMOVED******REMOVED***FormData:***REMOVED***FormData__default["default"],
***REMOVED******REMOVED******REMOVED******REMOVED***Blob:***REMOVED***typeof***REMOVED***Blob***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***Blob***REMOVED***||***REMOVED***null
***REMOVED******REMOVED***},
***REMOVED******REMOVED***ALPHABET,
***REMOVED******REMOVED***generateString,
***REMOVED******REMOVED***protocols:***REMOVED***[***REMOVED***'http',***REMOVED***'https',***REMOVED***'file',***REMOVED***'data'***REMOVED***]
};

const***REMOVED***hasBrowserEnv***REMOVED***=***REMOVED***typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***typeof***REMOVED***document***REMOVED***!==***REMOVED***'undefined';

const***REMOVED***_navigator***REMOVED***=***REMOVED***typeof***REMOVED***navigator***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***navigator***REMOVED***||***REMOVED***undefined;

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***we're***REMOVED***running***REMOVED***in***REMOVED***a***REMOVED***standard***REMOVED***browser***REMOVED***environment
***REMOVED****
***REMOVED*******REMOVED***This***REMOVED***allows***REMOVED***axios***REMOVED***to***REMOVED***run***REMOVED***in***REMOVED***a***REMOVED***web***REMOVED***worker,***REMOVED***and***REMOVED***react-native.
***REMOVED*******REMOVED***Both***REMOVED***environments***REMOVED***support***REMOVED***XMLHttpRequest,***REMOVED***but***REMOVED***not***REMOVED***fully***REMOVED***standard***REMOVED***globals.
***REMOVED****
***REMOVED*******REMOVED***web***REMOVED***workers:
***REMOVED*******REMOVED******REMOVED***typeof***REMOVED***window***REMOVED***->***REMOVED***undefined
***REMOVED*******REMOVED******REMOVED***typeof***REMOVED***document***REMOVED***->***REMOVED***undefined
***REMOVED****
***REMOVED*******REMOVED***react-native:
***REMOVED*******REMOVED******REMOVED***navigator.product***REMOVED***->***REMOVED***'ReactNative'
***REMOVED*******REMOVED***nativescript
***REMOVED*******REMOVED******REMOVED***navigator.product***REMOVED***->***REMOVED***'NativeScript'***REMOVED***or***REMOVED***'NS'
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}
***REMOVED****/
const***REMOVED***hasStandardBrowserEnv***REMOVED***=***REMOVED***hasBrowserEnv***REMOVED***&&
***REMOVED******REMOVED***(!_navigator***REMOVED***||***REMOVED***['ReactNative',***REMOVED***'NativeScript',***REMOVED***'NS'].indexOf(_navigator.product)***REMOVED***<***REMOVED***0);

/**
***REMOVED*******REMOVED***Determine***REMOVED***if***REMOVED***we're***REMOVED***running***REMOVED***in***REMOVED***a***REMOVED***standard***REMOVED***browser***REMOVED***webWorker***REMOVED***environment
***REMOVED****
***REMOVED*******REMOVED***Although***REMOVED***the***REMOVED***`isStandardBrowserEnv`***REMOVED***method***REMOVED***indicates***REMOVED***that
***REMOVED*******REMOVED***`allows***REMOVED***axios***REMOVED***to***REMOVED***run***REMOVED***in***REMOVED***a***REMOVED***web***REMOVED***worker`,***REMOVED***the***REMOVED***WebWorker***REMOVED***will***REMOVED***still***REMOVED***be
***REMOVED*******REMOVED***filtered***REMOVED***out***REMOVED***due***REMOVED***to***REMOVED***its***REMOVED***judgment***REMOVED***standard
***REMOVED*******REMOVED***`typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***typeof***REMOVED***document***REMOVED***!==***REMOVED***'undefined'`.
***REMOVED*******REMOVED***This***REMOVED***leads***REMOVED***to***REMOVED***a***REMOVED***problem***REMOVED***when***REMOVED***axios***REMOVED***post***REMOVED***`FormData`***REMOVED***in***REMOVED***webWorker
***REMOVED****/
const***REMOVED***hasStandardBrowserWebWorkerEnv***REMOVED***=***REMOVED***(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED***typeof***REMOVED***WorkerGlobalScope***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-undef
***REMOVED******REMOVED******REMOVED******REMOVED***self***REMOVED***instanceof***REMOVED***WorkerGlobalScope***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***typeof***REMOVED***self.importScripts***REMOVED***===***REMOVED***'function'
***REMOVED******REMOVED***);
})();

const***REMOVED***origin***REMOVED***=***REMOVED***hasBrowserEnv***REMOVED***&&***REMOVED***window.location.href***REMOVED***||***REMOVED***'http://localhost';

const***REMOVED***utils***REMOVED***=***REMOVED***/*#__PURE__*/Object.freeze({
***REMOVED******REMOVED***__proto__:***REMOVED***null,
***REMOVED******REMOVED***hasBrowserEnv:***REMOVED***hasBrowserEnv,
***REMOVED******REMOVED***hasStandardBrowserWebWorkerEnv:***REMOVED***hasStandardBrowserWebWorkerEnv,
***REMOVED******REMOVED***hasStandardBrowserEnv:***REMOVED***hasStandardBrowserEnv,
***REMOVED******REMOVED***navigator:***REMOVED***_navigator,
***REMOVED******REMOVED***origin:***REMOVED***origin
});

const***REMOVED***platform***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***...utils,
***REMOVED******REMOVED***...platform$1
};

function***REMOVED***toURLEncodedForm(data,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***toFormData(data,***REMOVED***new***REMOVED***platform.classes.URLSearchParams(),***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***visitor:***REMOVED***function(value,***REMOVED***key,***REMOVED***path,***REMOVED***helpers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(platform.isNode***REMOVED***&&***REMOVED***utils$1.isBuffer(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.append(key,***REMOVED***value.toString('base64'));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***helpers.defaultVisitor.apply(this,***REMOVED***arguments);
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***...options
***REMOVED******REMOVED***});
}

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***string***REMOVED***like***REMOVED***`foo[x][y][z]`***REMOVED***and***REMOVED***returns***REMOVED***an***REMOVED***array***REMOVED***like***REMOVED***`['foo',***REMOVED***'x',***REMOVED***'y',***REMOVED***'z']
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***name***REMOVED***-***REMOVED***The***REMOVED***name***REMOVED***of***REMOVED***the***REMOVED***property***REMOVED***to***REMOVED***get.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***An***REMOVED***array***REMOVED***of***REMOVED***strings.
***REMOVED****/
function***REMOVED***parsePropPath(name)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***foo[x][y][z]
***REMOVED******REMOVED***//***REMOVED***foo.x.y.z
***REMOVED******REMOVED***//***REMOVED***foo-x-y-z
***REMOVED******REMOVED***//***REMOVED***foo***REMOVED***x***REMOVED***y***REMOVED***z
***REMOVED******REMOVED***return***REMOVED***utils$1.matchAll(/\w+|\[(\w*)]/g,***REMOVED***name).map(match***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***match[0]***REMOVED***===***REMOVED***'[]'***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***match[1]***REMOVED***||***REMOVED***match[0];
***REMOVED******REMOVED***});
}

/**
***REMOVED*******REMOVED***Convert***REMOVED***an***REMOVED***array***REMOVED***to***REMOVED***an***REMOVED***object.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Array<any>}***REMOVED***arr***REMOVED***-***REMOVED***The***REMOVED***array***REMOVED***to***REMOVED***convert***REMOVED***to***REMOVED***an***REMOVED***object.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***An***REMOVED***object***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***keys***REMOVED***and***REMOVED***values***REMOVED***as***REMOVED***the***REMOVED***array.
***REMOVED****/
function***REMOVED***arrayToObject(arr)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(arr);
***REMOVED******REMOVED***let***REMOVED***i;
***REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED***let***REMOVED***key;
***REMOVED******REMOVED***for***REMOVED***(i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED***obj[key]***REMOVED***=***REMOVED***arr[key];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***obj;
}

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***FormData***REMOVED***object***REMOVED***and***REMOVED***returns***REMOVED***a***REMOVED***JavaScript***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***formData***REMOVED***The***REMOVED***FormData***REMOVED***object***REMOVED***to***REMOVED***convert***REMOVED***to***REMOVED***JSON.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object<string,***REMOVED***any>***REMOVED***|***REMOVED***null}***REMOVED***The***REMOVED***converted***REMOVED***object.
***REMOVED****/
function***REMOVED***formDataToJSON(formData)***REMOVED***{
***REMOVED******REMOVED***function***REMOVED***buildPath(path,***REMOVED***value,***REMOVED***target,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***name***REMOVED***=***REMOVED***path[index++];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(name***REMOVED***===***REMOVED***'__proto__')***REMOVED***return***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isNumericKey***REMOVED***=***REMOVED***Number.isFinite(+name);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isLast***REMOVED***=***REMOVED***index***REMOVED***>=***REMOVED***path.length;
***REMOVED******REMOVED******REMOVED******REMOVED***name***REMOVED***=***REMOVED***!name***REMOVED***&&***REMOVED***utils$1.isArray(target)***REMOVED***?***REMOVED***target.length***REMOVED***:***REMOVED***name;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isLast)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.hasOwnProp(target,***REMOVED***name))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***target[name]***REMOVED***=***REMOVED***[target[name],***REMOVED***value];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***target[name]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!isNumericKey;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!target[name]***REMOVED***||***REMOVED***!utils$1.isObject(target[name]))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***target[name]***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***buildPath(path,***REMOVED***value,***REMOVED***target[name],***REMOVED***index);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(result***REMOVED***&&***REMOVED***utils$1.isArray(target[name]))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***target[name]***REMOVED***=***REMOVED***arrayToObject(target[name]);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!isNumericKey;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(utils$1.isFormData(formData)***REMOVED***&&***REMOVED***utils$1.isFunction(formData.entries))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEachEntry(formData,***REMOVED***(name,***REMOVED***value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildPath(parsePropPath(name),***REMOVED***value,***REMOVED***obj,***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***obj;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***null;
}

/**
***REMOVED*******REMOVED***It***REMOVED***takes***REMOVED***a***REMOVED***string,***REMOVED***tries***REMOVED***to***REMOVED***parse***REMOVED***it,***REMOVED***and***REMOVED***if***REMOVED***it***REMOVED***fails,***REMOVED***it***REMOVED***returns***REMOVED***the***REMOVED***stringified***REMOVED***version
***REMOVED*******REMOVED***of***REMOVED***the***REMOVED***input
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{any}***REMOVED***rawValue***REMOVED***-***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***be***REMOVED***stringified.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***parser***REMOVED***-***REMOVED***A***REMOVED***function***REMOVED***that***REMOVED***parses***REMOVED***a***REMOVED***string***REMOVED***into***REMOVED***a***REMOVED***JavaScript***REMOVED***object.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***encoder***REMOVED***-***REMOVED***A***REMOVED***function***REMOVED***that***REMOVED***takes***REMOVED***a***REMOVED***value***REMOVED***and***REMOVED***returns***REMOVED***a***REMOVED***string.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***A***REMOVED***stringified***REMOVED***version***REMOVED***of***REMOVED***the***REMOVED***rawValue.
***REMOVED****/
function***REMOVED***stringifySafely(rawValue,***REMOVED***parser,***REMOVED***encoder)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(utils$1.isString(rawValue))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(parser***REMOVED***||***REMOVED***JSON.parse)(rawValue);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***utils$1.trim(rawValue);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(e.name***REMOVED***!==***REMOVED***'SyntaxError')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***e;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***(encoder***REMOVED***||***REMOVED***JSON.stringify)(rawValue);
}

const***REMOVED***defaults***REMOVED***=***REMOVED***{

***REMOVED******REMOVED***transitional:***REMOVED***transitionalDefaults,

***REMOVED******REMOVED***adapter:***REMOVED***['xhr',***REMOVED***'http',***REMOVED***'fetch'],

***REMOVED******REMOVED***transformRequest:***REMOVED***[function***REMOVED***transformRequest(data,***REMOVED***headers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***contentType***REMOVED***=***REMOVED***headers.getContentType()***REMOVED***||***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***hasJSONContentType***REMOVED***=***REMOVED***contentType.indexOf('application/json')***REMOVED***>***REMOVED***-1;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isObjectPayload***REMOVED***=***REMOVED***utils$1.isObject(data);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObjectPayload***REMOVED***&&***REMOVED***utils$1.isHTMLForm(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***new***REMOVED***FormData(data);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isFormData***REMOVED***=***REMOVED***utils$1.isFormData(data);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isFormData)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***hasJSONContentType***REMOVED***?***REMOVED***JSON.stringify(formDataToJSON(data))***REMOVED***:***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isArrayBuffer(data)***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isBuffer(data)***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isStream(data)***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isFile(data)***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isBlob(data)***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isReadableStream(data)
***REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isArrayBufferView(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data.buffer;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isURLSearchParams(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentType('application/x-www-form-urlencoded;charset=utf-8',***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data.toString();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***isFileList;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObjectPayload)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(contentType.indexOf('application/x-www-form-urlencoded')***REMOVED***>***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toURLEncodedForm(data,***REMOVED***this.formSerializer).toString();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((isFileList***REMOVED***=***REMOVED***utils$1.isFileList(data))***REMOVED***||***REMOVED***contentType.indexOf('multipart/form-data')***REMOVED***>***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_FormData***REMOVED***=***REMOVED***this.env***REMOVED***&&***REMOVED***this.env.FormData;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toFormData(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isFileList***REMOVED***?***REMOVED***{'files[]':***REMOVED***data}***REMOVED***:***REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_FormData***REMOVED***&&***REMOVED***new***REMOVED***_FormData(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.formSerializer
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isObjectPayload***REMOVED***||***REMOVED***hasJSONContentType***REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentType('application/json',***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***stringifySafely(data);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data;
***REMOVED******REMOVED***}],

***REMOVED******REMOVED***transformResponse:***REMOVED***[function***REMOVED***transformResponse(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transitional***REMOVED***=***REMOVED***this.transitional***REMOVED***||***REMOVED***defaults.transitional;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***forcedJSONParsing***REMOVED***=***REMOVED***transitional***REMOVED***&&***REMOVED***transitional.forcedJSONParsing;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***JSONRequested***REMOVED***=***REMOVED***this.responseType***REMOVED***===***REMOVED***'json';

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isResponse(data)***REMOVED***||***REMOVED***utils$1.isReadableStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(data***REMOVED***&&***REMOVED***utils$1.isString(data)***REMOVED***&&***REMOVED***((forcedJSONParsing***REMOVED***&&***REMOVED***!this.responseType)***REMOVED***||***REMOVED***JSONRequested))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***silentJSONParsing***REMOVED***=***REMOVED***transitional***REMOVED***&&***REMOVED***transitional.silentJSONParsing;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***strictJSONParsing***REMOVED***=***REMOVED***!silentJSONParsing***REMOVED***&&***REMOVED***JSONRequested;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***JSON.parse(data,***REMOVED***this.parseReviver);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(strictJSONParsing)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(e.name***REMOVED***===***REMOVED***'SyntaxError')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***AxiosError.from(e,***REMOVED***AxiosError.ERR_BAD_RESPONSE,***REMOVED***this,***REMOVED***null,***REMOVED***this.response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***e;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data;
***REMOVED******REMOVED***}],

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***A***REMOVED***timeout***REMOVED***in***REMOVED***milliseconds***REMOVED***to***REMOVED***abort***REMOVED***a***REMOVED***request.***REMOVED***If***REMOVED***set***REMOVED***to***REMOVED***0***REMOVED***(default)***REMOVED***a
***REMOVED******REMOVED******REMOVED*******REMOVED***timeout***REMOVED***is***REMOVED***not***REMOVED***created.
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***timeout:***REMOVED***0,

***REMOVED******REMOVED***xsrfCookieName:***REMOVED***'XSRF-TOKEN',
***REMOVED******REMOVED***xsrfHeaderName:***REMOVED***'X-XSRF-TOKEN',

***REMOVED******REMOVED***maxContentLength:***REMOVED***-1,
***REMOVED******REMOVED***maxBodyLength:***REMOVED***-1,

***REMOVED******REMOVED***env:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***FormData:***REMOVED***platform.classes.FormData,
***REMOVED******REMOVED******REMOVED******REMOVED***Blob:***REMOVED***platform.classes.Blob
***REMOVED******REMOVED***},

***REMOVED******REMOVED***validateStatus:***REMOVED***function***REMOVED***validateStatus(status)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***status***REMOVED***>=***REMOVED***200***REMOVED***&&***REMOVED***status***REMOVED***<***REMOVED***300;
***REMOVED******REMOVED***},

***REMOVED******REMOVED***headers:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***common:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Accept':***REMOVED***'application/json,***REMOVED***text/plain,***REMOVED****/*',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Content-Type':***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
};

utils$1.forEach(['delete',***REMOVED***'get',***REMOVED***'head',***REMOVED***'post',***REMOVED***'put',***REMOVED***'patch'],***REMOVED***(method)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***defaults.headers[method]***REMOVED***=***REMOVED***{};
});

const***REMOVED***defaults$1***REMOVED***=***REMOVED***defaults;

//***REMOVED***RawAxiosHeaders***REMOVED***whose***REMOVED***duplicates***REMOVED***are***REMOVED***ignored***REMOVED***by***REMOVED***node
//***REMOVED***c.f.***REMOVED***https://nodejs.org/api/http.html#http_message_headers
const***REMOVED***ignoreDuplicateOf***REMOVED***=***REMOVED***utils$1.toObjectSet([
***REMOVED******REMOVED***'age',***REMOVED***'authorization',***REMOVED***'content-length',***REMOVED***'content-type',***REMOVED***'etag',
***REMOVED******REMOVED***'expires',***REMOVED***'from',***REMOVED***'host',***REMOVED***'if-modified-since',***REMOVED***'if-unmodified-since',
***REMOVED******REMOVED***'last-modified',***REMOVED***'location',***REMOVED***'max-forwards',***REMOVED***'proxy-authorization',
***REMOVED******REMOVED***'referer',***REMOVED***'retry-after',***REMOVED***'user-agent'
]);

/**
***REMOVED*******REMOVED***Parse***REMOVED***headers***REMOVED***into***REMOVED***an***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***Date:***REMOVED***Wed,***REMOVED***27***REMOVED***Aug***REMOVED***2014***REMOVED***08:58:49***REMOVED***GMT
***REMOVED*******REMOVED***Content-Type:***REMOVED***application/json
***REMOVED*******REMOVED***Connection:***REMOVED***keep-alive
***REMOVED*******REMOVED***Transfer-Encoding:***REMOVED***chunked
***REMOVED*******REMOVED***```
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***rawHeaders***REMOVED***Headers***REMOVED***needing***REMOVED***to***REMOVED***be***REMOVED***parsed
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***Headers***REMOVED***parsed***REMOVED***into***REMOVED***an***REMOVED***object
***REMOVED****/
const***REMOVED***parseHeaders***REMOVED***=***REMOVED***rawHeaders***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***let***REMOVED***key;
***REMOVED******REMOVED***let***REMOVED***val;
***REMOVED******REMOVED***let***REMOVED***i;

***REMOVED******REMOVED***rawHeaders***REMOVED***&&***REMOVED***rawHeaders.split('\n').forEach(function***REMOVED***parser(line)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***line.indexOf(':');
***REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***line.substring(0,***REMOVED***i).trim().toLowerCase();
***REMOVED******REMOVED******REMOVED******REMOVED***val***REMOVED***=***REMOVED***line.substring(i***REMOVED***+***REMOVED***1).trim();

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!key***REMOVED***||***REMOVED***(parsed[key]***REMOVED***&&***REMOVED***ignoreDuplicateOf[key]))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***'set-cookie')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parsed[key])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parsed[key].push(val);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parsed[key]***REMOVED***=***REMOVED***[val];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parsed[key]***REMOVED***=***REMOVED***parsed[key]***REMOVED***?***REMOVED***parsed[key]***REMOVED***+***REMOVED***',***REMOVED***'***REMOVED***+***REMOVED***val***REMOVED***:***REMOVED***val;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});

***REMOVED******REMOVED***return***REMOVED***parsed;
};

const***REMOVED***$internals***REMOVED***=***REMOVED***Symbol('internals');

function***REMOVED***normalizeHeader(header)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***header***REMOVED***&&***REMOVED***String(header).trim().toLowerCase();
}

function***REMOVED***normalizeValue(value)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***false***REMOVED***||***REMOVED***value***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***utils$1.isArray(value)***REMOVED***?***REMOVED***value.map(normalizeValue)***REMOVED***:***REMOVED***String(value);
}

function***REMOVED***parseTokens(str)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***tokens***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED***const***REMOVED***tokensRE***REMOVED***=***REMOVED***/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
***REMOVED******REMOVED***let***REMOVED***match;

***REMOVED******REMOVED***while***REMOVED***((match***REMOVED***=***REMOVED***tokensRE.exec(str)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***tokens[match[1]]***REMOVED***=***REMOVED***match[2];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***tokens;
}

const***REMOVED***isValidHeaderName***REMOVED***=***REMOVED***(str)***REMOVED***=>***REMOVED***/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());

function***REMOVED***matchHeaderValue(context,***REMOVED***value,***REMOVED***header,***REMOVED***filter,***REMOVED***isHeaderNameFilter)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(utils$1.isFunction(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***filter.call(this,***REMOVED***value,***REMOVED***header);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isHeaderNameFilter)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***header;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(!utils$1.isString(value))***REMOVED***return;

***REMOVED******REMOVED***if***REMOVED***(utils$1.isString(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value.indexOf(filter)***REMOVED***!==***REMOVED***-1;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(utils$1.isRegExp(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***filter.test(value);
***REMOVED******REMOVED***}
}

function***REMOVED***formatHeader(header)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***header.trim()
***REMOVED******REMOVED******REMOVED******REMOVED***.toLowerCase().replace(/([a-z\d])(\w*)/g,***REMOVED***(w,***REMOVED***char,***REMOVED***str)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***char.toUpperCase()***REMOVED***+***REMOVED***str;
***REMOVED******REMOVED******REMOVED******REMOVED***});
}

function***REMOVED***buildAccessors(obj,***REMOVED***header)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***accessorName***REMOVED***=***REMOVED***utils$1.toCamelCase('***REMOVED***'***REMOVED***+***REMOVED***header);

***REMOVED******REMOVED***['get',***REMOVED***'set',***REMOVED***'has'].forEach(methodName***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***Object.defineProperty(obj,***REMOVED***methodName***REMOVED***+***REMOVED***accessorName,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value:***REMOVED***function(arg1,***REMOVED***arg2,***REMOVED***arg3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this[methodName].call(this,***REMOVED***header,***REMOVED***arg1,***REMOVED***arg2,***REMOVED***arg3);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***configurable:***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***});
}

class***REMOVED***AxiosHeaders***REMOVED***{
***REMOVED******REMOVED***constructor(headers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***headers***REMOVED***&&***REMOVED***this.set(headers);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***set(header,***REMOVED***valueOrRewrite,***REMOVED***rewrite)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***self***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***setHeader(_value,***REMOVED***_header,***REMOVED***_rewrite)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lHeader***REMOVED***=***REMOVED***normalizeHeader(_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lHeader)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('header***REMOVED***name***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***non-empty***REMOVED***string');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils$1.findKey(self,***REMOVED***lHeader);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!key***REMOVED***||***REMOVED***self[key]***REMOVED***===***REMOVED***undefined***REMOVED***||***REMOVED***_rewrite***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***(_rewrite***REMOVED***===***REMOVED***undefined***REMOVED***&&***REMOVED***self[key]***REMOVED***!==***REMOVED***false))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***self[key***REMOVED***||***REMOVED***_header]***REMOVED***=***REMOVED***normalizeValue(_value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***setHeaders***REMOVED***=***REMOVED***(headers,***REMOVED***_rewrite)***REMOVED***=>
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEach(headers,***REMOVED***(_value,***REMOVED***_header)***REMOVED***=>***REMOVED***setHeader(_value,***REMOVED***_header,***REMOVED***_rewrite));

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isPlainObject(header)***REMOVED***||***REMOVED***header***REMOVED***instanceof***REMOVED***this.constructor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setHeaders(header,***REMOVED***valueOrRewrite);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if(utils$1.isString(header)***REMOVED***&&***REMOVED***(header***REMOVED***=***REMOVED***header.trim())***REMOVED***&&***REMOVED***!isValidHeaderName(header))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setHeaders(parseHeaders(header),***REMOVED***valueOrRewrite);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isObject(header)***REMOVED***&&***REMOVED***utils$1.isIterable(header))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***obj***REMOVED***=***REMOVED***{},***REMOVED***dest,***REMOVED***key;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***entry***REMOVED***of***REMOVED***header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isArray(entry))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***TypeError('Object***REMOVED***iterator***REMOVED***must***REMOVED***return***REMOVED***a***REMOVED***key-value***REMOVED***pair');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***obj[key***REMOVED***=***REMOVED***entry[0]]***REMOVED***=***REMOVED***(dest***REMOVED***=***REMOVED***obj[key])***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(utils$1.isArray(dest)***REMOVED***?***REMOVED***[...dest,***REMOVED***entry[1]]***REMOVED***:***REMOVED***[dest,***REMOVED***entry[1]])***REMOVED***:***REMOVED***entry[1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setHeaders(obj,***REMOVED***valueOrRewrite);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***header***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***setHeader(valueOrRewrite,***REMOVED***header,***REMOVED***rewrite);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***get(header,***REMOVED***parser)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***header***REMOVED***=***REMOVED***normalizeHeader(header);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils$1.findKey(this,***REMOVED***header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***this[key];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!parser)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parser***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parseTokens(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isFunction(parser))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parser.call(this,***REMOVED***value,***REMOVED***key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isRegExp(parser))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parser.exec(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('parser***REMOVED***must***REMOVED***be***REMOVED***boolean|regexp|function');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***has(header,***REMOVED***matcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***header***REMOVED***=***REMOVED***normalizeHeader(header);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils$1.findKey(this,***REMOVED***header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!(key***REMOVED***&&***REMOVED***this[key]***REMOVED***!==***REMOVED***undefined***REMOVED***&&***REMOVED***(!matcher***REMOVED***||***REMOVED***matchHeaderValue(this,***REMOVED***this[key],***REMOVED***key,***REMOVED***matcher)));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***delete(header,***REMOVED***matcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***self***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***deleted***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***deleteHeader(_header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_header***REMOVED***=***REMOVED***normalizeHeader(_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils$1.findKey(self,***REMOVED***_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***&&***REMOVED***(!matcher***REMOVED***||***REMOVED***matchHeaderValue(self,***REMOVED***self[key],***REMOVED***key,***REMOVED***matcher)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***self[key];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deleted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isArray(header))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***header.forEach(deleteHeader);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deleteHeader(header);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***deleted;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***clear(matcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(this);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***deleted***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if(!matcher***REMOVED***||***REMOVED***matchHeaderValue(this,***REMOVED***this[key],***REMOVED***key,***REMOVED***matcher,***REMOVED***true))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***this[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deleted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***deleted;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***normalize(format)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***self***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***headers***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEach(this,***REMOVED***(value,***REMOVED***header)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***utils$1.findKey(headers,***REMOVED***header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***self[key]***REMOVED***=***REMOVED***normalizeValue(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***self[header];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***normalized***REMOVED***=***REMOVED***format***REMOVED***?***REMOVED***formatHeader(header)***REMOVED***:***REMOVED***String(header).trim();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(normalized***REMOVED***!==***REMOVED***header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***self[header];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***self[normalized]***REMOVED***=***REMOVED***normalizeValue(value);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers[normalized]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***concat(...targets)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.constructor.concat(this,***REMOVED***...targets);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toJSON(asStrings)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***obj***REMOVED***=***REMOVED***Object.create(null);

***REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEach(this,***REMOVED***(value,***REMOVED***header)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***(obj[header]***REMOVED***=***REMOVED***asStrings***REMOVED***&&***REMOVED***utils$1.isArray(value)***REMOVED***?***REMOVED***value.join(',***REMOVED***')***REMOVED***:***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***obj;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***[Symbol.iterator]()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.entries(this.toJSON())[Symbol.iterator]();
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toString()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.entries(this.toJSON()).map(([header,***REMOVED***value])***REMOVED***=>***REMOVED***header***REMOVED***+***REMOVED***':***REMOVED***'***REMOVED***+***REMOVED***value).join('\n');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***getSetCookie()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.get("set-cookie")***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***get***REMOVED***[Symbol.toStringTag]()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'AxiosHeaders';
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***from(thing)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***thing***REMOVED***instanceof***REMOVED***this***REMOVED***?***REMOVED***thing***REMOVED***:***REMOVED***new***REMOVED***this(thing);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***concat(first,***REMOVED***...targets)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***computed***REMOVED***=***REMOVED***new***REMOVED***this(first);

***REMOVED******REMOVED******REMOVED******REMOVED***targets.forEach((target)***REMOVED***=>***REMOVED***computed.set(target));

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***computed;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***accessor(header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***internals***REMOVED***=***REMOVED***this[$internals]***REMOVED***=***REMOVED***(this[$internals]***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***accessors:***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***accessors***REMOVED***=***REMOVED***internals.accessors;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prototype***REMOVED***=***REMOVED***this.prototype;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***defineAccessor(_header)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lHeader***REMOVED***=***REMOVED***normalizeHeader(_header);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!accessors[lHeader])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildAccessors(prototype,***REMOVED***_header);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***accessors[lHeader]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isArray(header)***REMOVED***?***REMOVED***header.forEach(defineAccessor)***REMOVED***:***REMOVED***defineAccessor(header);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}
}

AxiosHeaders.accessor(['Content-Type',***REMOVED***'Content-Length',***REMOVED***'Accept',***REMOVED***'Accept-Encoding',***REMOVED***'User-Agent',***REMOVED***'Authorization']);

//***REMOVED***reserved***REMOVED***names***REMOVED***hotfix
utils$1.reduceDescriptors(AxiosHeaders.prototype,***REMOVED***({value},***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***mapped***REMOVED***=***REMOVED***key[0].toUpperCase()***REMOVED***+***REMOVED***key.slice(1);***REMOVED***//***REMOVED***map***REMOVED***`set`***REMOVED***=>***REMOVED***`Set`
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***get:***REMOVED***()***REMOVED***=>***REMOVED***value,
***REMOVED******REMOVED******REMOVED******REMOVED***set(headerValue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this[mapped]***REMOVED***=***REMOVED***headerValue;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
});

utils$1.freezeMethods(AxiosHeaders);

const***REMOVED***AxiosHeaders$1***REMOVED***=***REMOVED***AxiosHeaders;

/**
***REMOVED*******REMOVED***Transform***REMOVED***the***REMOVED***data***REMOVED***for***REMOVED***a***REMOVED***request***REMOVED***or***REMOVED***a***REMOVED***response
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Array|Function}***REMOVED***fns***REMOVED***A***REMOVED***single***REMOVED***function***REMOVED***or***REMOVED***Array***REMOVED***of***REMOVED***functions
***REMOVED*******REMOVED***@param***REMOVED***{?Object}***REMOVED***response***REMOVED***The***REMOVED***response***REMOVED***object
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{*}***REMOVED***The***REMOVED***resulting***REMOVED***transformed***REMOVED***data
***REMOVED****/
function***REMOVED***transformData(fns,***REMOVED***response)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***config***REMOVED***=***REMOVED***this***REMOVED***||***REMOVED***defaults$1;
***REMOVED******REMOVED***const***REMOVED***context***REMOVED***=***REMOVED***response***REMOVED***||***REMOVED***config;
***REMOVED******REMOVED***const***REMOVED***headers***REMOVED***=***REMOVED***AxiosHeaders$1.from(context.headers);
***REMOVED******REMOVED***let***REMOVED***data***REMOVED***=***REMOVED***context.data;

***REMOVED******REMOVED***utils$1.forEach(fns,***REMOVED***function***REMOVED***transform(fn)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***fn.call(config,***REMOVED***data,***REMOVED***headers.normalize(),***REMOVED***response***REMOVED***?***REMOVED***response.status***REMOVED***:***REMOVED***undefined);
***REMOVED******REMOVED***});

***REMOVED******REMOVED***headers.normalize();

***REMOVED******REMOVED***return***REMOVED***data;
}

function***REMOVED***isCancel(value)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***!!(value***REMOVED***&&***REMOVED***value.__CANCEL__);
}

/**
***REMOVED*******REMOVED***A***REMOVED***`CanceledError`***REMOVED***is***REMOVED***an***REMOVED***object***REMOVED***that***REMOVED***is***REMOVED***thrown***REMOVED***when***REMOVED***an***REMOVED***operation***REMOVED***is***REMOVED***canceled.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string=}***REMOVED***message***REMOVED***The***REMOVED***message.
***REMOVED*******REMOVED***@param***REMOVED***{Object=}***REMOVED***config***REMOVED***The***REMOVED***config.
***REMOVED*******REMOVED***@param***REMOVED***{Object=}***REMOVED***request***REMOVED***The***REMOVED***request.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{CanceledError}***REMOVED***The***REMOVED***created***REMOVED***error.
***REMOVED****/
function***REMOVED***CanceledError(message,***REMOVED***config,***REMOVED***request)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-eq-null,eqeqeq
***REMOVED******REMOVED***AxiosError.call(this,***REMOVED***message***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***'canceled'***REMOVED***:***REMOVED***message,***REMOVED***AxiosError.ERR_CANCELED,***REMOVED***config,***REMOVED***request);
***REMOVED******REMOVED***this.name***REMOVED***=***REMOVED***'CanceledError';
}

utils$1.inherits(CanceledError,***REMOVED***AxiosError,***REMOVED***{
***REMOVED******REMOVED***__CANCEL__:***REMOVED***true
});

/**
***REMOVED*******REMOVED***Resolve***REMOVED***or***REMOVED***reject***REMOVED***a***REMOVED***Promise***REMOVED***based***REMOVED***on***REMOVED***response***REMOVED***status.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***resolve***REMOVED***A***REMOVED***function***REMOVED***that***REMOVED***resolves***REMOVED***the***REMOVED***promise.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***reject***REMOVED***A***REMOVED***function***REMOVED***that***REMOVED***rejects***REMOVED***the***REMOVED***promise.
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***response***REMOVED***The***REMOVED***response.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{object}***REMOVED***The***REMOVED***response.
***REMOVED****/
function***REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***response)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***validateStatus***REMOVED***=***REMOVED***response.config.validateStatus;
***REMOVED******REMOVED***if***REMOVED***(!response.status***REMOVED***||***REMOVED***!validateStatus***REMOVED***||***REMOVED***validateStatus(response.status))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***resolve(response);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Request***REMOVED***failed***REMOVED***with***REMOVED***status***REMOVED***code***REMOVED***'***REMOVED***+***REMOVED***response.status,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***[AxiosError.ERR_BAD_REQUEST,***REMOVED***AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status***REMOVED***/***REMOVED***100)***REMOVED***-***REMOVED***4],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.request,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response
***REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Determines***REMOVED***whether***REMOVED***the***REMOVED***specified***REMOVED***URL***REMOVED***is***REMOVED***absolute
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***url***REMOVED***The***REMOVED***URL***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***the***REMOVED***specified***REMOVED***URL***REMOVED***is***REMOVED***absolute,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
function***REMOVED***isAbsoluteURL(url)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***A***REMOVED***URL***REMOVED***is***REMOVED***considered***REMOVED***absolute***REMOVED***if***REMOVED***it***REMOVED***begins***REMOVED***with***REMOVED***"<scheme>://"***REMOVED***or***REMOVED***"//"***REMOVED***(protocol-relative***REMOVED***URL).
***REMOVED******REMOVED***//***REMOVED***RFC***REMOVED***3986***REMOVED***defines***REMOVED***scheme***REMOVED***name***REMOVED***as***REMOVED***a***REMOVED***sequence***REMOVED***of***REMOVED***characters***REMOVED***beginning***REMOVED***with***REMOVED***a***REMOVED***letter***REMOVED***and***REMOVED***followed
***REMOVED******REMOVED***//***REMOVED***by***REMOVED***any***REMOVED***combination***REMOVED***of***REMOVED***letters,***REMOVED***digits,***REMOVED***plus,***REMOVED***period,***REMOVED***or***REMOVED***hyphen.
***REMOVED******REMOVED***return***REMOVED***/^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/**
***REMOVED*******REMOVED***Creates***REMOVED***a***REMOVED***new***REMOVED***URL***REMOVED***by***REMOVED***combining***REMOVED***the***REMOVED***specified***REMOVED***URLs
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***baseURL***REMOVED***The***REMOVED***base***REMOVED***URL
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***relativeURL***REMOVED***The***REMOVED***relative***REMOVED***URL
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***The***REMOVED***combined***REMOVED***URL
***REMOVED****/
function***REMOVED***combineURLs(baseURL,***REMOVED***relativeURL)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***relativeURL
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***baseURL.replace(/\/?\/$/,***REMOVED***'')***REMOVED***+***REMOVED***'/'***REMOVED***+***REMOVED***relativeURL.replace(/^\/+/,***REMOVED***'')
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***baseURL;
}

/**
***REMOVED*******REMOVED***Creates***REMOVED***a***REMOVED***new***REMOVED***URL***REMOVED***by***REMOVED***combining***REMOVED***the***REMOVED***baseURL***REMOVED***with***REMOVED***the***REMOVED***requestedURL,
***REMOVED*******REMOVED***only***REMOVED***when***REMOVED***the***REMOVED***requestedURL***REMOVED***is***REMOVED***not***REMOVED***already***REMOVED***an***REMOVED***absolute***REMOVED***URL.
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***requestURL***REMOVED***is***REMOVED***absolute,***REMOVED***this***REMOVED***function***REMOVED***returns***REMOVED***the***REMOVED***requestedURL***REMOVED***untouched.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***baseURL***REMOVED***The***REMOVED***base***REMOVED***URL
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***requestedURL***REMOVED***Absolute***REMOVED***or***REMOVED***relative***REMOVED***URL***REMOVED***to***REMOVED***combine
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***The***REMOVED***combined***REMOVED***full***REMOVED***path
***REMOVED****/
function***REMOVED***buildFullPath(baseURL,***REMOVED***requestedURL,***REMOVED***allowAbsoluteUrls)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***isRelativeUrl***REMOVED***=***REMOVED***!isAbsoluteURL(requestedURL);
***REMOVED******REMOVED***if***REMOVED***(baseURL***REMOVED***&&***REMOVED***(isRelativeUrl***REMOVED***||***REMOVED***allowAbsoluteUrls***REMOVED***==***REMOVED***false))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***combineURLs(baseURL,***REMOVED***requestedURL);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***requestedURL;
}

const***REMOVED***VERSION***REMOVED***=***REMOVED***"1.12.2";

function***REMOVED***parseProtocol(url)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***/^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
***REMOVED******REMOVED***return***REMOVED***match***REMOVED***&&***REMOVED***match[1]***REMOVED***||***REMOVED***'';
}

const***REMOVED***DATA_URL_PATTERN***REMOVED***=***REMOVED***/^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;

/**
***REMOVED*******REMOVED***Parse***REMOVED***data***REMOVED***uri***REMOVED***to***REMOVED***a***REMOVED***Buffer***REMOVED***or***REMOVED***Blob
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***uri
***REMOVED*******REMOVED***@param***REMOVED***{?Boolean}***REMOVED***asBlob
***REMOVED*******REMOVED***@param***REMOVED***{?Object}***REMOVED***options
***REMOVED*******REMOVED***@param***REMOVED***{?Function}***REMOVED***options.Blob
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Buffer|Blob}
***REMOVED****/
function***REMOVED***fromDataURI(uri,***REMOVED***asBlob,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***_Blob***REMOVED***=***REMOVED***options***REMOVED***&&***REMOVED***options.Blob***REMOVED***||***REMOVED***platform.classes.Blob;
***REMOVED******REMOVED***const***REMOVED***protocol***REMOVED***=***REMOVED***parseProtocol(uri);

***REMOVED******REMOVED***if***REMOVED***(asBlob***REMOVED***===***REMOVED***undefined***REMOVED***&&***REMOVED***_Blob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***asBlob***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(protocol***REMOVED***===***REMOVED***'data')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***uri***REMOVED***=***REMOVED***protocol.length***REMOVED***?***REMOVED***uri.slice(protocol.length***REMOVED***+***REMOVED***1)***REMOVED***:***REMOVED***uri;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***DATA_URL_PATTERN.exec(uri);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('Invalid***REMOVED***URL',***REMOVED***AxiosError.ERR_INVALID_URL);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mime***REMOVED***=***REMOVED***match[1];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isBase64***REMOVED***=***REMOVED***match[2];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***body***REMOVED***=***REMOVED***match[3];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***buffer***REMOVED***=***REMOVED***Buffer.from(decodeURIComponent(body),***REMOVED***isBase64***REMOVED***?***REMOVED***'base64'***REMOVED***:***REMOVED***'utf8');

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(asBlob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!_Blob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('Blob***REMOVED***is***REMOVED***not***REMOVED***supported',***REMOVED***AxiosError.ERR_NOT_SUPPORT);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***new***REMOVED***_Blob([buffer],***REMOVED***{type:***REMOVED***mime});
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***buffer;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('Unsupported***REMOVED***protocol***REMOVED***'***REMOVED***+***REMOVED***protocol,***REMOVED***AxiosError.ERR_NOT_SUPPORT);
}

const***REMOVED***kInternals***REMOVED***=***REMOVED***Symbol('internals');

class***REMOVED***AxiosTransformStream***REMOVED***extends***REMOVED***stream__default["default"].Transform{
***REMOVED******REMOVED***constructor(options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options***REMOVED***=***REMOVED***utils$1.toFlatObject(options,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxRate:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***chunkSize:***REMOVED***64***REMOVED*******REMOVED***1024,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***minChunkSize:***REMOVED***100,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeWindow:***REMOVED***500,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ticksRate:***REMOVED***2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***samplesCount:***REMOVED***15
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***null,***REMOVED***(prop,***REMOVED***source)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!utils$1.isUndefined(source[prop]);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***super({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***readableHighWaterMark:***REMOVED***options.chunkSize
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***internals***REMOVED***=***REMOVED***this[kInternals]***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeWindow:***REMOVED***options.timeWindow,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***chunkSize:***REMOVED***options.chunkSize,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxRate:***REMOVED***options.maxRate,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***minChunkSize:***REMOVED***options.minChunkSize,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bytesSeen:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isCaptured:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***notifiedBytesLoaded:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ts:***REMOVED***Date.now(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bytes:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onReadCallback:***REMOVED***null
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***this.on('newListener',***REMOVED***event***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***'progress')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!internals.isCaptured)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.isCaptured***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***_read(size)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***internals***REMOVED***=***REMOVED***this[kInternals];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(internals.onReadCallback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.onReadCallback();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***super._read(size);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***_transform(chunk,***REMOVED***encoding,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***internals***REMOVED***=***REMOVED***this[kInternals];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***maxRate***REMOVED***=***REMOVED***internals.maxRate;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***readableHighWaterMark***REMOVED***=***REMOVED***this.readableHighWaterMark;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***timeWindow***REMOVED***=***REMOVED***internals.timeWindow;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***divider***REMOVED***=***REMOVED***1000***REMOVED***/***REMOVED***timeWindow;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***bytesThreshold***REMOVED***=***REMOVED***(maxRate***REMOVED***/***REMOVED***divider);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***minChunkSize***REMOVED***=***REMOVED***internals.minChunkSize***REMOVED***!==***REMOVED***false***REMOVED***?***REMOVED***Math.max(internals.minChunkSize,***REMOVED***bytesThreshold***REMOVED*******REMOVED***0.01)***REMOVED***:***REMOVED***0;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pushChunk***REMOVED***=***REMOVED***(_chunk,***REMOVED***_callback)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***bytes***REMOVED***=***REMOVED***Buffer.byteLength(_chunk);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.bytesSeen***REMOVED***+=***REMOVED***bytes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.bytes***REMOVED***+=***REMOVED***bytes;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.isCaptured***REMOVED***&&***REMOVED***this.emit('progress',***REMOVED***internals.bytesSeen);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.push(_chunk))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.nextTick(_callback);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.onReadCallback***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.onReadCallback***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.nextTick(_callback);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transformChunk***REMOVED***=***REMOVED***(_chunk,***REMOVED***_callback)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***chunkSize***REMOVED***=***REMOVED***Buffer.byteLength(_chunk);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***chunkRemainder***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxChunkSize***REMOVED***=***REMOVED***readableHighWaterMark;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***bytesLeft;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***passed***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(maxRate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***now***REMOVED***=***REMOVED***Date.now();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!internals.ts***REMOVED***||***REMOVED***(passed***REMOVED***=***REMOVED***(now***REMOVED***-***REMOVED***internals.ts))***REMOVED***>=***REMOVED***timeWindow)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.ts***REMOVED***=***REMOVED***now;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bytesLeft***REMOVED***=***REMOVED***bytesThreshold***REMOVED***-***REMOVED***internals.bytes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***internals.bytes***REMOVED***=***REMOVED***bytesLeft***REMOVED***<***REMOVED***0***REMOVED***?***REMOVED***-bytesLeft***REMOVED***:***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***passed***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bytesLeft***REMOVED***=***REMOVED***bytesThreshold***REMOVED***-***REMOVED***internals.bytes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(maxRate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(bytesLeft***REMOVED***<=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***next***REMOVED***time***REMOVED***window
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***setTimeout(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_callback(null,***REMOVED***_chunk);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***timeWindow***REMOVED***-***REMOVED***passed);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(bytesLeft***REMOVED***<***REMOVED***maxChunkSize)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxChunkSize***REMOVED***=***REMOVED***bytesLeft;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(maxChunkSize***REMOVED***&&***REMOVED***chunkSize***REMOVED***>***REMOVED***maxChunkSize***REMOVED***&&***REMOVED***(chunkSize***REMOVED***-***REMOVED***maxChunkSize)***REMOVED***>***REMOVED***minChunkSize)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***chunkRemainder***REMOVED***=***REMOVED***_chunk.subarray(maxChunkSize);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_chunk***REMOVED***=***REMOVED***_chunk.subarray(0,***REMOVED***maxChunkSize);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pushChunk(_chunk,***REMOVED***chunkRemainder***REMOVED***?***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.nextTick(_callback,***REMOVED***null,***REMOVED***chunkRemainder);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***:***REMOVED***_callback);
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***transformChunk(chunk,***REMOVED***function***REMOVED***transformNextChunk(err,***REMOVED***_chunk)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_chunk)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transformChunk(_chunk,***REMOVED***transformNextChunk);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
}

const***REMOVED***AxiosTransformStream$1***REMOVED***=***REMOVED***AxiosTransformStream;

const***REMOVED***{asyncIterator}***REMOVED***=***REMOVED***Symbol;

const***REMOVED***readBlob***REMOVED***=***REMOVED***async***REMOVED***function****REMOVED***(blob)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(blob.stream)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield****REMOVED***blob.stream();
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(blob.arrayBuffer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***await***REMOVED***blob.arrayBuffer();
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(blob[asyncIterator])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield****REMOVED***blob[asyncIterator]();
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***blob;
***REMOVED******REMOVED***}
};

const***REMOVED***readBlob$1***REMOVED***=***REMOVED***readBlob;

const***REMOVED***BOUNDARY_ALPHABET***REMOVED***=***REMOVED***platform.ALPHABET.ALPHA_DIGIT***REMOVED***+***REMOVED***'-_';

const***REMOVED***textEncoder***REMOVED***=***REMOVED***typeof***REMOVED***TextEncoder***REMOVED***===***REMOVED***'function'***REMOVED***?***REMOVED***new***REMOVED***TextEncoder()***REMOVED***:***REMOVED***new***REMOVED***util__default["default"].TextEncoder();

const***REMOVED***CRLF***REMOVED***=***REMOVED***'\r\n';
const***REMOVED***CRLF_BYTES***REMOVED***=***REMOVED***textEncoder.encode(CRLF);
const***REMOVED***CRLF_BYTES_COUNT***REMOVED***=***REMOVED***2;

class***REMOVED***FormDataPart***REMOVED***{
***REMOVED******REMOVED***constructor(name,***REMOVED***value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{escapeName}***REMOVED***=***REMOVED***this.constructor;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isStringValue***REMOVED***=***REMOVED***utils$1.isString(value);

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***headers***REMOVED***=***REMOVED***`Content-Disposition:***REMOVED***form-data;***REMOVED***name="${escapeName(name)}"${
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!isStringValue***REMOVED***&&***REMOVED***value.name***REMOVED***?***REMOVED***`;***REMOVED***filename="${escapeName(value.name)}"`***REMOVED***:***REMOVED***''
***REMOVED******REMOVED******REMOVED******REMOVED***}${CRLF}`;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isStringValue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g,***REMOVED***CRLF));
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers***REMOVED***+=***REMOVED***`Content-Type:***REMOVED***${value.type***REMOVED***||***REMOVED***"application/octet-stream"}${CRLF}`;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***this.headers***REMOVED***=***REMOVED***textEncoder.encode(headers***REMOVED***+***REMOVED***CRLF);

***REMOVED******REMOVED******REMOVED******REMOVED***this.contentLength***REMOVED***=***REMOVED***isStringValue***REMOVED***?***REMOVED***value.byteLength***REMOVED***:***REMOVED***value.size;

***REMOVED******REMOVED******REMOVED******REMOVED***this.size***REMOVED***=***REMOVED***this.headers.byteLength***REMOVED***+***REMOVED***this.contentLength***REMOVED***+***REMOVED***CRLF_BYTES_COUNT;

***REMOVED******REMOVED******REMOVED******REMOVED***this.name***REMOVED***=***REMOVED***name;
***REMOVED******REMOVED******REMOVED******REMOVED***this.value***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***async***REMOVED****encode(){
***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***this.headers;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{value}***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED******REMOVED******REMOVED***if(utils$1.isTypedArray(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***yield****REMOVED***readBlob$1(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***CRLF_BYTES;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***static***REMOVED***escapeName(name)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***String(name).replace(/[\r\n"]/g,***REMOVED***(match)***REMOVED***=>***REMOVED***({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'\r'***REMOVED***:***REMOVED***'%0D',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'\n'***REMOVED***:***REMOVED***'%0A',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'"'***REMOVED***:***REMOVED***'%22',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}[match]));
***REMOVED******REMOVED***}
}

const***REMOVED***formDataToStream***REMOVED***=***REMOVED***(form,***REMOVED***headersHandler,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***tag***REMOVED***=***REMOVED***'form-data-boundary',
***REMOVED******REMOVED******REMOVED******REMOVED***size***REMOVED***=***REMOVED***25,
***REMOVED******REMOVED******REMOVED******REMOVED***boundary***REMOVED***=***REMOVED***tag***REMOVED***+***REMOVED***'-'***REMOVED***+***REMOVED***platform.generateString(size,***REMOVED***BOUNDARY_ALPHABET)
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};

***REMOVED******REMOVED***if(!utils$1.isFormData(form))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***TypeError('FormData***REMOVED***instance***REMOVED***required');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(boundary.length***REMOVED***<***REMOVED***1***REMOVED***||***REMOVED***boundary.length***REMOVED***>***REMOVED***70)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***Error('boundary***REMOVED***must***REMOVED***be***REMOVED***10-70***REMOVED***characters***REMOVED***long')
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***boundaryBytes***REMOVED***=***REMOVED***textEncoder.encode('--'***REMOVED***+***REMOVED***boundary***REMOVED***+***REMOVED***CRLF);
***REMOVED******REMOVED***const***REMOVED***footerBytes***REMOVED***=***REMOVED***textEncoder.encode('--'***REMOVED***+***REMOVED***boundary***REMOVED***+***REMOVED***'--'***REMOVED***+***REMOVED***CRLF);
***REMOVED******REMOVED***let***REMOVED***contentLength***REMOVED***=***REMOVED***footerBytes.byteLength;

***REMOVED******REMOVED***const***REMOVED***parts***REMOVED***=***REMOVED***Array.from(form.entries()).map(([name,***REMOVED***value])***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***part***REMOVED***=***REMOVED***new***REMOVED***FormDataPart(name,***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED***contentLength***REMOVED***+=***REMOVED***part.size;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***part;
***REMOVED******REMOVED***});

***REMOVED******REMOVED***contentLength***REMOVED***+=***REMOVED***boundaryBytes.byteLength***REMOVED*******REMOVED***parts.length;

***REMOVED******REMOVED***contentLength***REMOVED***=***REMOVED***utils$1.toFiniteNumber(contentLength);

***REMOVED******REMOVED***const***REMOVED***computedHeaders***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***'Content-Type':***REMOVED***`multipart/form-data;***REMOVED***boundary=${boundary}`
***REMOVED******REMOVED***};

***REMOVED******REMOVED***if***REMOVED***(Number.isFinite(contentLength))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***computedHeaders['Content-Length']***REMOVED***=***REMOVED***contentLength;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***headersHandler***REMOVED***&&***REMOVED***headersHandler(computedHeaders);

***REMOVED******REMOVED***return***REMOVED***stream.Readable.from((async***REMOVED***function***REMOVED****()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for(const***REMOVED***part***REMOVED***of***REMOVED***parts)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***boundaryBytes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***yield****REMOVED***part.encode();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***footerBytes;
***REMOVED******REMOVED***})());
};

const***REMOVED***formDataToStream$1***REMOVED***=***REMOVED***formDataToStream;

class***REMOVED***ZlibHeaderTransformStream***REMOVED***extends***REMOVED***stream__default["default"].Transform***REMOVED***{
***REMOVED******REMOVED***__transform(chunk,***REMOVED***encoding,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.push(chunk);
***REMOVED******REMOVED******REMOVED******REMOVED***callback();
***REMOVED******REMOVED***}

***REMOVED******REMOVED***_transform(chunk,***REMOVED***encoding,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(chunk.length***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._transform***REMOVED***=***REMOVED***this.__transform;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***Default***REMOVED***Compression***REMOVED***headers***REMOVED***if***REMOVED***no***REMOVED***zlib***REMOVED***headers***REMOVED***are***REMOVED***present
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(chunk[0]***REMOVED***!==***REMOVED***120)***REMOVED***{***REMOVED***//***REMOVED***Hex:***REMOVED***78
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***header***REMOVED***=***REMOVED***Buffer.alloc(2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***header[0]***REMOVED***=***REMOVED***120;***REMOVED***//***REMOVED***Hex:***REMOVED***78
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***header[1]***REMOVED***=***REMOVED***156;***REMOVED***//***REMOVED***Hex:***REMOVED***9C***REMOVED***
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.push(header,***REMOVED***encoding);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***this.__transform(chunk,***REMOVED***encoding,***REMOVED***callback);
***REMOVED******REMOVED***}
}

const***REMOVED***ZlibHeaderTransformStream$1***REMOVED***=***REMOVED***ZlibHeaderTransformStream;

const***REMOVED***callbackify***REMOVED***=***REMOVED***(fn,***REMOVED***reducer)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***utils$1.isAsyncFn(fn)***REMOVED***?***REMOVED***function***REMOVED***(...args)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cb***REMOVED***=***REMOVED***args.pop();
***REMOVED******REMOVED******REMOVED******REMOVED***fn.apply(this,***REMOVED***args).then((value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reducer***REMOVED***?***REMOVED***cb(null,***REMOVED***...reducer(value))***REMOVED***:***REMOVED***cb(null,***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cb(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***cb);
***REMOVED******REMOVED***}***REMOVED***:***REMOVED***fn;
};

const***REMOVED***callbackify$1***REMOVED***=***REMOVED***callbackify;

/**
***REMOVED*******REMOVED***Calculate***REMOVED***data***REMOVED***maxRate
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***[samplesCount=***REMOVED***10]
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***[min=***REMOVED***1000]
***REMOVED*******REMOVED***@returns***REMOVED***{Function}
***REMOVED****/
function***REMOVED***speedometer(samplesCount,***REMOVED***min)***REMOVED***{
***REMOVED******REMOVED***samplesCount***REMOVED***=***REMOVED***samplesCount***REMOVED***||***REMOVED***10;
***REMOVED******REMOVED***const***REMOVED***bytes***REMOVED***=***REMOVED***new***REMOVED***Array(samplesCount);
***REMOVED******REMOVED***const***REMOVED***timestamps***REMOVED***=***REMOVED***new***REMOVED***Array(samplesCount);
***REMOVED******REMOVED***let***REMOVED***head***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***tail***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***firstSampleTS;

***REMOVED******REMOVED***min***REMOVED***=***REMOVED***min***REMOVED***!==***REMOVED***undefined***REMOVED***?***REMOVED***min***REMOVED***:***REMOVED***1000;

***REMOVED******REMOVED***return***REMOVED***function***REMOVED***push(chunkLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***now***REMOVED***=***REMOVED***Date.now();

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***startedAt***REMOVED***=***REMOVED***timestamps[tail];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!firstSampleTS)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***firstSampleTS***REMOVED***=***REMOVED***now;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***bytes[head]***REMOVED***=***REMOVED***chunkLength;
***REMOVED******REMOVED******REMOVED******REMOVED***timestamps[head]***REMOVED***=***REMOVED***now;

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***tail;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***bytesCount***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i***REMOVED***!==***REMOVED***head)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bytesCount***REMOVED***+=***REMOVED***bytes[i++];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***i***REMOVED***%***REMOVED***samplesCount;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***head***REMOVED***=***REMOVED***(head***REMOVED***+***REMOVED***1)***REMOVED***%***REMOVED***samplesCount;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(head***REMOVED***===***REMOVED***tail)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tail***REMOVED***=***REMOVED***(tail***REMOVED***+***REMOVED***1)***REMOVED***%***REMOVED***samplesCount;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(now***REMOVED***-***REMOVED***firstSampleTS***REMOVED***<***REMOVED***min)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***passed***REMOVED***=***REMOVED***startedAt***REMOVED***&&***REMOVED***now***REMOVED***-***REMOVED***startedAt;

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***passed***REMOVED***?***REMOVED***Math.round(bytesCount***REMOVED*******REMOVED***1000***REMOVED***/***REMOVED***passed)***REMOVED***:***REMOVED***undefined;
***REMOVED******REMOVED***};
}

/**
***REMOVED*******REMOVED***Throttle***REMOVED***decorator
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***fn
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***freq
***REMOVED*******REMOVED***@return***REMOVED***{Function}
***REMOVED****/
function***REMOVED***throttle(fn,***REMOVED***freq)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***timestamp***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***threshold***REMOVED***=***REMOVED***1000***REMOVED***/***REMOVED***freq;
***REMOVED******REMOVED***let***REMOVED***lastArgs;
***REMOVED******REMOVED***let***REMOVED***timer;

***REMOVED******REMOVED***const***REMOVED***invoke***REMOVED***=***REMOVED***(args,***REMOVED***now***REMOVED***=***REMOVED***Date.now())***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***timestamp***REMOVED***=***REMOVED***now;
***REMOVED******REMOVED******REMOVED******REMOVED***lastArgs***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(timer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clearTimeout(timer);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timer***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***fn(...args);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***throttled***REMOVED***=***REMOVED***(...args)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***now***REMOVED***=***REMOVED***Date.now();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***passed***REMOVED***=***REMOVED***now***REMOVED***-***REMOVED***timestamp;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(***REMOVED***passed***REMOVED***>=***REMOVED***threshold)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***invoke(args,***REMOVED***now);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastArgs***REMOVED***=***REMOVED***args;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!timer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timer***REMOVED***=***REMOVED***setTimeout(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timer***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***invoke(lastArgs);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***threshold***REMOVED***-***REMOVED***passed);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***flush***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***lastArgs***REMOVED***&&***REMOVED***invoke(lastArgs);

***REMOVED******REMOVED***return***REMOVED***[throttled,***REMOVED***flush];
}

const***REMOVED***progressEventReducer***REMOVED***=***REMOVED***(listener,***REMOVED***isDownloadStream,***REMOVED***freq***REMOVED***=***REMOVED***3)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***bytesNotified***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***const***REMOVED***_speedometer***REMOVED***=***REMOVED***speedometer(50,***REMOVED***250);

***REMOVED******REMOVED***return***REMOVED***throttle(e***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***loaded***REMOVED***=***REMOVED***e.loaded;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***total***REMOVED***=***REMOVED***e.lengthComputable***REMOVED***?***REMOVED***e.total***REMOVED***:***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***progressBytes***REMOVED***=***REMOVED***loaded***REMOVED***-***REMOVED***bytesNotified;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rate***REMOVED***=***REMOVED***_speedometer(progressBytes);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***inRange***REMOVED***=***REMOVED***loaded***REMOVED***<=***REMOVED***total;

***REMOVED******REMOVED******REMOVED******REMOVED***bytesNotified***REMOVED***=***REMOVED***loaded;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loaded,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***total,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progress:***REMOVED***total***REMOVED***?***REMOVED***(loaded***REMOVED***/***REMOVED***total)***REMOVED***:***REMOVED***undefined,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bytes:***REMOVED***progressBytes,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rate:***REMOVED***rate***REMOVED***?***REMOVED***rate***REMOVED***:***REMOVED***undefined,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***estimated:***REMOVED***rate***REMOVED***&&***REMOVED***total***REMOVED***&&***REMOVED***inRange***REMOVED***?***REMOVED***(total***REMOVED***-***REMOVED***loaded)***REMOVED***/***REMOVED***rate***REMOVED***:***REMOVED***undefined,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***event:***REMOVED***e,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lengthComputable:***REMOVED***total***REMOVED***!=***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***[isDownloadStream***REMOVED***?***REMOVED***'download'***REMOVED***:***REMOVED***'upload']:***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***listener(data);
***REMOVED******REMOVED***},***REMOVED***freq);
};

const***REMOVED***progressEventDecorator***REMOVED***=***REMOVED***(total,***REMOVED***throttled)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***lengthComputable***REMOVED***=***REMOVED***total***REMOVED***!=***REMOVED***null;

***REMOVED******REMOVED***return***REMOVED***[(loaded)***REMOVED***=>***REMOVED***throttled[0]({
***REMOVED******REMOVED******REMOVED******REMOVED***lengthComputable,
***REMOVED******REMOVED******REMOVED******REMOVED***total,
***REMOVED******REMOVED******REMOVED******REMOVED***loaded
***REMOVED******REMOVED***}),***REMOVED***throttled[1]];
};

const***REMOVED***asyncDecorator***REMOVED***=***REMOVED***(fn)***REMOVED***=>***REMOVED***(...args)***REMOVED***=>***REMOVED***utils$1.asap(()***REMOVED***=>***REMOVED***fn(...args));

/**
***REMOVED*******REMOVED***Estimate***REMOVED***decoded***REMOVED***byte***REMOVED***length***REMOVED***of***REMOVED***a***REMOVED***data://***REMOVED***URL***REMOVED****without****REMOVED***allocating***REMOVED***large***REMOVED***buffers.
***REMOVED*******REMOVED***-***REMOVED***For***REMOVED***base64:***REMOVED***compute***REMOVED***exact***REMOVED***decoded***REMOVED***size***REMOVED***using***REMOVED***length***REMOVED***and***REMOVED***padding;
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***handle***REMOVED***%XX***REMOVED***at***REMOVED***the***REMOVED***character-count***REMOVED***level***REMOVED***(no***REMOVED***string***REMOVED***allocation).
***REMOVED*******REMOVED***-***REMOVED***For***REMOVED***non-base64:***REMOVED***use***REMOVED***UTF-8***REMOVED***byteLength***REMOVED***of***REMOVED***the***REMOVED***encoded***REMOVED***body***REMOVED***as***REMOVED***a***REMOVED***safe***REMOVED***upper***REMOVED***bound.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***url
***REMOVED*******REMOVED***@returns***REMOVED***{number}
***REMOVED****/
function***REMOVED***estimateDataURLDecodedBytes(url)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!url***REMOVED***||***REMOVED***typeof***REMOVED***url***REMOVED***!==***REMOVED***'string')***REMOVED***return***REMOVED***0;
***REMOVED******REMOVED***if***REMOVED***(!url.startsWith('data:'))***REMOVED***return***REMOVED***0;

***REMOVED******REMOVED***const***REMOVED***comma***REMOVED***=***REMOVED***url.indexOf(',');
***REMOVED******REMOVED***if***REMOVED***(comma***REMOVED***<***REMOVED***0)***REMOVED***return***REMOVED***0;

***REMOVED******REMOVED***const***REMOVED***meta***REMOVED***=***REMOVED***url.slice(5,***REMOVED***comma);
***REMOVED******REMOVED***const***REMOVED***body***REMOVED***=***REMOVED***url.slice(comma***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED***const***REMOVED***isBase64***REMOVED***=***REMOVED***/;base64/i.test(meta);

***REMOVED******REMOVED***if***REMOVED***(isBase64)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***effectiveLen***REMOVED***=***REMOVED***body.length;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***body.length;***REMOVED***//***REMOVED***cache***REMOVED***length

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(body.charCodeAt(i)***REMOVED***===***REMOVED***37***REMOVED***/****REMOVED***'%'***REMOVED****/***REMOVED***&&***REMOVED***i***REMOVED***+***REMOVED***2***REMOVED***<***REMOVED***len)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***a***REMOVED***=***REMOVED***body.charCodeAt(i***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***b***REMOVED***=***REMOVED***body.charCodeAt(i***REMOVED***+***REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isHex***REMOVED***=
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***((a***REMOVED***>=***REMOVED***48***REMOVED***&&***REMOVED***a***REMOVED***<=***REMOVED***57)***REMOVED***||***REMOVED***(a***REMOVED***>=***REMOVED***65***REMOVED***&&***REMOVED***a***REMOVED***<=***REMOVED***70)***REMOVED***||***REMOVED***(a***REMOVED***>=***REMOVED***97***REMOVED***&&***REMOVED***a***REMOVED***<=***REMOVED***102))***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***((b***REMOVED***>=***REMOVED***48***REMOVED***&&***REMOVED***b***REMOVED***<=***REMOVED***57)***REMOVED***||***REMOVED***(b***REMOVED***>=***REMOVED***65***REMOVED***&&***REMOVED***b***REMOVED***<=***REMOVED***70)***REMOVED***||***REMOVED***(b***REMOVED***>=***REMOVED***97***REMOVED***&&***REMOVED***b***REMOVED***<=***REMOVED***102));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isHex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***effectiveLen***REMOVED***-=***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***+=***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pad***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***idx***REMOVED***=***REMOVED***len***REMOVED***-***REMOVED***1;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***tailIsPct3D***REMOVED***=***REMOVED***(j)***REMOVED***=>
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***j***REMOVED***>=***REMOVED***2***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body.charCodeAt(j***REMOVED***-***REMOVED***2)***REMOVED***===***REMOVED***37***REMOVED***&&***REMOVED***//***REMOVED***'%'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body.charCodeAt(j***REMOVED***-***REMOVED***1)***REMOVED***===***REMOVED***51***REMOVED***&&***REMOVED***//***REMOVED***'3'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(body.charCodeAt(j)***REMOVED***===***REMOVED***68***REMOVED***||***REMOVED***body.charCodeAt(j)***REMOVED***===***REMOVED***100);***REMOVED***//***REMOVED***'D'***REMOVED***or***REMOVED***'d'

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(idx***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(body.charCodeAt(idx)***REMOVED***===***REMOVED***61***REMOVED***/****REMOVED***'='***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pad++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***idx--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(tailIsPct3D(idx))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pad++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***idx***REMOVED***-=***REMOVED***3;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pad***REMOVED***===***REMOVED***1***REMOVED***&&***REMOVED***idx***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(body.charCodeAt(idx)***REMOVED***===***REMOVED***61***REMOVED***/****REMOVED***'='***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pad++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(tailIsPct3D(idx))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pad++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***groups***REMOVED***=***REMOVED***Math.floor(effectiveLen***REMOVED***/***REMOVED***4);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***bytes***REMOVED***=***REMOVED***groups***REMOVED*******REMOVED***3***REMOVED***-***REMOVED***(pad***REMOVED***||***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***bytes***REMOVED***>***REMOVED***0***REMOVED***?***REMOVED***bytes***REMOVED***:***REMOVED***0;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***Buffer.byteLength(body,***REMOVED***'utf8');
}

const***REMOVED***zlibOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***flush:***REMOVED***zlib__default["default"].constants.Z_SYNC_FLUSH,
***REMOVED******REMOVED***finishFlush:***REMOVED***zlib__default["default"].constants.Z_SYNC_FLUSH
};

const***REMOVED***brotliOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***flush:***REMOVED***zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
***REMOVED******REMOVED***finishFlush:***REMOVED***zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
};

const***REMOVED***isBrotliSupported***REMOVED***=***REMOVED***utils$1.isFunction(zlib__default["default"].createBrotliDecompress);

const***REMOVED***{http:***REMOVED***httpFollow,***REMOVED***https:***REMOVED***httpsFollow}***REMOVED***=***REMOVED***followRedirects__default["default"];

const***REMOVED***isHttps***REMOVED***=***REMOVED***/https:?/;

const***REMOVED***supportedProtocols***REMOVED***=***REMOVED***platform.protocols.map(protocol***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***protocol***REMOVED***+***REMOVED***':';
});


const***REMOVED***flushOnFinish***REMOVED***=***REMOVED***(stream,***REMOVED***[throttled,***REMOVED***flush])***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***stream
***REMOVED******REMOVED******REMOVED******REMOVED***.on('end',***REMOVED***flush)
***REMOVED******REMOVED******REMOVED******REMOVED***.on('error',***REMOVED***flush);

***REMOVED******REMOVED***return***REMOVED***throttled;
};


/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***proxy***REMOVED***or***REMOVED***config***REMOVED***beforeRedirects***REMOVED***functions***REMOVED***are***REMOVED***defined,***REMOVED***call***REMOVED***them***REMOVED***with***REMOVED***the***REMOVED***options
***REMOVED*******REMOVED***object.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object<string,***REMOVED***any>}***REMOVED***options***REMOVED***-***REMOVED***The***REMOVED***options***REMOVED***object***REMOVED***that***REMOVED***was***REMOVED***passed***REMOVED***to***REMOVED***the***REMOVED***request.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object<string,***REMOVED***any>}
***REMOVED****/
function***REMOVED***dispatchBeforeRedirect(options,***REMOVED***responseDetails)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(options.beforeRedirects.proxy)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options.beforeRedirects.proxy(options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(options.beforeRedirects.config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options.beforeRedirects.config(options,***REMOVED***responseDetails);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***If***REMOVED***the***REMOVED***proxy***REMOVED***or***REMOVED***config***REMOVED***afterRedirects***REMOVED***functions***REMOVED***are***REMOVED***defined,***REMOVED***call***REMOVED***them***REMOVED***with***REMOVED***the***REMOVED***options
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{http.ClientRequestArgs}***REMOVED***options
***REMOVED*******REMOVED***@param***REMOVED***{AxiosProxyConfig}***REMOVED***configProxy***REMOVED***configuration***REMOVED***from***REMOVED***Axios***REMOVED***options***REMOVED***object
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***location
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{http.ClientRequestArgs}
***REMOVED****/
function***REMOVED***setProxy(options,***REMOVED***configProxy,***REMOVED***location)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***proxy***REMOVED***=***REMOVED***configProxy;
***REMOVED******REMOVED***if***REMOVED***(!proxy***REMOVED***&&***REMOVED***proxy***REMOVED***!==***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***proxyUrl***REMOVED***=***REMOVED***proxyFromEnv__default["default"].getProxyForUrl(location);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxyUrl)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***proxy***REMOVED***=***REMOVED***new***REMOVED***URL(proxyUrl);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(proxy)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Basic***REMOVED***proxy***REMOVED***authorization
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.username)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***proxy.auth***REMOVED***=***REMOVED***(proxy.username***REMOVED***||***REMOVED***'')***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***(proxy.password***REMOVED***||***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.auth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Support***REMOVED***proxy***REMOVED***auth***REMOVED***object***REMOVED***form
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.auth.username***REMOVED***||***REMOVED***proxy.auth.password)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***proxy.auth***REMOVED***=***REMOVED***(proxy.auth.username***REMOVED***||***REMOVED***'')***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***(proxy.auth.password***REMOVED***||***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***base64***REMOVED***=***REMOVED***Buffer
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.from(proxy.auth,***REMOVED***'utf8')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.toString('base64');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.headers['Proxy-Authorization']***REMOVED***=***REMOVED***'Basic***REMOVED***'***REMOVED***+***REMOVED***base64;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***options.headers.host***REMOVED***=***REMOVED***options.hostname***REMOVED***+***REMOVED***(options.port***REMOVED***?***REMOVED***':'***REMOVED***+***REMOVED***options.port***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***proxyHost***REMOVED***=***REMOVED***proxy.hostname***REMOVED***||***REMOVED***proxy.host;
***REMOVED******REMOVED******REMOVED******REMOVED***options.hostname***REMOVED***=***REMOVED***proxyHost;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Replace***REMOVED***'host'***REMOVED***since***REMOVED***options***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***URL***REMOVED***object
***REMOVED******REMOVED******REMOVED******REMOVED***options.host***REMOVED***=***REMOVED***proxyHost;
***REMOVED******REMOVED******REMOVED******REMOVED***options.port***REMOVED***=***REMOVED***proxy.port;
***REMOVED******REMOVED******REMOVED******REMOVED***options.path***REMOVED***=***REMOVED***location;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(proxy.protocol)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.protocol***REMOVED***=***REMOVED***proxy.protocol.includes(':')***REMOVED***?***REMOVED***proxy.protocol***REMOVED***:***REMOVED***`${proxy.protocol}:`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***options.beforeRedirects.proxy***REMOVED***=***REMOVED***function***REMOVED***beforeRedirect(redirectOptions)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Configure***REMOVED***proxy***REMOVED***for***REMOVED***redirected***REMOVED***request,***REMOVED***passing***REMOVED***the***REMOVED***original***REMOVED***config***REMOVED***proxy***REMOVED***to***REMOVED***apply
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***the***REMOVED***exact***REMOVED***same***REMOVED***logic***REMOVED***as***REMOVED***if***REMOVED***the***REMOVED***redirected***REMOVED***request***REMOVED***was***REMOVED***performed***REMOVED***by***REMOVED***axios***REMOVED***directly.
***REMOVED******REMOVED******REMOVED******REMOVED***setProxy(redirectOptions,***REMOVED***configProxy,***REMOVED***redirectOptions.href);
***REMOVED******REMOVED***};
}

const***REMOVED***isHttpAdapterSupported***REMOVED***=***REMOVED***typeof***REMOVED***process***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***utils$1.kindOf(process)***REMOVED***===***REMOVED***'process';

//***REMOVED***temporary***REMOVED***hotfix

const***REMOVED***wrapAsync***REMOVED***=***REMOVED***(asyncExecutor)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***onDone;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***isDone;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***done***REMOVED***=***REMOVED***(value,***REMOVED***isRejected)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isDone)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isDone***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDone***REMOVED***&&***REMOVED***onDone(value,***REMOVED***isRejected);
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_resolve***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve(value);
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_reject***REMOVED***=***REMOVED***(reason)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done(reason,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(reason);
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***asyncExecutor(_resolve,***REMOVED***_reject,***REMOVED***(onDoneHandler)***REMOVED***=>***REMOVED***(onDone***REMOVED***=***REMOVED***onDoneHandler)).catch(_reject);
***REMOVED******REMOVED***})
};

const***REMOVED***resolveFamily***REMOVED***=***REMOVED***({address,***REMOVED***family})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!utils$1.isString(address))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***TypeError('address***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***({
***REMOVED******REMOVED******REMOVED******REMOVED***address,
***REMOVED******REMOVED******REMOVED******REMOVED***family:***REMOVED***family***REMOVED***||***REMOVED***(address.indexOf('.')***REMOVED***<***REMOVED***0***REMOVED***?***REMOVED***6***REMOVED***:***REMOVED***4)
***REMOVED******REMOVED***});
};

const***REMOVED***buildAddressEntry***REMOVED***=***REMOVED***(address,***REMOVED***family)***REMOVED***=>***REMOVED***resolveFamily(utils$1.isObject(address)***REMOVED***?***REMOVED***address***REMOVED***:***REMOVED***{address,***REMOVED***family});

/*eslint***REMOVED***consistent-return:0*/
const***REMOVED***httpAdapter***REMOVED***=***REMOVED***isHttpAdapterSupported***REMOVED***&&***REMOVED***function***REMOVED***httpAdapter(config)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***wrapAsync(async***REMOVED***function***REMOVED***dispatchHttpRequest(resolve,***REMOVED***reject,***REMOVED***onDone)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{data,***REMOVED***lookup,***REMOVED***family}***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{responseType,***REMOVED***responseEncoding}***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***method***REMOVED***=***REMOVED***config.method.toUpperCase();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***isDone;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***rejected***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***req;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lookup)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_lookup***REMOVED***=***REMOVED***callbackify$1(lookup,***REMOVED***(value)***REMOVED***=>***REMOVED***utils$1.isArray(value)***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***[value]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***hotfix***REMOVED***to***REMOVED***support***REMOVED***opt.all***REMOVED***option***REMOVED***which***REMOVED***is***REMOVED***required***REMOVED***for***REMOVED***node***REMOVED***20.x
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lookup***REMOVED***=***REMOVED***(hostname,***REMOVED***opt,***REMOVED***cb)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_lookup(hostname,***REMOVED***opt,***REMOVED***(err,***REMOVED***arg0,***REMOVED***arg1)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cb(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***addresses***REMOVED***=***REMOVED***utils$1.isArray(arg0)***REMOVED***?***REMOVED***arg0.map(addr***REMOVED***=>***REMOVED***buildAddressEntry(addr))***REMOVED***:***REMOVED***[buildAddressEntry(arg0,***REMOVED***arg1)];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opt.all***REMOVED***?***REMOVED***cb(err,***REMOVED***addresses)***REMOVED***:***REMOVED***cb(err,***REMOVED***addresses[0].address,***REMOVED***addresses[0].family);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***temporary***REMOVED***internal***REMOVED***emitter***REMOVED***until***REMOVED***the***REMOVED***AxiosRequest***REMOVED***class***REMOVED***will***REMOVED***be***REMOVED***implemented
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***emitter***REMOVED***=***REMOVED***new***REMOVED***events.EventEmitter();

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onFinished***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.cancelToken)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.cancelToken.unsubscribe(abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.signal.removeEventListener('abort',***REMOVED***abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emitter.removeAllListeners();
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***onDone((value,***REMOVED***isRejected)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isDone***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isRejected)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rejected***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onFinished();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***abort(reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emitter.emit('abort',***REMOVED***!reason***REMOVED***||***REMOVED***reason.type***REMOVED***?***REMOVED***new***REMOVED***CanceledError(null,***REMOVED***config,***REMOVED***req)***REMOVED***:***REMOVED***reason);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***emitter.once('abort',***REMOVED***reject);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.cancelToken***REMOVED***||***REMOVED***config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.cancelToken***REMOVED***&&***REMOVED***config.cancelToken.subscribe(abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.signal.aborted***REMOVED***?***REMOVED***abort()***REMOVED***:***REMOVED***config.signal.addEventListener('abort',***REMOVED***abort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Parse***REMOVED***url
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fullPath***REMOVED***=***REMOVED***buildFullPath(config.baseURL,***REMOVED***config.url,***REMOVED***config.allowAbsoluteUrls);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***new***REMOVED***URL(fullPath,***REMOVED***platform.hasBrowserEnv***REMOVED***?***REMOVED***platform.origin***REMOVED***:***REMOVED***undefined);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***protocol***REMOVED***=***REMOVED***parsed.protocol***REMOVED***||***REMOVED***supportedProtocols[0];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(protocol***REMOVED***===***REMOVED***'data:')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Apply***REMOVED***the***REMOVED***same***REMOVED***semantics***REMOVED***as***REMOVED***HTTP:***REMOVED***only***REMOVED***enforce***REMOVED***if***REMOVED***a***REMOVED***finite,***REMOVED***non-negative***REMOVED***cap***REMOVED***is***REMOVED***set.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxContentLength***REMOVED***>***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Use***REMOVED***the***REMOVED***exact***REMOVED***string***REMOVED***passed***REMOVED***to***REMOVED***fromDataURI***REMOVED***(config.url);***REMOVED***fall***REMOVED***back***REMOVED***to***REMOVED***fullPath***REMOVED***if***REMOVED***needed.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***dataUrl***REMOVED***=***REMOVED***String(config.url***REMOVED***||***REMOVED***fullPath***REMOVED***||***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***estimated***REMOVED***=***REMOVED***estimateDataURLDecodedBytes(dataUrl);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(estimated***REMOVED***>***REMOVED***config.maxContentLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'maxContentLength***REMOVED***size***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***config.maxContentLength***REMOVED***+***REMOVED***'***REMOVED***exceeded',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_RESPONSE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***convertedData;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(method***REMOVED***!==***REMOVED***'GET')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***405,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***'method***REMOVED***not***REMOVED***allowed',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***{},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***fromDataURI(config.url,***REMOVED***responseType***REMOVED***===***REMOVED***'blob',***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Blob:***REMOVED***config.env***REMOVED***&&***REMOVED***config.env.Blob
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***AxiosError.from(err,***REMOVED***AxiosError.ERR_BAD_REQUEST,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***===***REMOVED***'text')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***convertedData.toString(responseEncoding);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!responseEncoding***REMOVED***||***REMOVED***responseEncoding***REMOVED***===***REMOVED***'utf8')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***utils$1.stripBOM(convertedData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(responseType***REMOVED***===***REMOVED***'stream')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***convertedData***REMOVED***=***REMOVED***stream__default["default"].Readable.from(convertedData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***convertedData,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***200,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***'OK',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***new***REMOVED***AxiosHeaders$1(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(supportedProtocols.indexOf(protocol)***REMOVED***===***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Unsupported***REMOVED***protocol***REMOVED***'***REMOVED***+***REMOVED***protocol,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_REQUEST,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***headers***REMOVED***=***REMOVED***AxiosHeaders$1.from(config.headers).normalize();

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Set***REMOVED***User-Agent***REMOVED***(required***REMOVED***by***REMOVED***some***REMOVED***servers)
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***See***REMOVED***https://github.com/axios/axios/issues/69
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***User-Agent***REMOVED***is***REMOVED***specified;***REMOVED***handle***REMOVED***case***REMOVED***where***REMOVED***no***REMOVED***UA***REMOVED***header***REMOVED***is***REMOVED***desired
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Only***REMOVED***set***REMOVED***header***REMOVED***if***REMOVED***it***REMOVED***hasn't***REMOVED***been***REMOVED***set***REMOVED***in***REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED***headers.set('User-Agent',***REMOVED***'axios/'***REMOVED***+***REMOVED***VERSION,***REMOVED***false);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{onUploadProgress,***REMOVED***onDownloadProgress}***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***maxRate***REMOVED***=***REMOVED***config.maxRate;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxUploadRate***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxDownloadRate***REMOVED***=***REMOVED***undefined;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***support***REMOVED***for***REMOVED***spec***REMOVED***compliant***REMOVED***FormData***REMOVED***objects
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isSpecCompliantForm(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***userBoundary***REMOVED***=***REMOVED***headers.getContentType(/boundary=([-_\w\d]{10,70})/i);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***formDataToStream$1(data,***REMOVED***(formHeaders)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.set(formHeaders);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tag:***REMOVED***`axios-${VERSION}-boundary`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***boundary:***REMOVED***userBoundary***REMOVED***&&***REMOVED***userBoundary[1]***REMOVED***||***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***support***REMOVED***for***REMOVED***https://www.npmjs.com/package/form-data***REMOVED***api
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isFormData(data)***REMOVED***&&***REMOVED***utils$1.isFunction(data.getHeaders))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.set(data.getHeaders());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!headers.hasContentLength())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***knownLength***REMOVED***=***REMOVED***await***REMOVED***util__default["default"].promisify(data.getLength).call(data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Number.isFinite(knownLength)***REMOVED***&&***REMOVED***knownLength***REMOVED***>=***REMOVED***0***REMOVED***&&***REMOVED***headers.setContentLength(knownLength);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***no-empty:0*/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isBlob(data)***REMOVED***||***REMOVED***utils$1.isFile(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.size***REMOVED***&&***REMOVED***headers.setContentType(data.type***REMOVED***||***REMOVED***'application/octet-stream');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentLength(data.size***REMOVED***||***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***stream__default["default"].Readable.from(readBlob$1(data));
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(data***REMOVED***&&***REMOVED***!utils$1.isStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Buffer.isBuffer(data))***REMOVED***;***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isArrayBuffer(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***Buffer.from(new***REMOVED***Uint8Array(data));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isString(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***Buffer.from(data,***REMOVED***'utf-8');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Data***REMOVED***after***REMOVED***transformation***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string,***REMOVED***an***REMOVED***ArrayBuffer,***REMOVED***a***REMOVED***Buffer,***REMOVED***or***REMOVED***a***REMOVED***Stream',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_REQUEST,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***Content-Length***REMOVED***header***REMOVED***if***REMOVED***data***REMOVED***exists
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentLength(data.length,***REMOVED***false);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxBodyLength***REMOVED***>***REMOVED***-1***REMOVED***&&***REMOVED***data.length***REMOVED***>***REMOVED***config.maxBodyLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Request***REMOVED***body***REMOVED***larger***REMOVED***than***REMOVED***maxBodyLength***REMOVED***limit',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_REQUEST,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***contentLength***REMOVED***=***REMOVED***utils$1.toFiniteNumber(headers.getContentLength());

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isArray(maxRate))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxUploadRate***REMOVED***=***REMOVED***maxRate[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxDownloadRate***REMOVED***=***REMOVED***maxRate[1];
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxUploadRate***REMOVED***=***REMOVED***maxDownloadRate***REMOVED***=***REMOVED***maxRate;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(data***REMOVED***&&***REMOVED***(onUploadProgress***REMOVED***||***REMOVED***maxUploadRate))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***stream__default["default"].Readable.from(data,***REMOVED***{objectMode:***REMOVED***false});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***stream__default["default"].pipeline([data,***REMOVED***new***REMOVED***AxiosTransformStream$1({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxRate:***REMOVED***utils$1.toFiniteNumber(maxUploadRate)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})],***REMOVED***utils$1.noop);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress***REMOVED***&&***REMOVED***data.on('progress',***REMOVED***flushOnFinish(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***contentLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onUploadProgress),***REMOVED***false,***REMOVED***3)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***HTTP***REMOVED***basic***REMOVED***authentication
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***auth***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.auth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***username***REMOVED***=***REMOVED***config.auth.username***REMOVED***||***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***password***REMOVED***=***REMOVED***config.auth.password***REMOVED***||***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***auth***REMOVED***=***REMOVED***username***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***password;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!auth***REMOVED***&&***REMOVED***parsed.username)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***urlUsername***REMOVED***=***REMOVED***parsed.username;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***urlPassword***REMOVED***=***REMOVED***parsed.password;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***auth***REMOVED***=***REMOVED***urlUsername***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***urlPassword;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***auth***REMOVED***&&***REMOVED***headers.delete('authorization');

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***path;

***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***buildURL(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parsed.pathname***REMOVED***+***REMOVED***parsed.search,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.params,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.paramsSerializer
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***).replace(/^\?/,***REMOVED***'');
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***customErr***REMOVED***=***REMOVED***new***REMOVED***Error(err.message);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customErr.config***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customErr.url***REMOVED***=***REMOVED***config.url;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customErr.exists***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(customErr);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***headers.set(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Accept-Encoding',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'gzip,***REMOVED***compress,***REMOVED***deflate'***REMOVED***+***REMOVED***(isBrotliSupported***REMOVED***?***REMOVED***',***REMOVED***br'***REMOVED***:***REMOVED***''),***REMOVED***false
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***method,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***headers.toJSON(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***agents:***REMOVED***{***REMOVED***http:***REMOVED***config.httpAgent,***REMOVED***https:***REMOVED***config.httpsAgent***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***auth,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***protocol,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***family,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***beforeRedirect:***REMOVED***dispatchBeforeRedirect,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***beforeRedirects:***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***cacheable-lookup***REMOVED***integration***REMOVED***hotfix
***REMOVED******REMOVED******REMOVED******REMOVED***!utils$1.isUndefined(lookup)***REMOVED***&&***REMOVED***(options.lookup***REMOVED***=***REMOVED***lookup);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.socketPath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.socketPath***REMOVED***=***REMOVED***config.socketPath;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.hostname***REMOVED***=***REMOVED***parsed.hostname.startsWith("[")***REMOVED***?***REMOVED***parsed.hostname.slice(1,***REMOVED***-1)***REMOVED***:***REMOVED***parsed.hostname;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.port***REMOVED***=***REMOVED***parsed.port;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setProxy(options,***REMOVED***config.proxy,***REMOVED***protocol***REMOVED***+***REMOVED***'//'***REMOVED***+***REMOVED***parsed.hostname***REMOVED***+***REMOVED***(parsed.port***REMOVED***?***REMOVED***':'***REMOVED***+***REMOVED***parsed.port***REMOVED***:***REMOVED***'')***REMOVED***+***REMOVED***options.path);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***transport;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isHttpsRequest***REMOVED***=***REMOVED***isHttps.test(options.protocol);
***REMOVED******REMOVED******REMOVED******REMOVED***options.agent***REMOVED***=***REMOVED***isHttpsRequest***REMOVED***?***REMOVED***config.httpsAgent***REMOVED***:***REMOVED***config.httpAgent;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.transport)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transport***REMOVED***=***REMOVED***config.transport;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(config.maxRedirects***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transport***REMOVED***=***REMOVED***isHttpsRequest***REMOVED***?***REMOVED***https__default["default"]***REMOVED***:***REMOVED***http__default["default"];
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxRedirects)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.maxRedirects***REMOVED***=***REMOVED***config.maxRedirects;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.beforeRedirect)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.beforeRedirects.config***REMOVED***=***REMOVED***config.beforeRedirect;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transport***REMOVED***=***REMOVED***isHttpsRequest***REMOVED***?***REMOVED***httpsFollow***REMOVED***:***REMOVED***httpFollow;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxBodyLength***REMOVED***>***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.maxBodyLength***REMOVED***=***REMOVED***config.maxBodyLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***follow-redirects***REMOVED***does***REMOVED***not***REMOVED***skip***REMOVED***comparison,***REMOVED***so***REMOVED***it***REMOVED***should***REMOVED***always***REMOVED***succeed***REMOVED***for***REMOVED***axios***REMOVED***-1***REMOVED***unlimited
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.maxBodyLength***REMOVED***=***REMOVED***Infinity;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.insecureHTTPParser)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.insecureHTTPParser***REMOVED***=***REMOVED***config.insecureHTTPParser;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Create***REMOVED***the***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED***req***REMOVED***=***REMOVED***transport.request(options,***REMOVED***function***REMOVED***handleResponse(res)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(req.destroyed)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***streams***REMOVED***=***REMOVED***[res];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseLength***REMOVED***=***REMOVED***+res.headers['content-length'];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(onDownloadProgress***REMOVED***||***REMOVED***maxDownloadRate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transformStream***REMOVED***=***REMOVED***new***REMOVED***AxiosTransformStream$1({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxRate:***REMOVED***utils$1.toFiniteNumber(maxDownloadRate)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDownloadProgress***REMOVED***&&***REMOVED***transformStream.on('progress',***REMOVED***flushOnFinish(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transformStream,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onDownloadProgress),***REMOVED***true,***REMOVED***3)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(transformStream);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***decompress***REMOVED***the***REMOVED***response***REMOVED***body***REMOVED***transparently***REMOVED***if***REMOVED***required
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***responseStream***REMOVED***=***REMOVED***res;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***return***REMOVED***the***REMOVED***last***REMOVED***request***REMOVED***in***REMOVED***case***REMOVED***of***REMOVED***redirects
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lastRequest***REMOVED***=***REMOVED***res.req***REMOVED***||***REMOVED***req;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***decompress***REMOVED***disabled***REMOVED***we***REMOVED***should***REMOVED***not***REMOVED***decompress
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.decompress***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***res.headers['content-encoding'])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***no***REMOVED***content,***REMOVED***but***REMOVED***headers***REMOVED***still***REMOVED***say***REMOVED***that***REMOVED***it***REMOVED***is***REMOVED***encoded,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***the***REMOVED***header***REMOVED***not***REMOVED***confuse***REMOVED***downstream***REMOVED***operations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(method***REMOVED***===***REMOVED***'HEAD'***REMOVED***||***REMOVED***res.statusCode***REMOVED***===***REMOVED***204)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***((res.headers['content-encoding']***REMOVED***||***REMOVED***'').toLowerCase())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***default-case:0*/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'gzip':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'x-gzip':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'compress':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'x-compress':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***add***REMOVED***the***REMOVED***unzipper***REMOVED***to***REMOVED***the***REMOVED***body***REMOVED***stream***REMOVED***processing***REMOVED***pipeline
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(zlib__default["default"].createUnzip(zlibOptions));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***the***REMOVED***content-encoding***REMOVED***in***REMOVED***order***REMOVED***to***REMOVED***not***REMOVED***confuse***REMOVED***downstream***REMOVED***operations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'deflate':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(new***REMOVED***ZlibHeaderTransformStream$1());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***add***REMOVED***the***REMOVED***unzipper***REMOVED***to***REMOVED***the***REMOVED***body***REMOVED***stream***REMOVED***processing***REMOVED***pipeline
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(zlib__default["default"].createUnzip(zlibOptions));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***remove***REMOVED***the***REMOVED***content-encoding***REMOVED***in***REMOVED***order***REMOVED***to***REMOVED***not***REMOVED***confuse***REMOVED***downstream***REMOVED***operations
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'br':
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isBrotliSupported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***res.headers['content-encoding'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream***REMOVED***=***REMOVED***streams.length***REMOVED***>***REMOVED***1***REMOVED***?***REMOVED***stream__default["default"].pipeline(streams,***REMOVED***utils$1.noop)***REMOVED***:***REMOVED***streams[0];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***offListeners***REMOVED***=***REMOVED***stream__default["default"].finished(responseStream,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offListeners();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onFinished();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***response***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***res.statusCode,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***res.statusMessage,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***new***REMOVED***AxiosHeaders$1(res.headers),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request:***REMOVED***lastRequest
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***===***REMOVED***'stream')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.data***REMOVED***=***REMOVED***responseStream;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseBuffer***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***totalResponseBytes***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('data',***REMOVED***function***REMOVED***handleStreamData(chunk)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseBuffer.push(chunk);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***totalResponseBytes***REMOVED***+=***REMOVED***chunk.length;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***make***REMOVED***sure***REMOVED***the***REMOVED***content***REMOVED***length***REMOVED***is***REMOVED***not***REMOVED***over***REMOVED***the***REMOVED***maxContentLength***REMOVED***if***REMOVED***specified
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.maxContentLength***REMOVED***>***REMOVED***-1***REMOVED***&&***REMOVED***totalResponseBytes***REMOVED***>***REMOVED***config.maxContentLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***stream.destroy()***REMOVED***emit***REMOVED***aborted***REMOVED***event***REMOVED***before***REMOVED***calling***REMOVED***reject()***REMOVED***on***REMOVED***Node.js***REMOVED***v16
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rejected***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.destroy();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError('maxContentLength***REMOVED***size***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***config.maxContentLength***REMOVED***+***REMOVED***'***REMOVED***exceeded',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_RESPONSE,***REMOVED***config,***REMOVED***lastRequest));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('aborted',***REMOVED***function***REMOVED***handlerStreamAborted()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(rejected)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***err***REMOVED***=***REMOVED***new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'stream***REMOVED***has***REMOVED***been***REMOVED***aborted',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_RESPONSE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastRequest
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('error',***REMOVED***function***REMOVED***handleStreamError(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(req.destroyed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(AxiosError.from(err,***REMOVED***null,***REMOVED***config,***REMOVED***lastRequest));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.on('end',***REMOVED***function***REMOVED***handleStreamEnd()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***responseData***REMOVED***=***REMOVED***responseBuffer.length***REMOVED***===***REMOVED***1***REMOVED***?***REMOVED***responseBuffer[0]***REMOVED***:***REMOVED***Buffer.concat(responseBuffer);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***!==***REMOVED***'arraybuffer')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseData***REMOVED***=***REMOVED***responseData.toString(responseEncoding);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!responseEncoding***REMOVED***||***REMOVED***responseEncoding***REMOVED***===***REMOVED***'utf8')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseData***REMOVED***=***REMOVED***utils$1.stripBOM(responseData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.data***REMOVED***=***REMOVED***responseData;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(AxiosError.from(err,***REMOVED***null,***REMOVED***config,***REMOVED***response.request,***REMOVED***response));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emitter.once('abort',***REMOVED***err***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!responseStream.destroyed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.emit('error',***REMOVED***err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseStream.destroy();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***emitter.once('abort',***REMOVED***err***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***errors
***REMOVED******REMOVED******REMOVED******REMOVED***req.on('error',***REMOVED***function***REMOVED***handleRequestError(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@todo***REMOVED***remove
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***(req.aborted***REMOVED***&&***REMOVED***err.code***REMOVED***!==***REMOVED***AxiosError.ERR_FR_TOO_MANY_REDIRECTS)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(AxiosError.from(err,***REMOVED***null,***REMOVED***config,***REMOVED***req));
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***set***REMOVED***tcp***REMOVED***keep***REMOVED***alive***REMOVED***to***REMOVED***prevent***REMOVED***drop***REMOVED***connection***REMOVED***by***REMOVED***peer
***REMOVED******REMOVED******REMOVED******REMOVED***req.on('socket',***REMOVED***function***REMOVED***handleRequestSocket(socket)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***default***REMOVED***interval***REMOVED***of***REMOVED***sending***REMOVED***ack***REMOVED***packet***REMOVED***is***REMOVED***1***REMOVED***minute
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***socket.setKeepAlive(true,***REMOVED***1000***REMOVED*******REMOVED***60);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***request***REMOVED***timeout
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.timeout)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***This***REMOVED***is***REMOVED***forcing***REMOVED***a***REMOVED***int***REMOVED***timeout***REMOVED***to***REMOVED***avoid***REMOVED***problems***REMOVED***if***REMOVED***the***REMOVED***`req`***REMOVED***interface***REMOVED***doesn't***REMOVED***handle***REMOVED***other***REMOVED***types.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***timeout***REMOVED***=***REMOVED***parseInt(config.timeout,***REMOVED***10);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Number.isNaN(timeout))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'error***REMOVED***trying***REMOVED***to***REMOVED***parse***REMOVED***`config.timeout`***REMOVED***to***REMOVED***int',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_BAD_OPTION_VALUE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Sometime,***REMOVED***the***REMOVED***response***REMOVED***will***REMOVED***be***REMOVED***very***REMOVED***slow,***REMOVED***and***REMOVED***does***REMOVED***not***REMOVED***respond,***REMOVED***the***REMOVED***connect***REMOVED***event***REMOVED***will***REMOVED***be***REMOVED***block***REMOVED***by***REMOVED***event***REMOVED***loop***REMOVED***system.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***And***REMOVED***timer***REMOVED***callback***REMOVED***will***REMOVED***be***REMOVED***fired,***REMOVED***and***REMOVED***abort()***REMOVED***will***REMOVED***be***REMOVED***invoked***REMOVED***before***REMOVED***connection,***REMOVED***then***REMOVED***get***REMOVED***"socket***REMOVED***hang***REMOVED***up"***REMOVED***and***REMOVED***code***REMOVED***ECONNRESET.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***At***REMOVED***this***REMOVED***time,***REMOVED***if***REMOVED***we***REMOVED***have***REMOVED***a***REMOVED***large***REMOVED***number***REMOVED***of***REMOVED***request,***REMOVED***nodejs***REMOVED***will***REMOVED***hang***REMOVED***up***REMOVED***some***REMOVED***socket***REMOVED***on***REMOVED***background.***REMOVED***and***REMOVED***the***REMOVED***number***REMOVED***will***REMOVED***up***REMOVED***and***REMOVED***up.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***And***REMOVED***then***REMOVED***these***REMOVED***socket***REMOVED***which***REMOVED***be***REMOVED***hang***REMOVED***up***REMOVED***will***REMOVED***devouring***REMOVED***CPU***REMOVED***little***REMOVED***by***REMOVED***little.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***ClientRequest.setTimeout***REMOVED***will***REMOVED***be***REMOVED***fired***REMOVED***on***REMOVED***the***REMOVED***specify***REMOVED***milliseconds,***REMOVED***and***REMOVED***can***REMOVED***make***REMOVED***sure***REMOVED***that***REMOVED***abort()***REMOVED***will***REMOVED***be***REMOVED***fired***REMOVED***after***REMOVED***connect.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.setTimeout(timeout,***REMOVED***function***REMOVED***handleRequestTimeout()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isDone)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***timeoutErrorMessage***REMOVED***=***REMOVED***config.timeout***REMOVED***?***REMOVED***'timeout***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***config.timeout***REMOVED***+***REMOVED***'ms***REMOVED***exceeded'***REMOVED***:***REMOVED***'timeout***REMOVED***exceeded';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transitional***REMOVED***=***REMOVED***config.transitional***REMOVED***||***REMOVED***transitionalDefaults;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.timeoutErrorMessage)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutErrorMessage***REMOVED***=***REMOVED***config.timeoutErrorMessage;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutErrorMessage,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transitional.clarifyTimeoutError***REMOVED***?***REMOVED***AxiosError.ETIMEDOUT***REMOVED***:***REMOVED***AxiosError.ECONNABORTED,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***abort();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}


***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Send***REMOVED***the***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isStream(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***ended***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errored***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.on('end',***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ended***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.once('error',***REMOVED***err***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errored***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.on('close',***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!ended***REMOVED***&&***REMOVED***!errored)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***abort(new***REMOVED***CanceledError('Request***REMOVED***stream***REMOVED***has***REMOVED***been***REMOVED***aborted',***REMOVED***config,***REMOVED***req));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data.pipe(req);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***req.end(data);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});
};

const***REMOVED***isURLSameOrigin***REMOVED***=***REMOVED***platform.hasStandardBrowserEnv***REMOVED***?***REMOVED***((origin,***REMOVED***isMSIE)***REMOVED***=>***REMOVED***(url)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***url***REMOVED***=***REMOVED***new***REMOVED***URL(url,***REMOVED***platform.origin);

***REMOVED******REMOVED***return***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED***origin.protocol***REMOVED***===***REMOVED***url.protocol***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***origin.host***REMOVED***===***REMOVED***url.host***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***(isMSIE***REMOVED***||***REMOVED***origin.port***REMOVED***===***REMOVED***url.port)
***REMOVED******REMOVED***);
})(
***REMOVED******REMOVED***new***REMOVED***URL(platform.origin),
***REMOVED******REMOVED***platform.navigator***REMOVED***&&***REMOVED***/(msie|trident)/i.test(platform.navigator.userAgent)
)***REMOVED***:***REMOVED***()***REMOVED***=>***REMOVED***true;

const***REMOVED***cookies***REMOVED***=***REMOVED***platform.hasStandardBrowserEnv***REMOVED***?

***REMOVED******REMOVED***//***REMOVED***Standard***REMOVED***browser***REMOVED***envs***REMOVED***support***REMOVED***document.cookie
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***write(name,***REMOVED***value,***REMOVED***expires,***REMOVED***path,***REMOVED***domain,***REMOVED***secure)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cookie***REMOVED***=***REMOVED***[name***REMOVED***+***REMOVED***'='***REMOVED***+***REMOVED***encodeURIComponent(value)];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isNumber(expires)***REMOVED***&&***REMOVED***cookie.push('expires='***REMOVED***+***REMOVED***new***REMOVED***Date(expires).toGMTString());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isString(path)***REMOVED***&&***REMOVED***cookie.push('path='***REMOVED***+***REMOVED***path);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.isString(domain)***REMOVED***&&***REMOVED***cookie.push('domain='***REMOVED***+***REMOVED***domain);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***secure***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***cookie.push('secure');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***document.cookie***REMOVED***=***REMOVED***cookie.join(';***REMOVED***');
***REMOVED******REMOVED******REMOVED******REMOVED***},

***REMOVED******REMOVED******REMOVED******REMOVED***read(name)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***document.cookie.match(new***REMOVED***RegExp('(^|;\\s*)('***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***')=([^;]*)'));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(match***REMOVED***?***REMOVED***decodeURIComponent(match[3])***REMOVED***:***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***},

***REMOVED******REMOVED******REMOVED******REMOVED***remove(name)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.write(name,***REMOVED***'',***REMOVED***Date.now()***REMOVED***-***REMOVED***86400000);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***:

***REMOVED******REMOVED***//***REMOVED***Non-standard***REMOVED***browser***REMOVED***env***REMOVED***(web***REMOVED***workers,***REMOVED***react-native)***REMOVED***lack***REMOVED***needed***REMOVED***support.
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***write()***REMOVED***{},
***REMOVED******REMOVED******REMOVED******REMOVED***read()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***remove()***REMOVED***{}
***REMOVED******REMOVED***};

const***REMOVED***headersToObject***REMOVED***=***REMOVED***(thing)***REMOVED***=>***REMOVED***thing***REMOVED***instanceof***REMOVED***AxiosHeaders$1***REMOVED***?***REMOVED***{***REMOVED***...thing***REMOVED***}***REMOVED***:***REMOVED***thing;

/**
***REMOVED*******REMOVED***Config-specific***REMOVED***merge-function***REMOVED***which***REMOVED***creates***REMOVED***a***REMOVED***new***REMOVED***config-object
***REMOVED*******REMOVED***by***REMOVED***merging***REMOVED***two***REMOVED***configuration***REMOVED***objects***REMOVED***together.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***config1
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***config2
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***New***REMOVED***object***REMOVED***resulting***REMOVED***from***REMOVED***merging***REMOVED***config2***REMOVED***to***REMOVED***config1
***REMOVED****/
function***REMOVED***mergeConfig(config1,***REMOVED***config2)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-param-reassign
***REMOVED******REMOVED***config2***REMOVED***=***REMOVED***config2***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***config***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED***function***REMOVED***getMergedValue(target,***REMOVED***source,***REMOVED***prop,***REMOVED***caseless)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isPlainObject(target)***REMOVED***&&***REMOVED***utils$1.isPlainObject(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***utils$1.merge.call({caseless},***REMOVED***target,***REMOVED***source);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isPlainObject(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***utils$1.merge({},***REMOVED***source);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isArray(source))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source.slice();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***source;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***consistent-return
***REMOVED******REMOVED***function***REMOVED***mergeDeepProperties(a,***REMOVED***b,***REMOVED***prop***REMOVED***,***REMOVED***caseless)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isUndefined(b))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(a,***REMOVED***b,***REMOVED***prop***REMOVED***,***REMOVED***caseless);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(!utils$1.isUndefined(a))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(undefined,***REMOVED***a,***REMOVED***prop***REMOVED***,***REMOVED***caseless);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***consistent-return
***REMOVED******REMOVED***function***REMOVED***valueFromConfig2(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isUndefined(b))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(undefined,***REMOVED***b);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***consistent-return
***REMOVED******REMOVED***function***REMOVED***defaultToConfig2(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isUndefined(b))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(undefined,***REMOVED***b);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(!utils$1.isUndefined(a))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(undefined,***REMOVED***a);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***consistent-return
***REMOVED******REMOVED***function***REMOVED***mergeDirectKeys(a,***REMOVED***b,***REMOVED***prop)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prop***REMOVED***in***REMOVED***config2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(a,***REMOVED***b);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(prop***REMOVED***in***REMOVED***config1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getMergedValue(undefined,***REMOVED***a);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***mergeMap***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url:***REMOVED***valueFromConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***valueFromConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***valueFromConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***baseURL:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***transformRequest:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***transformResponse:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***paramsSerializer:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***timeout:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***timeoutMessage:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***withCredentials:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***withXSRFToken:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***adapter:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***responseType:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***xsrfCookieName:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***xsrfHeaderName:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***onDownloadProgress:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***decompress:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***maxContentLength:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***maxBodyLength:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***beforeRedirect:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***transport:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***httpAgent:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***httpsAgent:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***cancelToken:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***socketPath:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***responseEncoding:***REMOVED***defaultToConfig2,
***REMOVED******REMOVED******REMOVED******REMOVED***validateStatus:***REMOVED***mergeDirectKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***(a,***REMOVED***b***REMOVED***,***REMOVED***prop)***REMOVED***=>***REMOVED***mergeDeepProperties(headersToObject(a),***REMOVED***headersToObject(b),prop,***REMOVED***true)
***REMOVED******REMOVED***};

***REMOVED******REMOVED***utils$1.forEach(Object.keys({...config1,***REMOVED***...config2}),***REMOVED***function***REMOVED***computeConfigValue(prop)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***merge***REMOVED***=***REMOVED***mergeMap[prop]***REMOVED***||***REMOVED***mergeDeepProperties;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***configValue***REMOVED***=***REMOVED***merge(config1[prop],***REMOVED***config2[prop],***REMOVED***prop);
***REMOVED******REMOVED******REMOVED******REMOVED***(utils$1.isUndefined(configValue)***REMOVED***&&***REMOVED***merge***REMOVED***!==***REMOVED***mergeDirectKeys)***REMOVED***||***REMOVED***(config[prop]***REMOVED***=***REMOVED***configValue);
***REMOVED******REMOVED***});

***REMOVED******REMOVED***return***REMOVED***config;
}

const***REMOVED***resolveConfig***REMOVED***=***REMOVED***(config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***newConfig***REMOVED***=***REMOVED***mergeConfig({},***REMOVED***config);

***REMOVED******REMOVED***let***REMOVED***{***REMOVED***data,***REMOVED***withXSRFToken,***REMOVED***xsrfHeaderName,***REMOVED***xsrfCookieName,***REMOVED***headers,***REMOVED***auth***REMOVED***}***REMOVED***=***REMOVED***newConfig;

***REMOVED******REMOVED***newConfig.headers***REMOVED***=***REMOVED***headers***REMOVED***=***REMOVED***AxiosHeaders$1.from(headers);

***REMOVED******REMOVED***newConfig.url***REMOVED***=***REMOVED***buildURL(buildFullPath(newConfig.baseURL,***REMOVED***newConfig.url,***REMOVED***newConfig.allowAbsoluteUrls),***REMOVED***config.params,***REMOVED***config.paramsSerializer);

***REMOVED******REMOVED***//***REMOVED***HTTP***REMOVED***basic***REMOVED***authentication
***REMOVED******REMOVED***if***REMOVED***(auth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***headers.set('Authorization',***REMOVED***'Basic***REMOVED***'***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***btoa((auth.username***REMOVED***||***REMOVED***'')***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***(auth.password***REMOVED***?***REMOVED***unescape(encodeURIComponent(auth.password))***REMOVED***:***REMOVED***''))
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(utils$1.isFormData(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(platform.hasStandardBrowserEnv***REMOVED***||***REMOVED***platform.hasStandardBrowserWebWorkerEnv)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentType(undefined);***REMOVED***//***REMOVED***browser***REMOVED***handles***REMOVED***it
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(utils$1.isFunction(data.getHeaders))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Node.js***REMOVED***FormData***REMOVED***(like***REMOVED***form-data***REMOVED***package)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***formHeaders***REMOVED***=***REMOVED***data.getHeaders();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Only***REMOVED***set***REMOVED***safe***REMOVED***headers***REMOVED***to***REMOVED***avoid***REMOVED***overwriting***REMOVED***security***REMOVED***headers
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***allowedHeaders***REMOVED***=***REMOVED***['content-type',***REMOVED***'content-length'];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.entries(formHeaders).forEach(([key,***REMOVED***val])***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(allowedHeaders.includes(key.toLowerCase()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.set(key,***REMOVED***val);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED******REMOVED***

***REMOVED******REMOVED***//***REMOVED***Add***REMOVED***xsrf***REMOVED***header
***REMOVED******REMOVED***//***REMOVED***This***REMOVED***is***REMOVED***only***REMOVED***done***REMOVED***if***REMOVED***running***REMOVED***in***REMOVED***a***REMOVED***standard***REMOVED***browser***REMOVED***environment.
***REMOVED******REMOVED***//***REMOVED***Specifically***REMOVED***not***REMOVED***if***REMOVED***we're***REMOVED***in***REMOVED***a***REMOVED***web***REMOVED***worker,***REMOVED***or***REMOVED***react-native.

***REMOVED******REMOVED***if***REMOVED***(platform.hasStandardBrowserEnv)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***withXSRFToken***REMOVED***&&***REMOVED***utils$1.isFunction(withXSRFToken)***REMOVED***&&***REMOVED***(withXSRFToken***REMOVED***=***REMOVED***withXSRFToken(newConfig));

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(withXSRFToken***REMOVED***||***REMOVED***(withXSRFToken***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***isURLSameOrigin(newConfig.url)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***xsrf***REMOVED***header
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***xsrfValue***REMOVED***=***REMOVED***xsrfHeaderName***REMOVED***&&***REMOVED***xsrfCookieName***REMOVED***&&***REMOVED***cookies.read(xsrfCookieName);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(xsrfValue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.set(xsrfHeaderName,***REMOVED***xsrfValue);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***newConfig;
};

const***REMOVED***isXHRAdapterSupported***REMOVED***=***REMOVED***typeof***REMOVED***XMLHttpRequest***REMOVED***!==***REMOVED***'undefined';

const***REMOVED***xhrAdapter***REMOVED***=***REMOVED***isXHRAdapterSupported***REMOVED***&&***REMOVED***function***REMOVED***(config)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise(function***REMOVED***dispatchXhrRequest(resolve,***REMOVED***reject)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_config***REMOVED***=***REMOVED***resolveConfig(config);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***requestData***REMOVED***=***REMOVED***_config.data;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***requestHeaders***REMOVED***=***REMOVED***AxiosHeaders$1.from(_config.headers).normalize();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{responseType,***REMOVED***onUploadProgress,***REMOVED***onDownloadProgress}***REMOVED***=***REMOVED***_config;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***onCanceled;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***uploadThrottled,***REMOVED***downloadThrottled;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***flushUpload,***REMOVED***flushDownload;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***done()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flushUpload***REMOVED***&&***REMOVED***flushUpload();***REMOVED***//***REMOVED***flush***REMOVED***events
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flushDownload***REMOVED***&&***REMOVED***flushDownload();***REMOVED***//***REMOVED***flush***REMOVED***events

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_config.cancelToken***REMOVED***&&***REMOVED***_config.cancelToken.unsubscribe(onCanceled);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_config.signal***REMOVED***&&***REMOVED***_config.signal.removeEventListener('abort',***REMOVED***onCanceled);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***request***REMOVED***=***REMOVED***new***REMOVED***XMLHttpRequest();

***REMOVED******REMOVED******REMOVED******REMOVED***request.open(_config.method.toUpperCase(),***REMOVED***_config.url,***REMOVED***true);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Set***REMOVED***the***REMOVED***request***REMOVED***timeout***REMOVED***in***REMOVED***MS
***REMOVED******REMOVED******REMOVED******REMOVED***request.timeout***REMOVED***=***REMOVED***_config.timeout;

***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***onloadend()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!request)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Prepare***REMOVED***the***REMOVED***response
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseHeaders***REMOVED***=***REMOVED***AxiosHeaders$1.from(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'getAllResponseHeaders'***REMOVED***in***REMOVED***request***REMOVED***&&***REMOVED***request.getAllResponseHeaders()
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseData***REMOVED***=***REMOVED***!responseType***REMOVED***||***REMOVED***responseType***REMOVED***===***REMOVED***'text'***REMOVED***||***REMOVED***responseType***REMOVED***===***REMOVED***'json'***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.responseText***REMOVED***:***REMOVED***request.response;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***response***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***responseData,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***request.status,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***request.statusText,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***responseHeaders,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(function***REMOVED***_resolve(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***function***REMOVED***_reject(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***response);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Clean***REMOVED***up***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***('onloadend'***REMOVED***in***REMOVED***request)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Use***REMOVED***onloadend***REMOVED***if***REMOVED***available
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.onloadend***REMOVED***=***REMOVED***onloadend;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Listen***REMOVED***for***REMOVED***ready***REMOVED***state***REMOVED***to***REMOVED***emulate***REMOVED***onloadend
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.onreadystatechange***REMOVED***=***REMOVED***function***REMOVED***handleLoad()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!request***REMOVED***||***REMOVED***request.readyState***REMOVED***!==***REMOVED***4)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***request***REMOVED***errored***REMOVED***out***REMOVED***and***REMOVED***we***REMOVED***didn't***REMOVED***get***REMOVED***a***REMOVED***response,***REMOVED***this***REMOVED***will***REMOVED***be
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***handled***REMOVED***by***REMOVED***onerror***REMOVED***instead
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***With***REMOVED***one***REMOVED***exception:***REMOVED***request***REMOVED***that***REMOVED***using***REMOVED***file:***REMOVED***protocol,***REMOVED***most***REMOVED***browsers
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***will***REMOVED***return***REMOVED***status***REMOVED***as***REMOVED***0***REMOVED***even***REMOVED***though***REMOVED***it's***REMOVED***a***REMOVED***successful***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(request.status***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***!(request.responseURL***REMOVED***&&***REMOVED***request.responseURL.indexOf('file:')***REMOVED***===***REMOVED***0))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***readystate***REMOVED***handler***REMOVED***is***REMOVED***calling***REMOVED***before***REMOVED***onerror***REMOVED***or***REMOVED***ontimeout***REMOVED***handlers,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***so***REMOVED***we***REMOVED***should***REMOVED***call***REMOVED***onloadend***REMOVED***on***REMOVED***the***REMOVED***next***REMOVED***'tick'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setTimeout(onloadend);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***browser***REMOVED***request***REMOVED***cancellation***REMOVED***(as***REMOVED***opposed***REMOVED***to***REMOVED***a***REMOVED***manual***REMOVED***cancellation)
***REMOVED******REMOVED******REMOVED******REMOVED***request.onabort***REMOVED***=***REMOVED***function***REMOVED***handleAbort()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!request)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError('Request***REMOVED***aborted',***REMOVED***AxiosError.ECONNABORTED,***REMOVED***config,***REMOVED***request));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Clean***REMOVED***up***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***low***REMOVED***level***REMOVED***network***REMOVED***errors
***REMOVED******REMOVED***request.onerror***REMOVED***=***REMOVED***function***REMOVED***handleError(event)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Browsers***REMOVED***deliver***REMOVED***a***REMOVED***ProgressEvent***REMOVED***in***REMOVED***XHR***REMOVED***onerror
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***(message***REMOVED***may***REMOVED***be***REMOVED***empty;***REMOVED***when***REMOVED***present,***REMOVED***surface***REMOVED***it)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***See***REMOVED***https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/error_event
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***msg***REMOVED***=***REMOVED***event***REMOVED***&&***REMOVED***event.message***REMOVED***?***REMOVED***event.message***REMOVED***:***REMOVED***'Network***REMOVED***Error';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***err***REMOVED***=***REMOVED***new***REMOVED***AxiosError(msg,***REMOVED***AxiosError.ERR_NETWORK,***REMOVED***config,***REMOVED***request);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***attach***REMOVED***the***REMOVED***underlying***REMOVED***event***REMOVED***for***REMOVED***consumers***REMOVED***who***REMOVED***want***REMOVED***details
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***err.event***REMOVED***=***REMOVED***event***REMOVED***||***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***timeout
***REMOVED******REMOVED******REMOVED******REMOVED***request.ontimeout***REMOVED***=***REMOVED***function***REMOVED***handleTimeout()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***timeoutErrorMessage***REMOVED***=***REMOVED***_config.timeout***REMOVED***?***REMOVED***'timeout***REMOVED***of***REMOVED***'***REMOVED***+***REMOVED***_config.timeout***REMOVED***+***REMOVED***'ms***REMOVED***exceeded'***REMOVED***:***REMOVED***'timeout***REMOVED***exceeded';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***transitional***REMOVED***=***REMOVED***_config.transitional***REMOVED***||***REMOVED***transitionalDefaults;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_config.timeoutErrorMessage)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutErrorMessage***REMOVED***=***REMOVED***_config.timeoutErrorMessage;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutErrorMessage,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transitional.clarifyTimeoutError***REMOVED***?***REMOVED***AxiosError.ETIMEDOUT***REMOVED***:***REMOVED***AxiosError.ECONNABORTED,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Clean***REMOVED***up***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Remove***REMOVED***Content-Type***REMOVED***if***REMOVED***data***REMOVED***is***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED***requestData***REMOVED***===***REMOVED***undefined***REMOVED***&&***REMOVED***requestHeaders.setContentType(null);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***headers***REMOVED***to***REMOVED***the***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***('setRequestHeader'***REMOVED***in***REMOVED***request)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***utils$1.forEach(requestHeaders.toJSON(),***REMOVED***function***REMOVED***setRequestHeader(val,***REMOVED***key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.setRequestHeader(key,***REMOVED***val);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***withCredentials***REMOVED***to***REMOVED***request***REMOVED***if***REMOVED***needed
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isUndefined(_config.withCredentials))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.withCredentials***REMOVED***=***REMOVED***!!_config.withCredentials;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Add***REMOVED***responseType***REMOVED***to***REMOVED***request***REMOVED***if***REMOVED***needed
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(responseType***REMOVED***&&***REMOVED***responseType***REMOVED***!==***REMOVED***'json')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.responseType***REMOVED***=***REMOVED***_config.responseType;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***progress***REMOVED***if***REMOVED***needed
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(onDownloadProgress)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***([downloadThrottled,***REMOVED***flushDownload]***REMOVED***=***REMOVED***progressEventReducer(onDownloadProgress,***REMOVED***true));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.addEventListener('progress',***REMOVED***downloadThrottled);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Not***REMOVED***all***REMOVED***browsers***REMOVED***support***REMOVED***upload***REMOVED***events
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(onUploadProgress***REMOVED***&&***REMOVED***request.upload)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***([uploadThrottled,***REMOVED***flushUpload]***REMOVED***=***REMOVED***progressEventReducer(onUploadProgress));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.upload.addEventListener('progress',***REMOVED***uploadThrottled);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.upload.addEventListener('loadend',***REMOVED***flushUpload);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_config.cancelToken***REMOVED***||***REMOVED***_config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***cancellation
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onCanceled***REMOVED***=***REMOVED***cancel***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!request)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(!cancel***REMOVED***||***REMOVED***cancel.type***REMOVED***?***REMOVED***new***REMOVED***CanceledError(null,***REMOVED***config,***REMOVED***request)***REMOVED***:***REMOVED***cancel);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.abort();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_config.cancelToken***REMOVED***&&***REMOVED***_config.cancelToken.subscribe(onCanceled);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_config.signal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_config.signal.aborted***REMOVED***?***REMOVED***onCanceled()***REMOVED***:***REMOVED***_config.signal.addEventListener('abort',***REMOVED***onCanceled);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***protocol***REMOVED***=***REMOVED***parseProtocol(_config.url);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(protocol***REMOVED***&&***REMOVED***platform.protocols.indexOf(protocol)***REMOVED***===***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***AxiosError('Unsupported***REMOVED***protocol***REMOVED***'***REMOVED***+***REMOVED***protocol***REMOVED***+***REMOVED***':',***REMOVED***AxiosError.ERR_BAD_REQUEST,***REMOVED***config));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}


***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Send***REMOVED***the***REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED***request.send(requestData***REMOVED***||***REMOVED***null);
***REMOVED******REMOVED***});
};

const***REMOVED***composeSignals***REMOVED***=***REMOVED***(signals,***REMOVED***timeout)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{length}***REMOVED***=***REMOVED***(signals***REMOVED***=***REMOVED***signals***REMOVED***?***REMOVED***signals.filter(Boolean)***REMOVED***:***REMOVED***[]);

***REMOVED******REMOVED***if***REMOVED***(timeout***REMOVED***||***REMOVED***length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***controller***REMOVED***=***REMOVED***new***REMOVED***AbortController();

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***aborted;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onabort***REMOVED***=***REMOVED***function***REMOVED***(reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!aborted)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***aborted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***unsubscribe();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***err***REMOVED***=***REMOVED***reason***REMOVED***instanceof***REMOVED***Error***REMOVED***?***REMOVED***reason***REMOVED***:***REMOVED***this.reason;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***controller.abort(err***REMOVED***instanceof***REMOVED***AxiosError***REMOVED***?***REMOVED***err***REMOVED***:***REMOVED***new***REMOVED***CanceledError(err***REMOVED***instanceof***REMOVED***Error***REMOVED***?***REMOVED***err.message***REMOVED***:***REMOVED***err));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***timer***REMOVED***=***REMOVED***timeout***REMOVED***&&***REMOVED***setTimeout(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timer***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onabort(new***REMOVED***AxiosError(`timeout***REMOVED***${timeout}***REMOVED***of***REMOVED***ms***REMOVED***exceeded`,***REMOVED***AxiosError.ETIMEDOUT));
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***timeout);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***unsubscribe***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(signals)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timer***REMOVED***&&***REMOVED***clearTimeout(timer);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timer***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signals.forEach(signal***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signal.unsubscribe***REMOVED***?***REMOVED***signal.unsubscribe(onabort)***REMOVED***:***REMOVED***signal.removeEventListener('abort',***REMOVED***onabort);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signals***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***signals.forEach((signal)***REMOVED***=>***REMOVED***signal.addEventListener('abort',***REMOVED***onabort));

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{signal}***REMOVED***=***REMOVED***controller;

***REMOVED******REMOVED******REMOVED******REMOVED***signal.unsubscribe***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***utils$1.asap(unsubscribe);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***signal;
***REMOVED******REMOVED***}
};

const***REMOVED***composeSignals$1***REMOVED***=***REMOVED***composeSignals;

const***REMOVED***streamChunk***REMOVED***=***REMOVED***function****REMOVED***(chunk,***REMOVED***chunkSize)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***len***REMOVED***=***REMOVED***chunk.byteLength;

***REMOVED******REMOVED***if***REMOVED***(!chunkSize***REMOVED***||***REMOVED***len***REMOVED***<***REMOVED***chunkSize)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***chunk;
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***pos***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***end;

***REMOVED******REMOVED***while***REMOVED***(pos***REMOVED***<***REMOVED***len)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***end***REMOVED***=***REMOVED***pos***REMOVED***+***REMOVED***chunkSize;
***REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***chunk.slice(pos,***REMOVED***end);
***REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***end;
***REMOVED******REMOVED***}
};

const***REMOVED***readBytes***REMOVED***=***REMOVED***async***REMOVED***function****REMOVED***(iterable,***REMOVED***chunkSize)***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***await***REMOVED***(const***REMOVED***chunk***REMOVED***of***REMOVED***readStream(iterable))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield****REMOVED***streamChunk(chunk,***REMOVED***chunkSize);
***REMOVED******REMOVED***}
};

const***REMOVED***readStream***REMOVED***=***REMOVED***async***REMOVED***function****REMOVED***(stream)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(stream[Symbol.asyncIterator])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***yield****REMOVED***stream;
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***reader***REMOVED***=***REMOVED***stream.getReader();
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(;;)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{done,***REMOVED***value}***REMOVED***=***REMOVED***await***REMOVED***reader.read();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(done)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***yield***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***finally***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***reader.cancel();
***REMOVED******REMOVED***}
};

const***REMOVED***trackStream***REMOVED***=***REMOVED***(stream,***REMOVED***chunkSize,***REMOVED***onProgress,***REMOVED***onFinish)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***iterator***REMOVED***=***REMOVED***readBytes(stream,***REMOVED***chunkSize);

***REMOVED******REMOVED***let***REMOVED***bytes***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***done;
***REMOVED******REMOVED***let***REMOVED***_onFinish***REMOVED***=***REMOVED***(e)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!done)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onFinish***REMOVED***&&***REMOVED***onFinish(e);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***new***REMOVED***ReadableStream({
***REMOVED******REMOVED******REMOVED******REMOVED***async***REMOVED***pull(controller)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{done,***REMOVED***value}***REMOVED***=***REMOVED***await***REMOVED***iterator.next();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(done)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_onFinish();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***controller.close();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***len***REMOVED***=***REMOVED***value.byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(onProgress)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***loadedBytes***REMOVED***=***REMOVED***bytes***REMOVED***+=***REMOVED***len;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onProgress(loadedBytes);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***controller.enqueue(new***REMOVED***Uint8Array(value));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_onFinish(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***cancel(reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_onFinish(reason);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***iterator.return();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***highWaterMark:***REMOVED***2
***REMOVED******REMOVED***})
};

const***REMOVED***DEFAULT_CHUNK_SIZE***REMOVED***=***REMOVED***64***REMOVED*******REMOVED***1024;

const***REMOVED***{isFunction}***REMOVED***=***REMOVED***utils$1;

const***REMOVED***globalFetchAPI***REMOVED***=***REMOVED***(({Request,***REMOVED***Response})***REMOVED***=>***REMOVED***({
***REMOVED******REMOVED***Request,***REMOVED***Response
}))(utils$1.global);

const***REMOVED***{
***REMOVED******REMOVED***ReadableStream:***REMOVED***ReadableStream$1,***REMOVED***TextEncoder:***REMOVED***TextEncoder$1
}***REMOVED***=***REMOVED***utils$1.global;


const***REMOVED***test***REMOVED***=***REMOVED***(fn,***REMOVED***...args)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!fn(...args);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false
***REMOVED******REMOVED***}
};

const***REMOVED***factory***REMOVED***=***REMOVED***(env)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***env***REMOVED***=***REMOVED***utils$1.merge.call({
***REMOVED******REMOVED******REMOVED******REMOVED***skipUndefined:***REMOVED***true
***REMOVED******REMOVED***},***REMOVED***globalFetchAPI,***REMOVED***env);

***REMOVED******REMOVED***const***REMOVED***{fetch:***REMOVED***envFetch,***REMOVED***Request,***REMOVED***Response}***REMOVED***=***REMOVED***env;
***REMOVED******REMOVED***const***REMOVED***isFetchSupported***REMOVED***=***REMOVED***envFetch***REMOVED***?***REMOVED***isFunction(envFetch)***REMOVED***:***REMOVED***typeof***REMOVED***fetch***REMOVED***===***REMOVED***'function';
***REMOVED******REMOVED***const***REMOVED***isRequestSupported***REMOVED***=***REMOVED***isFunction(Request);
***REMOVED******REMOVED***const***REMOVED***isResponseSupported***REMOVED***=***REMOVED***isFunction(Response);

***REMOVED******REMOVED***if***REMOVED***(!isFetchSupported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***isReadableStreamSupported***REMOVED***=***REMOVED***isFetchSupported***REMOVED***&&***REMOVED***isFunction(ReadableStream$1);

***REMOVED******REMOVED***const***REMOVED***encodeText***REMOVED***=***REMOVED***isFetchSupported***REMOVED***&&***REMOVED***(typeof***REMOVED***TextEncoder$1***REMOVED***===***REMOVED***'function'***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***((encoder)***REMOVED***=>***REMOVED***(str)***REMOVED***=>***REMOVED***encoder.encode(str))(new***REMOVED***TextEncoder$1())***REMOVED***:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***async***REMOVED***(str)***REMOVED***=>***REMOVED***new***REMOVED***Uint8Array(await***REMOVED***new***REMOVED***Request(str).arrayBuffer())
***REMOVED******REMOVED***);

***REMOVED******REMOVED***const***REMOVED***supportsRequestStream***REMOVED***=***REMOVED***isRequestSupported***REMOVED***&&***REMOVED***isReadableStreamSupported***REMOVED***&&***REMOVED***test(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***duplexAccessed***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***hasContentType***REMOVED***=***REMOVED***new***REMOVED***Request(platform.origin,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body:***REMOVED***new***REMOVED***ReadableStream$1(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***'POST',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***get***REMOVED***duplex()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***duplexAccessed***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'half';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***}).headers.has('Content-Type');

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***duplexAccessed***REMOVED***&&***REMOVED***!hasContentType;
***REMOVED******REMOVED***});

***REMOVED******REMOVED***const***REMOVED***supportsResponseStream***REMOVED***=***REMOVED***isResponseSupported***REMOVED***&&***REMOVED***isReadableStreamSupported***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***test(()***REMOVED***=>***REMOVED***utils$1.isReadableStream(new***REMOVED***Response('').body));

***REMOVED******REMOVED***const***REMOVED***resolvers***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stream:***REMOVED***supportsResponseStream***REMOVED***&&***REMOVED***((res)***REMOVED***=>***REMOVED***res.body)
***REMOVED******REMOVED***};

***REMOVED******REMOVED***isFetchSupported***REMOVED***&&***REMOVED***((()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***['text',***REMOVED***'arrayBuffer',***REMOVED***'blob',***REMOVED***'formData',***REMOVED***'stream'].forEach(type***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!resolvers[type]***REMOVED***&&***REMOVED***(resolvers[type]***REMOVED***=***REMOVED***(res,***REMOVED***config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***method***REMOVED***=***REMOVED***res***REMOVED***&&***REMOVED***res[type];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(method)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***method.call(res);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError(`Response***REMOVED***type***REMOVED***'${type}'***REMOVED***is***REMOVED***not***REMOVED***supported`,***REMOVED***AxiosError.ERR_NOT_SUPPORT,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***})());

***REMOVED******REMOVED***const***REMOVED***getBodyLength***REMOVED***=***REMOVED***async***REMOVED***(body)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(body***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isBlob(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***body.size;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isSpecCompliantForm(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_request***REMOVED***=***REMOVED***new***REMOVED***Request(platform.origin,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***'POST',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(await***REMOVED***_request.arrayBuffer()).byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isArrayBufferView(body)***REMOVED***||***REMOVED***utils$1.isArrayBuffer(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***body.byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isURLSearchParams(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body***REMOVED***=***REMOVED***body***REMOVED***+***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isString(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(await***REMOVED***encodeText(body)).byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***resolveBodyLength***REMOVED***=***REMOVED***async***REMOVED***(headers,***REMOVED***body)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***length***REMOVED***=***REMOVED***utils$1.toFiniteNumber(headers.getContentLength());

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***length***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***getBodyLength(body)***REMOVED***:***REMOVED***length;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***async***REMOVED***(config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signal,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancelToken,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeout,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDownloadProgress,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseType,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***withCredentials***REMOVED***=***REMOVED***'same-origin',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fetchOptions
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***=***REMOVED***resolveConfig(config);

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***_fetch***REMOVED***=***REMOVED***envFetch***REMOVED***||***REMOVED***fetch;

***REMOVED******REMOVED******REMOVED******REMOVED***responseType***REMOVED***=***REMOVED***responseType***REMOVED***?***REMOVED***(responseType***REMOVED***+***REMOVED***'').toLowerCase()***REMOVED***:***REMOVED***'text';

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***composedSignal***REMOVED***=***REMOVED***composeSignals$1([signal,***REMOVED***cancelToken***REMOVED***&&***REMOVED***cancelToken.toAbortSignal()],***REMOVED***timeout);

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***request***REMOVED***=***REMOVED***null;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***unsubscribe***REMOVED***=***REMOVED***composedSignal***REMOVED***&&***REMOVED***composedSignal.unsubscribe***REMOVED***&&***REMOVED***(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***composedSignal.unsubscribe();
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***requestContentLength;

***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress***REMOVED***&&***REMOVED***supportsRequestStream***REMOVED***&&***REMOVED***method***REMOVED***!==***REMOVED***'get'***REMOVED***&&***REMOVED***method***REMOVED***!==***REMOVED***'head'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(requestContentLength***REMOVED***=***REMOVED***await***REMOVED***resolveBodyLength(headers,***REMOVED***data))***REMOVED***!==***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***_request***REMOVED***=***REMOVED***new***REMOVED***Request(url,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***'POST',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body:***REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***duplex:***REMOVED***"half"
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contentTypeHeader;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isFormData(data)***REMOVED***&&***REMOVED***(contentTypeHeader***REMOVED***=***REMOVED***_request.headers.get('content-type')))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentType(contentTypeHeader);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_request.body)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***[onProgress,***REMOVED***flush]***REMOVED***=***REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestContentLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onUploadProgress))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***trackStream(_request.body,***REMOVED***DEFAULT_CHUNK_SIZE,***REMOVED***onProgress,***REMOVED***flush);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils$1.isString(withCredentials))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***withCredentials***REMOVED***=***REMOVED***withCredentials***REMOVED***?***REMOVED***'include'***REMOVED***:***REMOVED***'omit';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Cloudflare***REMOVED***Workers***REMOVED***throws***REMOVED***when***REMOVED***credentials***REMOVED***are***REMOVED***defined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***see***REMOVED***https://github.com/cloudflare/workerd/issues/902
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isCredentialsSupported***REMOVED***=***REMOVED***isRequestSupported***REMOVED***&&***REMOVED***"credentials"***REMOVED***in***REMOVED***Request.prototype;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***resolvedOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...fetchOptions,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signal:***REMOVED***composedSignal,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***method.toUpperCase(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***headers.normalize().toJSON(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body:***REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***duplex:***REMOVED***"half",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***credentials:***REMOVED***isCredentialsSupported***REMOVED***?***REMOVED***withCredentials***REMOVED***:***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***isRequestSupported***REMOVED***&&***REMOVED***new***REMOVED***Request(url,***REMOVED***resolvedOptions);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***response***REMOVED***=***REMOVED***await***REMOVED***(isRequestSupported***REMOVED***?***REMOVED***_fetch(request,***REMOVED***fetchOptions)***REMOVED***:***REMOVED***_fetch(url,***REMOVED***resolvedOptions));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isStreamResponse***REMOVED***=***REMOVED***supportsResponseStream***REMOVED***&&***REMOVED***(responseType***REMOVED***===***REMOVED***'stream'***REMOVED***||***REMOVED***responseType***REMOVED***===***REMOVED***'response');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(supportsResponseStream***REMOVED***&&***REMOVED***(onDownloadProgress***REMOVED***||***REMOVED***(isStreamResponse***REMOVED***&&***REMOVED***unsubscribe)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***['status',***REMOVED***'statusText',***REMOVED***'headers'].forEach(prop***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options[prop]***REMOVED***=***REMOVED***response[prop];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseContentLength***REMOVED***=***REMOVED***utils$1.toFiniteNumber(response.headers.get('content-length'));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***[onProgress,***REMOVED***flush]***REMOVED***=***REMOVED***onDownloadProgress***REMOVED***&&***REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseContentLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onDownloadProgress),***REMOVED***true)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***||***REMOVED***[];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response***REMOVED***=***REMOVED***new***REMOVED***Response(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***trackStream(response.body,***REMOVED***DEFAULT_CHUNK_SIZE,***REMOVED***onProgress,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flush***REMOVED***&&***REMOVED***flush();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***unsubscribe***REMOVED***&&***REMOVED***unsubscribe();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseType***REMOVED***=***REMOVED***responseType***REMOVED***||***REMOVED***'text';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***responseData***REMOVED***=***REMOVED***await***REMOVED***resolvers[utils$1.findKey(resolvers,***REMOVED***responseType)***REMOVED***||***REMOVED***'text'](response,***REMOVED***config);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!isStreamResponse***REMOVED***&&***REMOVED***unsubscribe***REMOVED***&&***REMOVED***unsubscribe();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***await***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***responseData,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***AxiosHeaders$1.from(response.headers),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***response.status,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***response.statusText,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***unsubscribe***REMOVED***&&***REMOVED***unsubscribe();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***&&***REMOVED***err.name***REMOVED***===***REMOVED***'TypeError'***REMOVED***&&***REMOVED***/Load***REMOVED***failed|fetch/i.test(err.message))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***Object.assign(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***new***REMOVED***AxiosError('Network***REMOVED***Error',***REMOVED***AxiosError.ERR_NETWORK,***REMOVED***config,***REMOVED***request),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cause:***REMOVED***err.cause***REMOVED***||***REMOVED***err
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***AxiosError.from(err,***REMOVED***err***REMOVED***&&***REMOVED***err.code,***REMOVED***config,***REMOVED***request);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
};

const***REMOVED***seedCache***REMOVED***=***REMOVED***new***REMOVED***Map();

const***REMOVED***getFetch***REMOVED***=***REMOVED***(config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***env***REMOVED***=***REMOVED***config***REMOVED***?***REMOVED***config.env***REMOVED***:***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***{fetch,***REMOVED***Request,***REMOVED***Response}***REMOVED***=***REMOVED***env;
***REMOVED******REMOVED***const***REMOVED***seeds***REMOVED***=***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED***Request,***REMOVED***Response,***REMOVED***fetch
***REMOVED******REMOVED***];

***REMOVED******REMOVED***let***REMOVED***len***REMOVED***=***REMOVED***seeds.length,***REMOVED***i***REMOVED***=***REMOVED***len,
***REMOVED******REMOVED******REMOVED******REMOVED***seed,***REMOVED***target,***REMOVED***map***REMOVED***=***REMOVED***seedCache;

***REMOVED******REMOVED***while***REMOVED***(i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***seed***REMOVED***=***REMOVED***seeds[i];
***REMOVED******REMOVED******REMOVED******REMOVED***target***REMOVED***=***REMOVED***map.get(seed);

***REMOVED******REMOVED******REMOVED******REMOVED***target***REMOVED***===***REMOVED***undefined***REMOVED***&&***REMOVED***map.set(seed,***REMOVED***target***REMOVED***=***REMOVED***(i***REMOVED***?***REMOVED***new***REMOVED***Map()***REMOVED***:***REMOVED***factory(env)));

***REMOVED******REMOVED******REMOVED******REMOVED***map***REMOVED***=***REMOVED***target;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***target;
};

getFetch();

const***REMOVED***knownAdapters***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***http:***REMOVED***httpAdapter,
***REMOVED******REMOVED***xhr:***REMOVED***xhrAdapter,
***REMOVED******REMOVED***fetch:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***get:***REMOVED***getFetch,
***REMOVED******REMOVED***}
};

utils$1.forEach(knownAdapters,***REMOVED***(fn,***REMOVED***value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(fn)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.defineProperty(fn,***REMOVED***'name',***REMOVED***{value});
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-empty
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***Object.defineProperty(fn,***REMOVED***'adapterName',***REMOVED***{value});
***REMOVED******REMOVED***}
});

const***REMOVED***renderReason***REMOVED***=***REMOVED***(reason)***REMOVED***=>***REMOVED***`-***REMOVED***${reason}`;

const***REMOVED***isResolvedHandle***REMOVED***=***REMOVED***(adapter)***REMOVED***=>***REMOVED***utils$1.isFunction(adapter)***REMOVED***||***REMOVED***adapter***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***adapter***REMOVED***===***REMOVED***false;

const***REMOVED***adapters***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***getAdapter:***REMOVED***(adapters,***REMOVED***config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***adapters***REMOVED***=***REMOVED***utils$1.isArray(adapters)***REMOVED***?***REMOVED***adapters***REMOVED***:***REMOVED***[adapters];

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{length}***REMOVED***=***REMOVED***adapters;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***nameOrAdapter;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***adapter;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rejectedReasons***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nameOrAdapter***REMOVED***=***REMOVED***adapters[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***id;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***adapter***REMOVED***=***REMOVED***nameOrAdapter;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isResolvedHandle(nameOrAdapter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***adapter***REMOVED***=***REMOVED***knownAdapters[(id***REMOVED***=***REMOVED***String(nameOrAdapter)).toLowerCase()];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(adapter***REMOVED***===***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError(`Unknown***REMOVED***adapter***REMOVED***'${id}'`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(adapter***REMOVED***&&***REMOVED***(utils$1.isFunction(adapter)***REMOVED***||***REMOVED***(adapter***REMOVED***=***REMOVED***adapter.get(config))))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rejectedReasons[id***REMOVED***||***REMOVED***'#'***REMOVED***+***REMOVED***i]***REMOVED***=***REMOVED***adapter;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!adapter)***REMOVED***{

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***reasons***REMOVED***=***REMOVED***Object.entries(rejectedReasons)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.map(([id,***REMOVED***state])***REMOVED***=>***REMOVED***`adapter***REMOVED***${id}***REMOVED***`***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(state***REMOVED***===***REMOVED***false***REMOVED***?***REMOVED***'is***REMOVED***not***REMOVED***supported***REMOVED***by***REMOVED***the***REMOVED***environment'***REMOVED***:***REMOVED***'is***REMOVED***not***REMOVED***available***REMOVED***in***REMOVED***the***REMOVED***build')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***s***REMOVED***=***REMOVED***length***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(reasons.length***REMOVED***>***REMOVED***1***REMOVED***?***REMOVED***'since***REMOVED***:\n'***REMOVED***+***REMOVED***reasons.map(renderReason).join('\n')***REMOVED***:***REMOVED***'***REMOVED***'***REMOVED***+***REMOVED***renderReason(reasons[0]))***REMOVED***:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'as***REMOVED***no***REMOVED***adapter***REMOVED***specified';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`There***REMOVED***is***REMOVED***no***REMOVED***suitable***REMOVED***adapter***REMOVED***to***REMOVED***dispatch***REMOVED***the***REMOVED***request***REMOVED***`***REMOVED***+***REMOVED***s,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'ERR_NOT_SUPPORT'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***adapter;
***REMOVED******REMOVED***},
***REMOVED******REMOVED***adapters:***REMOVED***knownAdapters
};

/**
***REMOVED*******REMOVED***Throws***REMOVED***a***REMOVED***`CanceledError`***REMOVED***if***REMOVED***cancellation***REMOVED***has***REMOVED***been***REMOVED***requested.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***config***REMOVED***The***REMOVED***config***REMOVED***that***REMOVED***is***REMOVED***to***REMOVED***be***REMOVED***used***REMOVED***for***REMOVED***the***REMOVED***request
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{void}
***REMOVED****/
function***REMOVED***throwIfCancellationRequested(config)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(config.cancelToken)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***config.cancelToken.throwIfRequested();
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(config.signal***REMOVED***&&***REMOVED***config.signal.aborted)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***CanceledError(null,***REMOVED***config);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Dispatch***REMOVED***a***REMOVED***request***REMOVED***to***REMOVED***the***REMOVED***server***REMOVED***using***REMOVED***the***REMOVED***configured***REMOVED***adapter.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***config***REMOVED***The***REMOVED***config***REMOVED***that***REMOVED***is***REMOVED***to***REMOVED***be***REMOVED***used***REMOVED***for***REMOVED***the***REMOVED***request
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Promise}***REMOVED***The***REMOVED***Promise***REMOVED***to***REMOVED***be***REMOVED***fulfilled
***REMOVED****/
function***REMOVED***dispatchRequest(config)***REMOVED***{
***REMOVED******REMOVED***throwIfCancellationRequested(config);

***REMOVED******REMOVED***config.headers***REMOVED***=***REMOVED***AxiosHeaders$1.from(config.headers);

***REMOVED******REMOVED***//***REMOVED***Transform***REMOVED***request***REMOVED***data
***REMOVED******REMOVED***config.data***REMOVED***=***REMOVED***transformData.call(
***REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED***config.transformRequest
***REMOVED******REMOVED***);

***REMOVED******REMOVED***if***REMOVED***(['post',***REMOVED***'put',***REMOVED***'patch'].indexOf(config.method)***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***config.headers.setContentType('application/x-www-form-urlencoded',***REMOVED***false);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***adapter***REMOVED***=***REMOVED***adapters.getAdapter(config.adapter***REMOVED***||***REMOVED***defaults$1.adapter,***REMOVED***config);

***REMOVED******REMOVED***return***REMOVED***adapter(config).then(function***REMOVED***onAdapterResolution(response)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throwIfCancellationRequested(config);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Transform***REMOVED***response***REMOVED***data
***REMOVED******REMOVED******REMOVED******REMOVED***response.data***REMOVED***=***REMOVED***transformData.call(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.transformResponse,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response
***REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED***response.headers***REMOVED***=***REMOVED***AxiosHeaders$1.from(response.headers);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***response;
***REMOVED******REMOVED***},***REMOVED***function***REMOVED***onAdapterRejection(reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isCancel(reason))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throwIfCancellationRequested(config);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Transform***REMOVED***response***REMOVED***data
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(reason***REMOVED***&&***REMOVED***reason.response)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reason.response.data***REMOVED***=***REMOVED***transformData.call(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.transformResponse,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reason.response
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reason.response.headers***REMOVED***=***REMOVED***AxiosHeaders$1.from(reason.response.headers);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Promise.reject(reason);
***REMOVED******REMOVED***});
}

const***REMOVED***validators$1***REMOVED***=***REMOVED***{};

//***REMOVED***eslint-disable-next-line***REMOVED***func-names
['object',***REMOVED***'boolean',***REMOVED***'number',***REMOVED***'function',***REMOVED***'string',***REMOVED***'symbol'].forEach((type,***REMOVED***i)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***validators$1[type]***REMOVED***=***REMOVED***function***REMOVED***validator(thing)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typeof***REMOVED***thing***REMOVED***===***REMOVED***type***REMOVED***||***REMOVED***'a'***REMOVED***+***REMOVED***(i***REMOVED***<***REMOVED***1***REMOVED***?***REMOVED***'n***REMOVED***'***REMOVED***:***REMOVED***'***REMOVED***')***REMOVED***+***REMOVED***type;
***REMOVED******REMOVED***};
});

const***REMOVED***deprecatedWarnings***REMOVED***=***REMOVED***{};

/**
***REMOVED*******REMOVED***Transitional***REMOVED***option***REMOVED***validator
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{function|boolean?}***REMOVED***validator***REMOVED***-***REMOVED***set***REMOVED***to***REMOVED***false***REMOVED***if***REMOVED***the***REMOVED***transitional***REMOVED***option***REMOVED***has***REMOVED***been***REMOVED***removed
***REMOVED*******REMOVED***@param***REMOVED***{string?}***REMOVED***version***REMOVED***-***REMOVED***deprecated***REMOVED***version***REMOVED***/***REMOVED***removed***REMOVED***since***REMOVED***version
***REMOVED*******REMOVED***@param***REMOVED***{string?}***REMOVED***message***REMOVED***-***REMOVED***some***REMOVED***message***REMOVED***with***REMOVED***additional***REMOVED***info
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{function}
***REMOVED****/
validators$1.transitional***REMOVED***=***REMOVED***function***REMOVED***transitional(validator,***REMOVED***version,***REMOVED***message)***REMOVED***{
***REMOVED******REMOVED***function***REMOVED***formatMessage(opt,***REMOVED***desc)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'[Axios***REMOVED***v'***REMOVED***+***REMOVED***VERSION***REMOVED***+***REMOVED***']***REMOVED***Transitional***REMOVED***option***REMOVED***\''***REMOVED***+***REMOVED***opt***REMOVED***+***REMOVED***'\''***REMOVED***+***REMOVED***desc***REMOVED***+***REMOVED***(message***REMOVED***?***REMOVED***'.***REMOVED***'***REMOVED***+***REMOVED***message***REMOVED***:***REMOVED***'');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED***return***REMOVED***(value,***REMOVED***opt,***REMOVED***opts)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(validator***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***formatMessage(opt,***REMOVED***'***REMOVED***has***REMOVED***been***REMOVED***removed'***REMOVED***+***REMOVED***(version***REMOVED***?***REMOVED***'***REMOVED***in***REMOVED***'***REMOVED***+***REMOVED***version***REMOVED***:***REMOVED***'')),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***AxiosError.ERR_DEPRECATED
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(version***REMOVED***&&***REMOVED***!deprecatedWarnings[opt])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***deprecatedWarnings[opt]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-console
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.warn(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***formatMessage(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opt,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'***REMOVED***has***REMOVED***been***REMOVED***deprecated***REMOVED***since***REMOVED***v'***REMOVED***+***REMOVED***version***REMOVED***+***REMOVED***'***REMOVED***and***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***near***REMOVED***future'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***validator***REMOVED***?***REMOVED***validator(value,***REMOVED***opt,***REMOVED***opts)***REMOVED***:***REMOVED***true;
***REMOVED******REMOVED***};
};

validators$1.spelling***REMOVED***=***REMOVED***function***REMOVED***spelling(correctSpelling)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***(value,***REMOVED***opt)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***no-console
***REMOVED******REMOVED******REMOVED******REMOVED***console.warn(`${opt}***REMOVED***is***REMOVED***likely***REMOVED***a***REMOVED***misspelling***REMOVED***of***REMOVED***${correctSpelling}`);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
};

/**
***REMOVED*******REMOVED***Assert***REMOVED***object's***REMOVED***properties***REMOVED***type
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***options
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***schema
***REMOVED*******REMOVED***@param***REMOVED***{boolean?}***REMOVED***allowUnknown
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{object}
***REMOVED****/

function***REMOVED***assertOptions(options,***REMOVED***schema,***REMOVED***allowUnknown)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***options***REMOVED***!==***REMOVED***'object')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('options***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***object',***REMOVED***AxiosError.ERR_BAD_OPTION_VALUE);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(options);
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***keys.length;
***REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***opt***REMOVED***=***REMOVED***keys[i];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***validator***REMOVED***=***REMOVED***schema[opt];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(validator)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***options[opt];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***value***REMOVED***===***REMOVED***undefined***REMOVED***||***REMOVED***validator(value,***REMOVED***opt,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(result***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('option***REMOVED***'***REMOVED***+***REMOVED***opt***REMOVED***+***REMOVED***'***REMOVED***must***REMOVED***be***REMOVED***'***REMOVED***+***REMOVED***result,***REMOVED***AxiosError.ERR_BAD_OPTION_VALUE);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(allowUnknown***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError('Unknown***REMOVED***option***REMOVED***'***REMOVED***+***REMOVED***opt,***REMOVED***AxiosError.ERR_BAD_OPTION);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

const***REMOVED***validator***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***assertOptions,
***REMOVED******REMOVED***validators:***REMOVED***validators$1
};

const***REMOVED***validators***REMOVED***=***REMOVED***validator.validators;

/**
***REMOVED*******REMOVED***Create***REMOVED***a***REMOVED***new***REMOVED***instance***REMOVED***of***REMOVED***Axios
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***instanceConfig***REMOVED***The***REMOVED***default***REMOVED***config***REMOVED***for***REMOVED***the***REMOVED***instance
***REMOVED****
***REMOVED*******REMOVED***@return***REMOVED***{Axios}***REMOVED***A***REMOVED***new***REMOVED***instance***REMOVED***of***REMOVED***Axios
***REMOVED****/
class***REMOVED***Axios***REMOVED***{
***REMOVED******REMOVED***constructor(instanceConfig)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.defaults***REMOVED***=***REMOVED***instanceConfig***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***this.interceptors***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request:***REMOVED***new***REMOVED***InterceptorManager$1(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response:***REMOVED***new***REMOVED***InterceptorManager$1()
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Dispatch***REMOVED***a***REMOVED***request
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{String|Object}***REMOVED***configOrUrl***REMOVED***The***REMOVED***config***REMOVED***specific***REMOVED***for***REMOVED***this***REMOVED***request***REMOVED***(merged***REMOVED***with***REMOVED***this.defaults)
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{?Object}***REMOVED***config
***REMOVED******REMOVED******REMOVED****
***REMOVED******REMOVED******REMOVED*******REMOVED***@returns***REMOVED***{Promise}***REMOVED***The***REMOVED***Promise***REMOVED***to***REMOVED***be***REMOVED***fulfilled
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***async***REMOVED***request(configOrUrl,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***await***REMOVED***this._request(configOrUrl,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***instanceof***REMOVED***Error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***dummy***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Error.captureStackTrace***REMOVED***?***REMOVED***Error.captureStackTrace(dummy)***REMOVED***:***REMOVED***(dummy***REMOVED***=***REMOVED***new***REMOVED***Error());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***slice***REMOVED***off***REMOVED***the***REMOVED***Error:***REMOVED***...***REMOVED***line
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stack***REMOVED***=***REMOVED***dummy.stack***REMOVED***?***REMOVED***dummy.stack.replace(/^.+\n/,***REMOVED***'')***REMOVED***:***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!err.stack)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***err.stack***REMOVED***=***REMOVED***stack;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***match***REMOVED***without***REMOVED***the***REMOVED***2***REMOVED***top***REMOVED***stack***REMOVED***lines
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(stack***REMOVED***&&***REMOVED***!String(err.stack).endsWith(stack.replace(/^.+\n.+\n/,***REMOVED***'')))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***err.stack***REMOVED***+=***REMOVED***'\n'***REMOVED***+***REMOVED***stack;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***ignore***REMOVED***the***REMOVED***case***REMOVED***where***REMOVED***"stack"***REMOVED***is***REMOVED***an***REMOVED***un-writable***REMOVED***property
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***_request(configOrUrl,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***/*eslint***REMOVED***no-param-reassign:0*/
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Allow***REMOVED***for***REMOVED***axios('example/url'[,***REMOVED***config])***REMOVED***a***REMOVED***la***REMOVED***fetch***REMOVED***API
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***configOrUrl***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config***REMOVED***=***REMOVED***config***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.url***REMOVED***=***REMOVED***configOrUrl;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config***REMOVED***=***REMOVED***configOrUrl***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***config***REMOVED***=***REMOVED***mergeConfig(this.defaults,***REMOVED***config);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{transitional,***REMOVED***paramsSerializer,***REMOVED***headers}***REMOVED***=***REMOVED***config;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(transitional***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validator.assertOptions(transitional,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***silentJSONParsing:***REMOVED***validators.transitional(validators.boolean),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***forcedJSONParsing:***REMOVED***validators.transitional(validators.boolean),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clarifyTimeoutError:***REMOVED***validators.transitional(validators.boolean)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(paramsSerializer***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils$1.isFunction(paramsSerializer))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.paramsSerializer***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***serialize:***REMOVED***paramsSerializer
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validator.assertOptions(paramsSerializer,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***encode:***REMOVED***validators.function,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***serialize:***REMOVED***validators.function
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Set***REMOVED***config.allowAbsoluteUrls
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(config.allowAbsoluteUrls***REMOVED***!==***REMOVED***undefined)***REMOVED***;***REMOVED***else***REMOVED***if***REMOVED***(this.defaults.allowAbsoluteUrls***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.allowAbsoluteUrls***REMOVED***=***REMOVED***this.defaults.allowAbsoluteUrls;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config.allowAbsoluteUrls***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***validator.assertOptions(config,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***baseUrl:***REMOVED***validators.spelling('baseURL'),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***withXsrfToken:***REMOVED***validators.spelling('withXSRFToken')
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***true);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Set***REMOVED***config.method
***REMOVED******REMOVED******REMOVED******REMOVED***config.method***REMOVED***=***REMOVED***(config.method***REMOVED***||***REMOVED***this.defaults.method***REMOVED***||***REMOVED***'get').toLowerCase();

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Flatten***REMOVED***headers
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contextHeaders***REMOVED***=***REMOVED***headers***REMOVED***&&***REMOVED***utils$1.merge(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.common,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers[config.method]
***REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED***headers***REMOVED***&&***REMOVED***utils$1.forEach(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***['delete',***REMOVED***'get',***REMOVED***'head',***REMOVED***'post',***REMOVED***'put',***REMOVED***'patch',***REMOVED***'common'],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(method)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***headers[method];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED***config.headers***REMOVED***=***REMOVED***AxiosHeaders$1.concat(contextHeaders,***REMOVED***headers);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***filter***REMOVED***out***REMOVED***skipped***REMOVED***interceptors
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***requestInterceptorChain***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***synchronousRequestInterceptors***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***this.interceptors.request.forEach(function***REMOVED***unshiftRequestInterceptors(interceptor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***interceptor.runWhen***REMOVED***===***REMOVED***'function'***REMOVED***&&***REMOVED***interceptor.runWhen(config)***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***synchronousRequestInterceptors***REMOVED***=***REMOVED***synchronousRequestInterceptors***REMOVED***&&***REMOVED***interceptor.synchronous;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestInterceptorChain.unshift(interceptor.fulfilled,***REMOVED***interceptor.rejected);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseInterceptorChain***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***this.interceptors.response.forEach(function***REMOVED***pushResponseInterceptors(interceptor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseInterceptorChain.push(interceptor.fulfilled,***REMOVED***interceptor.rejected);
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***promise;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***len;

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!synchronousRequestInterceptors)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***chain***REMOVED***=***REMOVED***[dispatchRequest.bind(this),***REMOVED***undefined];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***chain.unshift(...requestInterceptorChain);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***chain.push(...responseInterceptorChain);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***len***REMOVED***=***REMOVED***chain.length;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***promise***REMOVED***=***REMOVED***Promise.resolve(config);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i***REMOVED***<***REMOVED***len)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***promise***REMOVED***=***REMOVED***promise.then(chain[i++],***REMOVED***chain[i++]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***promise;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***len***REMOVED***=***REMOVED***requestInterceptorChain.length;

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***newConfig***REMOVED***=***REMOVED***config;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i***REMOVED***<***REMOVED***len)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onFulfilled***REMOVED***=***REMOVED***requestInterceptorChain[i++];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onRejected***REMOVED***=***REMOVED***requestInterceptorChain[i++];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newConfig***REMOVED***=***REMOVED***onFulfilled(newConfig);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onRejected.call(this,***REMOVED***error);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***promise***REMOVED***=***REMOVED***dispatchRequest.call(this,***REMOVED***newConfig);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Promise.reject(error);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***len***REMOVED***=***REMOVED***responseInterceptorChain.length;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i***REMOVED***<***REMOVED***len)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***promise***REMOVED***=***REMOVED***promise.then(responseInterceptorChain[i++],***REMOVED***responseInterceptorChain[i++]);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***promise;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***getUri(config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***config***REMOVED***=***REMOVED***mergeConfig(this.defaults,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fullPath***REMOVED***=***REMOVED***buildFullPath(config.baseURL,***REMOVED***config.url,***REMOVED***config.allowAbsoluteUrls);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***buildURL(fullPath,***REMOVED***config.params,***REMOVED***config.paramsSerializer);
***REMOVED******REMOVED***}
}

//***REMOVED***Provide***REMOVED***aliases***REMOVED***for***REMOVED***supported***REMOVED***request***REMOVED***methods
utils$1.forEach(['delete',***REMOVED***'get',***REMOVED***'head',***REMOVED***'options'],***REMOVED***function***REMOVED***forEachMethodNoData(method)***REMOVED***{
***REMOVED******REMOVED***/*eslint***REMOVED***func-names:0*/
***REMOVED******REMOVED***Axios.prototype[method]***REMOVED***=***REMOVED***function(url,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.request(mergeConfig(config***REMOVED***||***REMOVED***{},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***(config***REMOVED***||***REMOVED***{}).data
***REMOVED******REMOVED******REMOVED******REMOVED***}));
***REMOVED******REMOVED***};
});

utils$1.forEach(['post',***REMOVED***'put',***REMOVED***'patch'],***REMOVED***function***REMOVED***forEachMethodWithData(method)***REMOVED***{
***REMOVED******REMOVED***/*eslint***REMOVED***func-names:0*/

***REMOVED******REMOVED***function***REMOVED***generateHTTPMethod(isForm)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***function***REMOVED***httpMethod(url,***REMOVED***data,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.request(mergeConfig(config***REMOVED***||***REMOVED***{},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***isForm***REMOVED***?***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***'Content-Type':***REMOVED***'multipart/form-data'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***:***REMOVED***{},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}));
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}

***REMOVED******REMOVED***Axios.prototype[method]***REMOVED***=***REMOVED***generateHTTPMethod();

***REMOVED******REMOVED***Axios.prototype[method***REMOVED***+***REMOVED***'Form']***REMOVED***=***REMOVED***generateHTTPMethod(true);
});

const***REMOVED***Axios$1***REMOVED***=***REMOVED***Axios;

/**
***REMOVED*******REMOVED***A***REMOVED***`CancelToken`***REMOVED***is***REMOVED***an***REMOVED***object***REMOVED***that***REMOVED***can***REMOVED***be***REMOVED***used***REMOVED***to***REMOVED***request***REMOVED***cancellation***REMOVED***of***REMOVED***an***REMOVED***operation.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***executor***REMOVED***The***REMOVED***executor***REMOVED***function.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{CancelToken}
***REMOVED****/
class***REMOVED***CancelToken***REMOVED***{
***REMOVED******REMOVED***constructor(executor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***executor***REMOVED***!==***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('executor***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***function.');
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***resolvePromise;

***REMOVED******REMOVED******REMOVED******REMOVED***this.promise***REMOVED***=***REMOVED***new***REMOVED***Promise(function***REMOVED***promiseExecutor(resolve)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvePromise***REMOVED***=***REMOVED***resolve;
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***token***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED******REMOVED******REMOVED***this.promise.then(cancel***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!token._listeners)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***token._listeners.length;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i--***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token._listeners[i](cancel);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token._listeners***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED******REMOVED******REMOVED***this.promise.then***REMOVED***=***REMOVED***onfulfilled***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***_resolve;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***eslint-disable-next-line***REMOVED***func-names
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***promise***REMOVED***=***REMOVED***new***REMOVED***Promise(resolve***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token.subscribe(resolve);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_resolve***REMOVED***=***REMOVED***resolve;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}).then(onfulfilled);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***promise.cancel***REMOVED***=***REMOVED***function***REMOVED***reject()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token.unsubscribe(_resolve);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***promise;
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***executor(function***REMOVED***cancel(message,***REMOVED***config,***REMOVED***request)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(token.reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Cancellation***REMOVED***has***REMOVED***already***REMOVED***been***REMOVED***requested
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token.reason***REMOVED***=***REMOVED***new***REMOVED***CanceledError(message,***REMOVED***config,***REMOVED***request);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvePromise(token.reason);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Throws***REMOVED***a***REMOVED***`CanceledError`***REMOVED***if***REMOVED***cancellation***REMOVED***has***REMOVED***been***REMOVED***requested.
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***throwIfRequested()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***this.reason;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Subscribe***REMOVED***to***REMOVED***the***REMOVED***cancel***REMOVED***signal
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***subscribe(listener)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.reason)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listener(this.reason);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this._listeners)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._listeners.push(listener);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._listeners***REMOVED***=***REMOVED***[listener];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Unsubscribe***REMOVED***from***REMOVED***the***REMOVED***cancel***REMOVED***signal
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***unsubscribe(listener)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this._listeners)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***this._listeners.indexOf(listener);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._listeners.splice(index,***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toAbortSignal()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***controller***REMOVED***=***REMOVED***new***REMOVED***AbortController();

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***abort***REMOVED***=***REMOVED***(err)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***controller.abort(err);
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***this.subscribe(abort);

***REMOVED******REMOVED******REMOVED******REMOVED***controller.signal.unsubscribe***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***this.unsubscribe(abort);

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***controller.signal;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Returns***REMOVED***an***REMOVED***object***REMOVED***that***REMOVED***contains***REMOVED***a***REMOVED***new***REMOVED***`CancelToken`***REMOVED***and***REMOVED***a***REMOVED***function***REMOVED***that,***REMOVED***when***REMOVED***called,
***REMOVED******REMOVED******REMOVED*******REMOVED***cancels***REMOVED***the***REMOVED***`CancelToken`.
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***static***REMOVED***source()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***cancel;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***token***REMOVED***=***REMOVED***new***REMOVED***CancelToken(function***REMOVED***executor(c)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancel***REMOVED***=***REMOVED***c;
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***token,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancel
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
}

const***REMOVED***CancelToken$1***REMOVED***=***REMOVED***CancelToken;

/**
***REMOVED*******REMOVED***Syntactic***REMOVED***sugar***REMOVED***for***REMOVED***invoking***REMOVED***a***REMOVED***function***REMOVED***and***REMOVED***expanding***REMOVED***an***REMOVED***array***REMOVED***for***REMOVED***arguments.
***REMOVED****
***REMOVED*******REMOVED***Common***REMOVED***use***REMOVED***case***REMOVED***would***REMOVED***be***REMOVED***to***REMOVED***use***REMOVED***`Function.prototype.apply`.
***REMOVED****
***REMOVED*******REMOVED******REMOVED***```js
***REMOVED*******REMOVED******REMOVED***function***REMOVED***f(x,***REMOVED***y,***REMOVED***z)***REMOVED***{}
***REMOVED*******REMOVED******REMOVED***var***REMOVED***args***REMOVED***=***REMOVED***[1,***REMOVED***2,***REMOVED***3];
***REMOVED*******REMOVED******REMOVED***f.apply(null,***REMOVED***args);
***REMOVED*******REMOVED******REMOVED***```
***REMOVED****
***REMOVED*******REMOVED***With***REMOVED***`spread`***REMOVED***this***REMOVED***example***REMOVED***can***REMOVED***be***REMOVED***re-written.
***REMOVED****
***REMOVED*******REMOVED******REMOVED***```js
***REMOVED*******REMOVED******REMOVED***spread(function(x,***REMOVED***y,***REMOVED***z)***REMOVED***{})([1,***REMOVED***2,***REMOVED***3]);
***REMOVED*******REMOVED******REMOVED***```
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***callback
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Function}
***REMOVED****/
function***REMOVED***spread(callback)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***function***REMOVED***wrap(arr)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback.apply(null,***REMOVED***arr);
***REMOVED******REMOVED***};
}

/**
***REMOVED*******REMOVED***Determines***REMOVED***whether***REMOVED***the***REMOVED***payload***REMOVED***is***REMOVED***an***REMOVED***error***REMOVED***thrown***REMOVED***by***REMOVED***Axios
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***payload***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***test
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***True***REMOVED***if***REMOVED***the***REMOVED***payload***REMOVED***is***REMOVED***an***REMOVED***error***REMOVED***thrown***REMOVED***by***REMOVED***Axios,***REMOVED***otherwise***REMOVED***false
***REMOVED****/
function***REMOVED***isAxiosError(payload)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***utils$1.isObject(payload)***REMOVED***&&***REMOVED***(payload.isAxiosError***REMOVED***===***REMOVED***true);
}

const***REMOVED***HttpStatusCode***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***Continue:***REMOVED***100,
***REMOVED******REMOVED***SwitchingProtocols:***REMOVED***101,
***REMOVED******REMOVED***Processing:***REMOVED***102,
***REMOVED******REMOVED***EarlyHints:***REMOVED***103,
***REMOVED******REMOVED***Ok:***REMOVED***200,
***REMOVED******REMOVED***Created:***REMOVED***201,
***REMOVED******REMOVED***Accepted:***REMOVED***202,
***REMOVED******REMOVED***NonAuthoritativeInformation:***REMOVED***203,
***REMOVED******REMOVED***NoContent:***REMOVED***204,
***REMOVED******REMOVED***ResetContent:***REMOVED***205,
***REMOVED******REMOVED***PartialContent:***REMOVED***206,
***REMOVED******REMOVED***MultiStatus:***REMOVED***207,
***REMOVED******REMOVED***AlreadyReported:***REMOVED***208,
***REMOVED******REMOVED***ImUsed:***REMOVED***226,
***REMOVED******REMOVED***MultipleChoices:***REMOVED***300,
***REMOVED******REMOVED***MovedPermanently:***REMOVED***301,
***REMOVED******REMOVED***Found:***REMOVED***302,
***REMOVED******REMOVED***SeeOther:***REMOVED***303,
***REMOVED******REMOVED***NotModified:***REMOVED***304,
***REMOVED******REMOVED***UseProxy:***REMOVED***305,
***REMOVED******REMOVED***Unused:***REMOVED***306,
***REMOVED******REMOVED***TemporaryRedirect:***REMOVED***307,
***REMOVED******REMOVED***PermanentRedirect:***REMOVED***308,
***REMOVED******REMOVED***BadRequest:***REMOVED***400,
***REMOVED******REMOVED***Unauthorized:***REMOVED***401,
***REMOVED******REMOVED***PaymentRequired:***REMOVED***402,
***REMOVED******REMOVED***Forbidden:***REMOVED***403,
***REMOVED******REMOVED***NotFound:***REMOVED***404,
***REMOVED******REMOVED***MethodNotAllowed:***REMOVED***405,
***REMOVED******REMOVED***NotAcceptable:***REMOVED***406,
***REMOVED******REMOVED***ProxyAuthenticationRequired:***REMOVED***407,
***REMOVED******REMOVED***RequestTimeout:***REMOVED***408,
***REMOVED******REMOVED***Conflict:***REMOVED***409,
***REMOVED******REMOVED***Gone:***REMOVED***410,
***REMOVED******REMOVED***LengthRequired:***REMOVED***411,
***REMOVED******REMOVED***PreconditionFailed:***REMOVED***412,
***REMOVED******REMOVED***PayloadTooLarge:***REMOVED***413,
***REMOVED******REMOVED***UriTooLong:***REMOVED***414,
***REMOVED******REMOVED***UnsupportedMediaType:***REMOVED***415,
***REMOVED******REMOVED***RangeNotSatisfiable:***REMOVED***416,
***REMOVED******REMOVED***ExpectationFailed:***REMOVED***417,
***REMOVED******REMOVED***ImATeapot:***REMOVED***418,
***REMOVED******REMOVED***MisdirectedRequest:***REMOVED***421,
***REMOVED******REMOVED***UnprocessableEntity:***REMOVED***422,
***REMOVED******REMOVED***Locked:***REMOVED***423,
***REMOVED******REMOVED***FailedDependency:***REMOVED***424,
***REMOVED******REMOVED***TooEarly:***REMOVED***425,
***REMOVED******REMOVED***UpgradeRequired:***REMOVED***426,
***REMOVED******REMOVED***PreconditionRequired:***REMOVED***428,
***REMOVED******REMOVED***TooManyRequests:***REMOVED***429,
***REMOVED******REMOVED***RequestHeaderFieldsTooLarge:***REMOVED***431,
***REMOVED******REMOVED***UnavailableForLegalReasons:***REMOVED***451,
***REMOVED******REMOVED***InternalServerError:***REMOVED***500,
***REMOVED******REMOVED***NotImplemented:***REMOVED***501,
***REMOVED******REMOVED***BadGateway:***REMOVED***502,
***REMOVED******REMOVED***ServiceUnavailable:***REMOVED***503,
***REMOVED******REMOVED***GatewayTimeout:***REMOVED***504,
***REMOVED******REMOVED***HttpVersionNotSupported:***REMOVED***505,
***REMOVED******REMOVED***VariantAlsoNegotiates:***REMOVED***506,
***REMOVED******REMOVED***InsufficientStorage:***REMOVED***507,
***REMOVED******REMOVED***LoopDetected:***REMOVED***508,
***REMOVED******REMOVED***NotExtended:***REMOVED***510,
***REMOVED******REMOVED***NetworkAuthenticationRequired:***REMOVED***511,
};

Object.entries(HttpStatusCode).forEach(([key,***REMOVED***value])***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***HttpStatusCode[value]***REMOVED***=***REMOVED***key;
});

const***REMOVED***HttpStatusCode$1***REMOVED***=***REMOVED***HttpStatusCode;

/**
***REMOVED*******REMOVED***Create***REMOVED***an***REMOVED***instance***REMOVED***of***REMOVED***Axios
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***defaultConfig***REMOVED***The***REMOVED***default***REMOVED***config***REMOVED***for***REMOVED***the***REMOVED***instance
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***{Axios}***REMOVED***A***REMOVED***new***REMOVED***instance***REMOVED***of***REMOVED***Axios
***REMOVED****/
function***REMOVED***createInstance(defaultConfig)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***context***REMOVED***=***REMOVED***new***REMOVED***Axios$1(defaultConfig);
***REMOVED******REMOVED***const***REMOVED***instance***REMOVED***=***REMOVED***bind(Axios$1.prototype.request,***REMOVED***context);

***REMOVED******REMOVED***//***REMOVED***Copy***REMOVED***axios.prototype***REMOVED***to***REMOVED***instance
***REMOVED******REMOVED***utils$1.extend(instance,***REMOVED***Axios$1.prototype,***REMOVED***context,***REMOVED***{allOwnKeys:***REMOVED***true});

***REMOVED******REMOVED***//***REMOVED***Copy***REMOVED***context***REMOVED***to***REMOVED***instance
***REMOVED******REMOVED***utils$1.extend(instance,***REMOVED***context,***REMOVED***null,***REMOVED***{allOwnKeys:***REMOVED***true});

***REMOVED******REMOVED***//***REMOVED***Factory***REMOVED***for***REMOVED***creating***REMOVED***new***REMOVED***instances
***REMOVED******REMOVED***instance.create***REMOVED***=***REMOVED***function***REMOVED***create(instanceConfig)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***createInstance(mergeConfig(defaultConfig,***REMOVED***instanceConfig));
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***instance;
}

//***REMOVED***Create***REMOVED***the***REMOVED***default***REMOVED***instance***REMOVED***to***REMOVED***be***REMOVED***exported
const***REMOVED***axios***REMOVED***=***REMOVED***createInstance(defaults$1);

//***REMOVED***Expose***REMOVED***Axios***REMOVED***class***REMOVED***to***REMOVED***allow***REMOVED***class***REMOVED***inheritance
axios.Axios***REMOVED***=***REMOVED***Axios$1;

//***REMOVED***Expose***REMOVED***Cancel***REMOVED***&***REMOVED***CancelToken
axios.CanceledError***REMOVED***=***REMOVED***CanceledError;
axios.CancelToken***REMOVED***=***REMOVED***CancelToken$1;
axios.isCancel***REMOVED***=***REMOVED***isCancel;
axios.VERSION***REMOVED***=***REMOVED***VERSION;
axios.toFormData***REMOVED***=***REMOVED***toFormData;

//***REMOVED***Expose***REMOVED***AxiosError***REMOVED***class
axios.AxiosError***REMOVED***=***REMOVED***AxiosError;

//***REMOVED***alias***REMOVED***for***REMOVED***CanceledError***REMOVED***for***REMOVED***backward***REMOVED***compatibility
axios.Cancel***REMOVED***=***REMOVED***axios.CanceledError;

//***REMOVED***Expose***REMOVED***all/spread
axios.all***REMOVED***=***REMOVED***function***REMOVED***all(promises)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***Promise.all(promises);
};

axios.spread***REMOVED***=***REMOVED***spread;

//***REMOVED***Expose***REMOVED***isAxiosError
axios.isAxiosError***REMOVED***=***REMOVED***isAxiosError;

//***REMOVED***Expose***REMOVED***mergeConfig
axios.mergeConfig***REMOVED***=***REMOVED***mergeConfig;

axios.AxiosHeaders***REMOVED***=***REMOVED***AxiosHeaders$1;

axios.formToJSON***REMOVED***=***REMOVED***thing***REMOVED***=>***REMOVED***formDataToJSON(utils$1.isHTMLForm(thing)***REMOVED***?***REMOVED***new***REMOVED***FormData(thing)***REMOVED***:***REMOVED***thing);

axios.getAdapter***REMOVED***=***REMOVED***adapters.getAdapter;

axios.HttpStatusCode***REMOVED***=***REMOVED***HttpStatusCode$1;

axios.default***REMOVED***=***REMOVED***axios;

module.exports***REMOVED***=***REMOVED***axios;
//#***REMOVED***sourceMappingURL=axios.cjs.map
