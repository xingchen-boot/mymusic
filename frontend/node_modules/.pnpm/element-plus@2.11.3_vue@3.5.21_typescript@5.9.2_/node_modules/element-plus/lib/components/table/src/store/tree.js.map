{"version":3,"file":"tree.js","sources":["../../../../../../../packages/components/table/src/store/tree.ts"],"sourcesContent":["import***REMOVED***{***REMOVED***computed,***REMOVED***getCurrentInstance,***REMOVED***ref,***REMOVED***unref,***REMOVED***watch***REMOVED***}***REMOVED***from***REMOVED***'vue'\nimport***REMOVED***{***REMOVED***isArray,***REMOVED***isUndefined***REMOVED***}***REMOVED***from***REMOVED***'@element-plus/utils'\nimport***REMOVED***{***REMOVED***getRowIdentity,***REMOVED***walkTreeNode***REMOVED***}***REMOVED***from***REMOVED***'../util'\n\nimport***REMOVED***type***REMOVED***{***REMOVED***WatcherPropsData***REMOVED***}***REMOVED***from***REMOVED***'.'\nimport***REMOVED***type***REMOVED***{***REMOVED***DefaultRow,***REMOVED***Table,***REMOVED***TableProps,***REMOVED***TreeNode***REMOVED***}***REMOVED***from***REMOVED***'../table/defaults'\n\nexport***REMOVED***interface***REMOVED***TreeData***REMOVED***extends***REMOVED***TreeNode***REMOVED***{\n***REMOVED******REMOVED***children?:***REMOVED***string[]\n***REMOVED******REMOVED***lazy?:***REMOVED***boolean\n***REMOVED******REMOVED***loaded?:***REMOVED***boolean\n}\n\nfunction***REMOVED***useTree<T***REMOVED***extends***REMOVED***DefaultRow>(watcherData:***REMOVED***WatcherPropsData<T>)***REMOVED***{\n***REMOVED******REMOVED***const***REMOVED***expandRowKeys***REMOVED***=***REMOVED***ref<Array<string>>([])\n***REMOVED******REMOVED***const***REMOVED***treeData***REMOVED***=***REMOVED***ref<Record<string,***REMOVED***TreeData>>({})\n***REMOVED******REMOVED***const***REMOVED***indent***REMOVED***=***REMOVED***ref(16)\n***REMOVED******REMOVED***const***REMOVED***lazy***REMOVED***=***REMOVED***ref(false)\n***REMOVED******REMOVED***const***REMOVED***lazyTreeNodeMap***REMOVED***=***REMOVED***ref<Record<string,***REMOVED***T[]>>({})\n***REMOVED******REMOVED***const***REMOVED***lazyColumnIdentifier***REMOVED***=***REMOVED***ref('hasChildren')\n***REMOVED******REMOVED***const***REMOVED***childrenColumnName***REMOVED***=***REMOVED***ref('children')\n***REMOVED******REMOVED***const***REMOVED***checkStrictly***REMOVED***=***REMOVED***ref(false)\n***REMOVED******REMOVED***const***REMOVED***instance***REMOVED***=***REMOVED***getCurrentInstance()***REMOVED***as***REMOVED***Table<T>\n***REMOVED******REMOVED***const***REMOVED***normalizedData***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!watcherData.rowKey.value)***REMOVED***return***REMOVED***{}\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***watcherData.data.value***REMOVED***||***REMOVED***[]\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***normalize(data)\n***REMOVED******REMOVED***})\n***REMOVED******REMOVED***const***REMOVED***normalizedLazyNode***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(lazyTreeNodeMap.value)\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***res:***REMOVED***Record<string,***REMOVED***{***REMOVED***children:***REMOVED***string[]***REMOVED***}>***REMOVED***=***REMOVED***{}\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!keys.length)***REMOVED***return***REMOVED***res\n***REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lazyTreeNodeMap.value[key].length)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***item:***REMOVED***typeof***REMOVED***res[number]***REMOVED***=***REMOVED***{***REMOVED***children:***REMOVED***[]***REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap.value[key].forEach((row)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currentRowKey***REMOVED***=***REMOVED***getRowIdentity(row,***REMOVED***rowKey)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***item.children.push(currentRowKey)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(row[lazyColumnIdentifier.value]***REMOVED***&&***REMOVED***!res[currentRowKey])***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[currentRowKey]***REMOVED***=***REMOVED***{***REMOVED***children:***REMOVED***[]***REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[key]***REMOVED***=***REMOVED***item\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***})\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res\n***REMOVED******REMOVED***})\n\n***REMOVED******REMOVED***const***REMOVED***normalize***REMOVED***=***REMOVED***(data:***REMOVED***T[])***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***res***REMOVED***=***REMOVED***{}***REMOVED***as***REMOVED***Record<string,***REMOVED***TreeData>\n***REMOVED******REMOVED******REMOVED******REMOVED***walkTreeNode(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(parent,***REMOVED***children,***REMOVED***level)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parentId***REMOVED***=***REMOVED***getRowIdentity(parent,***REMOVED***rowKey)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isArray(children))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[parentId]***REMOVED***=***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***children:***REMOVED***children.map((row)***REMOVED***=>***REMOVED***getRowIdentity(row,***REMOVED***rowKey)),\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(lazy.value)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***当***REMOVED***children***REMOVED***不存在且***REMOVED***lazy***REMOVED***为***REMOVED***true，该节点即为懒加载的节点\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[parentId]***REMOVED***=***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***children:***REMOVED***[],\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy:***REMOVED***true,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***childrenColumnName.value,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyColumnIdentifier.value,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy.value\n***REMOVED******REMOVED******REMOVED******REMOVED***)\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***const***REMOVED***updateTreeData***REMOVED***=***REMOVED***(\n***REMOVED******REMOVED******REMOVED******REMOVED***ifChangeExpandRowKeys***REMOVED***=***REMOVED***false,\n***REMOVED******REMOVED******REMOVED******REMOVED***ifExpandAll?:***REMOVED***boolean\n***REMOVED******REMOVED***)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***ifExpandAll***REMOVED***||=***REMOVED***instance.store?.states.defaultExpandAll.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nested***REMOVED***=***REMOVED***normalizedData.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***normalizedLazyNode_***REMOVED***=***REMOVED***normalizedLazyNode.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(nested)\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***newTreeData:***REMOVED***Record<string,***REMOVED***TreeData>***REMOVED***=***REMOVED***{}\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(keys.length)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldTreeData***REMOVED***=***REMOVED***unref(treeData)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rootLazyRowKeys:***REMOVED***string[]***REMOVED***=***REMOVED***[]\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***getExpanded***REMOVED***=***REMOVED***(oldValue:***REMOVED***TreeData,***REMOVED***key:***REMOVED***string)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(ifChangeExpandRowKeys)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(expandRowKeys.value)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***ifExpandAll***REMOVED***||***REMOVED***expandRowKeys.value.includes(key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!(ifExpandAll***REMOVED***||***REMOVED***oldValue?.expanded)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***included***REMOVED***=\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ifExpandAll***REMOVED***||\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(expandRowKeys.value***REMOVED***&&***REMOVED***expandRowKeys.value.includes(key))\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!(oldValue?.expanded***REMOVED***||***REMOVED***included)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***合并***REMOVED***expanded***REMOVED***与***REMOVED***display，确保数据刷新后，状态不变\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldValue***REMOVED***=***REMOVED***oldTreeData[key]\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***newValue***REMOVED***=***REMOVED***{***REMOVED***...nested[key]***REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newValue.expanded***REMOVED***=***REMOVED***getExpanded(oldValue,***REMOVED***key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(newValue.lazy)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***loaded***REMOVED***=***REMOVED***false,***REMOVED***loading***REMOVED***=***REMOVED***false***REMOVED***}***REMOVED***=***REMOVED***oldValue***REMOVED***||***REMOVED***{}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newValue.loaded***REMOVED***=***REMOVED***!!loaded\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newValue.loading***REMOVED***=***REMOVED***!!loading\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rootLazyRowKeys.push(key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newTreeData[key]***REMOVED***=***REMOVED***newValue\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***根据懒加载数据更新***REMOVED***treeData\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lazyKeys***REMOVED***=***REMOVED***Object.keys(normalizedLazyNode_)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lazy.value***REMOVED***&&***REMOVED***lazyKeys.length***REMOVED***&&***REMOVED***rootLazyRowKeys.length)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyKeys.forEach((key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldValue***REMOVED***=***REMOVED***oldTreeData[key]\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lazyNodeChildren***REMOVED***=***REMOVED***normalizedLazyNode_[key].children\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(rootLazyRowKeys.includes(key))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***懒加载的***REMOVED***root***REMOVED***节点，更新一下原有的数据，原来的***REMOVED***children***REMOVED***一定是空数组\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(newTreeData[key].children?.length***REMOVED***!==***REMOVED***0)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('[ElTable]children***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***empty***REMOVED***array.')\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newTreeData[key].children***REMOVED***=***REMOVED***lazyNodeChildren\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***loaded***REMOVED***=***REMOVED***false,***REMOVED***loading***REMOVED***=***REMOVED***false***REMOVED***}***REMOVED***=***REMOVED***oldValue***REMOVED***||***REMOVED***{}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newTreeData[key]***REMOVED***=***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy:***REMOVED***true,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loaded:***REMOVED***!!loaded,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loading:***REMOVED***!!loading,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expanded:***REMOVED***getExpanded(oldValue,***REMOVED***key),\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***children:***REMOVED***lazyNodeChildren,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level:***REMOVED***undefined,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***treeData.value***REMOVED***=***REMOVED***newTreeData\n***REMOVED******REMOVED******REMOVED******REMOVED***instance.store?.updateTableScrollY()\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***watch(\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***expandRowKeys.value,\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData(true)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***)\n\n***REMOVED******REMOVED***watch(\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***normalizedData.value,\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData()\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***)\n***REMOVED******REMOVED***watch(\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***normalizedLazyNode.value,\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData()\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***)\n\n***REMOVED******REMOVED***const***REMOVED***updateTreeExpandKeys***REMOVED***=***REMOVED***(value:***REMOVED***string[])***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***expandRowKeys.value***REMOVED***=***REMOVED***value\n***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData()\n***REMOVED******REMOVED***}\n***REMOVED******REMOVED***const***REMOVED***isUseLazy***REMOVED***=***REMOVED***(data:***REMOVED***TreeData)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***lazy.value***REMOVED***&&***REMOVED***data***REMOVED***&&***REMOVED***'loaded'***REMOVED***in***REMOVED***data***REMOVED***&&***REMOVED***!data.loaded\n***REMOVED******REMOVED***}\n***REMOVED******REMOVED***const***REMOVED***toggleTreeExpansion***REMOVED***=***REMOVED***(row:***REMOVED***T,***REMOVED***expanded?:***REMOVED***boolean)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***instance.store.assertRowKey()\n\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***id***REMOVED***=***REMOVED***getRowIdentity(row,***REMOVED***rowKey)\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***id***REMOVED***&&***REMOVED***treeData.value[id]\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(id***REMOVED***&&***REMOVED***data***REMOVED***&&***REMOVED***'expanded'***REMOVED***in***REMOVED***data)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldExpanded***REMOVED***=***REMOVED***data.expanded\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expanded***REMOVED***=***REMOVED***isUndefined(expanded)***REMOVED***?***REMOVED***!data.expanded***REMOVED***:***REMOVED***expanded\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[id].expanded***REMOVED***=***REMOVED***expanded\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(oldExpanded***REMOVED***!==***REMOVED***expanded)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***instance.emit('expand-change',***REMOVED***row,***REMOVED***expanded)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isUseLazy(data)***REMOVED***&&***REMOVED***loadData(row,***REMOVED***id,***REMOVED***data)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***instance.store.updateTableScrollY()\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***const***REMOVED***loadOrToggle***REMOVED***=***REMOVED***(row:***REMOVED***T)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***instance.store.assertRowKey()\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***id***REMOVED***=***REMOVED***getRowIdentity(row,***REMOVED***rowKey)\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***treeData.value[id]\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isUseLazy(data))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loadData(row,***REMOVED***id,***REMOVED***data)\n***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***toggleTreeExpansion(row,***REMOVED***undefined)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***const***REMOVED***loadData***REMOVED***=***REMOVED***(row:***REMOVED***T,***REMOVED***key:***REMOVED***string,***REMOVED***treeNode:***REMOVED***TreeNode)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***load***REMOVED***}***REMOVED***=***REMOVED***instance.props***REMOVED***as***REMOVED***unknown***REMOVED***as***REMOVED***TableProps<T>\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(load***REMOVED***&&***REMOVED***!treeData.value[key].loaded)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].loading***REMOVED***=***REMOVED***true\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***load(row,***REMOVED***treeNode,***REMOVED***(data)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isArray(data))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('[ElTable]***REMOVED***data***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***array')\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].loading***REMOVED***=***REMOVED***false\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].loaded***REMOVED***=***REMOVED***true\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].expanded***REMOVED***=***REMOVED***true\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(data.length)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap.value[key]***REMOVED***=***REMOVED***data\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***instance.emit('expand-change',***REMOVED***row,***REMOVED***true)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***const***REMOVED***updateKeyChildren***REMOVED***=***REMOVED***(key:***REMOVED***string,***REMOVED***data:***REMOVED***T[])***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***lazy,***REMOVED***rowKey***REMOVED***}***REMOVED***=***REMOVED***instance.props***REMOVED***as***REMOVED***unknown***REMOVED***as***REMOVED***TableProps<T>\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lazy)***REMOVED***return\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!rowKey)***REMOVED***throw***REMOVED***new***REMOVED***Error('[Table]***REMOVED***rowKey***REMOVED***is***REMOVED***required***REMOVED***in***REMOVED***updateKeyChild')\n\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lazyTreeNodeMap.value[key])***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap.value[key]***REMOVED***=***REMOVED***data\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***return***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***loadData,\n***REMOVED******REMOVED******REMOVED******REMOVED***loadOrToggle,\n***REMOVED******REMOVED******REMOVED******REMOVED***toggleTreeExpansion,\n***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeExpandKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData,\n***REMOVED******REMOVED******REMOVED******REMOVED***updateKeyChildren,\n***REMOVED******REMOVED******REMOVED******REMOVED***normalize,\n***REMOVED******REMOVED******REMOVED******REMOVED***states:***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandRowKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***indent,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyColumnIdentifier,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***childrenColumnName,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkStrictly,\n***REMOVED******REMOVED******REMOVED******REMOVED***},\n***REMOVED******REMOVED***}\n}\n\nexport***REMOVED***default***REMOVED***useTree\n"],"names":["ref","getCurrentInstance","computed","getRowIdentity","walkTreeNode","isArray","unref","watch","isUndefined"],"mappings":"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"}