{"version":3,"file":"useTree.js","sources":["../../../../../../../packages/components/tree-v2/src/composables/useTree.ts"],"sourcesContent":["import***REMOVED***{***REMOVED***computed,***REMOVED***ref,***REMOVED***shallowRef,***REMOVED***watch***REMOVED***}***REMOVED***from***REMOVED***'vue'\nimport***REMOVED***{***REMOVED***isObject***REMOVED***}***REMOVED***from***REMOVED***'@element-plus/utils'\nimport***REMOVED***{\n***REMOVED******REMOVED***CURRENT_CHANGE,\n***REMOVED******REMOVED***NODE_CLICK,\n***REMOVED******REMOVED***NODE_COLLAPSE,\n***REMOVED******REMOVED***NODE_DROP,\n***REMOVED******REMOVED***NODE_EXPAND,\n***REMOVED******REMOVED***TreeOptionsEnum,\n}***REMOVED***from***REMOVED***'../virtual-tree'\nimport***REMOVED***{***REMOVED***useCheck***REMOVED***}***REMOVED***from***REMOVED***'./useCheck'\nimport***REMOVED***{***REMOVED***useFilter***REMOVED***}***REMOVED***from***REMOVED***'./useFilter'\n\nimport***REMOVED***type***REMOVED***{\n***REMOVED******REMOVED***FixedSizeList,\n***REMOVED******REMOVED***Alignment***REMOVED***as***REMOVED***ScrollStrategy,\n}***REMOVED***from***REMOVED***'@element-plus/components/virtual-list'\nimport***REMOVED***type***REMOVED***{***REMOVED***SetupContext***REMOVED***}***REMOVED***from***REMOVED***'vue'\nimport***REMOVED***type***REMOVED***{***REMOVED***treeEmits***REMOVED***}***REMOVED***from***REMOVED***'../virtual-tree'\nimport***REMOVED***type***REMOVED***{***REMOVED***CheckboxValueType***REMOVED***}***REMOVED***from***REMOVED***'@element-plus/components/checkbox'\nimport***REMOVED***type***REMOVED***{\n***REMOVED******REMOVED***Tree,\n***REMOVED******REMOVED***TreeData,\n***REMOVED******REMOVED***TreeKey,\n***REMOVED******REMOVED***TreeNode,\n***REMOVED******REMOVED***TreeNodeData,\n***REMOVED******REMOVED***TreeProps,\n}***REMOVED***from***REMOVED***'../types'\n\nexport***REMOVED***function***REMOVED***useTree(\n***REMOVED******REMOVED***props:***REMOVED***TreeProps,\n***REMOVED******REMOVED***emit:***REMOVED***SetupContext<typeof***REMOVED***treeEmits>['emit']\n)***REMOVED***{\n***REMOVED******REMOVED***const***REMOVED***expandedKeySet***REMOVED***=***REMOVED***ref<Set<TreeKey>>(new***REMOVED***Set())\n***REMOVED******REMOVED***const***REMOVED***currentKey***REMOVED***=***REMOVED***ref<TreeKey***REMOVED***|***REMOVED***undefined>()\n***REMOVED******REMOVED***const***REMOVED***tree***REMOVED***=***REMOVED***shallowRef<Tree***REMOVED***|***REMOVED***undefined>()\n***REMOVED******REMOVED***const***REMOVED***listRef***REMOVED***=***REMOVED***ref<typeof***REMOVED***FixedSizeList***REMOVED***|***REMOVED***undefined>()\n\n***REMOVED******REMOVED***const***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***isIndeterminate,\n***REMOVED******REMOVED******REMOVED******REMOVED***isChecked,\n***REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox,\n***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedNodes,\n***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedNodes,\n***REMOVED******REMOVED******REMOVED******REMOVED***setChecked,\n***REMOVED******REMOVED******REMOVED******REMOVED***setCheckedKeys,\n***REMOVED******REMOVED***}***REMOVED***=***REMOVED***useCheck(props,***REMOVED***tree)\n\n***REMOVED******REMOVED***const***REMOVED***{***REMOVED***doFilter,***REMOVED***hiddenNodeKeySet,***REMOVED***isForceHiddenExpandIcon***REMOVED***}***REMOVED***=***REMOVED***useFilter(\n***REMOVED******REMOVED******REMOVED******REMOVED***props,\n***REMOVED******REMOVED******REMOVED******REMOVED***tree\n***REMOVED******REMOVED***)\n\n***REMOVED******REMOVED***const***REMOVED***valueKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***props.props?.value***REMOVED***||***REMOVED***TreeOptionsEnum.KEY\n***REMOVED******REMOVED***})\n***REMOVED******REMOVED***const***REMOVED***childrenKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***props.props?.children***REMOVED***||***REMOVED***TreeOptionsEnum.CHILDREN\n***REMOVED******REMOVED***})\n***REMOVED******REMOVED***const***REMOVED***disabledKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***props.props?.disabled***REMOVED***||***REMOVED***TreeOptionsEnum.DISABLED\n***REMOVED******REMOVED***})\n***REMOVED******REMOVED***const***REMOVED***labelKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***props.props?.label***REMOVED***||***REMOVED***TreeOptionsEnum.LABEL\n***REMOVED******REMOVED***})\n\n***REMOVED******REMOVED***const***REMOVED***flattenTree***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedKeys***REMOVED***=***REMOVED***expandedKeySet.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***hiddenKeys***REMOVED***=***REMOVED***hiddenNodeKeySet.value\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***flattenNodes:***REMOVED***TreeNode[]***REMOVED***=***REMOVED***[]\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodes***REMOVED***=***REMOVED***tree.value?.treeNodes***REMOVED***||***REMOVED***[]\n\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stack:***REMOVED***TreeNode[]***REMOVED***=***REMOVED***[]\n***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***nodes.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***--i)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack.push(nodes[i])\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(stack.length)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***stack.pop()!\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hiddenKeys.has(node.key))***REMOVED***continue\n\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flattenNodes.push(node)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.children***REMOVED***&&***REMOVED***expandedKeys.has(node.key))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***node.children.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***--i)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack.push(node.children[i])\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***flattenNodes\n***REMOVED******REMOVED***})\n\n***REMOVED******REMOVED***const***REMOVED***isNotEmpty***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***flattenTree.value.length***REMOVED***>***REMOVED***0\n***REMOVED******REMOVED***})\n\n***REMOVED******REMOVED***function***REMOVED***createTree(data:***REMOVED***TreeData):***REMOVED***Tree***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***treeNodeMap:***REMOVED***Map<TreeKey,***REMOVED***TreeNode>***REMOVED***=***REMOVED***new***REMOVED***Map()\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***levelTreeNodeMap:***REMOVED***Map<number,***REMOVED***TreeNode[]>***REMOVED***=***REMOVED***new***REMOVED***Map()\n***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxLevel***REMOVED***=***REMOVED***1\n***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***traverse(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodes:***REMOVED***TreeData,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level***REMOVED***=***REMOVED***1,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parent:***REMOVED***TreeNode***REMOVED***|***REMOVED***undefined***REMOVED***=***REMOVED***undefined\n***REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***siblings:***REMOVED***TreeNode[]***REMOVED***=***REMOVED***[]\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***rawNode***REMOVED***of***REMOVED***nodes)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***getKey(rawNode)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node:***REMOVED***TreeNode***REMOVED***=***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***value,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***rawNode,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.label***REMOVED***=***REMOVED***getLabel(rawNode)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.parent***REMOVED***=***REMOVED***parent\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***children***REMOVED***=***REMOVED***getChildren(rawNode)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.disabled***REMOVED***=***REMOVED***getDisabled(rawNode)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.isLeaf***REMOVED***=***REMOVED***!children***REMOVED***||***REMOVED***children.length***REMOVED***===***REMOVED***0\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***expandedKeySet.value.has(value)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(children***REMOVED***&&***REMOVED***children.length)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.children***REMOVED***=***REMOVED***traverse(children,***REMOVED***level***REMOVED***+***REMOVED***1,***REMOVED***node)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***siblings.push(node)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNodeMap.set(value,***REMOVED***node)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!levelTreeNodeMap.has(level))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***levelTreeNodeMap.set(level,***REMOVED***[])\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***levelTreeNodeMap.get(level)?.push(node)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(level***REMOVED***>***REMOVED***maxLevel)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxLevel***REMOVED***=***REMOVED***level\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***siblings\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***treeNodes:***REMOVED***TreeNode[]***REMOVED***=***REMOVED***traverse(data)\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNodeMap,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***levelTreeNodeMap,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxLevel,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNodes,\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***filter(query:***REMOVED***string)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***doFilter(query)\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(keys)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value***REMOVED***=***REMOVED***keys\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getChildren(node:***REMOVED***TreeNodeData):***REMOVED***TreeNodeData[]***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[childrenKey.value]\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getKey(node:***REMOVED***TreeNodeData):***REMOVED***TreeKey***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***''\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[valueKey.value]\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getDisabled(node:***REMOVED***TreeNodeData):***REMOVED***boolean***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[disabledKey.value]\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getLabel(node:***REMOVED***TreeNodeData):***REMOVED***string***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[labelKey.value]\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***toggleExpand(node:***REMOVED***TreeNode)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedKeys***REMOVED***=***REMOVED***expandedKeySet.value\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(expandedKeys.has(node.key))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***collapseNode(node)\n***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandNode(node)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***setExpandedKeys(keys:***REMOVED***TreeKey[])***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedKeys***REMOVED***=***REMOVED***new***REMOVED***Set<TreeKey>()\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodeMap***REMOVED***=***REMOVED***tree.value!.treeNodeMap\n\n***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value.forEach((key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***nodeMap.get(key)!\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value.delete(node.key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***false\n***REMOVED******REMOVED******REMOVED******REMOVED***})\n\n***REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((k)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***node***REMOVED***=***REMOVED***nodeMap.get(k)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(node***REMOVED***&&***REMOVED***!expandedKeys.has(node.key))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeys.add(node.key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***true\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node***REMOVED***=***REMOVED***node.parent\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***})\n\n***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value***REMOVED***=***REMOVED***expandedKeys\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***handleNodeClick(node:***REMOVED***TreeNode,***REMOVED***e:***REMOVED***MouseEvent)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_CLICK,***REMOVED***node.data,***REMOVED***node,***REMOVED***e)\n***REMOVED******REMOVED******REMOVED******REMOVED***handleCurrentChange(node)\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(props.expandOnClickNode)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***toggleExpand(node)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***props.showCheckbox***REMOVED***&&\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(props.checkOnClickNode***REMOVED***||***REMOVED***(node.isLeaf***REMOVED***&&***REMOVED***props.checkOnClickLeaf))***REMOVED***&&\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!node.disabled\n***REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox(node,***REMOVED***!isChecked(node),***REMOVED***true)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***handleNodeDrop(node:***REMOVED***TreeNode,***REMOVED***e:***REMOVED***DragEvent)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_DROP,***REMOVED***node.data,***REMOVED***node,***REMOVED***e)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***handleCurrentChange(node:***REMOVED***TreeNode)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isCurrent(node))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentKey.value***REMOVED***=***REMOVED***node.key\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emit(CURRENT_CHANGE,***REMOVED***node.data,***REMOVED***node)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***handleNodeCheck(node:***REMOVED***TreeNode,***REMOVED***checked:***REMOVED***CheckboxValueType)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox(node,***REMOVED***checked)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***expandNode(node:***REMOVED***TreeNode)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keySet***REMOVED***=***REMOVED***expandedKeySet.value\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(tree.value***REMOVED***&&***REMOVED***props.accordion)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***whether***REMOVED***only***REMOVED***one***REMOVED***node***REMOVED***among***REMOVED***the***REMOVED***same***REMOVED***level***REMOVED***can***REMOVED***be***REMOVED***expanded***REMOVED***at***REMOVED***one***REMOVED***time\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***treeNodeMap***REMOVED***}***REMOVED***=***REMOVED***tree.value\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***keySet.forEach((key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***treeNode***REMOVED***=***REMOVED***treeNodeMap.get(key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node***REMOVED***&&***REMOVED***node.level***REMOVED***===***REMOVED***treeNode?.level)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***keySet.delete(key)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNode.expanded***REMOVED***=***REMOVED***false\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***keySet.add(node.key)\n***REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***true\n***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_EXPAND,***REMOVED***node.data,***REMOVED***node)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***collapseNode(node:***REMOVED***TreeNode)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value.delete(node.key)\n***REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***false\n***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_COLLAPSE,***REMOVED***node.data,***REMOVED***node)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***isDisabled(node:***REMOVED***TreeNode):***REMOVED***boolean***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!node.disabled\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***isCurrent(node:***REMOVED***TreeNode):***REMOVED***boolean***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***current***REMOVED***=***REMOVED***currentKey.value\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***current***REMOVED***!==***REMOVED***undefined***REMOVED***&&***REMOVED***current***REMOVED***===***REMOVED***node.key\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getCurrentNode():***REMOVED***TreeNodeData***REMOVED***|***REMOVED***undefined***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!currentKey.value)***REMOVED***return***REMOVED***undefined\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***tree.value?.treeNodeMap.get(currentKey.value)?.data\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getCurrentKey():***REMOVED***TreeKey***REMOVED***|***REMOVED***undefined***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***currentKey.value\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***setCurrentKey(key:***REMOVED***TreeKey):***REMOVED***void***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***currentKey.value***REMOVED***=***REMOVED***key\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***setData(data:***REMOVED***TreeData)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***tree.value***REMOVED***=***REMOVED***createTree(data)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***getNode(data:***REMOVED***TreeKey***REMOVED***|***REMOVED***TreeNodeData)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***isObject(data)***REMOVED***?***REMOVED***getKey(data)***REMOVED***:***REMOVED***data\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***tree.value?.treeNodeMap.get(key)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***scrollToNode(key:***REMOVED***TreeKey,***REMOVED***strategy:***REMOVED***ScrollStrategy***REMOVED***=***REMOVED***'auto')***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***getNode(key)\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node***REMOVED***&&***REMOVED***listRef.value)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listRef.value.scrollToItem(flattenTree.value.indexOf(node),***REMOVED***strategy)\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***function***REMOVED***scrollTo(offset:***REMOVED***number)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***listRef.value?.scrollTo(offset)\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***watch(\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***props.currentNodeKey,\n***REMOVED******REMOVED******REMOVED******REMOVED***(key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentKey.value***REMOVED***=***REMOVED***key\n***REMOVED******REMOVED******REMOVED******REMOVED***},\n***REMOVED******REMOVED******REMOVED******REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***immediate:***REMOVED***true,\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***)\n\n***REMOVED******REMOVED***watch(\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***props.defaultExpandedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***(key)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value***REMOVED***=***REMOVED***new***REMOVED***Set<TreeKey>(key)\n***REMOVED******REMOVED******REMOVED******REMOVED***},\n***REMOVED******REMOVED******REMOVED******REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***immediate:***REMOVED***true,\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***)\n\n***REMOVED******REMOVED***watch(\n***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***props.data,\n***REMOVED******REMOVED******REMOVED******REMOVED***(data:***REMOVED***TreeData)***REMOVED***=>***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setData(data)\n***REMOVED******REMOVED******REMOVED******REMOVED***},\n***REMOVED******REMOVED******REMOVED******REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***immediate:***REMOVED***true,\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***)\n\n***REMOVED******REMOVED***return***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***tree,\n***REMOVED******REMOVED******REMOVED******REMOVED***flattenTree,\n***REMOVED******REMOVED******REMOVED******REMOVED***isNotEmpty,\n***REMOVED******REMOVED******REMOVED******REMOVED***listRef,\n***REMOVED******REMOVED******REMOVED******REMOVED***getKey,\n***REMOVED******REMOVED******REMOVED******REMOVED***getChildren,\n***REMOVED******REMOVED******REMOVED******REMOVED***toggleExpand,\n***REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox,\n***REMOVED******REMOVED******REMOVED******REMOVED***isChecked,\n***REMOVED******REMOVED******REMOVED******REMOVED***isIndeterminate,\n***REMOVED******REMOVED******REMOVED******REMOVED***isDisabled,\n***REMOVED******REMOVED******REMOVED******REMOVED***isCurrent,\n***REMOVED******REMOVED******REMOVED******REMOVED***isForceHiddenExpandIcon,\n***REMOVED******REMOVED******REMOVED******REMOVED***handleNodeClick,\n***REMOVED******REMOVED******REMOVED******REMOVED***handleNodeDrop,\n***REMOVED******REMOVED******REMOVED******REMOVED***handleNodeCheck,\n***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***expose\n***REMOVED******REMOVED******REMOVED******REMOVED***getCurrentNode,\n***REMOVED******REMOVED******REMOVED******REMOVED***getCurrentKey,\n***REMOVED******REMOVED******REMOVED******REMOVED***setCurrentKey,\n***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedNodes,\n***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedNodes,\n***REMOVED******REMOVED******REMOVED******REMOVED***setChecked,\n***REMOVED******REMOVED******REMOVED******REMOVED***setCheckedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***filter,\n***REMOVED******REMOVED******REMOVED******REMOVED***setData,\n***REMOVED******REMOVED******REMOVED******REMOVED***getNode,\n***REMOVED******REMOVED******REMOVED******REMOVED***expandNode,\n***REMOVED******REMOVED******REMOVED******REMOVED***collapseNode,\n***REMOVED******REMOVED******REMOVED******REMOVED***setExpandedKeys,\n***REMOVED******REMOVED******REMOVED******REMOVED***scrollToNode,\n***REMOVED******REMOVED******REMOVED******REMOVED***scrollTo,\n***REMOVED******REMOVED***}\n}\n"],"names":["ref","shallowRef","useCheck","useFilter","computed","TreeOptionsEnum","NODE_CLICK","NODE_DROP","CURRENT_CHANGE","NODE_EXPAND","NODE_COLLAPSE","isObject","watch"],"mappings":"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"}