'use***REMOVED***strict';

Object.defineProperty(exports,***REMOVED***'__esModule',***REMOVED***{***REMOVED***value:***REMOVED***true***REMOVED***});

var***REMOVED***vue***REMOVED***=***REMOVED***require('vue');
var***REMOVED***lodashUnified***REMOVED***=***REMOVED***require('lodash-unified');
var***REMOVED***node***REMOVED***=***REMOVED***require('./node.js');
var***REMOVED***util***REMOVED***=***REMOVED***require('./util.js');
var***REMOVED***shared***REMOVED***=***REMOVED***require('@vue/shared');
var***REMOVED***types***REMOVED***=***REMOVED***require('../../../../utils/types.js');

class***REMOVED***TreeStore***REMOVED***{
***REMOVED******REMOVED***constructor(options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.lazy***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.checkStrictly***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.autoExpandParent***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.defaultExpandAll***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.checkDescendants***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.currentNode***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***this.currentNodeKey***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***option***REMOVED***in***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(shared.hasOwn(options,***REMOVED***option))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this[option]***REMOVED***=***REMOVED***options[option];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***this.nodesMap***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***initialize()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.root***REMOVED***=***REMOVED***new***REMOVED***node["default"]({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***this.data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***store:***REMOVED***this
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***this.root.initialize();
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.lazy***REMOVED***&&***REMOVED***this.load)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***loadFn***REMOVED***=***REMOVED***this.load;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loadFn(this.root,***REMOVED***(data)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.root.doCreateChildren(data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._initDefaultCheckedNodes();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***shared.NOOP);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._initDefaultCheckedNodes();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***filter(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***filterNodeMethod***REMOVED***=***REMOVED***this.filterNodeMethod;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lazy***REMOVED***=***REMOVED***this.lazy;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***traverse***REMOVED***=***REMOVED***async***REMOVED***function(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***childNodes***REMOVED***=***REMOVED***node.root***REMOVED***?***REMOVED***node.root.childNodes***REMOVED***:***REMOVED***node.childNodes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***[index,***REMOVED***child]***REMOVED***of***REMOVED***childNodes.entries())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***child.visible***REMOVED***=***REMOVED***!!(filterNodeMethod***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***filterNodeMethod.call(child,***REMOVED***value,***REMOVED***child.data,***REMOVED***child));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***%***REMOVED***80***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***index***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***vue.nextTick();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***traverse(child);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node.visible***REMOVED***&&***REMOVED***childNodes.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***allHidden***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***allHidden***REMOVED***=***REMOVED***!childNodes.some((child)***REMOVED***=>***REMOVED***child.visible);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.root)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.root.visible***REMOVED***=***REMOVED***allHidden***REMOVED***===***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.visible***REMOVED***=***REMOVED***allHidden***REMOVED***===***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!value)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.visible***REMOVED***&&***REMOVED***!node.isLeaf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lazy***REMOVED***||***REMOVED***node.loaded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expand();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***traverse(this);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setData(newVal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***instanceChanged***REMOVED***=***REMOVED***newVal***REMOVED***!==***REMOVED***this.root.data;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(instanceChanged)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.nodesMap***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.root.setData(newVal);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._initDefaultCheckedNodes();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.setCurrentNodeKey(this.currentNodeKey);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.root.updateChildren();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getNode(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(data***REMOVED***instanceof***REMOVED***node["default"])
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***shared.isObject(data)***REMOVED***?***REMOVED***util.getNodeKey(this.key,***REMOVED***data)***REMOVED***:***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.nodesMap[key]***REMOVED***||***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***insertBefore(data,***REMOVED***refData)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***refNode***REMOVED***=***REMOVED***this.getNode(refData);
***REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***refNode.parent)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.insertBefore({***REMOVED***data***REMOVED***},***REMOVED***refNode);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***insertAfter(data,***REMOVED***refData)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***refNode***REMOVED***=***REMOVED***this.getNode(refData);
***REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***refNode.parent)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.insertAfter({***REMOVED***data***REMOVED***},***REMOVED***refNode);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***remove(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***this.getNode(data);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node***REMOVED***&&***REMOVED***node.parent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node***REMOVED***===***REMOVED***this.currentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.currentNode***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.parent.removeChild(node);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***append(data,***REMOVED***parentData)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parentNode***REMOVED***=***REMOVED***!types.isPropAbsent(parentData)***REMOVED***?***REMOVED***this.getNode(parentData)***REMOVED***:***REMOVED***this.root;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parentNode.insertChild({***REMOVED***data***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***_initDefaultCheckedNodes()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***defaultCheckedKeys***REMOVED***=***REMOVED***this.defaultCheckedKeys***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodesMap***REMOVED***=***REMOVED***this.nodesMap;
***REMOVED******REMOVED******REMOVED******REMOVED***defaultCheckedKeys.forEach((checkedKey)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***nodesMap[checkedKey];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(true,***REMOVED***!this.checkStrictly);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***_initDefaultCheckedNode(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***defaultCheckedKeys***REMOVED***=***REMOVED***this.defaultCheckedKeys***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lodashUnified.isNil(node.key)***REMOVED***&&***REMOVED***defaultCheckedKeys.includes(node.key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(true,***REMOVED***!this.checkStrictly);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setDefaultCheckedKey(newVal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(newVal***REMOVED***!==***REMOVED***this.defaultCheckedKeys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.defaultCheckedKeys***REMOVED***=***REMOVED***newVal;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._initDefaultCheckedNodes();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***registerNode(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***this.key;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node***REMOVED***||***REMOVED***!node.data)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.nodesMap[node.id]***REMOVED***=***REMOVED***node;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodeKey***REMOVED***=***REMOVED***node.key;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lodashUnified.isNil(nodeKey))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.nodesMap[nodeKey]***REMOVED***=***REMOVED***node;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***deregisterNode(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***this.key;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!key***REMOVED***||***REMOVED***!node***REMOVED***||***REMOVED***!node.data)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***node.childNodes.forEach((child)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.deregisterNode(child);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***this.nodesMap[node.key];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getCheckedNodes(leafOnly***REMOVED***=***REMOVED***false,***REMOVED***includeHalfChecked***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***checkedNodes***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***traverse***REMOVED***=***REMOVED***function(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***childNodes***REMOVED***=***REMOVED***node.root***REMOVED***?***REMOVED***node.root.childNodes***REMOVED***:***REMOVED***node.childNodes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***childNodes.forEach((child)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((child.checked***REMOVED***||***REMOVED***includeHalfChecked***REMOVED***&&***REMOVED***child.indeterminate)***REMOVED***&&***REMOVED***(!leafOnly***REMOVED***||***REMOVED***leafOnly***REMOVED***&&***REMOVED***child.isLeaf))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkedNodes.push(child.data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***traverse(child);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***traverse(this);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***checkedNodes;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getCheckedKeys(leafOnly***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.getCheckedNodes(leafOnly).map((data)***REMOVED***=>***REMOVED***(data***REMOVED***||***REMOVED***{})[this.key]);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getHalfCheckedNodes()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodes***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***traverse***REMOVED***=***REMOVED***function(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***childNodes***REMOVED***=***REMOVED***node.root***REMOVED***?***REMOVED***node.root.childNodes***REMOVED***:***REMOVED***node.childNodes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***childNodes.forEach((child)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(child.indeterminate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodes.push(child.data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***traverse(child);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***traverse(this);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***nodes;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getHalfCheckedKeys()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.getHalfCheckedNodes().map((data)***REMOVED***=>***REMOVED***(data***REMOVED***||***REMOVED***{})[this.key]);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***_getAllNodes()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***allNodes***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodesMap***REMOVED***=***REMOVED***this.nodesMap;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***nodeKey***REMOVED***in***REMOVED***nodesMap)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(shared.hasOwn(nodesMap,***REMOVED***nodeKey))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***allNodes.push(nodesMap[nodeKey]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***allNodes;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***updateChildren(key,***REMOVED***data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***this.nodesMap[key];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***childNodes***REMOVED***=***REMOVED***node.childNodes;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***childNodes.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***child***REMOVED***=***REMOVED***childNodes[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.remove(child.data);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0,***REMOVED***j***REMOVED***=***REMOVED***data.length;***REMOVED***i***REMOVED***<***REMOVED***j;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***child***REMOVED***=***REMOVED***data[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.append(child,***REMOVED***node.data);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***_setCheckedKeys(key,***REMOVED***leafOnly***REMOVED***=***REMOVED***false,***REMOVED***checkedKeys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***allNodes***REMOVED***=***REMOVED***this._getAllNodes().sort((a,***REMOVED***b)***REMOVED***=>***REMOVED***a.level***REMOVED***-***REMOVED***b.level);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(checkedKeys);
***REMOVED******REMOVED******REMOVED******REMOVED***allNodes.forEach((node)***REMOVED***=>***REMOVED***node.setChecked(false,***REMOVED***false));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cacheCheckedChild***REMOVED***=***REMOVED***(node)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.childNodes.forEach((child)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache[child.data[key]]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((_a***REMOVED***=***REMOVED***child.childNodes)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cacheCheckedChild(child);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0,***REMOVED***j***REMOVED***=***REMOVED***allNodes.length;***REMOVED***i***REMOVED***<***REMOVED***j;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***allNodes[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodeKey***REMOVED***=***REMOVED***node.data[key].toString();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***checked***REMOVED***=***REMOVED***keys.includes(nodeKey);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!checked)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.checked***REMOVED***&&***REMOVED***!cache[nodeKey])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(false,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.childNodes.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cacheCheckedChild(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.isLeaf***REMOVED***||***REMOVED***this.checkStrictly)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(true,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(true,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(leafOnly)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(false,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***traverse***REMOVED***=***REMOVED***function(node2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***childNodes***REMOVED***=***REMOVED***node2.childNodes;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***childNodes.forEach((child)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!child.isLeaf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***child.setChecked(false,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***traverse(child);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***traverse(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setCheckedNodes(array,***REMOVED***leafOnly***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***this.key;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***checkedKeys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***array.forEach((item)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkedKeys[(item***REMOVED***||***REMOVED***{})[key]]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***this._setCheckedKeys(key,***REMOVED***leafOnly,***REMOVED***checkedKeys);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setCheckedKeys(keys,***REMOVED***leafOnly***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.defaultCheckedKeys***REMOVED***=***REMOVED***keys;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***this.key;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***checkedKeys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((key2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkedKeys[key2]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***this._setCheckedKeys(key,***REMOVED***leafOnly,***REMOVED***checkedKeys);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setDefaultExpandedKeys(keys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***keys***REMOVED***=***REMOVED***keys***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***this.defaultExpandedKeys***REMOVED***=***REMOVED***keys;
***REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***this.getNode(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expand(null,***REMOVED***this.autoExpandParent);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setChecked(data,***REMOVED***checked,***REMOVED***deep)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***this.getNode(data);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.setChecked(!!checked,***REMOVED***deep);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getCurrentNode()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.currentNode;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setCurrentNode(currentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prevCurrentNode***REMOVED***=***REMOVED***this.currentNode;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prevCurrentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prevCurrentNode.isCurrent***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***this.currentNode***REMOVED***=***REMOVED***currentNode;
***REMOVED******REMOVED******REMOVED******REMOVED***this.currentNode.isCurrent***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setUserCurrentNode(node,***REMOVED***shouldAutoExpandParent***REMOVED***=***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***node[this.key];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currNode***REMOVED***=***REMOVED***this.nodesMap[key];
***REMOVED******REMOVED******REMOVED******REMOVED***this.setCurrentNode(currNode);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(shouldAutoExpandParent***REMOVED***&&***REMOVED***this.currentNode***REMOVED***&&***REMOVED***this.currentNode.level***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***this.currentNode.parent)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.expand(null,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***setCurrentNodeKey(key,***REMOVED***shouldAutoExpandParent***REMOVED***=***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***this.currentNodeKey***REMOVED***=***REMOVED***key;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(types.isPropAbsent(key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.currentNode***REMOVED***&&***REMOVED***(this.currentNode.isCurrent***REMOVED***=***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.currentNode***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***this.getNode(key);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.setCurrentNode(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(shouldAutoExpandParent***REMOVED***&&***REMOVED***this.currentNode***REMOVED***&&***REMOVED***this.currentNode.level***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***this.currentNode.parent)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.expand(null,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

exports["default"]***REMOVED***=***REMOVED***TreeStore;
//#***REMOVED***sourceMappingURL=tree-store.js.map
