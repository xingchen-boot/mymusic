import***REMOVED***{***REMOVED***ref,***REMOVED***getCurrentInstance,***REMOVED***computed,***REMOVED***watch,***REMOVED***unref***REMOVED***}***REMOVED***from***REMOVED***'vue';
import***REMOVED***{***REMOVED***getRowIdentity,***REMOVED***walkTreeNode***REMOVED***}***REMOVED***from***REMOVED***'../util.mjs';
import***REMOVED***{***REMOVED***isArray***REMOVED***}***REMOVED***from***REMOVED***'@vue/shared';
import***REMOVED***{***REMOVED***isUndefined***REMOVED***}***REMOVED***from***REMOVED***'../../../../utils/types.mjs';

function***REMOVED***useTree(watcherData)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***expandRowKeys***REMOVED***=***REMOVED***ref([]);
***REMOVED******REMOVED***const***REMOVED***treeData***REMOVED***=***REMOVED***ref({});
***REMOVED******REMOVED***const***REMOVED***indent***REMOVED***=***REMOVED***ref(16);
***REMOVED******REMOVED***const***REMOVED***lazy***REMOVED***=***REMOVED***ref(false);
***REMOVED******REMOVED***const***REMOVED***lazyTreeNodeMap***REMOVED***=***REMOVED***ref({});
***REMOVED******REMOVED***const***REMOVED***lazyColumnIdentifier***REMOVED***=***REMOVED***ref("hasChildren");
***REMOVED******REMOVED***const***REMOVED***childrenColumnName***REMOVED***=***REMOVED***ref("children");
***REMOVED******REMOVED***const***REMOVED***checkStrictly***REMOVED***=***REMOVED***ref(false);
***REMOVED******REMOVED***const***REMOVED***instance***REMOVED***=***REMOVED***getCurrentInstance();
***REMOVED******REMOVED***const***REMOVED***normalizedData***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!watcherData.rowKey.value)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***watcherData.data.value***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***normalize(data);
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***normalizedLazyNode***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(lazyTreeNodeMap.value);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***res***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!keys.length)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res;
***REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lazyTreeNodeMap.value[key].length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***item***REMOVED***=***REMOVED***{***REMOVED***children:***REMOVED***[]***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap.value[key].forEach((row)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currentRowKey***REMOVED***=***REMOVED***getRowIdentity(row,***REMOVED***rowKey);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***item.children.push(currentRowKey);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(row[lazyColumnIdentifier.value]***REMOVED***&&***REMOVED***!res[currentRowKey])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[currentRowKey]***REMOVED***=***REMOVED***{***REMOVED***children:***REMOVED***[]***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[key]***REMOVED***=***REMOVED***item;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***normalize***REMOVED***=***REMOVED***(data)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***res***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***walkTreeNode(data,***REMOVED***(parent,***REMOVED***children,***REMOVED***level)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parentId***REMOVED***=***REMOVED***getRowIdentity(parent,***REMOVED***rowKey);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isArray(children))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[parentId]***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***children:***REMOVED***children.map((row)***REMOVED***=>***REMOVED***getRowIdentity(row,***REMOVED***rowKey)),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(lazy.value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res[parentId]***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***children:***REMOVED***[],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***childrenColumnName.value,***REMOVED***lazyColumnIdentifier.value,***REMOVED***lazy.value);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res;
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***updateTreeData***REMOVED***=***REMOVED***(ifChangeExpandRowKeys***REMOVED***=***REMOVED***false,***REMOVED***ifExpandAll)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a,***REMOVED***_b;
***REMOVED******REMOVED******REMOVED******REMOVED***ifExpandAll***REMOVED***||***REMOVED***(ifExpandAll***REMOVED***=***REMOVED***(_a***REMOVED***=***REMOVED***instance.store)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.states.defaultExpandAll.value);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nested***REMOVED***=***REMOVED***normalizedData.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***normalizedLazyNode_***REMOVED***=***REMOVED***normalizedLazyNode.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(nested);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***newTreeData***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(keys.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldTreeData***REMOVED***=***REMOVED***unref(treeData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rootLazyRowKeys***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***getExpanded***REMOVED***=***REMOVED***(oldValue,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(ifChangeExpandRowKeys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(expandRowKeys.value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***ifExpandAll***REMOVED***||***REMOVED***expandRowKeys.value.includes(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!(ifExpandAll***REMOVED***||***REMOVED***(oldValue***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***oldValue.expanded));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***included***REMOVED***=***REMOVED***ifExpandAll***REMOVED***||***REMOVED***expandRowKeys.value***REMOVED***&&***REMOVED***expandRowKeys.value.includes(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!((oldValue***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***oldValue.expanded)***REMOVED***||***REMOVED***included);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldValue***REMOVED***=***REMOVED***oldTreeData[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***newValue***REMOVED***=***REMOVED***{***REMOVED***...nested[key]***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newValue.expanded***REMOVED***=***REMOVED***getExpanded(oldValue,***REMOVED***key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(newValue.lazy)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***loaded***REMOVED***=***REMOVED***false,***REMOVED***loading***REMOVED***=***REMOVED***false***REMOVED***}***REMOVED***=***REMOVED***oldValue***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newValue.loaded***REMOVED***=***REMOVED***!!loaded;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newValue.loading***REMOVED***=***REMOVED***!!loading;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rootLazyRowKeys.push(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newTreeData[key]***REMOVED***=***REMOVED***newValue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lazyKeys***REMOVED***=***REMOVED***Object.keys(normalizedLazyNode_);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lazy.value***REMOVED***&&***REMOVED***lazyKeys.length***REMOVED***&&***REMOVED***rootLazyRowKeys.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyKeys.forEach((key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldValue***REMOVED***=***REMOVED***oldTreeData[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lazyNodeChildren***REMOVED***=***REMOVED***normalizedLazyNode_[key].children;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(rootLazyRowKeys.includes(key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(((_a2***REMOVED***=***REMOVED***newTreeData[key].children)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a2.length)***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("[ElTable]children***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***empty***REMOVED***array.");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newTreeData[key].children***REMOVED***=***REMOVED***lazyNodeChildren;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***loaded***REMOVED***=***REMOVED***false,***REMOVED***loading***REMOVED***=***REMOVED***false***REMOVED***}***REMOVED***=***REMOVED***oldValue***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newTreeData[key]***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loaded:***REMOVED***!!loaded,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loading:***REMOVED***!!loading,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expanded:***REMOVED***getExpanded(oldValue,***REMOVED***key),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***children:***REMOVED***lazyNodeChildren,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level:***REMOVED***void***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***treeData.value***REMOVED***=***REMOVED***newTreeData;
***REMOVED******REMOVED******REMOVED******REMOVED***(_b***REMOVED***=***REMOVED***instance.store)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_b.updateTableScrollY();
***REMOVED******REMOVED***};
***REMOVED******REMOVED***watch(()***REMOVED***=>***REMOVED***expandRowKeys.value,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData(true);
***REMOVED******REMOVED***});
***REMOVED******REMOVED***watch(()***REMOVED***=>***REMOVED***normalizedData.value,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData();
***REMOVED******REMOVED***});
***REMOVED******REMOVED***watch(()***REMOVED***=>***REMOVED***normalizedLazyNode.value,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData();
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***updateTreeExpandKeys***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***expandRowKeys.value***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData();
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***isUseLazy***REMOVED***=***REMOVED***(data)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***lazy.value***REMOVED***&&***REMOVED***data***REMOVED***&&***REMOVED***"loaded"***REMOVED***in***REMOVED***data***REMOVED***&&***REMOVED***!data.loaded;
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***toggleTreeExpansion***REMOVED***=***REMOVED***(row,***REMOVED***expanded)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***instance.store.assertRowKey();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***id***REMOVED***=***REMOVED***getRowIdentity(row,***REMOVED***rowKey);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***id***REMOVED***&&***REMOVED***treeData.value[id];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(id***REMOVED***&&***REMOVED***data***REMOVED***&&***REMOVED***"expanded"***REMOVED***in***REMOVED***data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***oldExpanded***REMOVED***=***REMOVED***data.expanded;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expanded***REMOVED***=***REMOVED***isUndefined(expanded)***REMOVED***?***REMOVED***!data.expanded***REMOVED***:***REMOVED***expanded;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[id].expanded***REMOVED***=***REMOVED***expanded;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(oldExpanded***REMOVED***!==***REMOVED***expanded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***instance.emit("expand-change",***REMOVED***row,***REMOVED***expanded);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isUseLazy(data)***REMOVED***&&***REMOVED***loadData(row,***REMOVED***id,***REMOVED***data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***instance.store.updateTableScrollY();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***loadOrToggle***REMOVED***=***REMOVED***(row)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***instance.store.assertRowKey();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rowKey***REMOVED***=***REMOVED***watcherData.rowKey.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***id***REMOVED***=***REMOVED***getRowIdentity(row,***REMOVED***rowKey);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***treeData.value[id];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isUseLazy(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loadData(row,***REMOVED***id,***REMOVED***data);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***toggleTreeExpansion(row,***REMOVED***void***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***loadData***REMOVED***=***REMOVED***(row,***REMOVED***key,***REMOVED***treeNode)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***load***REMOVED***}***REMOVED***=***REMOVED***instance.props;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(load***REMOVED***&&***REMOVED***!treeData.value[key].loaded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].loading***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***load(row,***REMOVED***treeNode,***REMOVED***(data)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isArray(data))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError("[ElTable]***REMOVED***data***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***array");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].loading***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].loaded***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData.value[key].expanded***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(data.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap.value[key]***REMOVED***=***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***instance.emit("expand-change",***REMOVED***row,***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***updateKeyChildren***REMOVED***=***REMOVED***(key,***REMOVED***data)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***lazy:***REMOVED***lazy2,***REMOVED***rowKey***REMOVED***}***REMOVED***=***REMOVED***instance.props;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lazy2)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!rowKey)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("[Table]***REMOVED***rowKey***REMOVED***is***REMOVED***required***REMOVED***in***REMOVED***updateKeyChild");
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lazyTreeNodeMap.value[key])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap.value[key]***REMOVED***=***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***loadData,
***REMOVED******REMOVED******REMOVED******REMOVED***loadOrToggle,
***REMOVED******REMOVED******REMOVED******REMOVED***toggleTreeExpansion,
***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeExpandKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***updateTreeData,
***REMOVED******REMOVED******REMOVED******REMOVED***updateKeyChildren,
***REMOVED******REMOVED******REMOVED******REMOVED***normalize,
***REMOVED******REMOVED******REMOVED******REMOVED***states:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandRowKeys,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeData,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***indent,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazy,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyTreeNodeMap,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lazyColumnIdentifier,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***childrenColumnName,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkStrictly
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}

export***REMOVED***{***REMOVED***useTree***REMOVED***as***REMOVED***default***REMOVED***};
//#***REMOVED***sourceMappingURL=tree.mjs.map
