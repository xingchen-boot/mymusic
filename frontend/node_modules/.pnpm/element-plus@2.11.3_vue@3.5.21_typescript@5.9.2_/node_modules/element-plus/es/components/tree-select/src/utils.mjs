import***REMOVED***{***REMOVED***isArray***REMOVED***}***REMOVED***from***REMOVED***'@vue/shared';

function***REMOVED***isValidValue(val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***val***REMOVED***||***REMOVED***val***REMOVED***===***REMOVED***0;
}
function***REMOVED***isValidArray(val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***isArray(val)***REMOVED***&&***REMOVED***val.length;
}
function***REMOVED***toValidArray(val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***isArray(val)***REMOVED***?***REMOVED***val***REMOVED***:***REMOVED***isValidValue(val)***REMOVED***?***REMOVED***[val]***REMOVED***:***REMOVED***[];
}
function***REMOVED***treeFind(treeData,***REMOVED***findCallback,***REMOVED***getChildren,***REMOVED***resultCallback,***REMOVED***parent)***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***treeData.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***treeData[i];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(findCallback(data,***REMOVED***i,***REMOVED***treeData,***REMOVED***parent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***resultCallback***REMOVED***?***REMOVED***resultCallback(data,***REMOVED***i,***REMOVED***treeData,***REMOVED***parent)***REMOVED***:***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***children***REMOVED***=***REMOVED***getChildren(data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isValidArray(children))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***find***REMOVED***=***REMOVED***treeFind(children,***REMOVED***findCallback,***REMOVED***getChildren,***REMOVED***resultCallback,***REMOVED***data);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(find)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***find;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}
function***REMOVED***treeEach(treeData,***REMOVED***callback,***REMOVED***getChildren,***REMOVED***parent)***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***treeData.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***data***REMOVED***=***REMOVED***treeData[i];
***REMOVED******REMOVED******REMOVED******REMOVED***callback(data,***REMOVED***i,***REMOVED***treeData,***REMOVED***parent);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***children***REMOVED***=***REMOVED***getChildren(data);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isValidArray(children))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeEach(children,***REMOVED***callback,***REMOVED***getChildren,***REMOVED***data);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

export***REMOVED***{***REMOVED***isValidArray,***REMOVED***isValidValue,***REMOVED***toValidArray,***REMOVED***treeEach,***REMOVED***treeFind***REMOVED***};
//#***REMOVED***sourceMappingURL=utils.mjs.map
