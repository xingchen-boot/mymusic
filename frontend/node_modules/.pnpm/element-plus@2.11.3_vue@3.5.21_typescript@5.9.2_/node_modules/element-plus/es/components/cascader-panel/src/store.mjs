import***REMOVED***{***REMOVED***isEqual***REMOVED***}***REMOVED***from***REMOVED***'lodash-unified';
import***REMOVED***Node***REMOVED***from***REMOVED***'./node.mjs';
import***REMOVED***{***REMOVED***isPropAbsent***REMOVED***}***REMOVED***from***REMOVED***'../../../utils/types.mjs';

const***REMOVED***flatNodes***REMOVED***=***REMOVED***(nodes,***REMOVED***leafOnly)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***nodes.reduce((res,***REMOVED***node)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.isLeaf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!leafOnly***REMOVED***&&***REMOVED***res.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res***REMOVED***=***REMOVED***res.concat(flatNodes(node.children,***REMOVED***leafOnly));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res;
***REMOVED******REMOVED***},***REMOVED***[]);
};
class***REMOVED***Store***REMOVED***{
***REMOVED******REMOVED***constructor(data,***REMOVED***config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.config***REMOVED***=***REMOVED***config;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodes***REMOVED***=***REMOVED***(data***REMOVED***||***REMOVED***[]).map((nodeData)***REMOVED***=>***REMOVED***new***REMOVED***Node(nodeData,***REMOVED***this.config));
***REMOVED******REMOVED******REMOVED******REMOVED***this.nodes***REMOVED***=***REMOVED***nodes;
***REMOVED******REMOVED******REMOVED******REMOVED***this.allNodes***REMOVED***=***REMOVED***flatNodes(nodes,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED***this.leafNodes***REMOVED***=***REMOVED***flatNodes(nodes,***REMOVED***true);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getNodes()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.nodes;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getFlattedNodes(leafOnly)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***leafOnly***REMOVED***?***REMOVED***this.leafNodes***REMOVED***:***REMOVED***this.allNodes;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***appendNode(nodeData,***REMOVED***parentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***parentNode***REMOVED***?***REMOVED***parentNode.appendChild(nodeData)***REMOVED***:***REMOVED***new***REMOVED***Node(nodeData,***REMOVED***this.config);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!parentNode)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.nodes.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED***this.appendAllNodesAndLeafNodes(node);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***appendNodes(nodeDataList,***REMOVED***parentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(nodeDataList.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodeDataList.forEach((nodeData)***REMOVED***=>***REMOVED***this.appendNode(nodeData,***REMOVED***parentNode));
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parentNode***REMOVED***&&***REMOVED***parentNode.isLeaf***REMOVED***&&***REMOVED***this.leafNodes.push(parentNode);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***appendAllNodesAndLeafNodes(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.allNodes.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED***node.isLeaf***REMOVED***&&***REMOVED***this.leafNodes.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.children)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.children.forEach((subNode)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.appendAllNodesAndLeafNodes(subNode);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getNodeByValue(value,***REMOVED***leafOnly***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isPropAbsent(value))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***this.getFlattedNodes(leafOnly).find((node2)***REMOVED***=>***REMOVED***isEqual(node2.value,***REMOVED***value)***REMOVED***||***REMOVED***isEqual(node2.pathValues,***REMOVED***value));
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node***REMOVED***||***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***getSameNode(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node_***REMOVED***=***REMOVED***this.getFlattedNodes(false).find(({***REMOVED***value,***REMOVED***level***REMOVED***})***REMOVED***=>***REMOVED***isEqual(node.value,***REMOVED***value)***REMOVED***&&***REMOVED***node.level***REMOVED***===***REMOVED***level);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node_***REMOVED***||***REMOVED***null;
***REMOVED******REMOVED***}
}

export***REMOVED***{***REMOVED***Store***REMOVED***as***REMOVED***default***REMOVED***};
//#***REMOVED***sourceMappingURL=store.mjs.map
