import***REMOVED***{***REMOVED***rectToClientRect,***REMOVED***arrow***REMOVED***as***REMOVED***arrow$1,***REMOVED***autoPlacement***REMOVED***as***REMOVED***autoPlacement$1,***REMOVED***detectOverflow***REMOVED***as***REMOVED***detectOverflow$1,***REMOVED***flip***REMOVED***as***REMOVED***flip$1,***REMOVED***hide***REMOVED***as***REMOVED***hide$1,***REMOVED***inline***REMOVED***as***REMOVED***inline$1,***REMOVED***limitShift***REMOVED***as***REMOVED***limitShift$1,***REMOVED***offset***REMOVED***as***REMOVED***offset$1,***REMOVED***shift***REMOVED***as***REMOVED***shift$1,***REMOVED***size***REMOVED***as***REMOVED***size$1,***REMOVED***computePosition***REMOVED***as***REMOVED***computePosition$1***REMOVED***}***REMOVED***from***REMOVED***'@floating-ui/core';
import***REMOVED***{***REMOVED***round,***REMOVED***createCoords,***REMOVED***max,***REMOVED***min,***REMOVED***floor***REMOVED***}***REMOVED***from***REMOVED***'@floating-ui/utils';
import***REMOVED***{***REMOVED***getComputedStyle***REMOVED***as***REMOVED***getComputedStyle$1,***REMOVED***isHTMLElement,***REMOVED***isElement,***REMOVED***getWindow,***REMOVED***isWebKit,***REMOVED***getFrameElement,***REMOVED***getNodeScroll,***REMOVED***getDocumentElement,***REMOVED***isTopLayer,***REMOVED***getNodeName,***REMOVED***isOverflowElement,***REMOVED***getOverflowAncestors,***REMOVED***getParentNode,***REMOVED***isLastTraversableNode,***REMOVED***isContainingBlock,***REMOVED***isTableElement,***REMOVED***getContainingBlock***REMOVED***}***REMOVED***from***REMOVED***'@floating-ui/utils/dom';
export***REMOVED***{***REMOVED***getOverflowAncestors***REMOVED***}***REMOVED***from***REMOVED***'@floating-ui/utils/dom';

function***REMOVED***getCssDimensions(element)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***css***REMOVED***=***REMOVED***getComputedStyle$1(element);
***REMOVED******REMOVED***//***REMOVED***In***REMOVED***testing***REMOVED***environments,***REMOVED***the***REMOVED***`width`***REMOVED***and***REMOVED***`height`***REMOVED***properties***REMOVED***are***REMOVED***empty
***REMOVED******REMOVED***//***REMOVED***strings***REMOVED***for***REMOVED***SVG***REMOVED***elements,***REMOVED***returning***REMOVED***NaN.***REMOVED***Fallback***REMOVED***to***REMOVED***`0`***REMOVED***in***REMOVED***this***REMOVED***case.
***REMOVED******REMOVED***let***REMOVED***width***REMOVED***=***REMOVED***parseFloat(css.width)***REMOVED***||***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***height***REMOVED***=***REMOVED***parseFloat(css.height)***REMOVED***||***REMOVED***0;
***REMOVED******REMOVED***const***REMOVED***hasOffset***REMOVED***=***REMOVED***isHTMLElement(element);
***REMOVED******REMOVED***const***REMOVED***offsetWidth***REMOVED***=***REMOVED***hasOffset***REMOVED***?***REMOVED***element.offsetWidth***REMOVED***:***REMOVED***width;
***REMOVED******REMOVED***const***REMOVED***offsetHeight***REMOVED***=***REMOVED***hasOffset***REMOVED***?***REMOVED***element.offsetHeight***REMOVED***:***REMOVED***height;
***REMOVED******REMOVED***const***REMOVED***shouldFallback***REMOVED***=***REMOVED***round(width)***REMOVED***!==***REMOVED***offsetWidth***REMOVED***||***REMOVED***round(height)***REMOVED***!==***REMOVED***offsetHeight;
***REMOVED******REMOVED***if***REMOVED***(shouldFallback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width***REMOVED***=***REMOVED***offsetWidth;
***REMOVED******REMOVED******REMOVED******REMOVED***height***REMOVED***=***REMOVED***offsetHeight;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height,
***REMOVED******REMOVED******REMOVED******REMOVED***$:***REMOVED***shouldFallback
***REMOVED******REMOVED***};
}

function***REMOVED***unwrapElement(element)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***!isElement(element)***REMOVED***?***REMOVED***element.contextElement***REMOVED***:***REMOVED***element;
}

function***REMOVED***getScale(element)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***domElement***REMOVED***=***REMOVED***unwrapElement(element);
***REMOVED******REMOVED***if***REMOVED***(!isHTMLElement(domElement))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***createCoords(1);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***rect***REMOVED***=***REMOVED***domElement.getBoundingClientRect();
***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height,
***REMOVED******REMOVED******REMOVED******REMOVED***$
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***getCssDimensions(domElement);
***REMOVED******REMOVED***let***REMOVED***x***REMOVED***=***REMOVED***($***REMOVED***?***REMOVED***round(rect.width)***REMOVED***:***REMOVED***rect.width)***REMOVED***/***REMOVED***width;
***REMOVED******REMOVED***let***REMOVED***y***REMOVED***=***REMOVED***($***REMOVED***?***REMOVED***round(rect.height)***REMOVED***:***REMOVED***rect.height)***REMOVED***/***REMOVED***height;

***REMOVED******REMOVED***//***REMOVED***0,***REMOVED***NaN,***REMOVED***or***REMOVED***Infinity***REMOVED***should***REMOVED***always***REMOVED***fallback***REMOVED***to***REMOVED***1.

***REMOVED******REMOVED***if***REMOVED***(!x***REMOVED***||***REMOVED***!Number.isFinite(x))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***x***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!y***REMOVED***||***REMOVED***!Number.isFinite(y))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***y***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y
***REMOVED******REMOVED***};
}

const***REMOVED***noOffsets***REMOVED***=***REMOVED***/*#__PURE__*/createCoords(0);
function***REMOVED***getVisualOffsets(element)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***win***REMOVED***=***REMOVED***getWindow(element);
***REMOVED******REMOVED***if***REMOVED***(!isWebKit()***REMOVED***||***REMOVED***!win.visualViewport)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***noOffsets;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***x:***REMOVED***win.visualViewport.offsetLeft,
***REMOVED******REMOVED******REMOVED******REMOVED***y:***REMOVED***win.visualViewport.offsetTop
***REMOVED******REMOVED***};
}
function***REMOVED***shouldAddVisualOffsets(element,***REMOVED***isFixed,***REMOVED***floatingOffsetParent)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isFixed***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***isFixed***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!floatingOffsetParent***REMOVED***||***REMOVED***isFixed***REMOVED***&&***REMOVED***floatingOffsetParent***REMOVED***!==***REMOVED***getWindow(element))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***isFixed;
}

function***REMOVED***getBoundingClientRect(element,***REMOVED***includeScale,***REMOVED***isFixedStrategy,***REMOVED***offsetParent)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(includeScale***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***includeScale***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isFixedStrategy***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***isFixedStrategy***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***clientRect***REMOVED***=***REMOVED***element.getBoundingClientRect();
***REMOVED******REMOVED***const***REMOVED***domElement***REMOVED***=***REMOVED***unwrapElement(element);
***REMOVED******REMOVED***let***REMOVED***scale***REMOVED***=***REMOVED***createCoords(1);
***REMOVED******REMOVED***if***REMOVED***(includeScale)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(offsetParent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isElement(offsetParent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scale***REMOVED***=***REMOVED***getScale(offsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scale***REMOVED***=***REMOVED***getScale(element);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***visualOffsets***REMOVED***=***REMOVED***shouldAddVisualOffsets(domElement,***REMOVED***isFixedStrategy,***REMOVED***offsetParent)***REMOVED***?***REMOVED***getVisualOffsets(domElement)***REMOVED***:***REMOVED***createCoords(0);
***REMOVED******REMOVED***let***REMOVED***x***REMOVED***=***REMOVED***(clientRect.left***REMOVED***+***REMOVED***visualOffsets.x)***REMOVED***/***REMOVED***scale.x;
***REMOVED******REMOVED***let***REMOVED***y***REMOVED***=***REMOVED***(clientRect.top***REMOVED***+***REMOVED***visualOffsets.y)***REMOVED***/***REMOVED***scale.y;
***REMOVED******REMOVED***let***REMOVED***width***REMOVED***=***REMOVED***clientRect.width***REMOVED***/***REMOVED***scale.x;
***REMOVED******REMOVED***let***REMOVED***height***REMOVED***=***REMOVED***clientRect.height***REMOVED***/***REMOVED***scale.y;
***REMOVED******REMOVED***if***REMOVED***(domElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***win***REMOVED***=***REMOVED***getWindow(domElement);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***offsetWin***REMOVED***=***REMOVED***offsetParent***REMOVED***&&***REMOVED***isElement(offsetParent)***REMOVED***?***REMOVED***getWindow(offsetParent)***REMOVED***:***REMOVED***offsetParent;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***currentWin***REMOVED***=***REMOVED***win;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***currentIFrame***REMOVED***=***REMOVED***getFrameElement(currentWin);
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(currentIFrame***REMOVED***&&***REMOVED***offsetParent***REMOVED***&&***REMOVED***offsetWin***REMOVED***!==***REMOVED***currentWin)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***iframeScale***REMOVED***=***REMOVED***getScale(currentIFrame);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***iframeRect***REMOVED***=***REMOVED***currentIFrame.getBoundingClientRect();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***css***REMOVED***=***REMOVED***getComputedStyle$1(currentIFrame);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***left***REMOVED***=***REMOVED***iframeRect.left***REMOVED***+***REMOVED***(currentIFrame.clientLeft***REMOVED***+***REMOVED***parseFloat(css.paddingLeft))***REMOVED*******REMOVED***iframeScale.x;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***top***REMOVED***=***REMOVED***iframeRect.top***REMOVED***+***REMOVED***(currentIFrame.clientTop***REMOVED***+***REMOVED***parseFloat(css.paddingTop))***REMOVED*******REMOVED***iframeScale.y;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***x***REMOVED****=***REMOVED***iframeScale.x;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***y***REMOVED****=***REMOVED***iframeScale.y;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***width***REMOVED****=***REMOVED***iframeScale.x;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***height***REMOVED****=***REMOVED***iframeScale.y;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***x***REMOVED***+=***REMOVED***left;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***y***REMOVED***+=***REMOVED***top;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentWin***REMOVED***=***REMOVED***getWindow(currentIFrame);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentIFrame***REMOVED***=***REMOVED***getFrameElement(currentWin);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***rectToClientRect({
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height,
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y
***REMOVED******REMOVED***});
}

//***REMOVED***If***REMOVED***<html>***REMOVED***has***REMOVED***a***REMOVED***CSS***REMOVED***width***REMOVED***greater***REMOVED***than***REMOVED***the***REMOVED***viewport,***REMOVED***then***REMOVED***this***REMOVED***will***REMOVED***be
//***REMOVED***incorrect***REMOVED***for***REMOVED***RTL.
function***REMOVED***getWindowScrollBarX(element,***REMOVED***rect)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***leftScroll***REMOVED***=***REMOVED***getNodeScroll(element).scrollLeft;
***REMOVED******REMOVED***if***REMOVED***(!rect)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***getBoundingClientRect(getDocumentElement(element)).left***REMOVED***+***REMOVED***leftScroll;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***rect.left***REMOVED***+***REMOVED***leftScroll;
}

function***REMOVED***getHTMLOffset(documentElement,***REMOVED***scroll)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***htmlRect***REMOVED***=***REMOVED***documentElement.getBoundingClientRect();
***REMOVED******REMOVED***const***REMOVED***x***REMOVED***=***REMOVED***htmlRect.left***REMOVED***+***REMOVED***scroll.scrollLeft***REMOVED***-***REMOVED***getWindowScrollBarX(documentElement,***REMOVED***htmlRect);
***REMOVED******REMOVED***const***REMOVED***y***REMOVED***=***REMOVED***htmlRect.top***REMOVED***+***REMOVED***scroll.scrollTop;
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y
***REMOVED******REMOVED***};
}

function***REMOVED***convertOffsetParentRelativeRectToViewportRelativeRect(_ref)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***elements,
***REMOVED******REMOVED******REMOVED******REMOVED***rect,
***REMOVED******REMOVED******REMOVED******REMOVED***offsetParent,
***REMOVED******REMOVED******REMOVED******REMOVED***strategy
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***_ref;
***REMOVED******REMOVED***const***REMOVED***isFixed***REMOVED***=***REMOVED***strategy***REMOVED***===***REMOVED***'fixed';
***REMOVED******REMOVED***const***REMOVED***documentElement***REMOVED***=***REMOVED***getDocumentElement(offsetParent);
***REMOVED******REMOVED***const***REMOVED***topLayer***REMOVED***=***REMOVED***elements***REMOVED***?***REMOVED***isTopLayer(elements.floating)***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(offsetParent***REMOVED***===***REMOVED***documentElement***REMOVED***||***REMOVED***topLayer***REMOVED***&&***REMOVED***isFixed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***rect;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***scroll***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***scrollLeft:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***scrollTop:***REMOVED***0
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***scale***REMOVED***=***REMOVED***createCoords(1);
***REMOVED******REMOVED***const***REMOVED***offsets***REMOVED***=***REMOVED***createCoords(0);
***REMOVED******REMOVED***const***REMOVED***isOffsetParentAnElement***REMOVED***=***REMOVED***isHTMLElement(offsetParent);
***REMOVED******REMOVED***if***REMOVED***(isOffsetParentAnElement***REMOVED***||***REMOVED***!isOffsetParentAnElement***REMOVED***&&***REMOVED***!isFixed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(getNodeName(offsetParent)***REMOVED***!==***REMOVED***'body'***REMOVED***||***REMOVED***isOverflowElement(documentElement))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scroll***REMOVED***=***REMOVED***getNodeScroll(offsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isHTMLElement(offsetParent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***offsetRect***REMOVED***=***REMOVED***getBoundingClientRect(offsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scale***REMOVED***=***REMOVED***getScale(offsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offsets.x***REMOVED***=***REMOVED***offsetRect.x***REMOVED***+***REMOVED***offsetParent.clientLeft;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offsets.y***REMOVED***=***REMOVED***offsetRect.y***REMOVED***+***REMOVED***offsetParent.clientTop;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***htmlOffset***REMOVED***=***REMOVED***documentElement***REMOVED***&&***REMOVED***!isOffsetParentAnElement***REMOVED***&&***REMOVED***!isFixed***REMOVED***?***REMOVED***getHTMLOffset(documentElement,***REMOVED***scroll)***REMOVED***:***REMOVED***createCoords(0);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width:***REMOVED***rect.width***REMOVED*******REMOVED***scale.x,
***REMOVED******REMOVED******REMOVED******REMOVED***height:***REMOVED***rect.height***REMOVED*******REMOVED***scale.y,
***REMOVED******REMOVED******REMOVED******REMOVED***x:***REMOVED***rect.x***REMOVED*******REMOVED***scale.x***REMOVED***-***REMOVED***scroll.scrollLeft***REMOVED*******REMOVED***scale.x***REMOVED***+***REMOVED***offsets.x***REMOVED***+***REMOVED***htmlOffset.x,
***REMOVED******REMOVED******REMOVED******REMOVED***y:***REMOVED***rect.y***REMOVED*******REMOVED***scale.y***REMOVED***-***REMOVED***scroll.scrollTop***REMOVED*******REMOVED***scale.y***REMOVED***+***REMOVED***offsets.y***REMOVED***+***REMOVED***htmlOffset.y
***REMOVED******REMOVED***};
}

function***REMOVED***getClientRects(element)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***Array.from(element.getClientRects());
}

//***REMOVED***Gets***REMOVED***the***REMOVED***entire***REMOVED***size***REMOVED***of***REMOVED***the***REMOVED***scrollable***REMOVED***document***REMOVED***area,***REMOVED***even***REMOVED***extending***REMOVED***outside
//***REMOVED***of***REMOVED***the***REMOVED***`<html>`***REMOVED***and***REMOVED***`<body>`***REMOVED***rect***REMOVED***bounds***REMOVED***if***REMOVED***horizontally***REMOVED***scrollable.
function***REMOVED***getDocumentRect(element)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***html***REMOVED***=***REMOVED***getDocumentElement(element);
***REMOVED******REMOVED***const***REMOVED***scroll***REMOVED***=***REMOVED***getNodeScroll(element);
***REMOVED******REMOVED***const***REMOVED***body***REMOVED***=***REMOVED***element.ownerDocument.body;
***REMOVED******REMOVED***const***REMOVED***width***REMOVED***=***REMOVED***max(html.scrollWidth,***REMOVED***html.clientWidth,***REMOVED***body.scrollWidth,***REMOVED***body.clientWidth);
***REMOVED******REMOVED***const***REMOVED***height***REMOVED***=***REMOVED***max(html.scrollHeight,***REMOVED***html.clientHeight,***REMOVED***body.scrollHeight,***REMOVED***body.clientHeight);
***REMOVED******REMOVED***let***REMOVED***x***REMOVED***=***REMOVED***-scroll.scrollLeft***REMOVED***+***REMOVED***getWindowScrollBarX(element);
***REMOVED******REMOVED***const***REMOVED***y***REMOVED***=***REMOVED***-scroll.scrollTop;
***REMOVED******REMOVED***if***REMOVED***(getComputedStyle$1(body).direction***REMOVED***===***REMOVED***'rtl')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***x***REMOVED***+=***REMOVED***max(html.clientWidth,***REMOVED***body.clientWidth)***REMOVED***-***REMOVED***width;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height,
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y
***REMOVED******REMOVED***};
}

//***REMOVED***Safety***REMOVED***check:***REMOVED***ensure***REMOVED***the***REMOVED***scrollbar***REMOVED***space***REMOVED***is***REMOVED***reasonable***REMOVED***in***REMOVED***case***REMOVED***this
//***REMOVED***calculation***REMOVED***is***REMOVED***affected***REMOVED***by***REMOVED***unusual***REMOVED***styles.
//***REMOVED***Most***REMOVED***scrollbars***REMOVED***leave***REMOVED***15-18px***REMOVED***of***REMOVED***space.
const***REMOVED***SCROLLBAR_MAX***REMOVED***=***REMOVED***25;
function***REMOVED***getViewportRect(element,***REMOVED***strategy)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***win***REMOVED***=***REMOVED***getWindow(element);
***REMOVED******REMOVED***const***REMOVED***html***REMOVED***=***REMOVED***getDocumentElement(element);
***REMOVED******REMOVED***const***REMOVED***visualViewport***REMOVED***=***REMOVED***win.visualViewport;
***REMOVED******REMOVED***let***REMOVED***width***REMOVED***=***REMOVED***html.clientWidth;
***REMOVED******REMOVED***let***REMOVED***height***REMOVED***=***REMOVED***html.clientHeight;
***REMOVED******REMOVED***let***REMOVED***x***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***y***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***if***REMOVED***(visualViewport)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width***REMOVED***=***REMOVED***visualViewport.width;
***REMOVED******REMOVED******REMOVED******REMOVED***height***REMOVED***=***REMOVED***visualViewport.height;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***visualViewportBased***REMOVED***=***REMOVED***isWebKit();
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!visualViewportBased***REMOVED***||***REMOVED***visualViewportBased***REMOVED***&&***REMOVED***strategy***REMOVED***===***REMOVED***'fixed')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***x***REMOVED***=***REMOVED***visualViewport.offsetLeft;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***y***REMOVED***=***REMOVED***visualViewport.offsetTop;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***windowScrollbarX***REMOVED***=***REMOVED***getWindowScrollBarX(html);
***REMOVED******REMOVED***//***REMOVED***<html>***REMOVED***`overflow:***REMOVED***hidden`***REMOVED***+***REMOVED***`scrollbar-gutter:***REMOVED***stable`***REMOVED***reduces***REMOVED***the
***REMOVED******REMOVED***//***REMOVED***visual***REMOVED***width***REMOVED***of***REMOVED***the***REMOVED***<html>***REMOVED***but***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***considered***REMOVED***in***REMOVED***the***REMOVED***size
***REMOVED******REMOVED***//***REMOVED***of***REMOVED***`html.clientWidth`.
***REMOVED******REMOVED***if***REMOVED***(windowScrollbarX***REMOVED***<=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***doc***REMOVED***=***REMOVED***html.ownerDocument;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***body***REMOVED***=***REMOVED***doc.body;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***bodyStyles***REMOVED***=***REMOVED***getComputedStyle(body);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***bodyMarginInline***REMOVED***=***REMOVED***doc.compatMode***REMOVED***===***REMOVED***'CSS1Compat'***REMOVED***?***REMOVED***parseFloat(bodyStyles.marginLeft)***REMOVED***+***REMOVED***parseFloat(bodyStyles.marginRight)***REMOVED***||***REMOVED***0***REMOVED***:***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***clippingStableScrollbarWidth***REMOVED***=***REMOVED***Math.abs(html.clientWidth***REMOVED***-***REMOVED***body.clientWidth***REMOVED***-***REMOVED***bodyMarginInline);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(clippingStableScrollbarWidth***REMOVED***<=***REMOVED***SCROLLBAR_MAX)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***width***REMOVED***-=***REMOVED***clippingStableScrollbarWidth;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(windowScrollbarX***REMOVED***<=***REMOVED***SCROLLBAR_MAX)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***<body>***REMOVED***scrollbar***REMOVED***is***REMOVED***on***REMOVED***the***REMOVED***left,***REMOVED***the***REMOVED***width***REMOVED***needs***REMOVED***to***REMOVED***be***REMOVED***extended
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***by***REMOVED***the***REMOVED***scrollbar***REMOVED***amount***REMOVED***so***REMOVED***there***REMOVED***isn't***REMOVED***extra***REMOVED***space***REMOVED***on***REMOVED***the***REMOVED***right.
***REMOVED******REMOVED******REMOVED******REMOVED***width***REMOVED***+=***REMOVED***windowScrollbarX;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height,
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y
***REMOVED******REMOVED***};
}

const***REMOVED***absoluteOrFixed***REMOVED***=***REMOVED***/*#__PURE__*/new***REMOVED***Set(['absolute',***REMOVED***'fixed']);
//***REMOVED***Returns***REMOVED***the***REMOVED***inner***REMOVED***client***REMOVED***rect,***REMOVED***subtracting***REMOVED***scrollbars***REMOVED***if***REMOVED***present.
function***REMOVED***getInnerBoundingClientRect(element,***REMOVED***strategy)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***clientRect***REMOVED***=***REMOVED***getBoundingClientRect(element,***REMOVED***true,***REMOVED***strategy***REMOVED***===***REMOVED***'fixed');
***REMOVED******REMOVED***const***REMOVED***top***REMOVED***=***REMOVED***clientRect.top***REMOVED***+***REMOVED***element.clientTop;
***REMOVED******REMOVED***const***REMOVED***left***REMOVED***=***REMOVED***clientRect.left***REMOVED***+***REMOVED***element.clientLeft;
***REMOVED******REMOVED***const***REMOVED***scale***REMOVED***=***REMOVED***isHTMLElement(element)***REMOVED***?***REMOVED***getScale(element)***REMOVED***:***REMOVED***createCoords(1);
***REMOVED******REMOVED***const***REMOVED***width***REMOVED***=***REMOVED***element.clientWidth***REMOVED*******REMOVED***scale.x;
***REMOVED******REMOVED***const***REMOVED***height***REMOVED***=***REMOVED***element.clientHeight***REMOVED*******REMOVED***scale.y;
***REMOVED******REMOVED***const***REMOVED***x***REMOVED***=***REMOVED***left***REMOVED*******REMOVED***scale.x;
***REMOVED******REMOVED***const***REMOVED***y***REMOVED***=***REMOVED***top***REMOVED*******REMOVED***scale.y;
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height,
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y
***REMOVED******REMOVED***};
}
function***REMOVED***getClientRectFromClippingAncestor(element,***REMOVED***clippingAncestor,***REMOVED***strategy)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***rect;
***REMOVED******REMOVED***if***REMOVED***(clippingAncestor***REMOVED***===***REMOVED***'viewport')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***rect***REMOVED***=***REMOVED***getViewportRect(element,***REMOVED***strategy);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(clippingAncestor***REMOVED***===***REMOVED***'document')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***rect***REMOVED***=***REMOVED***getDocumentRect(getDocumentElement(element));
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(isElement(clippingAncestor))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***rect***REMOVED***=***REMOVED***getInnerBoundingClientRect(clippingAncestor,***REMOVED***strategy);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***visualOffsets***REMOVED***=***REMOVED***getVisualOffsets(element);
***REMOVED******REMOVED******REMOVED******REMOVED***rect***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***x:***REMOVED***clippingAncestor.x***REMOVED***-***REMOVED***visualOffsets.x,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***y:***REMOVED***clippingAncestor.y***REMOVED***-***REMOVED***visualOffsets.y,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***width:***REMOVED***clippingAncestor.width,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***height:***REMOVED***clippingAncestor.height
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***rectToClientRect(rect);
}
function***REMOVED***hasFixedPositionAncestor(element,***REMOVED***stopNode)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***parentNode***REMOVED***=***REMOVED***getParentNode(element);
***REMOVED******REMOVED***if***REMOVED***(parentNode***REMOVED***===***REMOVED***stopNode***REMOVED***||***REMOVED***!isElement(parentNode)***REMOVED***||***REMOVED***isLastTraversableNode(parentNode))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***getComputedStyle$1(parentNode).position***REMOVED***===***REMOVED***'fixed'***REMOVED***||***REMOVED***hasFixedPositionAncestor(parentNode,***REMOVED***stopNode);
}

//***REMOVED***A***REMOVED***"clipping***REMOVED***ancestor"***REMOVED***is***REMOVED***an***REMOVED***`overflow`***REMOVED***element***REMOVED***with***REMOVED***the***REMOVED***characteristic***REMOVED***of
//***REMOVED***clipping***REMOVED***(or***REMOVED***hiding)***REMOVED***child***REMOVED***elements.***REMOVED***This***REMOVED***returns***REMOVED***all***REMOVED***clipping***REMOVED***ancestors
//***REMOVED***of***REMOVED***the***REMOVED***given***REMOVED***element***REMOVED***up***REMOVED***the***REMOVED***tree.
function***REMOVED***getClippingElementAncestors(element,***REMOVED***cache)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***cachedResult***REMOVED***=***REMOVED***cache.get(element);
***REMOVED******REMOVED***if***REMOVED***(cachedResult)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cachedResult;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***getOverflowAncestors(element,***REMOVED***[],***REMOVED***false).filter(el***REMOVED***=>***REMOVED***isElement(el)***REMOVED***&&***REMOVED***getNodeName(el)***REMOVED***!==***REMOVED***'body');
***REMOVED******REMOVED***let***REMOVED***currentContainingBlockComputedStyle***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***const***REMOVED***elementIsFixed***REMOVED***=***REMOVED***getComputedStyle$1(element).position***REMOVED***===***REMOVED***'fixed';
***REMOVED******REMOVED***let***REMOVED***currentNode***REMOVED***=***REMOVED***elementIsFixed***REMOVED***?***REMOVED***getParentNode(element)***REMOVED***:***REMOVED***element;

***REMOVED******REMOVED***//***REMOVED***https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block
***REMOVED******REMOVED***while***REMOVED***(isElement(currentNode)***REMOVED***&&***REMOVED***!isLastTraversableNode(currentNode))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***computedStyle***REMOVED***=***REMOVED***getComputedStyle$1(currentNode);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currentNodeIsContaining***REMOVED***=***REMOVED***isContainingBlock(currentNode);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!currentNodeIsContaining***REMOVED***&&***REMOVED***computedStyle.position***REMOVED***===***REMOVED***'fixed')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentContainingBlockComputedStyle***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***shouldDropCurrentNode***REMOVED***=***REMOVED***elementIsFixed***REMOVED***?***REMOVED***!currentNodeIsContaining***REMOVED***&&***REMOVED***!currentContainingBlockComputedStyle***REMOVED***:***REMOVED***!currentNodeIsContaining***REMOVED***&&***REMOVED***computedStyle.position***REMOVED***===***REMOVED***'static'***REMOVED***&&***REMOVED***!!currentContainingBlockComputedStyle***REMOVED***&&***REMOVED***absoluteOrFixed.has(currentContainingBlockComputedStyle.position)***REMOVED***||***REMOVED***isOverflowElement(currentNode)***REMOVED***&&***REMOVED***!currentNodeIsContaining***REMOVED***&&***REMOVED***hasFixedPositionAncestor(element,***REMOVED***currentNode);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(shouldDropCurrentNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Drop***REMOVED***non-containing***REMOVED***blocks.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***result.filter(ancestor***REMOVED***=>***REMOVED***ancestor***REMOVED***!==***REMOVED***currentNode);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Record***REMOVED***last***REMOVED***containing***REMOVED***block***REMOVED***for***REMOVED***next***REMOVED***iteration.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentContainingBlockComputedStyle***REMOVED***=***REMOVED***computedStyle;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***currentNode***REMOVED***=***REMOVED***getParentNode(currentNode);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***cache.set(element,***REMOVED***result);
***REMOVED******REMOVED***return***REMOVED***result;
}

//***REMOVED***Gets***REMOVED***the***REMOVED***maximum***REMOVED***area***REMOVED***that***REMOVED***the***REMOVED***element***REMOVED***is***REMOVED***visible***REMOVED***in***REMOVED***due***REMOVED***to***REMOVED***any***REMOVED***number***REMOVED***of
//***REMOVED***clipping***REMOVED***ancestors.
function***REMOVED***getClippingRect(_ref)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***element,
***REMOVED******REMOVED******REMOVED******REMOVED***boundary,
***REMOVED******REMOVED******REMOVED******REMOVED***rootBoundary,
***REMOVED******REMOVED******REMOVED******REMOVED***strategy
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***_ref;
***REMOVED******REMOVED***const***REMOVED***elementClippingAncestors***REMOVED***=***REMOVED***boundary***REMOVED***===***REMOVED***'clippingAncestors'***REMOVED***?***REMOVED***isTopLayer(element)***REMOVED***?***REMOVED***[]***REMOVED***:***REMOVED***getClippingElementAncestors(element,***REMOVED***this._c)***REMOVED***:***REMOVED***[].concat(boundary);
***REMOVED******REMOVED***const***REMOVED***clippingAncestors***REMOVED***=***REMOVED***[...elementClippingAncestors,***REMOVED***rootBoundary];
***REMOVED******REMOVED***const***REMOVED***firstClippingAncestor***REMOVED***=***REMOVED***clippingAncestors[0];
***REMOVED******REMOVED***const***REMOVED***clippingRect***REMOVED***=***REMOVED***clippingAncestors.reduce((accRect,***REMOVED***clippingAncestor)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rect***REMOVED***=***REMOVED***getClientRectFromClippingAncestor(element,***REMOVED***clippingAncestor,***REMOVED***strategy);
***REMOVED******REMOVED******REMOVED******REMOVED***accRect.top***REMOVED***=***REMOVED***max(rect.top,***REMOVED***accRect.top);
***REMOVED******REMOVED******REMOVED******REMOVED***accRect.right***REMOVED***=***REMOVED***min(rect.right,***REMOVED***accRect.right);
***REMOVED******REMOVED******REMOVED******REMOVED***accRect.bottom***REMOVED***=***REMOVED***min(rect.bottom,***REMOVED***accRect.bottom);
***REMOVED******REMOVED******REMOVED******REMOVED***accRect.left***REMOVED***=***REMOVED***max(rect.left,***REMOVED***accRect.left);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***accRect;
***REMOVED******REMOVED***},***REMOVED***getClientRectFromClippingAncestor(element,***REMOVED***firstClippingAncestor,***REMOVED***strategy));
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width:***REMOVED***clippingRect.right***REMOVED***-***REMOVED***clippingRect.left,
***REMOVED******REMOVED******REMOVED******REMOVED***height:***REMOVED***clippingRect.bottom***REMOVED***-***REMOVED***clippingRect.top,
***REMOVED******REMOVED******REMOVED******REMOVED***x:***REMOVED***clippingRect.left,
***REMOVED******REMOVED******REMOVED******REMOVED***y:***REMOVED***clippingRect.top
***REMOVED******REMOVED***};
}

function***REMOVED***getDimensions(element)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***getCssDimensions(element);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED***height
***REMOVED******REMOVED***};
}

function***REMOVED***getRectRelativeToOffsetParent(element,***REMOVED***offsetParent,***REMOVED***strategy)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***isOffsetParentAnElement***REMOVED***=***REMOVED***isHTMLElement(offsetParent);
***REMOVED******REMOVED***const***REMOVED***documentElement***REMOVED***=***REMOVED***getDocumentElement(offsetParent);
***REMOVED******REMOVED***const***REMOVED***isFixed***REMOVED***=***REMOVED***strategy***REMOVED***===***REMOVED***'fixed';
***REMOVED******REMOVED***const***REMOVED***rect***REMOVED***=***REMOVED***getBoundingClientRect(element,***REMOVED***true,***REMOVED***isFixed,***REMOVED***offsetParent);
***REMOVED******REMOVED***let***REMOVED***scroll***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***scrollLeft:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***scrollTop:***REMOVED***0
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***offsets***REMOVED***=***REMOVED***createCoords(0);

***REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***<body>***REMOVED***scrollbar***REMOVED***appears***REMOVED***on***REMOVED***the***REMOVED***left***REMOVED***(e.g.***REMOVED***RTL***REMOVED***systems).***REMOVED***Use
***REMOVED******REMOVED***//***REMOVED***Firefox***REMOVED***with***REMOVED***layout.scrollbar.side***REMOVED***=***REMOVED***3***REMOVED***in***REMOVED***about:config***REMOVED***to***REMOVED***test***REMOVED***this.
***REMOVED******REMOVED***function***REMOVED***setLeftRTLScrollbarOffset()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***offsets.x***REMOVED***=***REMOVED***getWindowScrollBarX(documentElement);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isOffsetParentAnElement***REMOVED***||***REMOVED***!isOffsetParentAnElement***REMOVED***&&***REMOVED***!isFixed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(getNodeName(offsetParent)***REMOVED***!==***REMOVED***'body'***REMOVED***||***REMOVED***isOverflowElement(documentElement))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scroll***REMOVED***=***REMOVED***getNodeScroll(offsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isOffsetParentAnElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***offsetRect***REMOVED***=***REMOVED***getBoundingClientRect(offsetParent,***REMOVED***true,***REMOVED***isFixed,***REMOVED***offsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offsets.x***REMOVED***=***REMOVED***offsetRect.x***REMOVED***+***REMOVED***offsetParent.clientLeft;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offsets.y***REMOVED***=***REMOVED***offsetRect.y***REMOVED***+***REMOVED***offsetParent.clientTop;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(documentElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setLeftRTLScrollbarOffset();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isFixed***REMOVED***&&***REMOVED***!isOffsetParentAnElement***REMOVED***&&***REMOVED***documentElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***setLeftRTLScrollbarOffset();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***htmlOffset***REMOVED***=***REMOVED***documentElement***REMOVED***&&***REMOVED***!isOffsetParentAnElement***REMOVED***&&***REMOVED***!isFixed***REMOVED***?***REMOVED***getHTMLOffset(documentElement,***REMOVED***scroll)***REMOVED***:***REMOVED***createCoords(0);
***REMOVED******REMOVED***const***REMOVED***x***REMOVED***=***REMOVED***rect.left***REMOVED***+***REMOVED***scroll.scrollLeft***REMOVED***-***REMOVED***offsets.x***REMOVED***-***REMOVED***htmlOffset.x;
***REMOVED******REMOVED***const***REMOVED***y***REMOVED***=***REMOVED***rect.top***REMOVED***+***REMOVED***scroll.scrollTop***REMOVED***-***REMOVED***offsets.y***REMOVED***-***REMOVED***htmlOffset.y;
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***x,
***REMOVED******REMOVED******REMOVED******REMOVED***y,
***REMOVED******REMOVED******REMOVED******REMOVED***width:***REMOVED***rect.width,
***REMOVED******REMOVED******REMOVED******REMOVED***height:***REMOVED***rect.height
***REMOVED******REMOVED***};
}

function***REMOVED***isStaticPositioned(element)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***getComputedStyle$1(element).position***REMOVED***===***REMOVED***'static';
}

function***REMOVED***getTrueOffsetParent(element,***REMOVED***polyfill)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!isHTMLElement(element)***REMOVED***||***REMOVED***getComputedStyle$1(element).position***REMOVED***===***REMOVED***'fixed')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(polyfill)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***polyfill(element);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***rawOffsetParent***REMOVED***=***REMOVED***element.offsetParent;

***REMOVED******REMOVED***//***REMOVED***Firefox***REMOVED***returns***REMOVED***the***REMOVED***<html>***REMOVED***element***REMOVED***as***REMOVED***the***REMOVED***offsetParent***REMOVED***if***REMOVED***it's***REMOVED***non-static,
***REMOVED******REMOVED***//***REMOVED***while***REMOVED***Chrome***REMOVED***and***REMOVED***Safari***REMOVED***return***REMOVED***the***REMOVED***<body>***REMOVED***element.***REMOVED***The***REMOVED***<body>***REMOVED***element***REMOVED***must
***REMOVED******REMOVED***//***REMOVED***be***REMOVED***used***REMOVED***to***REMOVED***perform***REMOVED***the***REMOVED***correct***REMOVED***calculations***REMOVED***even***REMOVED***if***REMOVED***the***REMOVED***<html>***REMOVED***element***REMOVED***is
***REMOVED******REMOVED***//***REMOVED***non-static.
***REMOVED******REMOVED***if***REMOVED***(getDocumentElement(element)***REMOVED***===***REMOVED***rawOffsetParent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***rawOffsetParent***REMOVED***=***REMOVED***rawOffsetParent.ownerDocument.body;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***rawOffsetParent;
}

//***REMOVED***Gets***REMOVED***the***REMOVED***closest***REMOVED***ancestor***REMOVED***positioned***REMOVED***element.***REMOVED***Handles***REMOVED***some***REMOVED***edge***REMOVED***cases,
//***REMOVED***such***REMOVED***as***REMOVED***table***REMOVED***ancestors***REMOVED***and***REMOVED***cross***REMOVED***browser***REMOVED***bugs.
function***REMOVED***getOffsetParent(element,***REMOVED***polyfill)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***win***REMOVED***=***REMOVED***getWindow(element);
***REMOVED******REMOVED***if***REMOVED***(isTopLayer(element))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***win;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!isHTMLElement(element))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***svgOffsetParent***REMOVED***=***REMOVED***getParentNode(element);
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(svgOffsetParent***REMOVED***&&***REMOVED***!isLastTraversableNode(svgOffsetParent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isElement(svgOffsetParent)***REMOVED***&&***REMOVED***!isStaticPositioned(svgOffsetParent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***svgOffsetParent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***svgOffsetParent***REMOVED***=***REMOVED***getParentNode(svgOffsetParent);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***win;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***offsetParent***REMOVED***=***REMOVED***getTrueOffsetParent(element,***REMOVED***polyfill);
***REMOVED******REMOVED***while***REMOVED***(offsetParent***REMOVED***&&***REMOVED***isTableElement(offsetParent)***REMOVED***&&***REMOVED***isStaticPositioned(offsetParent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***offsetParent***REMOVED***=***REMOVED***getTrueOffsetParent(offsetParent,***REMOVED***polyfill);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(offsetParent***REMOVED***&&***REMOVED***isLastTraversableNode(offsetParent)***REMOVED***&&***REMOVED***isStaticPositioned(offsetParent)***REMOVED***&&***REMOVED***!isContainingBlock(offsetParent))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***win;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***offsetParent***REMOVED***||***REMOVED***getContainingBlock(element)***REMOVED***||***REMOVED***win;
}

const***REMOVED***getElementRects***REMOVED***=***REMOVED***async***REMOVED***function***REMOVED***(data)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***getOffsetParentFn***REMOVED***=***REMOVED***this.getOffsetParent***REMOVED***||***REMOVED***getOffsetParent;
***REMOVED******REMOVED***const***REMOVED***getDimensionsFn***REMOVED***=***REMOVED***this.getDimensions;
***REMOVED******REMOVED***const***REMOVED***floatingDimensions***REMOVED***=***REMOVED***await***REMOVED***getDimensionsFn(data.floating);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***reference:***REMOVED***getRectRelativeToOffsetParent(data.reference,***REMOVED***await***REMOVED***getOffsetParentFn(data.floating),***REMOVED***data.strategy),
***REMOVED******REMOVED******REMOVED******REMOVED***floating:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***x:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***y:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***width:***REMOVED***floatingDimensions.width,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***height:***REMOVED***floatingDimensions.height
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
};

function***REMOVED***isRTL(element)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***getComputedStyle$1(element).direction***REMOVED***===***REMOVED***'rtl';
}

const***REMOVED***platform***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***convertOffsetParentRelativeRectToViewportRelativeRect,
***REMOVED******REMOVED***getDocumentElement,
***REMOVED******REMOVED***getClippingRect,
***REMOVED******REMOVED***getOffsetParent,
***REMOVED******REMOVED***getElementRects,
***REMOVED******REMOVED***getClientRects,
***REMOVED******REMOVED***getDimensions,
***REMOVED******REMOVED***getScale,
***REMOVED******REMOVED***isElement,
***REMOVED******REMOVED***isRTL
};

function***REMOVED***rectsAreEqual(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***a.x***REMOVED***===***REMOVED***b.x***REMOVED***&&***REMOVED***a.y***REMOVED***===***REMOVED***b.y***REMOVED***&&***REMOVED***a.width***REMOVED***===***REMOVED***b.width***REMOVED***&&***REMOVED***a.height***REMOVED***===***REMOVED***b.height;
}

//***REMOVED***https://samthor.au/2021/observing-dom/
function***REMOVED***observeMove(element,***REMOVED***onMove)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***io***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***let***REMOVED***timeoutId;
***REMOVED******REMOVED***const***REMOVED***root***REMOVED***=***REMOVED***getDocumentElement(element);
***REMOVED******REMOVED***function***REMOVED***cleanup()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_io;
***REMOVED******REMOVED******REMOVED******REMOVED***clearTimeout(timeoutId);
***REMOVED******REMOVED******REMOVED******REMOVED***(_io***REMOVED***=***REMOVED***io)***REMOVED***==***REMOVED***null***REMOVED***||***REMOVED***_io.disconnect();
***REMOVED******REMOVED******REMOVED******REMOVED***io***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***refresh(skip,***REMOVED***threshold)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(skip***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***skip***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(threshold***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***threshold***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***cleanup();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***elementRectForRootMargin***REMOVED***=***REMOVED***element.getBoundingClientRect();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***left,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***top,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***width,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***height
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***=***REMOVED***elementRectForRootMargin;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!skip)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onMove();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!width***REMOVED***||***REMOVED***!height)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***insetTop***REMOVED***=***REMOVED***floor(top);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***insetRight***REMOVED***=***REMOVED***floor(root.clientWidth***REMOVED***-***REMOVED***(left***REMOVED***+***REMOVED***width));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***insetBottom***REMOVED***=***REMOVED***floor(root.clientHeight***REMOVED***-***REMOVED***(top***REMOVED***+***REMOVED***height));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***insetLeft***REMOVED***=***REMOVED***floor(left);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rootMargin***REMOVED***=***REMOVED***-insetTop***REMOVED***+***REMOVED***"px***REMOVED***"***REMOVED***+***REMOVED***-insetRight***REMOVED***+***REMOVED***"px***REMOVED***"***REMOVED***+***REMOVED***-insetBottom***REMOVED***+***REMOVED***"px***REMOVED***"***REMOVED***+***REMOVED***-insetLeft***REMOVED***+***REMOVED***"px";
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rootMargin,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***threshold:***REMOVED***max(0,***REMOVED***min(1,***REMOVED***threshold))***REMOVED***||***REMOVED***1
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***isFirstUpdate***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***handleObserve(entries)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ratio***REMOVED***=***REMOVED***entries[0].intersectionRatio;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(ratio***REMOVED***!==***REMOVED***threshold)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isFirstUpdate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***refresh();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!ratio)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***reference***REMOVED***is***REMOVED***clipped,***REMOVED***the***REMOVED***ratio***REMOVED***is***REMOVED***0.***REMOVED***Throttle***REMOVED***the***REMOVED***refresh
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***to***REMOVED***prevent***REMOVED***an***REMOVED***infinite***REMOVED***loop***REMOVED***of***REMOVED***updates.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutId***REMOVED***=***REMOVED***setTimeout(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refresh(false,***REMOVED***1e-7);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***1000);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refresh(false,***REMOVED***ratio);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(ratio***REMOVED***===***REMOVED***1***REMOVED***&&***REMOVED***!rectsAreEqual(elementRectForRootMargin,***REMOVED***element.getBoundingClientRect()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***It's***REMOVED***possible***REMOVED***that***REMOVED***even***REMOVED***though***REMOVED***the***REMOVED***ratio***REMOVED***is***REMOVED***reported***REMOVED***as***REMOVED***1,***REMOVED***the
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***element***REMOVED***is***REMOVED***not***REMOVED***actually***REMOVED***fully***REMOVED***within***REMOVED***the***REMOVED***IntersectionObserver's***REMOVED***root
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***area***REMOVED***anymore.***REMOVED***This***REMOVED***can***REMOVED***happen***REMOVED***under***REMOVED***performance***REMOVED***constraints.***REMOVED***This***REMOVED***may
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***be***REMOVED***a***REMOVED***bug***REMOVED***in***REMOVED***the***REMOVED***browser's***REMOVED***IntersectionObserver***REMOVED***implementation.***REMOVED***To
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***work***REMOVED***around***REMOVED***this,***REMOVED***we***REMOVED***compare***REMOVED***the***REMOVED***element's***REMOVED***bounding***REMOVED***rect***REMOVED***now***REMOVED***with
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***what***REMOVED***it***REMOVED***was***REMOVED***at***REMOVED***the***REMOVED***time***REMOVED***we***REMOVED***created***REMOVED***the***REMOVED***IntersectionObserver.***REMOVED***If***REMOVED***they
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***are***REMOVED***not***REMOVED***equal***REMOVED***then***REMOVED***the***REMOVED***element***REMOVED***moved,***REMOVED***so***REMOVED***we***REMOVED***refresh.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refresh();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isFirstUpdate***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Older***REMOVED***browsers***REMOVED***don't***REMOVED***support***REMOVED***a***REMOVED***`document`***REMOVED***as***REMOVED***the***REMOVED***root***REMOVED***and***REMOVED***will***REMOVED***throw***REMOVED***an
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***error.
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***io***REMOVED***=***REMOVED***new***REMOVED***IntersectionObserver(handleObserve,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Handle***REMOVED***<iframe>s
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***root:***REMOVED***root.ownerDocument
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(_e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***io***REMOVED***=***REMOVED***new***REMOVED***IntersectionObserver(handleObserve,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***io.observe(element);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***refresh(true);
***REMOVED******REMOVED***return***REMOVED***cleanup;
}

/**
***REMOVED*******REMOVED***Automatically***REMOVED***updates***REMOVED***the***REMOVED***position***REMOVED***of***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***when***REMOVED***necessary.
***REMOVED*******REMOVED***Should***REMOVED***only***REMOVED***be***REMOVED***called***REMOVED***when***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***is***REMOVED***mounted***REMOVED***on***REMOVED***the***REMOVED***DOM***REMOVED***or
***REMOVED*******REMOVED***visible***REMOVED***on***REMOVED***the***REMOVED***screen.
***REMOVED*******REMOVED***@returns***REMOVED***cleanup***REMOVED***function***REMOVED***that***REMOVED***should***REMOVED***be***REMOVED***invoked***REMOVED***when***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***is
***REMOVED*******REMOVED***removed***REMOVED***from***REMOVED***the***REMOVED***DOM***REMOVED***or***REMOVED***hidden***REMOVED***from***REMOVED***the***REMOVED***screen.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/autoUpdate
***REMOVED****/
function***REMOVED***autoUpdate(reference,***REMOVED***floating,***REMOVED***update,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ancestorScroll***REMOVED***=***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***ancestorResize***REMOVED***=***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***elementResize***REMOVED***=***REMOVED***typeof***REMOVED***ResizeObserver***REMOVED***===***REMOVED***'function',
***REMOVED******REMOVED******REMOVED******REMOVED***layoutShift***REMOVED***=***REMOVED***typeof***REMOVED***IntersectionObserver***REMOVED***===***REMOVED***'function',
***REMOVED******REMOVED******REMOVED******REMOVED***animationFrame***REMOVED***=***REMOVED***false
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***options;
***REMOVED******REMOVED***const***REMOVED***referenceEl***REMOVED***=***REMOVED***unwrapElement(reference);
***REMOVED******REMOVED***const***REMOVED***ancestors***REMOVED***=***REMOVED***ancestorScroll***REMOVED***||***REMOVED***ancestorResize***REMOVED***?***REMOVED***[...(referenceEl***REMOVED***?***REMOVED***getOverflowAncestors(referenceEl)***REMOVED***:***REMOVED***[]),***REMOVED***...getOverflowAncestors(floating)]***REMOVED***:***REMOVED***[];
***REMOVED******REMOVED***ancestors.forEach(ancestor***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ancestorScroll***REMOVED***&&***REMOVED***ancestor.addEventListener('scroll',***REMOVED***update,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***passive:***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***ancestorResize***REMOVED***&&***REMOVED***ancestor.addEventListener('resize',***REMOVED***update);
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***cleanupIo***REMOVED***=***REMOVED***referenceEl***REMOVED***&&***REMOVED***layoutShift***REMOVED***?***REMOVED***observeMove(referenceEl,***REMOVED***update)***REMOVED***:***REMOVED***null;
***REMOVED******REMOVED***let***REMOVED***reobserveFrame***REMOVED***=***REMOVED***-1;
***REMOVED******REMOVED***let***REMOVED***resizeObserver***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***if***REMOVED***(elementResize)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***resizeObserver***REMOVED***=***REMOVED***new***REMOVED***ResizeObserver(_ref***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***[firstEntry]***REMOVED***=***REMOVED***_ref;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(firstEntry***REMOVED***&&***REMOVED***firstEntry.target***REMOVED***===***REMOVED***referenceEl***REMOVED***&&***REMOVED***resizeObserver)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Prevent***REMOVED***update***REMOVED***loops***REMOVED***when***REMOVED***using***REMOVED***the***REMOVED***`size`***REMOVED***middleware.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://github.com/floating-ui/floating-ui/issues/1740
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resizeObserver.unobserve(floating);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancelAnimationFrame(reobserveFrame);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reobserveFrame***REMOVED***=***REMOVED***requestAnimationFrame(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_resizeObserver;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(_resizeObserver***REMOVED***=***REMOVED***resizeObserver)***REMOVED***==***REMOVED***null***REMOVED***||***REMOVED***_resizeObserver.observe(floating);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***update();
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(referenceEl***REMOVED***&&***REMOVED***!animationFrame)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resizeObserver.observe(referenceEl);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***resizeObserver.observe(floating);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***frameId;
***REMOVED******REMOVED***let***REMOVED***prevRefRect***REMOVED***=***REMOVED***animationFrame***REMOVED***?***REMOVED***getBoundingClientRect(reference)***REMOVED***:***REMOVED***null;
***REMOVED******REMOVED***if***REMOVED***(animationFrame)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***frameLoop();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***frameLoop()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nextRefRect***REMOVED***=***REMOVED***getBoundingClientRect(reference);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prevRefRect***REMOVED***&&***REMOVED***!rectsAreEqual(prevRefRect,***REMOVED***nextRefRect))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***update();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***prevRefRect***REMOVED***=***REMOVED***nextRefRect;
***REMOVED******REMOVED******REMOVED******REMOVED***frameId***REMOVED***=***REMOVED***requestAnimationFrame(frameLoop);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***update();
***REMOVED******REMOVED***return***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_resizeObserver2;
***REMOVED******REMOVED******REMOVED******REMOVED***ancestors.forEach(ancestor***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ancestorScroll***REMOVED***&&***REMOVED***ancestor.removeEventListener('scroll',***REMOVED***update);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ancestorResize***REMOVED***&&***REMOVED***ancestor.removeEventListener('resize',***REMOVED***update);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***cleanupIo***REMOVED***==***REMOVED***null***REMOVED***||***REMOVED***cleanupIo();
***REMOVED******REMOVED******REMOVED******REMOVED***(_resizeObserver2***REMOVED***=***REMOVED***resizeObserver)***REMOVED***==***REMOVED***null***REMOVED***||***REMOVED***_resizeObserver2.disconnect();
***REMOVED******REMOVED******REMOVED******REMOVED***resizeObserver***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(animationFrame)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancelAnimationFrame(frameId);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}

/**
***REMOVED*******REMOVED***Resolves***REMOVED***with***REMOVED***an***REMOVED***object***REMOVED***of***REMOVED***overflow***REMOVED***side***REMOVED***offsets***REMOVED***that***REMOVED***determine***REMOVED***how***REMOVED***much***REMOVED***the
***REMOVED*******REMOVED***element***REMOVED***is***REMOVED***overflowing***REMOVED***a***REMOVED***given***REMOVED***clipping***REMOVED***boundary***REMOVED***on***REMOVED***each***REMOVED***side.
***REMOVED*******REMOVED***-***REMOVED***positive***REMOVED***=***REMOVED***overflowing***REMOVED***the***REMOVED***boundary***REMOVED***by***REMOVED***that***REMOVED***number***REMOVED***of***REMOVED***pixels
***REMOVED*******REMOVED***-***REMOVED***negative***REMOVED***=***REMOVED***how***REMOVED***many***REMOVED***pixels***REMOVED***left***REMOVED***before***REMOVED***it***REMOVED***will***REMOVED***overflow
***REMOVED*******REMOVED***-***REMOVED***0***REMOVED***=***REMOVED***lies***REMOVED***flush***REMOVED***with***REMOVED***the***REMOVED***boundary
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/detectOverflow
***REMOVED****/
const***REMOVED***detectOverflow***REMOVED***=***REMOVED***detectOverflow$1;

/**
***REMOVED*******REMOVED***Modifies***REMOVED***the***REMOVED***placement***REMOVED***by***REMOVED***translating***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***along***REMOVED***the
***REMOVED*******REMOVED***specified***REMOVED***axes.
***REMOVED*******REMOVED***A***REMOVED***number***REMOVED***(shorthand***REMOVED***for***REMOVED***`mainAxis`***REMOVED***or***REMOVED***distance),***REMOVED***or***REMOVED***an***REMOVED***axes***REMOVED***configuration
***REMOVED*******REMOVED***object***REMOVED***may***REMOVED***be***REMOVED***passed.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/offset
***REMOVED****/
const***REMOVED***offset***REMOVED***=***REMOVED***offset$1;

/**
***REMOVED*******REMOVED***Optimizes***REMOVED***the***REMOVED***visibility***REMOVED***of***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***by***REMOVED***choosing***REMOVED***the***REMOVED***placement
***REMOVED*******REMOVED***that***REMOVED***has***REMOVED***the***REMOVED***most***REMOVED***space***REMOVED***available***REMOVED***automatically,***REMOVED***without***REMOVED***needing***REMOVED***to***REMOVED***specify***REMOVED***a
***REMOVED*******REMOVED***preferred***REMOVED***placement.***REMOVED***Alternative***REMOVED***to***REMOVED***`flip`.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/autoPlacement
***REMOVED****/
const***REMOVED***autoPlacement***REMOVED***=***REMOVED***autoPlacement$1;

/**
***REMOVED*******REMOVED***Optimizes***REMOVED***the***REMOVED***visibility***REMOVED***of***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***by***REMOVED***shifting***REMOVED***it***REMOVED***in***REMOVED***order***REMOVED***to
***REMOVED*******REMOVED***keep***REMOVED***it***REMOVED***in***REMOVED***view***REMOVED***when***REMOVED***it***REMOVED***will***REMOVED***overflow***REMOVED***the***REMOVED***clipping***REMOVED***boundary.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/shift
***REMOVED****/
const***REMOVED***shift***REMOVED***=***REMOVED***shift$1;

/**
***REMOVED*******REMOVED***Optimizes***REMOVED***the***REMOVED***visibility***REMOVED***of***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***by***REMOVED***flipping***REMOVED***the***REMOVED***`placement`
***REMOVED*******REMOVED***in***REMOVED***order***REMOVED***to***REMOVED***keep***REMOVED***it***REMOVED***in***REMOVED***view***REMOVED***when***REMOVED***the***REMOVED***preferred***REMOVED***placement(s)***REMOVED***will***REMOVED***overflow***REMOVED***the
***REMOVED*******REMOVED***clipping***REMOVED***boundary.***REMOVED***Alternative***REMOVED***to***REMOVED***`autoPlacement`.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/flip
***REMOVED****/
const***REMOVED***flip***REMOVED***=***REMOVED***flip$1;

/**
***REMOVED*******REMOVED***Provides***REMOVED***data***REMOVED***that***REMOVED***allows***REMOVED***you***REMOVED***to***REMOVED***change***REMOVED***the***REMOVED***size***REMOVED***of***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***—
***REMOVED*******REMOVED***for***REMOVED***instance,***REMOVED***prevent***REMOVED***it***REMOVED***from***REMOVED***overflowing***REMOVED***the***REMOVED***clipping***REMOVED***boundary***REMOVED***or***REMOVED***match***REMOVED***the
***REMOVED*******REMOVED***width***REMOVED***of***REMOVED***the***REMOVED***reference***REMOVED***element.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/size
***REMOVED****/
const***REMOVED***size***REMOVED***=***REMOVED***size$1;

/**
***REMOVED*******REMOVED***Provides***REMOVED***data***REMOVED***to***REMOVED***hide***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***in***REMOVED***applicable***REMOVED***situations,***REMOVED***such***REMOVED***as
***REMOVED*******REMOVED***when***REMOVED***it***REMOVED***is***REMOVED***not***REMOVED***in***REMOVED***the***REMOVED***same***REMOVED***clipping***REMOVED***context***REMOVED***as***REMOVED***the***REMOVED***reference***REMOVED***element.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/hide
***REMOVED****/
const***REMOVED***hide***REMOVED***=***REMOVED***hide$1;

/**
***REMOVED*******REMOVED***Provides***REMOVED***data***REMOVED***to***REMOVED***position***REMOVED***an***REMOVED***inner***REMOVED***element***REMOVED***of***REMOVED***the***REMOVED***floating***REMOVED***element***REMOVED***so***REMOVED***that***REMOVED***it
***REMOVED*******REMOVED***appears***REMOVED***centered***REMOVED***to***REMOVED***the***REMOVED***reference***REMOVED***element.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/arrow
***REMOVED****/
const***REMOVED***arrow***REMOVED***=***REMOVED***arrow$1;

/**
***REMOVED*******REMOVED***Provides***REMOVED***improved***REMOVED***positioning***REMOVED***for***REMOVED***inline***REMOVED***reference***REMOVED***elements***REMOVED***that***REMOVED***can***REMOVED***span
***REMOVED*******REMOVED***over***REMOVED***multiple***REMOVED***lines,***REMOVED***such***REMOVED***as***REMOVED***hyperlinks***REMOVED***or***REMOVED***range***REMOVED***selections.
***REMOVED*******REMOVED***@see***REMOVED***https://floating-ui.com/docs/inline
***REMOVED****/
const***REMOVED***inline***REMOVED***=***REMOVED***inline$1;

/**
***REMOVED*******REMOVED***Built-in***REMOVED***`limiter`***REMOVED***that***REMOVED***will***REMOVED***stop***REMOVED***`shift()`***REMOVED***at***REMOVED***a***REMOVED***certain***REMOVED***point.
***REMOVED****/
const***REMOVED***limitShift***REMOVED***=***REMOVED***limitShift$1;

/**
***REMOVED*******REMOVED***Computes***REMOVED***the***REMOVED***`x`***REMOVED***and***REMOVED***`y`***REMOVED***coordinates***REMOVED***that***REMOVED***will***REMOVED***place***REMOVED***the***REMOVED***floating***REMOVED***element
***REMOVED*******REMOVED***next***REMOVED***to***REMOVED***a***REMOVED***given***REMOVED***reference***REMOVED***element.
***REMOVED****/
const***REMOVED***computePosition***REMOVED***=***REMOVED***(reference,***REMOVED***floating,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***This***REMOVED***caches***REMOVED***the***REMOVED***expensive***REMOVED***`getClippingElementAncestors`***REMOVED***function***REMOVED***so***REMOVED***that
***REMOVED******REMOVED***//***REMOVED***multiple***REMOVED***lifecycle***REMOVED***resets***REMOVED***re-use***REMOVED***the***REMOVED***same***REMOVED***result.***REMOVED***It***REMOVED***only***REMOVED***lives***REMOVED***for***REMOVED***a
***REMOVED******REMOVED***//***REMOVED***single***REMOVED***call.***REMOVED***If***REMOVED***other***REMOVED***functions***REMOVED***become***REMOVED***expensive,***REMOVED***we***REMOVED***can***REMOVED***add***REMOVED***them***REMOVED***as***REMOVED***well.
***REMOVED******REMOVED***const***REMOVED***cache***REMOVED***=***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED***const***REMOVED***mergedOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***platform,
***REMOVED******REMOVED******REMOVED******REMOVED***...options
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***platformWithCache***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***...mergedOptions.platform,
***REMOVED******REMOVED******REMOVED******REMOVED***_c:***REMOVED***cache
***REMOVED******REMOVED***};
***REMOVED******REMOVED***return***REMOVED***computePosition$1(reference,***REMOVED***floating,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***...mergedOptions,
***REMOVED******REMOVED******REMOVED******REMOVED***platform:***REMOVED***platformWithCache
***REMOVED******REMOVED***});
};

export***REMOVED***{***REMOVED***arrow,***REMOVED***autoPlacement,***REMOVED***autoUpdate,***REMOVED***computePosition,***REMOVED***detectOverflow,***REMOVED***flip,***REMOVED***hide,***REMOVED***inline,***REMOVED***limitShift,***REMOVED***offset,***REMOVED***platform,***REMOVED***shift,***REMOVED***size***REMOVED***};
