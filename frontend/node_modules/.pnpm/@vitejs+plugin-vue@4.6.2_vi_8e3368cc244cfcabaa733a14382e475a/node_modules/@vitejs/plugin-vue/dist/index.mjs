import***REMOVED***fs***REMOVED***from***REMOVED***'node:fs';
import***REMOVED***{***REMOVED***isCSSRequest,***REMOVED***normalizePath***REMOVED***as***REMOVED***normalizePath$1,***REMOVED***transformWithEsbuild,***REMOVED***formatPostcssSourceMap,***REMOVED***createFilter***REMOVED***}***REMOVED***from***REMOVED***'vite';
import***REMOVED***{***REMOVED***shallowRef,***REMOVED***computed***REMOVED***}***REMOVED***from***REMOVED***'vue';
import***REMOVED***{***REMOVED***createRequire***REMOVED***}***REMOVED***from***REMOVED***'node:module';
import***REMOVED***path***REMOVED***from***REMOVED***'node:path';
import***REMOVED***{***REMOVED***createHash***REMOVED***}***REMOVED***from***REMOVED***'node:crypto';
import***REMOVED***require$$0***REMOVED***from***REMOVED***'tty';
import***REMOVED***require$$1***REMOVED***from***REMOVED***'util';

const***REMOVED***version***REMOVED***=***REMOVED***"4.6.2";

function***REMOVED***resolveCompiler(root)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***compiler***REMOVED***=***REMOVED***tryResolveCompiler(root)***REMOVED***||***REMOVED***tryResolveCompiler();
***REMOVED******REMOVED***if***REMOVED***(!compiler)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`Failed***REMOVED***to***REMOVED***resolve***REMOVED***vue/compiler-sfc.
@vitejs/plugin-vue***REMOVED***requires***REMOVED***vue***REMOVED***(>=3.2.25)***REMOVED***to***REMOVED***be***REMOVED***present***REMOVED***in***REMOVED***the***REMOVED***dependency***REMOVED***tree.`
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***compiler;
}
function***REMOVED***tryResolveCompiler(root)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***vueMeta***REMOVED***=***REMOVED***tryRequire("vue/package.json",***REMOVED***root);
***REMOVED******REMOVED***if***REMOVED***(vueMeta***REMOVED***&&***REMOVED***vueMeta.version.split(".")[0]***REMOVED***>=***REMOVED***3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***tryRequire("vue/compiler-sfc",***REMOVED***root);
***REMOVED******REMOVED***}
}
const***REMOVED***_require***REMOVED***=***REMOVED***createRequire(import.meta.url);
function***REMOVED***tryRequire(id,***REMOVED***from)***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***from***REMOVED***?***REMOVED***_require(_require.resolve(id,***REMOVED***{***REMOVED***paths:***REMOVED***[from]***REMOVED***}))***REMOVED***:***REMOVED***_require(id);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED***}
}

function***REMOVED***parseVueRequest(id)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***[filename,***REMOVED***rawQuery]***REMOVED***=***REMOVED***id.split(`?`,***REMOVED***2);
***REMOVED******REMOVED***const***REMOVED***query***REMOVED***=***REMOVED***Object.fromEntries(new***REMOVED***URLSearchParams(rawQuery));
***REMOVED******REMOVED***if***REMOVED***(query.vue***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***query.vue***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(query.index***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***query.index***REMOVED***=***REMOVED***Number(query.index);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(query.raw***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***query.raw***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(query.url***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***query.url***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(query.scoped***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***query.scoped***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED***query
***REMOVED******REMOVED***};
}

function***REMOVED***slash(path)***REMOVED***{
	const***REMOVED***isExtendedLengthPath***REMOVED***=***REMOVED***path.startsWith('\\\\?\\');

	if***REMOVED***(isExtendedLengthPath)***REMOVED***{
		return***REMOVED***path;
	}

	return***REMOVED***path.replace(/\\/g,***REMOVED***'/');
}

const***REMOVED***cache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
const***REMOVED***hmrCache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
const***REMOVED***prevCache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
function***REMOVED***createDescriptor(filename,***REMOVED***source,***REMOVED***{***REMOVED***root,***REMOVED***isProduction,***REMOVED***sourceMap,***REMOVED***compiler,***REMOVED***template***REMOVED***},***REMOVED***hmr***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***descriptor,***REMOVED***errors***REMOVED***}***REMOVED***=***REMOVED***compiler.parse(source,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED***sourceMap,
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-ignore***REMOVED***only***REMOVED***available***REMOVED***in***REMOVED***Vue***REMOVED***3.4+
***REMOVED******REMOVED******REMOVED******REMOVED***templateParseOptions:***REMOVED***template?.compilerOptions
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***normalizedPath***REMOVED***=***REMOVED***slash(path.normalize(path.relative(root,***REMOVED***filename)));
***REMOVED******REMOVED***descriptor.id***REMOVED***=***REMOVED***getHash(normalizedPath***REMOVED***+***REMOVED***(isProduction***REMOVED***?***REMOVED***source***REMOVED***:***REMOVED***""));
***REMOVED******REMOVED***(hmr***REMOVED***?***REMOVED***hmrCache***REMOVED***:***REMOVED***cache).set(filename,***REMOVED***descriptor);
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***descriptor,***REMOVED***errors***REMOVED***};
}
function***REMOVED***getPrevDescriptor(filename)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***prevCache.get(filename);
}
function***REMOVED***invalidateDescriptor(filename,***REMOVED***hmr***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***_cache***REMOVED***=***REMOVED***hmr***REMOVED***?***REMOVED***hmrCache***REMOVED***:***REMOVED***cache;
***REMOVED******REMOVED***const***REMOVED***prev***REMOVED***=***REMOVED***_cache.get(filename);
***REMOVED******REMOVED***_cache.delete(filename);
***REMOVED******REMOVED***if***REMOVED***(prev)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***prevCache.set(filename,***REMOVED***prev);
***REMOVED******REMOVED***}
}
function***REMOVED***getDescriptor(filename,***REMOVED***options,***REMOVED***createIfNotFound***REMOVED***=***REMOVED***true,***REMOVED***hmr***REMOVED***=***REMOVED***false,***REMOVED***code)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***_cache***REMOVED***=***REMOVED***hmr***REMOVED***?***REMOVED***hmrCache***REMOVED***:***REMOVED***cache;
***REMOVED******REMOVED***if***REMOVED***(_cache.has(filename))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***_cache.get(filename);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(createIfNotFound)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***descriptor,***REMOVED***errors***REMOVED***}***REMOVED***=***REMOVED***createDescriptor(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***??***REMOVED***fs.readFileSync(filename,***REMOVED***"utf-8"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hmr
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(errors.length***REMOVED***&&***REMOVED***!hmr)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***errors[0];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***descriptor;
***REMOVED******REMOVED***}
}
function***REMOVED***getSrcDescriptor(filename,***REMOVED***query)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(query.scoped)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cache.get(`${filename}?src=${query.src}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***cache.get(filename);
}
function***REMOVED***getTempSrcDescriptor(filename,***REMOVED***query)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED***id:***REMOVED***query.id***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED***styles:***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scoped:***REMOVED***query.scoped,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loc:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***start:***REMOVED***{***REMOVED***line:***REMOVED***0,***REMOVED***column:***REMOVED***0***REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***]
***REMOVED******REMOVED***};
}
function***REMOVED***setSrcDescriptor(filename,***REMOVED***entry,***REMOVED***scoped)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(scoped)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***cache.set(`${filename}?src=${entry.id}`,***REMOVED***entry);
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***cache.set(filename,***REMOVED***entry);
}
function***REMOVED***getHash(text)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***createHash("sha256").update(text).digest("hex").substring(0,***REMOVED***8);
}

function***REMOVED***createRollupError(id,***REMOVED***error)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***message,***REMOVED***name,***REMOVED***stack***REMOVED***}***REMOVED***=***REMOVED***error;
***REMOVED******REMOVED***const***REMOVED***rollupError***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***id,
***REMOVED******REMOVED******REMOVED******REMOVED***plugin:***REMOVED***"vue",
***REMOVED******REMOVED******REMOVED******REMOVED***message,
***REMOVED******REMOVED******REMOVED******REMOVED***name,
***REMOVED******REMOVED******REMOVED******REMOVED***stack
***REMOVED******REMOVED***};
***REMOVED******REMOVED***if***REMOVED***("code"***REMOVED***in***REMOVED***error***REMOVED***&&***REMOVED***error.loc)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***rollupError.loc***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***file:***REMOVED***id,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line:***REMOVED***error.loc.start.line,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***column:***REMOVED***error.loc.start.column
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***rollupError;
}

async***REMOVED***function***REMOVED***transformTemplateAsModule(code,***REMOVED***descriptor,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***compile(
***REMOVED******REMOVED******REMOVED******REMOVED***code,
***REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED***customElement
***REMOVED******REMOVED***);
***REMOVED******REMOVED***let***REMOVED***returnCode***REMOVED***=***REMOVED***result.code;
***REMOVED******REMOVED***if***REMOVED***(options.devServer***REMOVED***&&***REMOVED***options.devServer.config.server.hmr***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***!ssr***REMOVED***&&***REMOVED***!options.isProduction)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***returnCode***REMOVED***+=***REMOVED***`
import.meta.hot.accept(({***REMOVED***render***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__VUE_HMR_RUNTIME__.rerender(${JSON.stringify(descriptor.id)},***REMOVED***render)
***REMOVED******REMOVED******REMOVED******REMOVED***})`;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***returnCode,
***REMOVED******REMOVED******REMOVED******REMOVED***map:***REMOVED***result.map
***REMOVED******REMOVED***};
}
function***REMOVED***transformTemplateInMain(code,***REMOVED***descriptor,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***compile(
***REMOVED******REMOVED******REMOVED******REMOVED***code,
***REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED***customElement
***REMOVED******REMOVED***);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***...result,
***REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***result.code.replace(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/\nexport***REMOVED***(function|const)***REMOVED***(render|ssrRender)/,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"\n$1***REMOVED***_sfc_$2"
***REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED***};
}
function***REMOVED***compile(code,***REMOVED***descriptor,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***filename***REMOVED***=***REMOVED***descriptor.filename;
***REMOVED******REMOVED***resolveScript(descriptor,***REMOVED***options,***REMOVED***ssr,***REMOVED***customElement);
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***options.compiler.compileTemplate({
***REMOVED******REMOVED******REMOVED******REMOVED***...resolveTemplateCompilerOptions(descriptor,***REMOVED***options,***REMOVED***ssr),
***REMOVED******REMOVED******REMOVED******REMOVED***source:***REMOVED***code
***REMOVED******REMOVED***});
***REMOVED******REMOVED***if***REMOVED***(result.errors.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result.errors.forEach(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(error)***REMOVED***=>***REMOVED***pluginContext.error(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typeof***REMOVED***error***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***{***REMOVED***id:***REMOVED***filename,***REMOVED***message:***REMOVED***error***REMOVED***}***REMOVED***:***REMOVED***createRollupError(filename,***REMOVED***error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(result.tips.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result.tips.forEach(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(tip)***REMOVED***=>***REMOVED***pluginContext.warn({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***id:***REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***message:***REMOVED***tip
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}
function***REMOVED***resolveTemplateCompilerOptions(descriptor,***REMOVED***options,***REMOVED***ssr)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***block***REMOVED***=***REMOVED***descriptor.template;
***REMOVED******REMOVED***if***REMOVED***(!block)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***resolvedScript***REMOVED***=***REMOVED***getResolvedScript(descriptor,***REMOVED***ssr);
***REMOVED******REMOVED***const***REMOVED***hasScoped***REMOVED***=***REMOVED***descriptor.styles.some((s)***REMOVED***=>***REMOVED***s.scoped);
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***id,***REMOVED***filename,***REMOVED***cssVars***REMOVED***}***REMOVED***=***REMOVED***descriptor;
***REMOVED******REMOVED***let***REMOVED***transformAssetUrls***REMOVED***=***REMOVED***options.template?.transformAssetUrls;
***REMOVED******REMOVED***let***REMOVED***assetUrlOptions;
***REMOVED******REMOVED***if***REMOVED***(options.devServer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(filename.startsWith(options.root))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***devBase***REMOVED***=***REMOVED***options.devServer.config.base;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***assetUrlOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***base:***REMOVED***(options.devServer.config.server?.origin***REMOVED***??***REMOVED***"")***REMOVED***+***REMOVED***devBase***REMOVED***+***REMOVED***slash(path.relative(options.root,***REMOVED***path.dirname(filename))),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***includeAbsolute:***REMOVED***!!devBase
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(transformAssetUrls***REMOVED***!==***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***assetUrlOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***includeAbsolute:***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(transformAssetUrls***REMOVED***&&***REMOVED***typeof***REMOVED***transformAssetUrls***REMOVED***===***REMOVED***"object")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Object.values(transformAssetUrls).some((val)***REMOVED***=>***REMOVED***Array.isArray(val)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transformAssetUrls***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...assetUrlOptions,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***tags:***REMOVED***transformAssetUrls
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transformAssetUrls***REMOVED***=***REMOVED***{***REMOVED***...assetUrlOptions,***REMOVED***...transformAssetUrls***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***transformAssetUrls***REMOVED***=***REMOVED***assetUrlOptions;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***preprocessOptions***REMOVED***=***REMOVED***block.lang***REMOVED***&&***REMOVED***options.template?.preprocessOptions;
***REMOVED******REMOVED***if***REMOVED***(block.lang***REMOVED***===***REMOVED***"pug")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***preprocessOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***doctype:***REMOVED***"html",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...preprocessOptions
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***expressionPlugins***REMOVED***=***REMOVED***options.template?.compilerOptions?.expressionPlugins***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***lang***REMOVED***=***REMOVED***descriptor.scriptSetup?.lang***REMOVED***||***REMOVED***descriptor.script?.lang;
***REMOVED******REMOVED***if***REMOVED***(lang***REMOVED***&&***REMOVED***/tsx?$/.test(lang)***REMOVED***&&***REMOVED***!expressionPlugins.includes("typescript"))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***expressionPlugins.push("typescript");
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***...options.template,
***REMOVED******REMOVED******REMOVED******REMOVED***id,
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-ignore***REMOVED***only***REMOVED***available***REMOVED***in***REMOVED***vue***REMOVED***3.4+
***REMOVED******REMOVED******REMOVED******REMOVED***ast:***REMOVED***canReuseAST(options.compiler.version)***REMOVED***?***REMOVED***descriptor.template?.ast***REMOVED***:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED***scoped:***REMOVED***hasScoped,
***REMOVED******REMOVED******REMOVED******REMOVED***slotted:***REMOVED***descriptor.slotted,
***REMOVED******REMOVED******REMOVED******REMOVED***isProd:***REMOVED***options.isProduction,
***REMOVED******REMOVED******REMOVED******REMOVED***inMap:***REMOVED***block.src***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***block.map,
***REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED***ssrCssVars:***REMOVED***cssVars,
***REMOVED******REMOVED******REMOVED******REMOVED***transformAssetUrls,
***REMOVED******REMOVED******REMOVED******REMOVED***preprocessLang:***REMOVED***block.lang***REMOVED***===***REMOVED***"html"***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***block.lang,
***REMOVED******REMOVED******REMOVED******REMOVED***preprocessOptions,
***REMOVED******REMOVED******REMOVED******REMOVED***compilerOptions:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...options.template?.compilerOptions,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scopeId:***REMOVED***hasScoped***REMOVED***?***REMOVED***`data-v-${id}`***REMOVED***:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bindingMetadata:***REMOVED***resolvedScript***REMOVED***?***REMOVED***resolvedScript.bindings***REMOVED***:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expressionPlugins,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceMap:***REMOVED***options.sourceMap
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}
function***REMOVED***canReuseAST(version)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(version)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***[_,***REMOVED***minor,***REMOVED***patch]***REMOVED***=***REMOVED***version.split(".").map(Number);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(minor***REMOVED***>=***REMOVED***4***REMOVED***&&***REMOVED***patch***REMOVED***>=***REMOVED***3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
}

const***REMOVED***clientCache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***WeakMap();
const***REMOVED***ssrCache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***WeakMap();
const***REMOVED***typeDepToSFCMap***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
function***REMOVED***invalidateScript(filename)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***desc***REMOVED***=***REMOVED***cache.get(filename);
***REMOVED******REMOVED***if***REMOVED***(desc)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***clientCache.delete(desc);
***REMOVED******REMOVED******REMOVED******REMOVED***ssrCache.delete(desc);
***REMOVED******REMOVED***}
}
function***REMOVED***getResolvedScript(descriptor,***REMOVED***ssr)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***(ssr***REMOVED***?***REMOVED***ssrCache***REMOVED***:***REMOVED***clientCache).get(descriptor);
}
function***REMOVED***setResolvedScript(descriptor,***REMOVED***script,***REMOVED***ssr)***REMOVED***{
***REMOVED******REMOVED***(ssr***REMOVED***?***REMOVED***ssrCache***REMOVED***:***REMOVED***clientCache).set(descriptor,***REMOVED***script);
}
function***REMOVED***isUseInlineTemplate(descriptor,***REMOVED***isProd)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***isProd***REMOVED***&&***REMOVED***!!descriptor.scriptSetup***REMOVED***&&***REMOVED***!descriptor.template?.src;
}
const***REMOVED***scriptIdentifier***REMOVED***=***REMOVED***`_sfc_main`;
function***REMOVED***resolveScript(descriptor,***REMOVED***options,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!descriptor.script***REMOVED***&&***REMOVED***!descriptor.scriptSetup)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***cacheToUse***REMOVED***=***REMOVED***ssr***REMOVED***?***REMOVED***ssrCache***REMOVED***:***REMOVED***clientCache;
***REMOVED******REMOVED***const***REMOVED***cached***REMOVED***=***REMOVED***cacheToUse.get(descriptor);
***REMOVED******REMOVED***if***REMOVED***(cached)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cached;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***resolved***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***resolved***REMOVED***=***REMOVED***options.compiler.compileScript(descriptor,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***...options.script,
***REMOVED******REMOVED******REMOVED******REMOVED***id:***REMOVED***descriptor.id,
***REMOVED******REMOVED******REMOVED******REMOVED***isProd:***REMOVED***options.isProduction,
***REMOVED******REMOVED******REMOVED******REMOVED***inlineTemplate:***REMOVED***isUseInlineTemplate(descriptor,***REMOVED***!options.devServer),
***REMOVED******REMOVED******REMOVED******REMOVED***reactivityTransform:***REMOVED***options.reactivityTransform***REMOVED***!==***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***templateOptions:***REMOVED***resolveTemplateCompilerOptions(descriptor,***REMOVED***options,***REMOVED***ssr),
***REMOVED******REMOVED******REMOVED******REMOVED***sourceMap:***REMOVED***options.sourceMap,
***REMOVED******REMOVED******REMOVED******REMOVED***genDefaultAs:***REMOVED***canInlineMain(descriptor,***REMOVED***options)***REMOVED***?***REMOVED***scriptIdentifier***REMOVED***:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***customElement
***REMOVED******REMOVED***});
***REMOVED******REMOVED***if***REMOVED***(!options.isProduction***REMOVED***&&***REMOVED***resolved?.deps)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***[key,***REMOVED***sfcs]***REMOVED***of***REMOVED***typeDepToSFCMap)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sfcs.has(descriptor.filename)***REMOVED***&&***REMOVED***!resolved.deps.includes(key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sfcs.delete(descriptor.filename);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***dep***REMOVED***of***REMOVED***resolved.deps)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***existingSet***REMOVED***=***REMOVED***typeDepToSFCMap.get(dep);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!existingSet)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typeDepToSFCMap.set(dep,***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Set([descriptor.filename]));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***existingSet.add(descriptor.filename);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***cacheToUse.set(descriptor,***REMOVED***resolved);
***REMOVED******REMOVED***return***REMOVED***resolved;
}
function***REMOVED***canInlineMain(descriptor,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(descriptor.script?.src***REMOVED***||***REMOVED***descriptor.scriptSetup?.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***lang***REMOVED***=***REMOVED***descriptor.script?.lang***REMOVED***||***REMOVED***descriptor.scriptSetup?.lang;
***REMOVED******REMOVED***if***REMOVED***(!lang***REMOVED***||***REMOVED***lang***REMOVED***===***REMOVED***"js")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(lang***REMOVED***===***REMOVED***"ts"***REMOVED***&&***REMOVED***options.devServer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
}

const***REMOVED***comma***REMOVED***=***REMOVED***','.charCodeAt(0);
const***REMOVED***semicolon***REMOVED***=***REMOVED***';'.charCodeAt(0);
const***REMOVED***chars***REMOVED***=***REMOVED***'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
const***REMOVED***intToChar***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(64);***REMOVED***//***REMOVED***64***REMOVED***possible***REMOVED***chars.
const***REMOVED***charToInt***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(128);***REMOVED***//***REMOVED***z***REMOVED***is***REMOVED***122***REMOVED***in***REMOVED***ASCII
for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***chars.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***c***REMOVED***=***REMOVED***chars.charCodeAt(i);
***REMOVED******REMOVED******REMOVED******REMOVED***intToChar[i]***REMOVED***=***REMOVED***c;
***REMOVED******REMOVED******REMOVED******REMOVED***charToInt[c]***REMOVED***=***REMOVED***i;
}
//***REMOVED***Provide***REMOVED***a***REMOVED***fallback***REMOVED***for***REMOVED***older***REMOVED***environments.
const***REMOVED***td***REMOVED***=***REMOVED***typeof***REMOVED***TextDecoder***REMOVED***!==***REMOVED***'undefined'
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***/****REMOVED***#__PURE__***REMOVED****/***REMOVED***new***REMOVED***TextDecoder()
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***typeof***REMOVED***Buffer***REMOVED***!==***REMOVED***'undefined'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decode(buf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***out***REMOVED***=***REMOVED***Buffer.from(buf.buffer,***REMOVED***buf.byteOffset,***REMOVED***buf.byteLength);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***out.toString();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decode(buf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***out***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***buf.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***out***REMOVED***+=***REMOVED***String.fromCharCode(buf[i]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***out;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
function***REMOVED***decode(mappings)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***new***REMOVED***Int32Array(5);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***decoded***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***semi***REMOVED***=***REMOVED***indexOf(mappings,***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***line***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sorted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***lastCol***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state[0]***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***index;***REMOVED***i***REMOVED***<***REMOVED***semi;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***seg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***decodeInteger(mappings,***REMOVED***i,***REMOVED***state,***REMOVED***0);***REMOVED***//***REMOVED***genColumn
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***col***REMOVED***=***REMOVED***state[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(col***REMOVED***<***REMOVED***lastCol)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sorted***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastCol***REMOVED***=***REMOVED***col;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hasMoreVlq(mappings,***REMOVED***i,***REMOVED***semi))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***decodeInteger(mappings,***REMOVED***i,***REMOVED***state,***REMOVED***1);***REMOVED***//***REMOVED***sourcesIndex
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***decodeInteger(mappings,***REMOVED***i,***REMOVED***state,***REMOVED***2);***REMOVED***//***REMOVED***sourceLine
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***decodeInteger(mappings,***REMOVED***i,***REMOVED***state,***REMOVED***3);***REMOVED***//***REMOVED***sourceColumn
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hasMoreVlq(mappings,***REMOVED***i,***REMOVED***semi))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***decodeInteger(mappings,***REMOVED***i,***REMOVED***state,***REMOVED***4);***REMOVED***//***REMOVED***namesIndex
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***seg***REMOVED***=***REMOVED***[col,***REMOVED***state[1],***REMOVED***state[2],***REMOVED***state[3],***REMOVED***state[4]];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***seg***REMOVED***=***REMOVED***[col,***REMOVED***state[1],***REMOVED***state[2],***REMOVED***state[3]];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***seg***REMOVED***=***REMOVED***[col];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line.push(seg);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!sorted)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sort(line);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***decoded.push(line);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index***REMOVED***=***REMOVED***semi***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***while***REMOVED***(index***REMOVED***<=***REMOVED***mappings.length);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***decoded;
}
function***REMOVED***indexOf(mappings,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***idx***REMOVED***=***REMOVED***mappings.indexOf(';',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***idx***REMOVED***===***REMOVED***-1***REMOVED***?***REMOVED***mappings.length***REMOVED***:***REMOVED***idx;
}
function***REMOVED***decodeInteger(mappings,***REMOVED***pos,***REMOVED***state,***REMOVED***j)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***value***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***shift***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***integer***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***c***REMOVED***=***REMOVED***mappings.charCodeAt(pos++);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***integer***REMOVED***=***REMOVED***charToInt[c];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***|=***REMOVED***(integer***REMOVED***&***REMOVED***31)***REMOVED***<<***REMOVED***shift;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***shift***REMOVED***+=***REMOVED***5;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***while***REMOVED***(integer***REMOVED***&***REMOVED***32);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***shouldNegate***REMOVED***=***REMOVED***value***REMOVED***&***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***>>>=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(shouldNegate)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***-0x80000000***REMOVED***|***REMOVED***-value;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***state[j]***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***pos;
}
function***REMOVED***hasMoreVlq(mappings,***REMOVED***i,***REMOVED***length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(i***REMOVED***>=***REMOVED***length)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mappings.charCodeAt(i)***REMOVED***!==***REMOVED***comma;
}
function***REMOVED***sort(line)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***line.sort(sortComparator$1);
}
function***REMOVED***sortComparator$1(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***a[0]***REMOVED***-***REMOVED***b[0];
}
function***REMOVED***encode(decoded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***state***REMOVED***=***REMOVED***new***REMOVED***Int32Array(5);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***bufLength***REMOVED***=***REMOVED***1024***REMOVED*******REMOVED***16;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***subLength***REMOVED***=***REMOVED***bufLength***REMOVED***-***REMOVED***36;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***buf***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(bufLength);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***sub***REMOVED***=***REMOVED***buf.subarray(0,***REMOVED***subLength);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pos***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***out***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***decoded.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***line***REMOVED***=***REMOVED***decoded[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(i***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pos***REMOVED***===***REMOVED***bufLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***out***REMOVED***+=***REMOVED***td.decode(buf);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buf[pos++]***REMOVED***=***REMOVED***semicolon;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(line.length***REMOVED***===***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***state[0]***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***j***REMOVED***=***REMOVED***0;***REMOVED***j***REMOVED***<***REMOVED***line.length;***REMOVED***j++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***segment***REMOVED***=***REMOVED***line[j];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***We***REMOVED***can***REMOVED***push***REMOVED***up***REMOVED***to***REMOVED***5***REMOVED***ints,***REMOVED***each***REMOVED***int***REMOVED***can***REMOVED***take***REMOVED***at***REMOVED***most***REMOVED***7***REMOVED***chars,***REMOVED***and***REMOVED***we
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***may***REMOVED***push***REMOVED***a***REMOVED***comma.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pos***REMOVED***>***REMOVED***subLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***out***REMOVED***+=***REMOVED***td.decode(sub);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buf.copyWithin(0,***REMOVED***subLength,***REMOVED***pos);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***-=***REMOVED***subLength;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(j***REMOVED***>***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buf[pos++]***REMOVED***=***REMOVED***comma;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***encodeInteger(buf,***REMOVED***pos,***REMOVED***state,***REMOVED***segment,***REMOVED***0);***REMOVED***//***REMOVED***genColumn
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(segment.length***REMOVED***===***REMOVED***1)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***encodeInteger(buf,***REMOVED***pos,***REMOVED***state,***REMOVED***segment,***REMOVED***1);***REMOVED***//***REMOVED***sourcesIndex
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***encodeInteger(buf,***REMOVED***pos,***REMOVED***state,***REMOVED***segment,***REMOVED***2);***REMOVED***//***REMOVED***sourceLine
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***encodeInteger(buf,***REMOVED***pos,***REMOVED***state,***REMOVED***segment,***REMOVED***3);***REMOVED***//***REMOVED***sourceColumn
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(segment.length***REMOVED***===***REMOVED***4)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pos***REMOVED***=***REMOVED***encodeInteger(buf,***REMOVED***pos,***REMOVED***state,***REMOVED***segment,***REMOVED***4);***REMOVED***//***REMOVED***namesIndex
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***out***REMOVED***+***REMOVED***td.decode(buf.subarray(0,***REMOVED***pos));
}
function***REMOVED***encodeInteger(buf,***REMOVED***pos,***REMOVED***state,***REMOVED***segment,***REMOVED***j)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***next***REMOVED***=***REMOVED***segment[j];
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***num***REMOVED***=***REMOVED***next***REMOVED***-***REMOVED***state[j];
***REMOVED******REMOVED******REMOVED******REMOVED***state[j]***REMOVED***=***REMOVED***next;
***REMOVED******REMOVED******REMOVED******REMOVED***num***REMOVED***=***REMOVED***num***REMOVED***<***REMOVED***0***REMOVED***?***REMOVED***(-num***REMOVED***<<***REMOVED***1)***REMOVED***|***REMOVED***1***REMOVED***:***REMOVED***num***REMOVED***<<***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***clamped***REMOVED***=***REMOVED***num***REMOVED***&***REMOVED***0b011111;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***num***REMOVED***>>>=***REMOVED***5;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(num***REMOVED***>***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clamped***REMOVED***|=***REMOVED***0b100000;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buf[pos++]***REMOVED***=***REMOVED***intToChar[clamped];
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***while***REMOVED***(num***REMOVED***>***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***pos;
}

//***REMOVED***Matches***REMOVED***the***REMOVED***scheme***REMOVED***of***REMOVED***a***REMOVED***URL,***REMOVED***eg***REMOVED***"http://"
const***REMOVED***schemeRegex***REMOVED***=***REMOVED***/^[\w+.-]+:\/\//;
/**
***REMOVED*******REMOVED***Matches***REMOVED***the***REMOVED***parts***REMOVED***of***REMOVED***a***REMOVED***URL:
***REMOVED*******REMOVED***1.***REMOVED***Scheme,***REMOVED***including***REMOVED***":",***REMOVED***guaranteed.
***REMOVED*******REMOVED***2.***REMOVED***User/password,***REMOVED***including***REMOVED***"@",***REMOVED***optional.
***REMOVED*******REMOVED***3.***REMOVED***Host,***REMOVED***guaranteed.
***REMOVED*******REMOVED***4.***REMOVED***Port,***REMOVED***including***REMOVED***":",***REMOVED***optional.
***REMOVED*******REMOVED***5.***REMOVED***Path,***REMOVED***including***REMOVED***"/",***REMOVED***optional.
***REMOVED*******REMOVED***6.***REMOVED***Query,***REMOVED***including***REMOVED***"?",***REMOVED***optional.
***REMOVED*******REMOVED***7.***REMOVED***Hash,***REMOVED***including***REMOVED***"#",***REMOVED***optional.
***REMOVED****/
const***REMOVED***urlRegex***REMOVED***=***REMOVED***/^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?(\?[^#]*)?(#.*)?/;
/**
***REMOVED*******REMOVED***File***REMOVED***URLs***REMOVED***are***REMOVED***weird.***REMOVED***They***REMOVED***dont'***REMOVED***need***REMOVED***the***REMOVED***regular***REMOVED***`//`***REMOVED***in***REMOVED***the***REMOVED***scheme,***REMOVED***they***REMOVED***may***REMOVED***or***REMOVED***may***REMOVED***not***REMOVED***start
***REMOVED*******REMOVED***with***REMOVED***a***REMOVED***leading***REMOVED***`/`,***REMOVED***they***REMOVED***can***REMOVED***have***REMOVED***a***REMOVED***domain***REMOVED***(but***REMOVED***only***REMOVED***if***REMOVED***they***REMOVED***don't***REMOVED***start***REMOVED***with***REMOVED***a***REMOVED***Windows***REMOVED***drive).
***REMOVED****
***REMOVED*******REMOVED***1.***REMOVED***Host,***REMOVED***optional.
***REMOVED*******REMOVED***2.***REMOVED***Path,***REMOVED***which***REMOVED***may***REMOVED***include***REMOVED***"/",***REMOVED***guaranteed.
***REMOVED*******REMOVED***3.***REMOVED***Query,***REMOVED***including***REMOVED***"?",***REMOVED***optional.
***REMOVED*******REMOVED***4.***REMOVED***Hash,***REMOVED***including***REMOVED***"#",***REMOVED***optional.
***REMOVED****/
const***REMOVED***fileRegex***REMOVED***=***REMOVED***/^file:(?:\/\/((?![a-z]:)[^/#?]*)?)?(\/?[^#?]*)(\?[^#]*)?(#.*)?/i;
var***REMOVED***UrlType;
(function***REMOVED***(UrlType)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Empty"]***REMOVED***=***REMOVED***1]***REMOVED***=***REMOVED***"Empty";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Hash"]***REMOVED***=***REMOVED***2]***REMOVED***=***REMOVED***"Hash";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Query"]***REMOVED***=***REMOVED***3]***REMOVED***=***REMOVED***"Query";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["RelativePath"]***REMOVED***=***REMOVED***4]***REMOVED***=***REMOVED***"RelativePath";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["AbsolutePath"]***REMOVED***=***REMOVED***5]***REMOVED***=***REMOVED***"AbsolutePath";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["SchemeRelative"]***REMOVED***=***REMOVED***6]***REMOVED***=***REMOVED***"SchemeRelative";
***REMOVED******REMOVED******REMOVED******REMOVED***UrlType[UrlType["Absolute"]***REMOVED***=***REMOVED***7]***REMOVED***=***REMOVED***"Absolute";
})(UrlType***REMOVED***||***REMOVED***(UrlType***REMOVED***=***REMOVED***{}));
function***REMOVED***isAbsoluteUrl(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***schemeRegex.test(input);
}
function***REMOVED***isSchemeRelativeUrl(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***input.startsWith('//');
}
function***REMOVED***isAbsolutePath(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***input.startsWith('/');
}
function***REMOVED***isFileUrl(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***input.startsWith('file:');
}
function***REMOVED***isRelative(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***/^[.?#]/.test(input);
}
function***REMOVED***parseAbsoluteUrl(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***urlRegex.exec(input);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***makeUrl(match[1],***REMOVED***match[2]***REMOVED***||***REMOVED***'',***REMOVED***match[3],***REMOVED***match[4]***REMOVED***||***REMOVED***'',***REMOVED***match[5]***REMOVED***||***REMOVED***'/',***REMOVED***match[6]***REMOVED***||***REMOVED***'',***REMOVED***match[7]***REMOVED***||***REMOVED***'');
}
function***REMOVED***parseFileUrl(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***fileRegex.exec(input);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***match[2];
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***makeUrl('file:',***REMOVED***'',***REMOVED***match[1]***REMOVED***||***REMOVED***'',***REMOVED***'',***REMOVED***isAbsolutePath(path)***REMOVED***?***REMOVED***path***REMOVED***:***REMOVED***'/'***REMOVED***+***REMOVED***path,***REMOVED***match[3]***REMOVED***||***REMOVED***'',***REMOVED***match[4]***REMOVED***||***REMOVED***'');
}
function***REMOVED***makeUrl(scheme,***REMOVED***user,***REMOVED***host,***REMOVED***port,***REMOVED***path,***REMOVED***query,***REMOVED***hash)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scheme,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***user,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***host,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***port,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***query,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hash,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***type:***REMOVED***UrlType.Absolute,
***REMOVED******REMOVED******REMOVED******REMOVED***};
}
function***REMOVED***parseUrl(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isSchemeRelativeUrl(input))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***url***REMOVED***=***REMOVED***parseAbsoluteUrl('http:'***REMOVED***+***REMOVED***input);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.scheme***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.type***REMOVED***=***REMOVED***UrlType.SchemeRelative;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isAbsolutePath(input))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***url***REMOVED***=***REMOVED***parseAbsoluteUrl('http://foo.com'***REMOVED***+***REMOVED***input);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.scheme***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.host***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.type***REMOVED***=***REMOVED***UrlType.AbsolutePath;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isFileUrl(input))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parseFileUrl(input);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isAbsoluteUrl(input))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parseAbsoluteUrl(input);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***url***REMOVED***=***REMOVED***parseAbsoluteUrl('http://foo.com/'***REMOVED***+***REMOVED***input);
***REMOVED******REMOVED******REMOVED******REMOVED***url.scheme***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***url.host***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***url.type***REMOVED***=***REMOVED***input
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***input.startsWith('?')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***UrlType.Query
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***input.startsWith('#')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***UrlType.Hash
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***UrlType.RelativePath
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***UrlType.Empty;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url;
}
function***REMOVED***stripPathFilename(path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***a***REMOVED***path***REMOVED***ends***REMOVED***with***REMOVED***a***REMOVED***parent***REMOVED***directory***REMOVED***"..",***REMOVED***then***REMOVED***it's***REMOVED***a***REMOVED***relative***REMOVED***path***REMOVED***with***REMOVED***excess***REMOVED***parent
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***paths.***REMOVED***It's***REMOVED***not***REMOVED***a***REMOVED***file,***REMOVED***so***REMOVED***we***REMOVED***can't***REMOVED***strip***REMOVED***it.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path.endsWith('/..'))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***path.lastIndexOf('/');
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path.slice(0,***REMOVED***index***REMOVED***+***REMOVED***1);
}
function***REMOVED***mergePaths(url,***REMOVED***base)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***normalizePath(base,***REMOVED***base.type);
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***path***REMOVED***is***REMOVED***just***REMOVED***a***REMOVED***"/",***REMOVED***then***REMOVED***it***REMOVED***was***REMOVED***an***REMOVED***empty***REMOVED***path***REMOVED***to***REMOVED***begin***REMOVED***with***REMOVED***(remember,***REMOVED***we're***REMOVED***a***REMOVED***relative
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***path).
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(url.path***REMOVED***===***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.path***REMOVED***=***REMOVED***base.path;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Resolution***REMOVED***happens***REMOVED***relative***REMOVED***to***REMOVED***the***REMOVED***base***REMOVED***path's***REMOVED***directory,***REMOVED***not***REMOVED***the***REMOVED***file.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.path***REMOVED***=***REMOVED***stripPathFilename(base.path)***REMOVED***+***REMOVED***url.path;
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
/**
***REMOVED*******REMOVED***The***REMOVED***path***REMOVED***can***REMOVED***have***REMOVED***empty***REMOVED***directories***REMOVED***"//",***REMOVED***unneeded***REMOVED***parents***REMOVED***"foo/..",***REMOVED***or***REMOVED***current***REMOVED***directory
***REMOVED*******REMOVED***"foo/.".***REMOVED***We***REMOVED***need***REMOVED***to***REMOVED***normalize***REMOVED***to***REMOVED***a***REMOVED***standard***REMOVED***representation.
***REMOVED****/
function***REMOVED***normalizePath(url,***REMOVED***type)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rel***REMOVED***=***REMOVED***type***REMOVED***<=***REMOVED***UrlType.RelativePath;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pieces***REMOVED***=***REMOVED***url.path.split('/');
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***We***REMOVED***need***REMOVED***to***REMOVED***preserve***REMOVED***the***REMOVED***first***REMOVED***piece***REMOVED***always,***REMOVED***so***REMOVED***that***REMOVED***we***REMOVED***output***REMOVED***a***REMOVED***leading***REMOVED***slash.***REMOVED***The***REMOVED***item***REMOVED***at
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***pieces[0]***REMOVED***is***REMOVED***an***REMOVED***empty***REMOVED***string.
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pointer***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Positive***REMOVED***is***REMOVED***the***REMOVED***number***REMOVED***of***REMOVED***real***REMOVED***directories***REMOVED***we've***REMOVED***output,***REMOVED***used***REMOVED***for***REMOVED***popping***REMOVED***a***REMOVED***parent***REMOVED***directory.
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Eg,***REMOVED***"foo/bar/.."***REMOVED***will***REMOVED***have***REMOVED***a***REMOVED***positive***REMOVED***2,***REMOVED***and***REMOVED***we***REMOVED***can***REMOVED***decrement***REMOVED***to***REMOVED***be***REMOVED***left***REMOVED***with***REMOVED***just***REMOVED***"foo".
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***positive***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***We***REMOVED***need***REMOVED***to***REMOVED***keep***REMOVED***a***REMOVED***trailing***REMOVED***slash***REMOVED***if***REMOVED***we***REMOVED***encounter***REMOVED***an***REMOVED***empty***REMOVED***directory***REMOVED***(eg,***REMOVED***splitting***REMOVED***"foo/"***REMOVED***will
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***generate***REMOVED***`["foo",***REMOVED***""]`***REMOVED***pieces).***REMOVED***And,***REMOVED***if***REMOVED***we***REMOVED***pop***REMOVED***a***REMOVED***parent***REMOVED***directory.***REMOVED***But***REMOVED***once***REMOVED***we***REMOVED***encounter***REMOVED***a
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***real***REMOVED***directory,***REMOVED***we***REMOVED***won't***REMOVED***need***REMOVED***to***REMOVED***append,***REMOVED***unless***REMOVED***the***REMOVED***other***REMOVED***conditions***REMOVED***happen***REMOVED***again.
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***addTrailingSlash***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***1;***REMOVED***i***REMOVED***<***REMOVED***pieces.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***piece***REMOVED***=***REMOVED***pieces[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***An***REMOVED***empty***REMOVED***directory,***REMOVED***could***REMOVED***be***REMOVED***a***REMOVED***trailing***REMOVED***slash,***REMOVED***or***REMOVED***just***REMOVED***a***REMOVED***double***REMOVED***"//"***REMOVED***in***REMOVED***the***REMOVED***path.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!piece)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***addTrailingSlash***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***we***REMOVED***encounter***REMOVED***a***REMOVED***real***REMOVED***directory,***REMOVED***then***REMOVED***we***REMOVED***don't***REMOVED***need***REMOVED***to***REMOVED***append***REMOVED***anymore.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***addTrailingSlash***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***A***REMOVED***current***REMOVED***directory,***REMOVED***which***REMOVED***we***REMOVED***can***REMOVED***always***REMOVED***drop.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(piece***REMOVED***===***REMOVED***'.')
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***A***REMOVED***parent***REMOVED***directory,***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***see***REMOVED***if***REMOVED***there***REMOVED***are***REMOVED***any***REMOVED***real***REMOVED***directories***REMOVED***we***REMOVED***can***REMOVED***pop.***REMOVED***Else,***REMOVED***we
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***have***REMOVED***an***REMOVED***excess***REMOVED***of***REMOVED***parents,***REMOVED***and***REMOVED***we'll***REMOVED***need***REMOVED***to***REMOVED***keep***REMOVED***the***REMOVED***"..".
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(piece***REMOVED***===***REMOVED***'..')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(positive)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***addTrailingSlash***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***positive--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pointer--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***if***REMOVED***(rel)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***we're***REMOVED***in***REMOVED***a***REMOVED***relativePath,***REMOVED***then***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***keep***REMOVED***the***REMOVED***excess***REMOVED***parents.***REMOVED***Else,***REMOVED***in***REMOVED***an***REMOVED***absolute
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***URL,***REMOVED***protocol***REMOVED***relative***REMOVED***URL,***REMOVED***or***REMOVED***an***REMOVED***absolute***REMOVED***path,***REMOVED***we***REMOVED***don't***REMOVED***need***REMOVED***to***REMOVED***keep***REMOVED***excess.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pieces[pointer++]***REMOVED***=***REMOVED***piece;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***We've***REMOVED***encountered***REMOVED***a***REMOVED***real***REMOVED***directory.***REMOVED***Move***REMOVED***it***REMOVED***to***REMOVED***the***REMOVED***next***REMOVED***insertion***REMOVED***pointer,***REMOVED***which***REMOVED***accounts***REMOVED***for
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***any***REMOVED***popped***REMOVED***or***REMOVED***dropped***REMOVED***directories.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pieces[pointer++]***REMOVED***=***REMOVED***piece;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***positive++;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***path***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***1;***REMOVED***i***REMOVED***<***REMOVED***pointer;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***+=***REMOVED***'/'***REMOVED***+***REMOVED***pieces[i];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!path***REMOVED***||***REMOVED***(addTrailingSlash***REMOVED***&&***REMOVED***!path.endsWith('/..')))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***+=***REMOVED***'/';
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***url.path***REMOVED***=***REMOVED***path;
}
/**
***REMOVED*******REMOVED***Attempts***REMOVED***to***REMOVED***resolve***REMOVED***`input`***REMOVED***URL/path***REMOVED***relative***REMOVED***to***REMOVED***`base`.
***REMOVED****/
function***REMOVED***resolve$1(input,***REMOVED***base)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!input***REMOVED***&&***REMOVED***!base)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***url***REMOVED***=***REMOVED***parseUrl(input);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***inputType***REMOVED***=***REMOVED***url.type;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(base***REMOVED***&&***REMOVED***inputType***REMOVED***!==***REMOVED***UrlType.Absolute)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***baseUrl***REMOVED***=***REMOVED***parseUrl(base);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***baseType***REMOVED***=***REMOVED***baseUrl.type;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(inputType)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.Empty:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.hash***REMOVED***=***REMOVED***baseUrl.hash;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***fall***REMOVED***through
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.Hash:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.query***REMOVED***=***REMOVED***baseUrl.query;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***fall***REMOVED***through
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.Query:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.RelativePath:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mergePaths(url,***REMOVED***baseUrl);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***fall***REMOVED***through
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.AbsolutePath:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***host,***REMOVED***user,***REMOVED***and***REMOVED***port***REMOVED***are***REMOVED***joined,***REMOVED***you***REMOVED***can't***REMOVED***copy***REMOVED***one***REMOVED***without***REMOVED***the***REMOVED***others.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.user***REMOVED***=***REMOVED***baseUrl.user;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.host***REMOVED***=***REMOVED***baseUrl.host;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.port***REMOVED***=***REMOVED***baseUrl.port;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***fall***REMOVED***through
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.SchemeRelative:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***input***REMOVED***doesn't***REMOVED***have***REMOVED***a***REMOVED***schema***REMOVED***at***REMOVED***least,***REMOVED***so***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***copy***REMOVED***at***REMOVED***least***REMOVED***that***REMOVED***over.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url.scheme***REMOVED***=***REMOVED***baseUrl.scheme;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(baseType***REMOVED***>***REMOVED***inputType)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***inputType***REMOVED***=***REMOVED***baseType;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***normalizePath(url,***REMOVED***inputType);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***queryHash***REMOVED***=***REMOVED***url.query***REMOVED***+***REMOVED***url.hash;
***REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(inputType)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***This***REMOVED***is***REMOVED***impossible,***REMOVED***because***REMOVED***of***REMOVED***the***REMOVED***empty***REMOVED***checks***REMOVED***at***REMOVED***the***REMOVED***start***REMOVED***of***REMOVED***the***REMOVED***function.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***case***REMOVED***UrlType.Empty:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.Hash:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.Query:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***queryHash;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.RelativePath:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***first***REMOVED***char***REMOVED***is***REMOVED***always***REMOVED***a***REMOVED***"/",***REMOVED***and***REMOVED***we***REMOVED***need***REMOVED***it***REMOVED***to***REMOVED***be***REMOVED***relative.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***url.path.slice(1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!path)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***queryHash***REMOVED***||***REMOVED***'.';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isRelative(base***REMOVED***||***REMOVED***input)***REMOVED***&&***REMOVED***!isRelative(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***base***REMOVED***started***REMOVED***with***REMOVED***a***REMOVED***leading***REMOVED***".",***REMOVED***or***REMOVED***there***REMOVED***is***REMOVED***no***REMOVED***base***REMOVED***and***REMOVED***input***REMOVED***started***REMOVED***with***REMOVED***a***REMOVED***".",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***then***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***ensure***REMOVED***that***REMOVED***the***REMOVED***relative***REMOVED***path***REMOVED***starts***REMOVED***with***REMOVED***a***REMOVED***".".***REMOVED***We***REMOVED***don't***REMOVED***know***REMOVED***if
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***relative***REMOVED***starts***REMOVED***with***REMOVED***a***REMOVED***"..",***REMOVED***though,***REMOVED***so***REMOVED***check***REMOVED***before***REMOVED***prepending.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'./'***REMOVED***+***REMOVED***path***REMOVED***+***REMOVED***queryHash;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path***REMOVED***+***REMOVED***queryHash;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***UrlType.AbsolutePath:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url.path***REMOVED***+***REMOVED***queryHash;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***default:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***url.scheme***REMOVED***+***REMOVED***'//'***REMOVED***+***REMOVED***url.user***REMOVED***+***REMOVED***url.host***REMOVED***+***REMOVED***url.port***REMOVED***+***REMOVED***url.path***REMOVED***+***REMOVED***queryHash;
***REMOVED******REMOVED******REMOVED******REMOVED***}
}

function***REMOVED***resolve(input,***REMOVED***base)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***base***REMOVED***is***REMOVED***always***REMOVED***treated***REMOVED***as***REMOVED***a***REMOVED***directory,***REMOVED***if***REMOVED***it's***REMOVED***not***REMOVED***empty.
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://github.com/mozilla/source-map/blob/8cb3ee57/lib/util.js#L327
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***https://github.com/chromium/chromium/blob/da4adbb3/third_party/blink/renderer/devtools/front_end/sdk/SourceMap.js#L400-L401
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(base***REMOVED***&&***REMOVED***!base.endsWith('/'))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***+=***REMOVED***'/';
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***resolve$1(input,***REMOVED***base);
}

/**
***REMOVED*******REMOVED***Removes***REMOVED***everything***REMOVED***after***REMOVED***the***REMOVED***last***REMOVED***"/",***REMOVED***but***REMOVED***leaves***REMOVED***the***REMOVED***slash.
***REMOVED****/
function***REMOVED***stripFilename(path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!path)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***path.lastIndexOf('/');
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path.slice(0,***REMOVED***index***REMOVED***+***REMOVED***1);
}

const***REMOVED***COLUMN$1***REMOVED***=***REMOVED***0;

function***REMOVED***maybeSort(mappings,***REMOVED***owned)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***unsortedIndex***REMOVED***=***REMOVED***nextUnsortedSegmentLine(mappings,***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(unsortedIndex***REMOVED***===***REMOVED***mappings.length)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mappings;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***we***REMOVED***own***REMOVED***the***REMOVED***array***REMOVED***(meaning***REMOVED***we***REMOVED***parsed***REMOVED***it***REMOVED***from***REMOVED***JSON),***REMOVED***then***REMOVED***we're***REMOVED***free***REMOVED***to***REMOVED***directly***REMOVED***mutate***REMOVED***it.***REMOVED***If
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***not,***REMOVED***we***REMOVED***do***REMOVED***not***REMOVED***want***REMOVED***to***REMOVED***modify***REMOVED***the***REMOVED***consumer's***REMOVED***input***REMOVED***array.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!owned)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mappings***REMOVED***=***REMOVED***mappings.slice();
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***unsortedIndex;***REMOVED***i***REMOVED***<***REMOVED***mappings.length;***REMOVED***i***REMOVED***=***REMOVED***nextUnsortedSegmentLine(mappings,***REMOVED***i***REMOVED***+***REMOVED***1))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mappings[i]***REMOVED***=***REMOVED***sortSegments(mappings[i],***REMOVED***owned);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mappings;
}
function***REMOVED***nextUnsortedSegmentLine(mappings,***REMOVED***start)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***start;***REMOVED***i***REMOVED***<***REMOVED***mappings.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isSorted(mappings[i]))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***i;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mappings.length;
}
function***REMOVED***isSorted(line)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***j***REMOVED***=***REMOVED***1;***REMOVED***j***REMOVED***<***REMOVED***line.length;***REMOVED***j++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(line[j][COLUMN$1]***REMOVED***<***REMOVED***line[j***REMOVED***-***REMOVED***1][COLUMN$1])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
}
function***REMOVED***sortSegments(line,***REMOVED***owned)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!owned)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line***REMOVED***=***REMOVED***line.slice();
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***line.sort(sortComparator);
}
function***REMOVED***sortComparator(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***a[COLUMN$1]***REMOVED***-***REMOVED***b[COLUMN$1];
}
function***REMOVED***memoizedState()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastKey:***REMOVED***-1,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastNeedle:***REMOVED***-1,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastIndex:***REMOVED***-1,
***REMOVED******REMOVED******REMOVED******REMOVED***};
}
/**
***REMOVED*******REMOVED***Returns***REMOVED***the***REMOVED***decoded***REMOVED***(array***REMOVED***of***REMOVED***lines***REMOVED***of***REMOVED***segments)***REMOVED***form***REMOVED***of***REMOVED***the***REMOVED***SourceMap's***REMOVED***mappings***REMOVED***field.
***REMOVED****/
let***REMOVED***decodedMappings;
/**
***REMOVED*******REMOVED***Iterates***REMOVED***each***REMOVED***mapping***REMOVED***in***REMOVED***generated***REMOVED***position***REMOVED***order.
***REMOVED****/
let***REMOVED***eachMapping;
class***REMOVED***TraceMap***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor(map,***REMOVED***mapUrl)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isString***REMOVED***=***REMOVED***typeof***REMOVED***map***REMOVED***===***REMOVED***'string';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isString***REMOVED***&&***REMOVED***map._decodedMemo)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***map;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parsed***REMOVED***=***REMOVED***(isString***REMOVED***?***REMOVED***JSON.parse(map)***REMOVED***:***REMOVED***map);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***version,***REMOVED***file,***REMOVED***names,***REMOVED***sourceRoot,***REMOVED***sources,***REMOVED***sourcesContent***REMOVED***}***REMOVED***=***REMOVED***parsed;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.version***REMOVED***=***REMOVED***version;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.file***REMOVED***=***REMOVED***file;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.names***REMOVED***=***REMOVED***names***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.sourceRoot***REMOVED***=***REMOVED***sourceRoot;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.sources***REMOVED***=***REMOVED***sources;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.sourcesContent***REMOVED***=***REMOVED***sourcesContent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***from***REMOVED***=***REMOVED***resolve(sourceRoot***REMOVED***||***REMOVED***'',***REMOVED***stripFilename(mapUrl));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.resolvedSources***REMOVED***=***REMOVED***sources.map((s)***REMOVED***=>***REMOVED***resolve(s***REMOVED***||***REMOVED***'',***REMOVED***from));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***mappings***REMOVED***}***REMOVED***=***REMOVED***parsed;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***mappings***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._encoded***REMOVED***=***REMOVED***mappings;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._decoded***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._encoded***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._decoded***REMOVED***=***REMOVED***maybeSort(mappings,***REMOVED***isString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._decodedMemo***REMOVED***=***REMOVED***memoizedState();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._bySources***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._bySourceMemos***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***decodedMappings***REMOVED***=***REMOVED***(map)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(map._decoded***REMOVED***||***REMOVED***(map._decoded***REMOVED***=***REMOVED***decode(map._encoded)));
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***eachMapping***REMOVED***=***REMOVED***(map,***REMOVED***cb)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***decoded***REMOVED***=***REMOVED***decodedMappings(map);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***names,***REMOVED***resolvedSources***REMOVED***}***REMOVED***=***REMOVED***map;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***decoded.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***line***REMOVED***=***REMOVED***decoded[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***j***REMOVED***=***REMOVED***0;***REMOVED***j***REMOVED***<***REMOVED***line.length;***REMOVED***j++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***seg***REMOVED***=***REMOVED***line[j];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***generatedLine***REMOVED***=***REMOVED***i***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***generatedColumn***REMOVED***=***REMOVED***seg[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***source***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***originalLine***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***originalColumn***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***name***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(seg.length***REMOVED***!==***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***source***REMOVED***=***REMOVED***resolvedSources[seg[1]];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***originalLine***REMOVED***=***REMOVED***seg[2]***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***originalColumn***REMOVED***=***REMOVED***seg[3];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(seg.length***REMOVED***===***REMOVED***5)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***name***REMOVED***=***REMOVED***names[seg[4]];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cb({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***generatedLine,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***generatedColumn,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***source,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***originalLine,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***originalColumn,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***name,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
})();

/**
***REMOVED*******REMOVED***Gets***REMOVED***the***REMOVED***index***REMOVED***associated***REMOVED***with***REMOVED***`key`***REMOVED***in***REMOVED***the***REMOVED***backing***REMOVED***array,***REMOVED***if***REMOVED***it***REMOVED***is***REMOVED***already***REMOVED***present.
***REMOVED****/
let***REMOVED***get;
/**
***REMOVED*******REMOVED***Puts***REMOVED***`key`***REMOVED***into***REMOVED***the***REMOVED***backing***REMOVED***array,***REMOVED***if***REMOVED***it***REMOVED***is***REMOVED***not***REMOVED***already***REMOVED***present.***REMOVED***Returns
***REMOVED*******REMOVED***the***REMOVED***index***REMOVED***of***REMOVED***the***REMOVED***`key`***REMOVED***in***REMOVED***the***REMOVED***backing***REMOVED***array.
***REMOVED****/
let***REMOVED***put;
/**
***REMOVED*******REMOVED***SetArray***REMOVED***acts***REMOVED***like***REMOVED***a***REMOVED***`Set`***REMOVED***(allowing***REMOVED***only***REMOVED***one***REMOVED***occurrence***REMOVED***of***REMOVED***a***REMOVED***string***REMOVED***`key`),***REMOVED***but***REMOVED***provides***REMOVED***the
***REMOVED*******REMOVED***index***REMOVED***of***REMOVED***the***REMOVED***`key`***REMOVED***in***REMOVED***the***REMOVED***backing***REMOVED***array.
***REMOVED****
***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***designed***REMOVED***to***REMOVED***allow***REMOVED***synchronizing***REMOVED***a***REMOVED***second***REMOVED***array***REMOVED***with***REMOVED***the***REMOVED***contents***REMOVED***of***REMOVED***the***REMOVED***backing***REMOVED***array,
***REMOVED*******REMOVED***like***REMOVED***how***REMOVED***in***REMOVED***a***REMOVED***sourcemap***REMOVED***`sourcesContent[i]`***REMOVED***is***REMOVED***the***REMOVED***source***REMOVED***content***REMOVED***associated***REMOVED***with***REMOVED***`source[i]`,
***REMOVED*******REMOVED***and***REMOVED***there***REMOVED***are***REMOVED***never***REMOVED***duplicates.
***REMOVED****/
class***REMOVED***SetArray***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._indexes***REMOVED***=***REMOVED***{***REMOVED***__proto__:***REMOVED***null***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.array***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***get***REMOVED***=***REMOVED***(strarr,***REMOVED***key)***REMOVED***=>***REMOVED***strarr._indexes[key];
***REMOVED******REMOVED******REMOVED******REMOVED***put***REMOVED***=***REMOVED***(strarr,***REMOVED***key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***key***REMOVED***may***REMOVED***or***REMOVED***may***REMOVED***not***REMOVED***be***REMOVED***present.***REMOVED***If***REMOVED***it***REMOVED***is***REMOVED***present,***REMOVED***it's***REMOVED***a***REMOVED***number.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***get(strarr,***REMOVED***key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***!==***REMOVED***undefined)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***index;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***array,***REMOVED***_indexes:***REMOVED***indexes***REMOVED***}***REMOVED***=***REMOVED***strarr;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(indexes[key]***REMOVED***=***REMOVED***array.push(key)***REMOVED***-***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***};
})();

const***REMOVED***COLUMN***REMOVED***=***REMOVED***0;
const***REMOVED***SOURCES_INDEX***REMOVED***=***REMOVED***1;
const***REMOVED***SOURCE_LINE***REMOVED***=***REMOVED***2;
const***REMOVED***SOURCE_COLUMN***REMOVED***=***REMOVED***3;
const***REMOVED***NAMES_INDEX***REMOVED***=***REMOVED***4;

const***REMOVED***NO_NAME***REMOVED***=***REMOVED***-1;
/**
***REMOVED*******REMOVED***A***REMOVED***high-level***REMOVED***API***REMOVED***to***REMOVED***associate***REMOVED***a***REMOVED***generated***REMOVED***position***REMOVED***with***REMOVED***an***REMOVED***original***REMOVED***source***REMOVED***position.***REMOVED***Line***REMOVED***is
***REMOVED*******REMOVED***1-based,***REMOVED***but***REMOVED***column***REMOVED***is***REMOVED***0-based,***REMOVED***due***REMOVED***to***REMOVED***legacy***REMOVED***behavior***REMOVED***in***REMOVED***`source-map`***REMOVED***library.
***REMOVED****/
let***REMOVED***addMapping;
/**
***REMOVED*******REMOVED***Returns***REMOVED***a***REMOVED***sourcemap***REMOVED***object***REMOVED***(with***REMOVED***decoded***REMOVED***mappings)***REMOVED***suitable***REMOVED***for***REMOVED***passing***REMOVED***to***REMOVED***a***REMOVED***library***REMOVED***that***REMOVED***expects
***REMOVED*******REMOVED***a***REMOVED***sourcemap,***REMOVED***or***REMOVED***to***REMOVED***JSON.stringify.
***REMOVED****/
let***REMOVED***toDecodedMap;
/**
***REMOVED*******REMOVED***Returns***REMOVED***a***REMOVED***sourcemap***REMOVED***object***REMOVED***(with***REMOVED***encoded***REMOVED***mappings)***REMOVED***suitable***REMOVED***for***REMOVED***passing***REMOVED***to***REMOVED***a***REMOVED***library***REMOVED***that***REMOVED***expects
***REMOVED*******REMOVED***a***REMOVED***sourcemap,***REMOVED***or***REMOVED***to***REMOVED***JSON.stringify.
***REMOVED****/
let***REMOVED***toEncodedMap;
/**
***REMOVED*******REMOVED***Constructs***REMOVED***a***REMOVED***new***REMOVED***GenMapping,***REMOVED***using***REMOVED***the***REMOVED***already***REMOVED***present***REMOVED***mappings***REMOVED***of***REMOVED***the***REMOVED***input.
***REMOVED****/
let***REMOVED***fromMap;
//***REMOVED***This***REMOVED***split***REMOVED***declaration***REMOVED***is***REMOVED***only***REMOVED***so***REMOVED***that***REMOVED***terser***REMOVED***can***REMOVED***elminiate***REMOVED***the***REMOVED***static***REMOVED***initialization***REMOVED***block.
let***REMOVED***addSegmentInternal;
/**
***REMOVED*******REMOVED***Provides***REMOVED***the***REMOVED***state***REMOVED***to***REMOVED***generate***REMOVED***a***REMOVED***sourcemap.
***REMOVED****/
class***REMOVED***GenMapping***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor({***REMOVED***file,***REMOVED***sourceRoot***REMOVED***}***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._names***REMOVED***=***REMOVED***new***REMOVED***SetArray();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._sources***REMOVED***=***REMOVED***new***REMOVED***SetArray();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._sourcesContent***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._mappings***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.file***REMOVED***=***REMOVED***file;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.sourceRoot***REMOVED***=***REMOVED***sourceRoot;
***REMOVED******REMOVED******REMOVED******REMOVED***}
}
(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***addMapping***REMOVED***=***REMOVED***(map,***REMOVED***mapping)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***addMappingInternal(false,***REMOVED***map,***REMOVED***mapping);
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***toDecodedMap***REMOVED***=***REMOVED***(map)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***file,***REMOVED***sourceRoot,***REMOVED***_mappings:***REMOVED***mappings,***REMOVED***_sources:***REMOVED***sources,***REMOVED***_sourcesContent:***REMOVED***sourcesContent,***REMOVED***_names:***REMOVED***names,***REMOVED***}***REMOVED***=***REMOVED***map;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***removeEmptyFinalLines(mappings);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***version:***REMOVED***3,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***file:***REMOVED***file***REMOVED***||***REMOVED***undefined,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***names:***REMOVED***names.array,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceRoot:***REMOVED***sourceRoot***REMOVED***||***REMOVED***undefined,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sources:***REMOVED***sources.array,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourcesContent,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mappings,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***toEncodedMap***REMOVED***=***REMOVED***(map)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***decoded***REMOVED***=***REMOVED***toDecodedMap(map);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Object.assign(Object.assign({},***REMOVED***decoded),***REMOVED***{***REMOVED***mappings:***REMOVED***encode(decoded.mappings)***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***fromMap***REMOVED***=***REMOVED***(input)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***map***REMOVED***=***REMOVED***new***REMOVED***TraceMap(input);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***gen***REMOVED***=***REMOVED***new***REMOVED***GenMapping({***REMOVED***file:***REMOVED***map.file,***REMOVED***sourceRoot:***REMOVED***map.sourceRoot***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***putAll(gen._names,***REMOVED***map.names);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***putAll(gen._sources,***REMOVED***map.sources);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***gen._sourcesContent***REMOVED***=***REMOVED***map.sourcesContent***REMOVED***||***REMOVED***map.sources.map(()***REMOVED***=>***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***gen._mappings***REMOVED***=***REMOVED***decodedMappings(map);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***gen;
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Internal***REMOVED***helpers
***REMOVED******REMOVED******REMOVED******REMOVED***addSegmentInternal***REMOVED***=***REMOVED***(skipable,***REMOVED***map,***REMOVED***genLine,***REMOVED***genColumn,***REMOVED***source,***REMOVED***sourceLine,***REMOVED***sourceColumn,***REMOVED***name,***REMOVED***content)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***_mappings:***REMOVED***mappings,***REMOVED***_sources:***REMOVED***sources,***REMOVED***_sourcesContent:***REMOVED***sourcesContent,***REMOVED***_names:***REMOVED***names,***REMOVED***}***REMOVED***=***REMOVED***map;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***line***REMOVED***=***REMOVED***getLine(mappings,***REMOVED***genLine);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***getColumnIndex(line,***REMOVED***genColumn);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!source)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(skipable***REMOVED***&&***REMOVED***skipSourceless(line,***REMOVED***index))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***insert(line,***REMOVED***index,***REMOVED***[genColumn]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***sourcesIndex***REMOVED***=***REMOVED***put(sources,***REMOVED***source);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***namesIndex***REMOVED***=***REMOVED***name***REMOVED***?***REMOVED***put(names,***REMOVED***name)***REMOVED***:***REMOVED***NO_NAME;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sourcesIndex***REMOVED***===***REMOVED***sourcesContent.length)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourcesContent[sourcesIndex]***REMOVED***=***REMOVED***content***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***content***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***content***REMOVED***:***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(skipable***REMOVED***&&***REMOVED***skipSource(line,***REMOVED***index,***REMOVED***sourcesIndex,***REMOVED***sourceLine,***REMOVED***sourceColumn,***REMOVED***namesIndex))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***insert(line,***REMOVED***index,***REMOVED***name
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***[genColumn,***REMOVED***sourcesIndex,***REMOVED***sourceLine,***REMOVED***sourceColumn,***REMOVED***namesIndex]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***[genColumn,***REMOVED***sourcesIndex,***REMOVED***sourceLine,***REMOVED***sourceColumn]);
***REMOVED******REMOVED******REMOVED******REMOVED***};
})();
function***REMOVED***getLine(mappings,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***mappings.length;***REMOVED***i***REMOVED***<=***REMOVED***index;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mappings[i]***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mappings[index];
}
function***REMOVED***getColumnIndex(line,***REMOVED***genColumn)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***line.length;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***index***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***index***REMOVED***=***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***current***REMOVED***=***REMOVED***line[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(genColumn***REMOVED***>=***REMOVED***current[COLUMN])
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***index;
}
function***REMOVED***insert(array,***REMOVED***index,***REMOVED***value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***array.length;***REMOVED***i***REMOVED***>***REMOVED***index;***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***array[i]***REMOVED***=***REMOVED***array[i***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***array[index]***REMOVED***=***REMOVED***value;
}
function***REMOVED***removeEmptyFinalLines(mappings)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***length***REMOVED***}***REMOVED***=***REMOVED***mappings;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***len***REMOVED***=***REMOVED***length;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***len***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***len***REMOVED***=***REMOVED***i,***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mappings[i].length***REMOVED***>***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(len***REMOVED***<***REMOVED***length)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mappings.length***REMOVED***=***REMOVED***len;
}
function***REMOVED***putAll(strarr,***REMOVED***array)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***array.length;***REMOVED***i++)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***put(strarr,***REMOVED***array[i]);
}
function***REMOVED***skipSourceless(line,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***start***REMOVED***of***REMOVED***a***REMOVED***line***REMOVED***is***REMOVED***already***REMOVED***sourceless,***REMOVED***so***REMOVED***adding***REMOVED***a***REMOVED***sourceless***REMOVED***segment***REMOVED***to***REMOVED***the***REMOVED***beginning
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***doesn't***REMOVED***generate***REMOVED***any***REMOVED***useful***REMOVED***information.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***===***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prev***REMOVED***=***REMOVED***line[index***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***previous***REMOVED***segment***REMOVED***is***REMOVED***also***REMOVED***sourceless,***REMOVED***then***REMOVED***adding***REMOVED***another***REMOVED***sourceless***REMOVED***segment***REMOVED***doesn't
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***genrate***REMOVED***any***REMOVED***new***REMOVED***information.***REMOVED***Else,***REMOVED***this***REMOVED***segment***REMOVED***will***REMOVED***end***REMOVED***the***REMOVED***source/named***REMOVED***segment***REMOVED***and***REMOVED***point***REMOVED***to
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***a***REMOVED***sourceless***REMOVED***position,***REMOVED***which***REMOVED***is***REMOVED***useful.
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***prev.length***REMOVED***===***REMOVED***1;
}
function***REMOVED***skipSource(line,***REMOVED***index,***REMOVED***sourcesIndex,***REMOVED***sourceLine,***REMOVED***sourceColumn,***REMOVED***namesIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***A***REMOVED***source/named***REMOVED***segment***REMOVED***at***REMOVED***the***REMOVED***start***REMOVED***of***REMOVED***a***REMOVED***line***REMOVED***gives***REMOVED***position***REMOVED***at***REMOVED***that***REMOVED***genColumn
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***===***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prev***REMOVED***=***REMOVED***line[index***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***previous***REMOVED***segment***REMOVED***is***REMOVED***sourceless,***REMOVED***then***REMOVED***we're***REMOVED***transitioning***REMOVED***to***REMOVED***a***REMOVED***source.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.length***REMOVED***===***REMOVED***1)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***previous***REMOVED***segment***REMOVED***maps***REMOVED***to***REMOVED***the***REMOVED***exact***REMOVED***same***REMOVED***source***REMOVED***position,***REMOVED***then***REMOVED***this***REMOVED***segment***REMOVED***doesn't
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***provide***REMOVED***any***REMOVED***new***REMOVED***position***REMOVED***information.
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(sourcesIndex***REMOVED***===***REMOVED***prev[SOURCES_INDEX]***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceLine***REMOVED***===***REMOVED***prev[SOURCE_LINE]***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceColumn***REMOVED***===***REMOVED***prev[SOURCE_COLUMN]***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***namesIndex***REMOVED***===***REMOVED***(prev.length***REMOVED***===***REMOVED***5***REMOVED***?***REMOVED***prev[NAMES_INDEX]***REMOVED***:***REMOVED***NO_NAME));
}
function***REMOVED***addMappingInternal(skipable,***REMOVED***map,***REMOVED***mapping)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***generated,***REMOVED***source,***REMOVED***original,***REMOVED***name,***REMOVED***content***REMOVED***}***REMOVED***=***REMOVED***mapping;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!source)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***addSegmentInternal(skipable,***REMOVED***map,***REMOVED***generated.line***REMOVED***-***REMOVED***1,***REMOVED***generated.column,***REMOVED***null,***REMOVED***null,***REMOVED***null,***REMOVED***null,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***s***REMOVED***=***REMOVED***source;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***addSegmentInternal(skipable,***REMOVED***map,***REMOVED***generated.line***REMOVED***-***REMOVED***1,***REMOVED***generated.column,***REMOVED***s,***REMOVED***original.line***REMOVED***-***REMOVED***1,***REMOVED***original.column,***REMOVED***name,***REMOVED***content);
}

function***REMOVED***getDefaultExportFromCjs***REMOVED***(x)***REMOVED***{
	return***REMOVED***x***REMOVED***&&***REMOVED***x.__esModule***REMOVED***&&***REMOVED***Object.prototype.hasOwnProperty.call(x,***REMOVED***'default')***REMOVED***?***REMOVED***x['default']***REMOVED***:***REMOVED***x;
}

var***REMOVED***src***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

var***REMOVED***browser***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

/**
***REMOVED*******REMOVED***Helpers.
***REMOVED****/

var***REMOVED***ms;
var***REMOVED***hasRequiredMs;

function***REMOVED***requireMs***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredMs)***REMOVED***return***REMOVED***ms;
	hasRequiredMs***REMOVED***=***REMOVED***1;
	var***REMOVED***s***REMOVED***=***REMOVED***1000;
	var***REMOVED***m***REMOVED***=***REMOVED***s***REMOVED*******REMOVED***60;
	var***REMOVED***h***REMOVED***=***REMOVED***m***REMOVED*******REMOVED***60;
	var***REMOVED***d***REMOVED***=***REMOVED***h***REMOVED*******REMOVED***24;
	var***REMOVED***w***REMOVED***=***REMOVED***d***REMOVED*******REMOVED***7;
	var***REMOVED***y***REMOVED***=***REMOVED***d***REMOVED*******REMOVED***365.25;

	/**
	***REMOVED*******REMOVED***Parse***REMOVED***or***REMOVED***format***REMOVED***the***REMOVED***given***REMOVED***`val`.
	***REMOVED****
	***REMOVED*******REMOVED***Options:
	***REMOVED****
	***REMOVED*******REMOVED******REMOVED***-***REMOVED***`long`***REMOVED***verbose***REMOVED***formatting***REMOVED***[false]
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{String|Number}***REMOVED***val
	***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***[options]
	***REMOVED*******REMOVED***@throws***REMOVED***{Error}***REMOVED***throw***REMOVED***an***REMOVED***error***REMOVED***if***REMOVED***val***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***non-empty***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***number
	***REMOVED*******REMOVED***@return***REMOVED***{String|Number}
	***REMOVED*******REMOVED***@api***REMOVED***public
	***REMOVED****/

	ms***REMOVED***=***REMOVED***function(val,***REMOVED***options)***REMOVED***{
	***REMOVED******REMOVED***options***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
	***REMOVED******REMOVED***var***REMOVED***type***REMOVED***=***REMOVED***typeof***REMOVED***val;
	***REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***val.length***REMOVED***>***REMOVED***0)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parse(val);
	***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'number'***REMOVED***&&***REMOVED***isFinite(val))***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.long***REMOVED***?***REMOVED***fmtLong(val)***REMOVED***:***REMOVED***fmtShort(val);
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(
	***REMOVED******REMOVED******REMOVED******REMOVED***'val***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***non-empty***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***valid***REMOVED***number.***REMOVED***val='***REMOVED***+
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***JSON.stringify(val)
	***REMOVED******REMOVED***);
	};

	/**
	***REMOVED*******REMOVED***Parse***REMOVED***the***REMOVED***given***REMOVED***`str`***REMOVED***and***REMOVED***return***REMOVED***milliseconds.
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***str
	***REMOVED*******REMOVED***@return***REMOVED***{Number}
	***REMOVED*******REMOVED***@api***REMOVED***private
	***REMOVED****/

	function***REMOVED***parse(str)***REMOVED***{
	***REMOVED******REMOVED***str***REMOVED***=***REMOVED***String(str);
	***REMOVED******REMOVED***if***REMOVED***(str.length***REMOVED***>***REMOVED***100)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***var***REMOVED***match***REMOVED***=***REMOVED***/^(-?(?:\d+)?\.?\d+)***REMOVED****(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	***REMOVED******REMOVED******REMOVED******REMOVED***str
	***REMOVED******REMOVED***);
	***REMOVED******REMOVED***if***REMOVED***(!match)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***var***REMOVED***n***REMOVED***=***REMOVED***parseFloat(match[1]);
	***REMOVED******REMOVED***var***REMOVED***type***REMOVED***=***REMOVED***(match[2]***REMOVED***||***REMOVED***'ms').toLowerCase();
	***REMOVED******REMOVED***switch***REMOVED***(type)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'years':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'year':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'yrs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'yr':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'y':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***y;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'weeks':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'week':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'w':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***w;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'days':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'day':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'d':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***d;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hours':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hour':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hrs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'hr':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'h':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***h;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'minutes':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'minute':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'mins':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'min':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'m':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***m;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'seconds':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'second':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'secs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'sec':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'s':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n***REMOVED*******REMOVED***s;
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'milliseconds':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'millisecond':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'msecs':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'msec':
	***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***'ms':
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***n;
	***REMOVED******REMOVED******REMOVED******REMOVED***default:
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***undefined;
	***REMOVED******REMOVED***}
	}

	/**
	***REMOVED*******REMOVED***Short***REMOVED***format***REMOVED***for***REMOVED***`ms`.
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***ms
	***REMOVED*******REMOVED***@return***REMOVED***{String}
	***REMOVED*******REMOVED***@api***REMOVED***private
	***REMOVED****/

	function***REMOVED***fmtShort(ms)***REMOVED***{
	***REMOVED******REMOVED***var***REMOVED***msAbs***REMOVED***=***REMOVED***Math.abs(ms);
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***d)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***d)***REMOVED***+***REMOVED***'d';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***h)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***h)***REMOVED***+***REMOVED***'h';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***m)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***m)***REMOVED***+***REMOVED***'m';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***s)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***s)***REMOVED***+***REMOVED***'s';
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***ms***REMOVED***+***REMOVED***'ms';
	}

	/**
	***REMOVED*******REMOVED***Long***REMOVED***format***REMOVED***for***REMOVED***`ms`.
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***ms
	***REMOVED*******REMOVED***@return***REMOVED***{String}
	***REMOVED*******REMOVED***@api***REMOVED***private
	***REMOVED****/

	function***REMOVED***fmtLong(ms)***REMOVED***{
	***REMOVED******REMOVED***var***REMOVED***msAbs***REMOVED***=***REMOVED***Math.abs(ms);
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***d)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***d,***REMOVED***'day');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***h)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***h,***REMOVED***'hour');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***m)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***m,***REMOVED***'minute');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(msAbs***REMOVED***>=***REMOVED***s)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***s,***REMOVED***'second');
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***ms***REMOVED***+***REMOVED***'***REMOVED***ms';
	}

	/**
	***REMOVED*******REMOVED***Pluralization***REMOVED***helper.
	***REMOVED****/

	function***REMOVED***plural(ms,***REMOVED***msAbs,***REMOVED***n,***REMOVED***name)***REMOVED***{
	***REMOVED******REMOVED***var***REMOVED***isPlural***REMOVED***=***REMOVED***msAbs***REMOVED***>=***REMOVED***n***REMOVED*******REMOVED***1.5;
	***REMOVED******REMOVED***return***REMOVED***Math.round(ms***REMOVED***/***REMOVED***n)***REMOVED***+***REMOVED***'***REMOVED***'***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***(isPlural***REMOVED***?***REMOVED***'s'***REMOVED***:***REMOVED***'');
	}
	return***REMOVED***ms;
}

var***REMOVED***common;
var***REMOVED***hasRequiredCommon;

function***REMOVED***requireCommon***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredCommon)***REMOVED***return***REMOVED***common;
	hasRequiredCommon***REMOVED***=***REMOVED***1;
	/**
	***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***the***REMOVED***common***REMOVED***logic***REMOVED***for***REMOVED***both***REMOVED***the***REMOVED***Node.js***REMOVED***and***REMOVED***web***REMOVED***browser
	***REMOVED*******REMOVED***implementations***REMOVED***of***REMOVED***`debug()`.
	***REMOVED****/

	function***REMOVED***setup(env)***REMOVED***{
		createDebug.debug***REMOVED***=***REMOVED***createDebug;
		createDebug.default***REMOVED***=***REMOVED***createDebug;
		createDebug.coerce***REMOVED***=***REMOVED***coerce;
		createDebug.disable***REMOVED***=***REMOVED***disable;
		createDebug.enable***REMOVED***=***REMOVED***enable;
		createDebug.enabled***REMOVED***=***REMOVED***enabled;
		createDebug.humanize***REMOVED***=***REMOVED***requireMs();
		createDebug.destroy***REMOVED***=***REMOVED***destroy;

		Object.keys(env).forEach(key***REMOVED***=>***REMOVED***{
			createDebug[key]***REMOVED***=***REMOVED***env[key];
		});

		/**
		****REMOVED***The***REMOVED***currently***REMOVED***active***REMOVED***debug***REMOVED***mode***REMOVED***names,***REMOVED***and***REMOVED***names***REMOVED***to***REMOVED***skip.
		*/

		createDebug.names***REMOVED***=***REMOVED***[];
		createDebug.skips***REMOVED***=***REMOVED***[];

		/**
		****REMOVED***Map***REMOVED***of***REMOVED***special***REMOVED***"%n"***REMOVED***handling***REMOVED***functions,***REMOVED***for***REMOVED***the***REMOVED***debug***REMOVED***"format"***REMOVED***argument.
		*
		****REMOVED***Valid***REMOVED***key***REMOVED***names***REMOVED***are***REMOVED***a***REMOVED***single,***REMOVED***lower***REMOVED***or***REMOVED***upper-case***REMOVED***letter,***REMOVED***i.e.***REMOVED***"n"***REMOVED***and***REMOVED***"N".
		*/
		createDebug.formatters***REMOVED***=***REMOVED***{};

		/**
		****REMOVED***Selects***REMOVED***a***REMOVED***color***REMOVED***for***REMOVED***a***REMOVED***debug***REMOVED***namespace
		****REMOVED***@param***REMOVED***{String}***REMOVED***namespace***REMOVED***The***REMOVED***namespace***REMOVED***string***REMOVED***for***REMOVED***the***REMOVED***debug***REMOVED***instance***REMOVED***to***REMOVED***be***REMOVED***colored
		****REMOVED***@return***REMOVED***{Number|String}***REMOVED***An***REMOVED***ANSI***REMOVED***color***REMOVED***code***REMOVED***for***REMOVED***the***REMOVED***given***REMOVED***namespace
		****REMOVED***@api***REMOVED***private
		*/
		function***REMOVED***selectColor(namespace)***REMOVED***{
			let***REMOVED***hash***REMOVED***=***REMOVED***0;

			for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***namespace.length;***REMOVED***i++)***REMOVED***{
				hash***REMOVED***=***REMOVED***((hash***REMOVED***<<***REMOVED***5)***REMOVED***-***REMOVED***hash)***REMOVED***+***REMOVED***namespace.charCodeAt(i);
				hash***REMOVED***|=***REMOVED***0;***REMOVED***//***REMOVED***Convert***REMOVED***to***REMOVED***32bit***REMOVED***integer
			}

			return***REMOVED***createDebug.colors[Math.abs(hash)***REMOVED***%***REMOVED***createDebug.colors.length];
		}
		createDebug.selectColor***REMOVED***=***REMOVED***selectColor;

		/**
		****REMOVED***Create***REMOVED***a***REMOVED***debugger***REMOVED***with***REMOVED***the***REMOVED***given***REMOVED***`namespace`.
		*
		****REMOVED***@param***REMOVED***{String}***REMOVED***namespace
		****REMOVED***@return***REMOVED***{Function}
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***createDebug(namespace)***REMOVED***{
			let***REMOVED***prevTime;
			let***REMOVED***enableOverride***REMOVED***=***REMOVED***null;
			let***REMOVED***namespacesCache;
			let***REMOVED***enabledCache;

			function***REMOVED***debug(...args)***REMOVED***{
				//***REMOVED***Disabled?
				if***REMOVED***(!debug.enabled)***REMOVED***{
					return;
				}

				const***REMOVED***self***REMOVED***=***REMOVED***debug;

				//***REMOVED***Set***REMOVED***`diff`***REMOVED***timestamp
				const***REMOVED***curr***REMOVED***=***REMOVED***Number(new***REMOVED***Date());
				const***REMOVED***ms***REMOVED***=***REMOVED***curr***REMOVED***-***REMOVED***(prevTime***REMOVED***||***REMOVED***curr);
				self.diff***REMOVED***=***REMOVED***ms;
				self.prev***REMOVED***=***REMOVED***prevTime;
				self.curr***REMOVED***=***REMOVED***curr;
				prevTime***REMOVED***=***REMOVED***curr;

				args[0]***REMOVED***=***REMOVED***createDebug.coerce(args[0]);

				if***REMOVED***(typeof***REMOVED***args[0]***REMOVED***!==***REMOVED***'string')***REMOVED***{
					//***REMOVED***Anything***REMOVED***else***REMOVED***let's***REMOVED***inspect***REMOVED***with***REMOVED***%O
					args.unshift('%O');
				}

				//***REMOVED***Apply***REMOVED***any***REMOVED***`formatters`***REMOVED***transformations
				let***REMOVED***index***REMOVED***=***REMOVED***0;
				args[0]***REMOVED***=***REMOVED***args[0].replace(/%([a-zA-Z%])/g,***REMOVED***(match,***REMOVED***format)***REMOVED***=>***REMOVED***{
					//***REMOVED***If***REMOVED***we***REMOVED***encounter***REMOVED***an***REMOVED***escaped***REMOVED***%***REMOVED***then***REMOVED***don't***REMOVED***increase***REMOVED***the***REMOVED***array***REMOVED***index
					if***REMOVED***(match***REMOVED***===***REMOVED***'%%')***REMOVED***{
						return***REMOVED***'%';
					}
					index++;
					const***REMOVED***formatter***REMOVED***=***REMOVED***createDebug.formatters[format];
					if***REMOVED***(typeof***REMOVED***formatter***REMOVED***===***REMOVED***'function')***REMOVED***{
						const***REMOVED***val***REMOVED***=***REMOVED***args[index];
						match***REMOVED***=***REMOVED***formatter.call(self,***REMOVED***val);

						//***REMOVED***Now***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***remove***REMOVED***`args[index]`***REMOVED***since***REMOVED***it's***REMOVED***inlined***REMOVED***in***REMOVED***the***REMOVED***`format`
						args.splice(index,***REMOVED***1);
						index--;
					}
					return***REMOVED***match;
				});

				//***REMOVED***Apply***REMOVED***env-specific***REMOVED***formatting***REMOVED***(colors,***REMOVED***etc.)
				createDebug.formatArgs.call(self,***REMOVED***args);

				const***REMOVED***logFn***REMOVED***=***REMOVED***self.log***REMOVED***||***REMOVED***createDebug.log;
				logFn.apply(self,***REMOVED***args);
			}

			debug.namespace***REMOVED***=***REMOVED***namespace;
			debug.useColors***REMOVED***=***REMOVED***createDebug.useColors();
			debug.color***REMOVED***=***REMOVED***createDebug.selectColor(namespace);
			debug.extend***REMOVED***=***REMOVED***extend;
			debug.destroy***REMOVED***=***REMOVED***createDebug.destroy;***REMOVED***//***REMOVED***XXX***REMOVED***Temporary.***REMOVED***Will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***release.

			Object.defineProperty(debug,***REMOVED***'enabled',***REMOVED***{
				enumerable:***REMOVED***true,
				configurable:***REMOVED***false,
				get:***REMOVED***()***REMOVED***=>***REMOVED***{
					if***REMOVED***(enableOverride***REMOVED***!==***REMOVED***null)***REMOVED***{
						return***REMOVED***enableOverride;
					}
					if***REMOVED***(namespacesCache***REMOVED***!==***REMOVED***createDebug.namespaces)***REMOVED***{
						namespacesCache***REMOVED***=***REMOVED***createDebug.namespaces;
						enabledCache***REMOVED***=***REMOVED***createDebug.enabled(namespace);
					}

					return***REMOVED***enabledCache;
				},
				set:***REMOVED***v***REMOVED***=>***REMOVED***{
					enableOverride***REMOVED***=***REMOVED***v;
				}
			});

			//***REMOVED***Env-specific***REMOVED***initialization***REMOVED***logic***REMOVED***for***REMOVED***debug***REMOVED***instances
			if***REMOVED***(typeof***REMOVED***createDebug.init***REMOVED***===***REMOVED***'function')***REMOVED***{
				createDebug.init(debug);
			}

			return***REMOVED***debug;
		}

		function***REMOVED***extend(namespace,***REMOVED***delimiter)***REMOVED***{
			const***REMOVED***newDebug***REMOVED***=***REMOVED***createDebug(this.namespace***REMOVED***+***REMOVED***(typeof***REMOVED***delimiter***REMOVED***===***REMOVED***'undefined'***REMOVED***?***REMOVED***':'***REMOVED***:***REMOVED***delimiter)***REMOVED***+***REMOVED***namespace);
			newDebug.log***REMOVED***=***REMOVED***this.log;
			return***REMOVED***newDebug;
		}

		/**
		****REMOVED***Enables***REMOVED***a***REMOVED***debug***REMOVED***mode***REMOVED***by***REMOVED***namespaces.***REMOVED***This***REMOVED***can***REMOVED***include***REMOVED***modes
		****REMOVED***separated***REMOVED***by***REMOVED***a***REMOVED***colon***REMOVED***and***REMOVED***wildcards.
		*
		****REMOVED***@param***REMOVED***{String}***REMOVED***namespaces
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***enable(namespaces)***REMOVED***{
			createDebug.save(namespaces);
			createDebug.namespaces***REMOVED***=***REMOVED***namespaces;

			createDebug.names***REMOVED***=***REMOVED***[];
			createDebug.skips***REMOVED***=***REMOVED***[];

			let***REMOVED***i;
			const***REMOVED***split***REMOVED***=***REMOVED***(typeof***REMOVED***namespaces***REMOVED***===***REMOVED***'string'***REMOVED***?***REMOVED***namespaces***REMOVED***:***REMOVED***'').split(/[\s,]+/);
			const***REMOVED***len***REMOVED***=***REMOVED***split.length;

			for***REMOVED***(i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
				if***REMOVED***(!split[i])***REMOVED***{
					//***REMOVED***ignore***REMOVED***empty***REMOVED***strings
					continue;
				}

				namespaces***REMOVED***=***REMOVED***split[i].replace(/\*/g,***REMOVED***'.*?');

				if***REMOVED***(namespaces[0]***REMOVED***===***REMOVED***'-')***REMOVED***{
					createDebug.skips.push(new***REMOVED***RegExp('^'***REMOVED***+***REMOVED***namespaces.slice(1)***REMOVED***+***REMOVED***'$'));
				}***REMOVED***else***REMOVED***{
					createDebug.names.push(new***REMOVED***RegExp('^'***REMOVED***+***REMOVED***namespaces***REMOVED***+***REMOVED***'$'));
				}
			}
		}

		/**
		****REMOVED***Disable***REMOVED***debug***REMOVED***output.
		*
		****REMOVED***@return***REMOVED***{String}***REMOVED***namespaces
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***disable()***REMOVED***{
			const***REMOVED***namespaces***REMOVED***=***REMOVED***[
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace***REMOVED***=>***REMOVED***'-'***REMOVED***+***REMOVED***namespace)
			].join(',');
			createDebug.enable('');
			return***REMOVED***namespaces;
		}

		/**
		****REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***the***REMOVED***given***REMOVED***mode***REMOVED***name***REMOVED***is***REMOVED***enabled,***REMOVED***false***REMOVED***otherwise.
		*
		****REMOVED***@param***REMOVED***{String}***REMOVED***name
		****REMOVED***@return***REMOVED***{Boolean}
		****REMOVED***@api***REMOVED***public
		*/
		function***REMOVED***enabled(name)***REMOVED***{
			if***REMOVED***(name[name.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'*')***REMOVED***{
				return***REMOVED***true;
			}

			let***REMOVED***i;
			let***REMOVED***len;

			for***REMOVED***(i***REMOVED***=***REMOVED***0,***REMOVED***len***REMOVED***=***REMOVED***createDebug.skips.length;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
				if***REMOVED***(createDebug.skips[i].test(name))***REMOVED***{
					return***REMOVED***false;
				}
			}

			for***REMOVED***(i***REMOVED***=***REMOVED***0,***REMOVED***len***REMOVED***=***REMOVED***createDebug.names.length;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i++)***REMOVED***{
				if***REMOVED***(createDebug.names[i].test(name))***REMOVED***{
					return***REMOVED***true;
				}
			}

			return***REMOVED***false;
		}

		/**
		****REMOVED***Convert***REMOVED***regexp***REMOVED***to***REMOVED***namespace
		*
		****REMOVED***@param***REMOVED***{RegExp}***REMOVED***regxep
		****REMOVED***@return***REMOVED***{String}***REMOVED***namespace
		****REMOVED***@api***REMOVED***private
		*/
		function***REMOVED***toNamespace(regexp)***REMOVED***{
			return***REMOVED***regexp.toString()
				.substring(2,***REMOVED***regexp.toString().length***REMOVED***-***REMOVED***2)
				.replace(/\.\*\?$/,***REMOVED***'*');
		}

		/**
		****REMOVED***Coerce***REMOVED***`val`.
		*
		****REMOVED***@param***REMOVED***{Mixed}***REMOVED***val
		****REMOVED***@return***REMOVED***{Mixed}
		****REMOVED***@api***REMOVED***private
		*/
		function***REMOVED***coerce(val)***REMOVED***{
			if***REMOVED***(val***REMOVED***instanceof***REMOVED***Error)***REMOVED***{
				return***REMOVED***val.stack***REMOVED***||***REMOVED***val.message;
			}
			return***REMOVED***val;
		}

		/**
		****REMOVED***XXX***REMOVED***DO***REMOVED***NOT***REMOVED***USE.***REMOVED***This***REMOVED***is***REMOVED***a***REMOVED***temporary***REMOVED***stub***REMOVED***function.
		****REMOVED***XXX***REMOVED***It***REMOVED***WILL***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***release.
		*/
		function***REMOVED***destroy()***REMOVED***{
			console.warn('Instance***REMOVED***method***REMOVED***`debug.destroy()`***REMOVED***is***REMOVED***deprecated***REMOVED***and***REMOVED***no***REMOVED***longer***REMOVED***does***REMOVED***anything.***REMOVED***It***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***version***REMOVED***of***REMOVED***`debug`.');
		}

		createDebug.enable(createDebug.load());

		return***REMOVED***createDebug;
	}

	common***REMOVED***=***REMOVED***setup;
	return***REMOVED***common;
}

/****REMOVED***eslint-env***REMOVED***browser***REMOVED****/

var***REMOVED***hasRequiredBrowser;

function***REMOVED***requireBrowser***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredBrowser)***REMOVED***return***REMOVED***browser.exports;
	hasRequiredBrowser***REMOVED***=***REMOVED***1;
	(function***REMOVED***(module,***REMOVED***exports)***REMOVED***{
		/**
		***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***the***REMOVED***web***REMOVED***browser***REMOVED***implementation***REMOVED***of***REMOVED***`debug()`.
		***REMOVED****/

		exports.formatArgs***REMOVED***=***REMOVED***formatArgs;
		exports.save***REMOVED***=***REMOVED***save;
		exports.load***REMOVED***=***REMOVED***load;
		exports.useColors***REMOVED***=***REMOVED***useColors;
		exports.storage***REMOVED***=***REMOVED***localstorage();
		exports.destroy***REMOVED***=***REMOVED***(()***REMOVED***=>***REMOVED***{
			let***REMOVED***warned***REMOVED***=***REMOVED***false;

			return***REMOVED***()***REMOVED***=>***REMOVED***{
				if***REMOVED***(!warned)***REMOVED***{
					warned***REMOVED***=***REMOVED***true;
					console.warn('Instance***REMOVED***method***REMOVED***`debug.destroy()`***REMOVED***is***REMOVED***deprecated***REMOVED***and***REMOVED***no***REMOVED***longer***REMOVED***does***REMOVED***anything.***REMOVED***It***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***version***REMOVED***of***REMOVED***`debug`.');
				}
			};
		})();

		/**
		***REMOVED*******REMOVED***Colors.
		***REMOVED****/

		exports.colors***REMOVED***=***REMOVED***[
			'#0000CC',
			'#0000FF',
			'#0033CC',
			'#0033FF',
			'#0066CC',
			'#0066FF',
			'#0099CC',
			'#0099FF',
			'#00CC00',
			'#00CC33',
			'#00CC66',
			'#00CC99',
			'#00CCCC',
			'#00CCFF',
			'#3300CC',
			'#3300FF',
			'#3333CC',
			'#3333FF',
			'#3366CC',
			'#3366FF',
			'#3399CC',
			'#3399FF',
			'#33CC00',
			'#33CC33',
			'#33CC66',
			'#33CC99',
			'#33CCCC',
			'#33CCFF',
			'#6600CC',
			'#6600FF',
			'#6633CC',
			'#6633FF',
			'#66CC00',
			'#66CC33',
			'#9900CC',
			'#9900FF',
			'#9933CC',
			'#9933FF',
			'#99CC00',
			'#99CC33',
			'#CC0000',
			'#CC0033',
			'#CC0066',
			'#CC0099',
			'#CC00CC',
			'#CC00FF',
			'#CC3300',
			'#CC3333',
			'#CC3366',
			'#CC3399',
			'#CC33CC',
			'#CC33FF',
			'#CC6600',
			'#CC6633',
			'#CC9900',
			'#CC9933',
			'#CCCC00',
			'#CCCC33',
			'#FF0000',
			'#FF0033',
			'#FF0066',
			'#FF0099',
			'#FF00CC',
			'#FF00FF',
			'#FF3300',
			'#FF3333',
			'#FF3366',
			'#FF3399',
			'#FF33CC',
			'#FF33FF',
			'#FF6600',
			'#FF6633',
			'#FF9900',
			'#FF9933',
			'#FFCC00',
			'#FFCC33'
		];

		/**
		***REMOVED*******REMOVED***Currently***REMOVED***only***REMOVED***WebKit-based***REMOVED***Web***REMOVED***Inspectors,***REMOVED***Firefox***REMOVED***>=***REMOVED***v31,
		***REMOVED*******REMOVED***and***REMOVED***the***REMOVED***Firebug***REMOVED***extension***REMOVED***(any***REMOVED***Firefox***REMOVED***version)***REMOVED***are***REMOVED***known
		***REMOVED*******REMOVED***to***REMOVED***support***REMOVED***"%c"***REMOVED***CSS***REMOVED***customizations.
		***REMOVED****
		***REMOVED*******REMOVED***TODO:***REMOVED***add***REMOVED***a***REMOVED***`localStorage`***REMOVED***variable***REMOVED***to***REMOVED***explicitly***REMOVED***enable/disable***REMOVED***colors
		***REMOVED****/

		//***REMOVED***eslint-disable-next-line***REMOVED***complexity
		function***REMOVED***useColors()***REMOVED***{
			//***REMOVED***NB:***REMOVED***In***REMOVED***an***REMOVED***Electron***REMOVED***preload***REMOVED***script,***REMOVED***document***REMOVED***will***REMOVED***be***REMOVED***defined***REMOVED***but***REMOVED***not***REMOVED***fully
			//***REMOVED***initialized.***REMOVED***Since***REMOVED***we***REMOVED***know***REMOVED***we're***REMOVED***in***REMOVED***Chrome,***REMOVED***we'll***REMOVED***just***REMOVED***detect***REMOVED***this***REMOVED***case
			//***REMOVED***explicitly
			if***REMOVED***(typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***window.process***REMOVED***&&***REMOVED***(window.process.type***REMOVED***===***REMOVED***'renderer'***REMOVED***||***REMOVED***window.process.__nwjs))***REMOVED***{
				return***REMOVED***true;
			}

			//***REMOVED***Internet***REMOVED***Explorer***REMOVED***and***REMOVED***Edge***REMOVED***do***REMOVED***not***REMOVED***support***REMOVED***colors.
			if***REMOVED***(typeof***REMOVED***navigator***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***navigator.userAgent***REMOVED***&&***REMOVED***navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))***REMOVED***{
				return***REMOVED***false;
			}

			//***REMOVED***Is***REMOVED***webkit?***REMOVED***http://stackoverflow.com/a/16459606/376773
			//***REMOVED***document***REMOVED***is***REMOVED***undefined***REMOVED***in***REMOVED***react-native:***REMOVED***https://github.com/facebook/react-native/pull/1632
			return***REMOVED***(typeof***REMOVED***document***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***document.documentElement***REMOVED***&&***REMOVED***document.documentElement.style***REMOVED***&&***REMOVED***document.documentElement.style.WebkitAppearance)***REMOVED***||
				//***REMOVED***Is***REMOVED***firebug?***REMOVED***http://stackoverflow.com/a/398120/376773
				(typeof***REMOVED***window***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***window.console***REMOVED***&&***REMOVED***(window.console.firebug***REMOVED***||***REMOVED***(window.console.exception***REMOVED***&&***REMOVED***window.console.table)))***REMOVED***||
				//***REMOVED***Is***REMOVED***firefox***REMOVED***>=***REMOVED***v31?
				//***REMOVED***https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
				(typeof***REMOVED***navigator***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***navigator.userAgent***REMOVED***&&***REMOVED***navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)***REMOVED***&&***REMOVED***parseInt(RegExp.$1,***REMOVED***10)***REMOVED***>=***REMOVED***31)***REMOVED***||
				//***REMOVED***Double***REMOVED***check***REMOVED***webkit***REMOVED***in***REMOVED***userAgent***REMOVED***just***REMOVED***in***REMOVED***case***REMOVED***we***REMOVED***are***REMOVED***in***REMOVED***a***REMOVED***worker
				(typeof***REMOVED***navigator***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***navigator.userAgent***REMOVED***&&***REMOVED***navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		***REMOVED*******REMOVED***Colorize***REMOVED***log***REMOVED***arguments***REMOVED***if***REMOVED***enabled.
		***REMOVED****
		***REMOVED*******REMOVED***@api***REMOVED***public
		***REMOVED****/

		function***REMOVED***formatArgs(args)***REMOVED***{
			args[0]***REMOVED***=***REMOVED***(this.useColors***REMOVED***?***REMOVED***'%c'***REMOVED***:***REMOVED***'')***REMOVED***+
				this.namespace***REMOVED***+
				(this.useColors***REMOVED***?***REMOVED***'***REMOVED***%c'***REMOVED***:***REMOVED***'***REMOVED***')***REMOVED***+
				args[0]***REMOVED***+
				(this.useColors***REMOVED***?***REMOVED***'%c***REMOVED***'***REMOVED***:***REMOVED***'***REMOVED***')***REMOVED***+
				'+'***REMOVED***+***REMOVED***module.exports.humanize(this.diff);

			if***REMOVED***(!this.useColors)***REMOVED***{
				return;
			}

			const***REMOVED***c***REMOVED***=***REMOVED***'color:***REMOVED***'***REMOVED***+***REMOVED***this.color;
			args.splice(1,***REMOVED***0,***REMOVED***c,***REMOVED***'color:***REMOVED***inherit');

			//***REMOVED***The***REMOVED***final***REMOVED***"%c"***REMOVED***is***REMOVED***somewhat***REMOVED***tricky,***REMOVED***because***REMOVED***there***REMOVED***could***REMOVED***be***REMOVED***other
			//***REMOVED***arguments***REMOVED***passed***REMOVED***either***REMOVED***before***REMOVED***or***REMOVED***after***REMOVED***the***REMOVED***%c,***REMOVED***so***REMOVED***we***REMOVED***need***REMOVED***to
			//***REMOVED***figure***REMOVED***out***REMOVED***the***REMOVED***correct***REMOVED***index***REMOVED***to***REMOVED***insert***REMOVED***the***REMOVED***CSS***REMOVED***into
			let***REMOVED***index***REMOVED***=***REMOVED***0;
			let***REMOVED***lastC***REMOVED***=***REMOVED***0;
			args[0].replace(/%[a-zA-Z%]/g,***REMOVED***match***REMOVED***=>***REMOVED***{
				if***REMOVED***(match***REMOVED***===***REMOVED***'%%')***REMOVED***{
					return;
				}
				index++;
				if***REMOVED***(match***REMOVED***===***REMOVED***'%c')***REMOVED***{
					//***REMOVED***We***REMOVED***only***REMOVED***are***REMOVED***interested***REMOVED***in***REMOVED***the***REMOVED****last****REMOVED***%c
					//***REMOVED***(the***REMOVED***user***REMOVED***may***REMOVED***have***REMOVED***provided***REMOVED***their***REMOVED***own)
					lastC***REMOVED***=***REMOVED***index;
				}
			});

			args.splice(lastC,***REMOVED***0,***REMOVED***c);
		}

		/**
		***REMOVED*******REMOVED***Invokes***REMOVED***`console.debug()`***REMOVED***when***REMOVED***available.
		***REMOVED*******REMOVED***No-op***REMOVED***when***REMOVED***`console.debug`***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***"function".
		***REMOVED*******REMOVED***If***REMOVED***`console.debug`***REMOVED***is***REMOVED***not***REMOVED***available,***REMOVED***falls***REMOVED***back
		***REMOVED*******REMOVED***to***REMOVED***`console.log`.
		***REMOVED****
		***REMOVED*******REMOVED***@api***REMOVED***public
		***REMOVED****/
		exports.log***REMOVED***=***REMOVED***console.debug***REMOVED***||***REMOVED***console.log***REMOVED***||***REMOVED***(()***REMOVED***=>***REMOVED***{});

		/**
		***REMOVED*******REMOVED***Save***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***namespaces
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/
		function***REMOVED***save(namespaces)***REMOVED***{
			try***REMOVED***{
				if***REMOVED***(namespaces)***REMOVED***{
					exports.storage.setItem('debug',***REMOVED***namespaces);
				}***REMOVED***else***REMOVED***{
					exports.storage.removeItem('debug');
				}
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				//***REMOVED***Swallow
				//***REMOVED***XXX***REMOVED***(@Qix-)***REMOVED***should***REMOVED***we***REMOVED***be***REMOVED***logging***REMOVED***these?
			}
		}

		/**
		***REMOVED*******REMOVED***Load***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@return***REMOVED***{String}***REMOVED***returns***REMOVED***the***REMOVED***previously***REMOVED***persisted***REMOVED***debug***REMOVED***modes
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/
		function***REMOVED***load()***REMOVED***{
			let***REMOVED***r;
			try***REMOVED***{
				r***REMOVED***=***REMOVED***exports.storage.getItem('debug');
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				//***REMOVED***Swallow
				//***REMOVED***XXX***REMOVED***(@Qix-)***REMOVED***should***REMOVED***we***REMOVED***be***REMOVED***logging***REMOVED***these?
			}

			//***REMOVED***If***REMOVED***debug***REMOVED***isn't***REMOVED***set***REMOVED***in***REMOVED***LS,***REMOVED***and***REMOVED***we're***REMOVED***in***REMOVED***Electron,***REMOVED***try***REMOVED***to***REMOVED***load***REMOVED***$DEBUG
			if***REMOVED***(!r***REMOVED***&&***REMOVED***typeof***REMOVED***process***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***'env'***REMOVED***in***REMOVED***process)***REMOVED***{
				r***REMOVED***=***REMOVED***process.env.DEBUG;
			}

			return***REMOVED***r;
		}

		/**
		***REMOVED*******REMOVED***Localstorage***REMOVED***attempts***REMOVED***to***REMOVED***return***REMOVED***the***REMOVED***localstorage.
		***REMOVED****
		***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***necessary***REMOVED***because***REMOVED***safari***REMOVED***throws
		***REMOVED*******REMOVED***when***REMOVED***a***REMOVED***user***REMOVED***disables***REMOVED***cookies/localstorage
		***REMOVED*******REMOVED***and***REMOVED***you***REMOVED***attempt***REMOVED***to***REMOVED***access***REMOVED***it.
		***REMOVED****
		***REMOVED*******REMOVED***@return***REMOVED***{LocalStorage}
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/

		function***REMOVED***localstorage()***REMOVED***{
			try***REMOVED***{
				//***REMOVED***TVMLKit***REMOVED***(Apple***REMOVED***TV***REMOVED***JS***REMOVED***Runtime)***REMOVED***does***REMOVED***not***REMOVED***have***REMOVED***a***REMOVED***window***REMOVED***object,***REMOVED***just***REMOVED***localStorage***REMOVED***in***REMOVED***the***REMOVED***global***REMOVED***context
				//***REMOVED***The***REMOVED***Browser***REMOVED***also***REMOVED***has***REMOVED***localStorage***REMOVED***in***REMOVED***the***REMOVED***global***REMOVED***context.
				return***REMOVED***localStorage;
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				//***REMOVED***Swallow
				//***REMOVED***XXX***REMOVED***(@Qix-)***REMOVED***should***REMOVED***we***REMOVED***be***REMOVED***logging***REMOVED***these?
			}
		}

		module.exports***REMOVED***=***REMOVED***requireCommon()(exports);

		const***REMOVED***{formatters}***REMOVED***=***REMOVED***module.exports;

		/**
		***REMOVED*******REMOVED***Map***REMOVED***%j***REMOVED***to***REMOVED***`JSON.stringify()`,***REMOVED***since***REMOVED***no***REMOVED***Web***REMOVED***Inspectors***REMOVED***do***REMOVED***that***REMOVED***by***REMOVED***default.
		***REMOVED****/

		formatters.j***REMOVED***=***REMOVED***function***REMOVED***(v)***REMOVED***{
			try***REMOVED***{
				return***REMOVED***JSON.stringify(v);
			}***REMOVED***catch***REMOVED***(error)***REMOVED***{
				return***REMOVED***'[UnexpectedJSONParseError]:***REMOVED***'***REMOVED***+***REMOVED***error.message;
			}
		};***REMOVED***
	}***REMOVED***(browser,***REMOVED***browser.exports));
	return***REMOVED***browser.exports;
}

var***REMOVED***node***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

/**
***REMOVED*******REMOVED***Module***REMOVED***dependencies.
***REMOVED****/

var***REMOVED***hasRequiredNode;

function***REMOVED***requireNode***REMOVED***()***REMOVED***{
	if***REMOVED***(hasRequiredNode)***REMOVED***return***REMOVED***node.exports;
	hasRequiredNode***REMOVED***=***REMOVED***1;
	(function***REMOVED***(module,***REMOVED***exports)***REMOVED***{
		const***REMOVED***tty***REMOVED***=***REMOVED***require$$0;
		const***REMOVED***util***REMOVED***=***REMOVED***require$$1;

		/**
		***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***the***REMOVED***Node.js***REMOVED***implementation***REMOVED***of***REMOVED***`debug()`.
		***REMOVED****/

		exports.init***REMOVED***=***REMOVED***init;
		exports.log***REMOVED***=***REMOVED***log;
		exports.formatArgs***REMOVED***=***REMOVED***formatArgs;
		exports.save***REMOVED***=***REMOVED***save;
		exports.load***REMOVED***=***REMOVED***load;
		exports.useColors***REMOVED***=***REMOVED***useColors;
		exports.destroy***REMOVED***=***REMOVED***util.deprecate(
			()***REMOVED***=>***REMOVED***{},
			'Instance***REMOVED***method***REMOVED***`debug.destroy()`***REMOVED***is***REMOVED***deprecated***REMOVED***and***REMOVED***no***REMOVED***longer***REMOVED***does***REMOVED***anything.***REMOVED***It***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***the***REMOVED***next***REMOVED***major***REMOVED***version***REMOVED***of***REMOVED***`debug`.'
		);

		/**
		***REMOVED*******REMOVED***Colors.
		***REMOVED****/

		exports.colors***REMOVED***=***REMOVED***[6,***REMOVED***2,***REMOVED***3,***REMOVED***4,***REMOVED***5,***REMOVED***1];

		try***REMOVED***{
			//***REMOVED***Optional***REMOVED***dependency***REMOVED***(as***REMOVED***in,***REMOVED***doesn't***REMOVED***need***REMOVED***to***REMOVED***be***REMOVED***installed,***REMOVED***NOT***REMOVED***like***REMOVED***optionalDependencies***REMOVED***in***REMOVED***package.json)
			//***REMOVED***eslint-disable-next-line***REMOVED***import/no-extraneous-dependencies
			const***REMOVED***supportsColor***REMOVED***=***REMOVED***require('supports-color');

			if***REMOVED***(supportsColor***REMOVED***&&***REMOVED***(supportsColor.stderr***REMOVED***||***REMOVED***supportsColor).level***REMOVED***>=***REMOVED***2)***REMOVED***{
				exports.colors***REMOVED***=***REMOVED***[
					20,
					21,
					26,
					27,
					32,
					33,
					38,
					39,
					40,
					41,
					42,
					43,
					44,
					45,
					56,
					57,
					62,
					63,
					68,
					69,
					74,
					75,
					76,
					77,
					78,
					79,
					80,
					81,
					92,
					93,
					98,
					99,
					112,
					113,
					128,
					129,
					134,
					135,
					148,
					149,
					160,
					161,
					162,
					163,
					164,
					165,
					166,
					167,
					168,
					169,
					170,
					171,
					172,
					173,
					178,
					179,
					184,
					185,
					196,
					197,
					198,
					199,
					200,
					201,
					202,
					203,
					204,
					205,
					206,
					207,
					208,
					209,
					214,
					215,
					220,
					221
				];
			}
		}***REMOVED***catch***REMOVED***(error)***REMOVED***{
			//***REMOVED***Swallow***REMOVED***-***REMOVED***we***REMOVED***only***REMOVED***care***REMOVED***if***REMOVED***`supports-color`***REMOVED***is***REMOVED***available;***REMOVED***it***REMOVED***doesn't***REMOVED***have***REMOVED***to***REMOVED***be.
		}

		/**
		***REMOVED*******REMOVED***Build***REMOVED***up***REMOVED***the***REMOVED***default***REMOVED***`inspectOpts`***REMOVED***object***REMOVED***from***REMOVED***the***REMOVED***environment***REMOVED***variables.
		***REMOVED****
		***REMOVED*******REMOVED******REMOVED******REMOVED***$***REMOVED***DEBUG_COLORS=no***REMOVED***DEBUG_DEPTH=10***REMOVED***DEBUG_SHOW_HIDDEN=enabled***REMOVED***node***REMOVED***script.js
		***REMOVED****/

		exports.inspectOpts***REMOVED***=***REMOVED***Object.keys(process.env).filter(key***REMOVED***=>***REMOVED***{
			return***REMOVED***/^debug_/i.test(key);
		}).reduce((obj,***REMOVED***key)***REMOVED***=>***REMOVED***{
			//***REMOVED***Camel-case
			const***REMOVED***prop***REMOVED***=***REMOVED***key
				.substring(6)
				.toLowerCase()
				.replace(/_([a-z])/g,***REMOVED***(_,***REMOVED***k)***REMOVED***=>***REMOVED***{
					return***REMOVED***k.toUpperCase();
				});

			//***REMOVED***Coerce***REMOVED***string***REMOVED***value***REMOVED***into***REMOVED***JS***REMOVED***value
			let***REMOVED***val***REMOVED***=***REMOVED***process.env[key];
			if***REMOVED***(/^(yes|on|true|enabled)$/i.test(val))***REMOVED***{
				val***REMOVED***=***REMOVED***true;
			}***REMOVED***else***REMOVED***if***REMOVED***(/^(no|off|false|disabled)$/i.test(val))***REMOVED***{
				val***REMOVED***=***REMOVED***false;
			}***REMOVED***else***REMOVED***if***REMOVED***(val***REMOVED***===***REMOVED***'null')***REMOVED***{
				val***REMOVED***=***REMOVED***null;
			}***REMOVED***else***REMOVED***{
				val***REMOVED***=***REMOVED***Number(val);
			}

			obj[prop]***REMOVED***=***REMOVED***val;
			return***REMOVED***obj;
		},***REMOVED***{});

		/**
		***REMOVED*******REMOVED***Is***REMOVED***stdout***REMOVED***a***REMOVED***TTY?***REMOVED***Colored***REMOVED***output***REMOVED***is***REMOVED***enabled***REMOVED***when***REMOVED***`true`.
		***REMOVED****/

		function***REMOVED***useColors()***REMOVED***{
			return***REMOVED***'colors'***REMOVED***in***REMOVED***exports.inspectOpts***REMOVED***?
				Boolean(exports.inspectOpts.colors)***REMOVED***:
				tty.isatty(process.stderr.fd);
		}

		/**
		***REMOVED*******REMOVED***Adds***REMOVED***ANSI***REMOVED***color***REMOVED***escape***REMOVED***codes***REMOVED***if***REMOVED***enabled.
		***REMOVED****
		***REMOVED*******REMOVED***@api***REMOVED***public
		***REMOVED****/

		function***REMOVED***formatArgs(args)***REMOVED***{
			const***REMOVED***{namespace:***REMOVED***name,***REMOVED***useColors}***REMOVED***=***REMOVED***this;

			if***REMOVED***(useColors)***REMOVED***{
				const***REMOVED***c***REMOVED***=***REMOVED***this.color;
				const***REMOVED***colorCode***REMOVED***=***REMOVED***'\u001B[3'***REMOVED***+***REMOVED***(c***REMOVED***<***REMOVED***8***REMOVED***?***REMOVED***c***REMOVED***:***REMOVED***'8;5;'***REMOVED***+***REMOVED***c);
				const***REMOVED***prefix***REMOVED***=***REMOVED***`***REMOVED******REMOVED***${colorCode};1m${name}***REMOVED***\u001B[0m`;

				args[0]***REMOVED***=***REMOVED***prefix***REMOVED***+***REMOVED***args[0].split('\n').join('\n'***REMOVED***+***REMOVED***prefix);
				args.push(colorCode***REMOVED***+***REMOVED***'m+'***REMOVED***+***REMOVED***module.exports.humanize(this.diff)***REMOVED***+***REMOVED***'\u001B[0m');
			}***REMOVED***else***REMOVED***{
				args[0]***REMOVED***=***REMOVED***getDate()***REMOVED***+***REMOVED***name***REMOVED***+***REMOVED***'***REMOVED***'***REMOVED***+***REMOVED***args[0];
			}
		}

		function***REMOVED***getDate()***REMOVED***{
			if***REMOVED***(exports.inspectOpts.hideDate)***REMOVED***{
				return***REMOVED***'';
			}
			return***REMOVED***new***REMOVED***Date().toISOString()***REMOVED***+***REMOVED***'***REMOVED***';
		}

		/**
		***REMOVED*******REMOVED***Invokes***REMOVED***`util.format()`***REMOVED***with***REMOVED***the***REMOVED***specified***REMOVED***arguments***REMOVED***and***REMOVED***writes***REMOVED***to***REMOVED***stderr.
		***REMOVED****/

		function***REMOVED***log(...args)***REMOVED***{
			return***REMOVED***process.stderr.write(util.format(...args)***REMOVED***+***REMOVED***'\n');
		}

		/**
		***REMOVED*******REMOVED***Save***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***namespaces
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/
		function***REMOVED***save(namespaces)***REMOVED***{
			if***REMOVED***(namespaces)***REMOVED***{
				process.env.DEBUG***REMOVED***=***REMOVED***namespaces;
			}***REMOVED***else***REMOVED***{
				//***REMOVED***If***REMOVED***you***REMOVED***set***REMOVED***a***REMOVED***process.env***REMOVED***field***REMOVED***to***REMOVED***null***REMOVED***or***REMOVED***undefined,***REMOVED***it***REMOVED***gets***REMOVED***cast***REMOVED***to***REMOVED***the
				//***REMOVED***string***REMOVED***'null'***REMOVED***or***REMOVED***'undefined'.***REMOVED***Just***REMOVED***delete***REMOVED***instead.
				delete***REMOVED***process.env.DEBUG;
			}
		}

		/**
		***REMOVED*******REMOVED***Load***REMOVED***`namespaces`.
		***REMOVED****
		***REMOVED*******REMOVED***@return***REMOVED***{String}***REMOVED***returns***REMOVED***the***REMOVED***previously***REMOVED***persisted***REMOVED***debug***REMOVED***modes
		***REMOVED*******REMOVED***@api***REMOVED***private
		***REMOVED****/

		function***REMOVED***load()***REMOVED***{
			return***REMOVED***process.env.DEBUG;
		}

		/**
		***REMOVED*******REMOVED***Init***REMOVED***logic***REMOVED***for***REMOVED***`debug`***REMOVED***instances.
		***REMOVED****
		***REMOVED*******REMOVED***Create***REMOVED***a***REMOVED***new***REMOVED***`inspectOpts`***REMOVED***object***REMOVED***in***REMOVED***case***REMOVED***`useColors`***REMOVED***is***REMOVED***set
		***REMOVED*******REMOVED***differently***REMOVED***for***REMOVED***a***REMOVED***particular***REMOVED***`debug`***REMOVED***instance.
		***REMOVED****/

		function***REMOVED***init(debug)***REMOVED***{
			debug.inspectOpts***REMOVED***=***REMOVED***{};

			const***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(exports.inspectOpts);
			for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***keys.length;***REMOVED***i++)***REMOVED***{
				debug.inspectOpts[keys[i]]***REMOVED***=***REMOVED***exports.inspectOpts[keys[i]];
			}
		}

		module.exports***REMOVED***=***REMOVED***requireCommon()(exports);

		const***REMOVED***{formatters}***REMOVED***=***REMOVED***module.exports;

		/**
		***REMOVED*******REMOVED***Map***REMOVED***%o***REMOVED***to***REMOVED***`util.inspect()`,***REMOVED***all***REMOVED***on***REMOVED***a***REMOVED***single***REMOVED***line.
		***REMOVED****/

		formatters.o***REMOVED***=***REMOVED***function***REMOVED***(v)***REMOVED***{
			this.inspectOpts.colors***REMOVED***=***REMOVED***this.useColors;
			return***REMOVED***util.inspect(v,***REMOVED***this.inspectOpts)
				.split('\n')
				.map(str***REMOVED***=>***REMOVED***str.trim())
				.join('***REMOVED***');
		};

		/**
		***REMOVED*******REMOVED***Map***REMOVED***%O***REMOVED***to***REMOVED***`util.inspect()`,***REMOVED***allowing***REMOVED***multiple***REMOVED***lines***REMOVED***if***REMOVED***needed.
		***REMOVED****/

		formatters.O***REMOVED***=***REMOVED***function***REMOVED***(v)***REMOVED***{
			this.inspectOpts.colors***REMOVED***=***REMOVED***this.useColors;
			return***REMOVED***util.inspect(v,***REMOVED***this.inspectOpts);
		};***REMOVED***
	}***REMOVED***(node,***REMOVED***node.exports));
	return***REMOVED***node.exports;
}

/**
***REMOVED*******REMOVED***Detect***REMOVED***Electron***REMOVED***renderer***REMOVED***/***REMOVED***nwjs***REMOVED***process,***REMOVED***which***REMOVED***is***REMOVED***node,***REMOVED***but***REMOVED***we***REMOVED***should
***REMOVED*******REMOVED***treat***REMOVED***as***REMOVED***a***REMOVED***browser.
***REMOVED****/

if***REMOVED***(typeof***REMOVED***process***REMOVED***===***REMOVED***'undefined'***REMOVED***||***REMOVED***process.type***REMOVED***===***REMOVED***'renderer'***REMOVED***||***REMOVED***process.browser***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***process.__nwjs)***REMOVED***{
	src.exports***REMOVED***=***REMOVED***requireBrowser();
}***REMOVED***else***REMOVED***{
	src.exports***REMOVED***=***REMOVED***requireNode();
}

var***REMOVED***srcExports***REMOVED***=***REMOVED***src.exports;
const***REMOVED***_debug***REMOVED***=***REMOVED***/*@__PURE__*/getDefaultExportFromCjs(srcExports);

const***REMOVED***debug***REMOVED***=***REMOVED***_debug("vite:hmr");
const***REMOVED***directRequestRE***REMOVED***=***REMOVED***/(?:\?|&)direct\b/;
async***REMOVED***function***REMOVED***handleHotUpdate({***REMOVED***file,***REMOVED***modules,***REMOVED***read***REMOVED***},***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***prevDescriptor***REMOVED***=***REMOVED***getDescriptor(file,***REMOVED***options,***REMOVED***false,***REMOVED***true);
***REMOVED******REMOVED***if***REMOVED***(!prevDescriptor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***content***REMOVED***=***REMOVED***await***REMOVED***read();
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***descriptor***REMOVED***}***REMOVED***=***REMOVED***createDescriptor(file,***REMOVED***content,***REMOVED***options,***REMOVED***true);
***REMOVED******REMOVED***let***REMOVED***needRerender***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***const***REMOVED***affectedModules***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Set();
***REMOVED******REMOVED***const***REMOVED***mainModule***REMOVED***=***REMOVED***getMainModule(modules);
***REMOVED******REMOVED***const***REMOVED***templateModule***REMOVED***=***REMOVED***modules.find((m)***REMOVED***=>***REMOVED***/type=template/.test(m.url));
***REMOVED******REMOVED***const***REMOVED***scriptChanged***REMOVED***=***REMOVED***hasScriptChanged(prevDescriptor,***REMOVED***descriptor);
***REMOVED******REMOVED***if***REMOVED***(scriptChanged)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(getScriptModule(modules)***REMOVED***||***REMOVED***mainModule);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!isEqualBlock(descriptor.template,***REMOVED***prevDescriptor.template))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!scriptChanged)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setResolvedScript(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***getResolvedScript(prevDescriptor,***REMOVED***false),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***false
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(templateModule);
***REMOVED******REMOVED******REMOVED******REMOVED***needRerender***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***didUpdateStyle***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***const***REMOVED***prevStyles***REMOVED***=***REMOVED***prevDescriptor.styles***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***nextStyles***REMOVED***=***REMOVED***descriptor.styles***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***if***REMOVED***(prevDescriptor.cssVars.join("")***REMOVED***!==***REMOVED***descriptor.cssVars.join(""))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(prevStyles.some((s)***REMOVED***=>***REMOVED***s.scoped)***REMOVED***!==***REMOVED***nextStyles.some((s)***REMOVED***=>***REMOVED***s.scoped))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(templateModule);
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***nextStyles.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prev***REMOVED***=***REMOVED***prevStyles[i];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***next***REMOVED***=***REMOVED***nextStyles[i];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!prev***REMOVED***||***REMOVED***!isEqualBlock(prev,***REMOVED***next))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***didUpdateStyle***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mod***REMOVED***=***REMOVED***modules.find(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(m)***REMOVED***=>***REMOVED***m.url.includes(`type=style&index=${i}`)***REMOVED***&&***REMOVED***m.url.endsWith(`.${next.lang***REMOVED***||***REMOVED***"css"}`)***REMOVED***&&***REMOVED***!directRequestRE.test(m.url)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mod)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mod);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mod.url.includes("&inline"))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(prevStyles.length***REMOVED***>***REMOVED***nextStyles.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***prevCustoms***REMOVED***=***REMOVED***prevDescriptor.customBlocks***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***nextCustoms***REMOVED***=***REMOVED***descriptor.customBlocks***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***if***REMOVED***(prevCustoms.length***REMOVED***!==***REMOVED***nextCustoms.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***nextCustoms.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prev***REMOVED***=***REMOVED***prevCustoms[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***next***REMOVED***=***REMOVED***nextCustoms[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!prev***REMOVED***||***REMOVED***!isEqualBlock(prev,***REMOVED***next))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mod***REMOVED***=***REMOVED***modules.find(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(m)***REMOVED***=>***REMOVED***m.url.includes(`type=${prev.type}&index=${i}`)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mod)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mod);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***updateType***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***if***REMOVED***(needRerender)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***updateType.push(`template`);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!templateModule)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affectedModules.add(mainModule);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(mainModule***REMOVED***&&***REMOVED***!affectedModules.has(mainModule))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***styleImporters***REMOVED***=***REMOVED***[...mainModule.importers].filter(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(m)***REMOVED***=>***REMOVED***isCSSRequest(m.url)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***styleImporters.forEach((m)***REMOVED***=>***REMOVED***affectedModules.add(m));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(didUpdateStyle)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***updateType.push(`style`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(updateType.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(file.endsWith(".vue"))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***invalidateDescriptor(file);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache.set(file,***REMOVED***descriptor);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***debug(`[vue:update(${updateType.join("&")})]***REMOVED***${file}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***[...affectedModules].filter(Boolean);
}
function***REMOVED***isEqualBlock(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!a***REMOVED***&&***REMOVED***!b)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***if***REMOVED***(!a***REMOVED***||***REMOVED***!b)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(a.src***REMOVED***&&***REMOVED***b.src***REMOVED***&&***REMOVED***a.src***REMOVED***===***REMOVED***b.src)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***if***REMOVED***(a.content***REMOVED***!==***REMOVED***b.content)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***const***REMOVED***keysA***REMOVED***=***REMOVED***Object.keys(a.attrs);
***REMOVED******REMOVED***const***REMOVED***keysB***REMOVED***=***REMOVED***Object.keys(b.attrs);
***REMOVED******REMOVED***if***REMOVED***(keysA.length***REMOVED***!==***REMOVED***keysB.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***keysA.every((key)***REMOVED***=>***REMOVED***a.attrs[key]***REMOVED***===***REMOVED***b.attrs[key]);
}
function***REMOVED***isOnlyTemplateChanged(prev,***REMOVED***next)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***!hasScriptChanged(prev,***REMOVED***next)***REMOVED***&&***REMOVED***prev.styles.length***REMOVED***===***REMOVED***next.styles.length***REMOVED***&&***REMOVED***prev.styles.every((s,***REMOVED***i)***REMOVED***=>***REMOVED***isEqualBlock(s,***REMOVED***next.styles[i]))***REMOVED***&&***REMOVED***prev.customBlocks.length***REMOVED***===***REMOVED***next.customBlocks.length***REMOVED***&&***REMOVED***prev.customBlocks.every((s,***REMOVED***i)***REMOVED***=>***REMOVED***isEqualBlock(s,***REMOVED***next.customBlocks[i]));
}
function***REMOVED***hasScriptChanged(prev,***REMOVED***next)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!isEqualBlock(prev.script,***REMOVED***next.script))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!isEqualBlock(prev.scriptSetup,***REMOVED***next.scriptSetup))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***prevResolvedScript***REMOVED***=***REMOVED***getResolvedScript(prev,***REMOVED***false);
***REMOVED******REMOVED***const***REMOVED***prevImports***REMOVED***=***REMOVED***prevResolvedScript?.imports;
***REMOVED******REMOVED***if***REMOVED***(prevImports)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!next.template***REMOVED***||***REMOVED***next.shouldForceReload(prevImports);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
}
function***REMOVED***getMainModule(modules)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***modules.filter((m)***REMOVED***=>***REMOVED***!/type=/.test(m.url)***REMOVED***||***REMOVED***/type=script/.test(m.url)).sort((m1,***REMOVED***m2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***m1.url.length***REMOVED***-***REMOVED***m2.url.length;
***REMOVED******REMOVED***})[0];
}
function***REMOVED***getScriptModule(modules)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***modules.find((m)***REMOVED***=>***REMOVED***/type=script.*&lang\.\w+$/.test(m.url));
}
function***REMOVED***handleTypeDepChange(affectedComponents,***REMOVED***{***REMOVED***modules,***REMOVED***server:***REMOVED***{***REMOVED***moduleGraph***REMOVED***}***REMOVED***})***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***affected***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Set();
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***file***REMOVED***of***REMOVED***affectedComponents)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***invalidateScript(file);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mods***REMOVED***=***REMOVED***moduleGraph.getModulesByFile(file);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mods)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***arr***REMOVED***=***REMOVED***[...mods];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***affected.add(getScriptModule(arr)***REMOVED***||***REMOVED***getMainModule(arr));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***[...modules,***REMOVED***...affected];
}

const***REMOVED***EXPORT_HELPER_ID***REMOVED***=***REMOVED***"\0plugin-vue:export-helper";
const***REMOVED***helperCode***REMOVED***=***REMOVED***`
export***REMOVED***default***REMOVED***(sfc,***REMOVED***props)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***target***REMOVED***=***REMOVED***sfc.__vccOpts***REMOVED***||***REMOVED***sfc;
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***[key,***REMOVED***val]***REMOVED***of***REMOVED***props)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***target[key]***REMOVED***=***REMOVED***val;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***target;
}
`;

async***REMOVED***function***REMOVED***transformMain(code,***REMOVED***filename,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***devServer,***REMOVED***isProduction,***REMOVED***devToolsEnabled***REMOVED***}***REMOVED***=***REMOVED***options;
***REMOVED******REMOVED***const***REMOVED***prevDescriptor***REMOVED***=***REMOVED***getPrevDescriptor(filename);
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***descriptor,***REMOVED***errors***REMOVED***}***REMOVED***=***REMOVED***createDescriptor(filename,***REMOVED***code,***REMOVED***options);
***REMOVED******REMOVED***if***REMOVED***(fs.existsSync(filename))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***getDescriptor(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***for***REMOVED***vue***REMOVED***files,***REMOVED***create***REMOVED***descriptor***REMOVED***from***REMOVED***fs***REMOVED***read***REMOVED***to***REMOVED***be***REMOVED***consistent***REMOVED***with
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***logic***REMOVED***in***REMOVED***handleHotUpdate()
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***for***REMOVED***non***REMOVED***vue***REMOVED***files,***REMOVED***e.g.***REMOVED***md***REMOVED***files***REMOVED***in***REMOVED***vitepress,***REMOVED***we***REMOVED***assume
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***`hmrContext.read`***REMOVED***is***REMOVED***overwriten***REMOVED***so***REMOVED***handleHotUpdate()***REMOVED***is***REMOVED***dealing***REMOVED***with
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***post-transform***REMOVED***code,***REMOVED***so***REMOVED***we***REMOVED***populate***REMOVED***the***REMOVED***descriptor***REMOVED***with***REMOVED***post-transform
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***code***REMOVED***here***REMOVED***as***REMOVED***well.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename.endsWith(".vue")***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***code
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(errors.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***errors.forEach(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(error)***REMOVED***=>***REMOVED***pluginContext.error(createRollupError(filename,***REMOVED***error))
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***attachedProps***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***const***REMOVED***hasScoped***REMOVED***=***REMOVED***descriptor.styles.some((s)***REMOVED***=>***REMOVED***s.scoped);
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***code:***REMOVED***scriptCode,***REMOVED***map:***REMOVED***scriptMap***REMOVED***}***REMOVED***=***REMOVED***await***REMOVED***genScriptCode(
***REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED***customElement
***REMOVED******REMOVED***);
***REMOVED******REMOVED***const***REMOVED***hasTemplateImport***REMOVED***=***REMOVED***descriptor.template***REMOVED***&&***REMOVED***!isUseInlineTemplate(descriptor,***REMOVED***!devServer);
***REMOVED******REMOVED***let***REMOVED***templateCode***REMOVED***=***REMOVED***"";
***REMOVED******REMOVED***let***REMOVED***templateMap***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED***if***REMOVED***(hasTemplateImport)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***({***REMOVED***code:***REMOVED***templateCode,***REMOVED***map:***REMOVED***templateMap***REMOVED***}***REMOVED***=***REMOVED***await***REMOVED***genTemplateCode(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customElement
***REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(hasTemplateImport)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***attachedProps.push(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ssr***REMOVED***?***REMOVED***["ssrRender",***REMOVED***"_sfc_ssrRender"]***REMOVED***:***REMOVED***["render",***REMOVED***"_sfc_render"]
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prevDescriptor***REMOVED***&&***REMOVED***!isEqualBlock(descriptor.template,***REMOVED***prevDescriptor.template))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***attachedProps.push([ssr***REMOVED***?***REMOVED***"ssrRender"***REMOVED***:***REMOVED***"render",***REMOVED***"()***REMOVED***=>***REMOVED***{}"]);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***stylesCode***REMOVED***=***REMOVED***await***REMOVED***genStyleCode(
***REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED***customElement,
***REMOVED******REMOVED******REMOVED******REMOVED***attachedProps
***REMOVED******REMOVED***);
***REMOVED******REMOVED***const***REMOVED***customBlocksCode***REMOVED***=***REMOVED***await***REMOVED***genCustomBlockCode(descriptor,***REMOVED***pluginContext);
***REMOVED******REMOVED***const***REMOVED***output***REMOVED***=***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED***scriptCode,
***REMOVED******REMOVED******REMOVED******REMOVED***templateCode,
***REMOVED******REMOVED******REMOVED******REMOVED***stylesCode,
***REMOVED******REMOVED******REMOVED******REMOVED***customBlocksCode
***REMOVED******REMOVED***];
***REMOVED******REMOVED***if***REMOVED***(hasScoped)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***attachedProps.push([`__scopeId`,***REMOVED***JSON.stringify(`data-v-${descriptor.id}`)]);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(devToolsEnabled***REMOVED***||***REMOVED***devServer***REMOVED***&&***REMOVED***!isProduction)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***attachedProps.push([
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`__file`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***JSON.stringify(isProduction***REMOVED***?***REMOVED***path.basename(filename)***REMOVED***:***REMOVED***filename)
***REMOVED******REMOVED******REMOVED******REMOVED***]);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(devServer***REMOVED***&&***REMOVED***devServer.config.server.hmr***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***!ssr***REMOVED***&&***REMOVED***!isProduction)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***output.push(`_sfc_main.__hmrId***REMOVED***=***REMOVED***${JSON.stringify(descriptor.id)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***output.push(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`typeof***REMOVED***__VUE_HMR_RUNTIME__***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***__VUE_HMR_RUNTIME__.createRecord(_sfc_main.__hmrId,***REMOVED***_sfc_main)`
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prevDescriptor***REMOVED***&&***REMOVED***isOnlyTemplateChanged(prevDescriptor,***REMOVED***descriptor))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output.push(`export***REMOVED***const***REMOVED***_rerender_only***REMOVED***=***REMOVED***true`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***output.push(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`import.meta.hot.accept(mod***REMOVED***=>***REMOVED***{`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***if***REMOVED***(!mod)***REMOVED***return`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***const***REMOVED***{***REMOVED***default:***REMOVED***updated,***REMOVED***_rerender_only***REMOVED***}***REMOVED***=***REMOVED***mod`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***if***REMOVED***(_rerender_only)***REMOVED***{`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED******REMOVED******REMOVED***__VUE_HMR_RUNTIME__.rerender(updated.__hmrId,***REMOVED***updated.render)`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED******REMOVED******REMOVED***__VUE_HMR_RUNTIME__.reload(updated.__hmrId,***REMOVED***updated)`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***}`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`})`
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(ssr)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***normalizedFilename***REMOVED***=***REMOVED***normalizePath$1(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path.relative(options.root,***REMOVED***filename)
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***output.push(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`import***REMOVED***{***REMOVED***useSSRContext***REMOVED***as***REMOVED***__vite_useSSRContext***REMOVED***}***REMOVED***from***REMOVED***'vue'`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`const***REMOVED***_sfc_setup***REMOVED***=***REMOVED***_sfc_main.setup`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`_sfc_main.setup***REMOVED***=***REMOVED***(props,***REMOVED***ctx)***REMOVED***=>***REMOVED***{`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***const***REMOVED***ssrContext***REMOVED***=***REMOVED***__vite_useSSRContext()`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***;(ssrContext.modules***REMOVED***||***REMOVED***(ssrContext.modules***REMOVED***=***REMOVED***new***REMOVED***Set())).add(${JSON.stringify(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***normalizedFilename
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)})`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`***REMOVED******REMOVED***return***REMOVED***_sfc_setup***REMOVED***?***REMOVED***_sfc_setup(props,***REMOVED***ctx)***REMOVED***:***REMOVED***undefined`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`}`
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***resolvedMap***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED***if***REMOVED***(options.sourceMap)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(scriptMap***REMOVED***&&***REMOVED***templateMap)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***gen***REMOVED***=***REMOVED***fromMap(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***version***REMOVED***property***REMOVED***of***REMOVED***result.map***REMOVED***is***REMOVED***declared***REMOVED***as***REMOVED***string
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***but***REMOVED***actually***REMOVED***it***REMOVED***is***REMOVED***`3`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scriptMap
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***tracer***REMOVED***=***REMOVED***new***REMOVED***TraceMap(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***same***REMOVED***above
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***templateMap
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***offset***REMOVED***=***REMOVED***(scriptCode.match(/\r?\n/g)?.length***REMOVED***??***REMOVED***0)***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***eachMapping(tracer,***REMOVED***(m)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(m.source***REMOVED***==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***addMapping(gen,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***source:***REMOVED***m.source,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***original:***REMOVED***{***REMOVED***line:***REMOVED***m.originalLine,***REMOVED***column:***REMOVED***m.originalColumn***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***generated:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line:***REMOVED***m.generatedLine***REMOVED***+***REMOVED***offset,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***column:***REMOVED***m.generatedColumn
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvedMap***REMOVED***=***REMOVED***toEncodedMap(gen);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvedMap.sourcesContent***REMOVED***=***REMOVED***templateMap.sourcesContent;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvedMap***REMOVED***=***REMOVED***scriptMap***REMOVED***??***REMOVED***templateMap;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!attachedProps.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***output.push(`export***REMOVED***default***REMOVED***_sfc_main`);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***output.push(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`import***REMOVED***_export_sfc***REMOVED***from***REMOVED***'${EXPORT_HELPER_ID}'`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`export***REMOVED***default***REMOVED***/*#__PURE__*/_export_sfc(_sfc_main,***REMOVED***[${attachedProps.map(([key,***REMOVED***val])***REMOVED***=>***REMOVED***`['${key}',${val}]`).join(",")}])`
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***resolvedCode***REMOVED***=***REMOVED***output.join("\n");
***REMOVED******REMOVED***const***REMOVED***lang***REMOVED***=***REMOVED***descriptor.scriptSetup?.lang***REMOVED***||***REMOVED***descriptor.script?.lang;
***REMOVED******REMOVED***if***REMOVED***(lang***REMOVED***&&***REMOVED***/tsx?$/.test(lang)***REMOVED***&&***REMOVED***!descriptor.script?.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***code:***REMOVED***code2,***REMOVED***map***REMOVED***}***REMOVED***=***REMOVED***await***REMOVED***transformWithEsbuild(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvedCode,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***loader:***REMOVED***"ts",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***target:***REMOVED***"esnext",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourcemap:***REMOVED***options.sourceMap
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolvedMap
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***resolvedCode***REMOVED***=***REMOVED***code2;
***REMOVED******REMOVED******REMOVED******REMOVED***resolvedMap***REMOVED***=***REMOVED***resolvedMap***REMOVED***?***REMOVED***map***REMOVED***:***REMOVED***resolvedMap;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***resolvedCode,
***REMOVED******REMOVED******REMOVED******REMOVED***map:***REMOVED***resolvedMap***REMOVED***||***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mappings:***REMOVED***""
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***meta:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***vite:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lang:***REMOVED***descriptor.script?.lang***REMOVED***||***REMOVED***descriptor.scriptSetup?.lang***REMOVED***||***REMOVED***"js"
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}
async***REMOVED***function***REMOVED***genTemplateCode(descriptor,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***template***REMOVED***=***REMOVED***descriptor.template;
***REMOVED******REMOVED***const***REMOVED***hasScoped***REMOVED***=***REMOVED***descriptor.styles.some((style)***REMOVED***=>***REMOVED***style.scoped);
***REMOVED******REMOVED***if***REMOVED***((!template.lang***REMOVED***||***REMOVED***template.lang***REMOVED***===***REMOVED***"html")***REMOVED***&&***REMOVED***!template.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***transformTemplateInMain(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***template.content,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customElement
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(template.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***linkSrcToDescriptor(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***template.src,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hasScoped
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***src***REMOVED***=***REMOVED***template.src***REMOVED***||***REMOVED***descriptor.filename;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***srcQuery***REMOVED***=***REMOVED***template.src***REMOVED***?***REMOVED***hasScoped***REMOVED***?***REMOVED***`&src=${descriptor.id}`***REMOVED***:***REMOVED***"&src=true"***REMOVED***:***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***scopedQuery***REMOVED***=***REMOVED***hasScoped***REMOVED***?***REMOVED***`&scoped=${descriptor.id}`***REMOVED***:***REMOVED***``;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***attrsQuery***REMOVED***=***REMOVED***attrsToQuery(template.attrs,***REMOVED***"js",***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***query***REMOVED***=***REMOVED***`?vue&type=template${srcQuery}${scopedQuery}${attrsQuery}`;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request***REMOVED***=***REMOVED***JSON.stringify(src***REMOVED***+***REMOVED***query);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***renderFnName***REMOVED***=***REMOVED***ssr***REMOVED***?***REMOVED***"ssrRender"***REMOVED***:***REMOVED***"render";
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***`import***REMOVED***{***REMOVED***${renderFnName}***REMOVED***as***REMOVED***_sfc_${renderFnName}***REMOVED***}***REMOVED***from***REMOVED***${request}`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map:***REMOVED***void***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
}
async***REMOVED***function***REMOVED***genScriptCode(descriptor,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***ssr,***REMOVED***customElement)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***scriptCode***REMOVED***=***REMOVED***`const***REMOVED***${scriptIdentifier}***REMOVED***=***REMOVED***{}`;
***REMOVED******REMOVED***let***REMOVED***map;
***REMOVED******REMOVED***const***REMOVED***script***REMOVED***=***REMOVED***resolveScript(descriptor,***REMOVED***options,***REMOVED***ssr,***REMOVED***customElement);
***REMOVED******REMOVED***if***REMOVED***(script)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(canInlineMain(descriptor,***REMOVED***options))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!options.compiler.version)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***userPlugins***REMOVED***=***REMOVED***options.script?.babelParserPlugins***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***defaultPlugins***REMOVED***=***REMOVED***script.lang***REMOVED***===***REMOVED***"ts"***REMOVED***?***REMOVED***userPlugins.includes("decorators")***REMOVED***?***REMOVED***["typescript"]***REMOVED***:***REMOVED***["typescript",***REMOVED***"decorators-legacy"]***REMOVED***:***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scriptCode***REMOVED***=***REMOVED***options.compiler.rewriteDefault(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***script.content,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scriptIdentifier,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***[...defaultPlugins,***REMOVED***...userPlugins]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scriptCode***REMOVED***=***REMOVED***script.content;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map***REMOVED***=***REMOVED***script.map;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(script.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***linkSrcToDescriptor(script.src,***REMOVED***descriptor,***REMOVED***pluginContext,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***src***REMOVED***=***REMOVED***script.src***REMOVED***||***REMOVED***descriptor.filename;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***langFallback***REMOVED***=***REMOVED***script.src***REMOVED***&&***REMOVED***path.extname(src).slice(1)***REMOVED***||***REMOVED***"js";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***attrsQuery***REMOVED***=***REMOVED***attrsToQuery(script.attrs,***REMOVED***langFallback);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***srcQuery***REMOVED***=***REMOVED***script.src***REMOVED***?***REMOVED***`&src=true`***REMOVED***:***REMOVED***``;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***query***REMOVED***=***REMOVED***`?vue&type=script${srcQuery}${attrsQuery}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request***REMOVED***=***REMOVED***JSON.stringify(src***REMOVED***+***REMOVED***query);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scriptCode***REMOVED***=***REMOVED***`import***REMOVED***_sfc_main***REMOVED***from***REMOVED***${request}
export***REMOVED*******REMOVED***from***REMOVED***${request}`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***scriptCode,
***REMOVED******REMOVED******REMOVED******REMOVED***map
***REMOVED******REMOVED***};
}
async***REMOVED***function***REMOVED***genStyleCode(descriptor,***REMOVED***pluginContext,***REMOVED***customElement,***REMOVED***attachedProps)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***stylesCode***REMOVED***=***REMOVED***``;
***REMOVED******REMOVED***let***REMOVED***cssModulesMap;
***REMOVED******REMOVED***if***REMOVED***(descriptor.styles.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***descriptor.styles.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***style***REMOVED***=***REMOVED***descriptor.styles[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(style.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***linkSrcToDescriptor(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***style.src,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginContext,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***style.scoped
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***src***REMOVED***=***REMOVED***style.src***REMOVED***||***REMOVED***descriptor.filename;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***attrsQuery***REMOVED***=***REMOVED***attrsToQuery(style.attrs,***REMOVED***"css");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***srcQuery***REMOVED***=***REMOVED***style.src***REMOVED***?***REMOVED***style.scoped***REMOVED***?***REMOVED***`&src=${descriptor.id}`***REMOVED***:***REMOVED***"&src=true"***REMOVED***:***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***directQuery***REMOVED***=***REMOVED***customElement***REMOVED***?***REMOVED***`&inline`***REMOVED***:***REMOVED***``;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***scopedQuery***REMOVED***=***REMOVED***style.scoped***REMOVED***?***REMOVED***`&scoped=${descriptor.id}`***REMOVED***:***REMOVED***``;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***query***REMOVED***=***REMOVED***`?vue&type=style&index=${i}${srcQuery}${directQuery}${scopedQuery}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***styleRequest***REMOVED***=***REMOVED***src***REMOVED***+***REMOVED***query***REMOVED***+***REMOVED***attrsQuery;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(style.module)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(customElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`<style***REMOVED***module>***REMOVED***is***REMOVED***not***REMOVED***supported***REMOVED***in***REMOVED***custom***REMOVED***elements***REMOVED***mode.`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***[importCode,***REMOVED***nameMap]***REMOVED***=***REMOVED***genCSSModulesCode(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***styleRequest,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***style.module
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stylesCode***REMOVED***+=***REMOVED***importCode;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.assign(cssModulesMap***REMOVED***||***REMOVED***(cssModulesMap***REMOVED***=***REMOVED***{}),***REMOVED***nameMap);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(customElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stylesCode***REMOVED***+=***REMOVED***`
import***REMOVED***_style_${i}***REMOVED***from***REMOVED***${JSON.stringify(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***styleRequest
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stylesCode***REMOVED***+=***REMOVED***`
import***REMOVED***${JSON.stringify(styleRequest)}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(customElement)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***attachedProps.push([
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`styles`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`[${descriptor.styles.map((_,***REMOVED***i)***REMOVED***=>***REMOVED***`_style_${i}`).join(",")}]`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***]);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(cssModulesMap)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mappingCode***REMOVED***=***REMOVED***Object.entries(cssModulesMap).reduce(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(code,***REMOVED***[key,***REMOVED***value])***REMOVED***=>***REMOVED***code***REMOVED***+***REMOVED***`"${key}":${value},
`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"{\n"
***REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***+***REMOVED***"}";
***REMOVED******REMOVED******REMOVED******REMOVED***stylesCode***REMOVED***+=***REMOVED***`
const***REMOVED***cssModules***REMOVED***=***REMOVED***${mappingCode}`;
***REMOVED******REMOVED******REMOVED******REMOVED***attachedProps.push([`__cssModules`,***REMOVED***`cssModules`]);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***stylesCode;
}
function***REMOVED***genCSSModulesCode(index,***REMOVED***request,***REMOVED***moduleName)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***styleVar***REMOVED***=***REMOVED***`style${index}`;
***REMOVED******REMOVED***const***REMOVED***exposedName***REMOVED***=***REMOVED***typeof***REMOVED***moduleName***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***moduleName***REMOVED***:***REMOVED***"$style";
***REMOVED******REMOVED***const***REMOVED***moduleRequest***REMOVED***=***REMOVED***request.replace(/\.(\w+)$/,***REMOVED***".module.$1");
***REMOVED******REMOVED***return***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED***`
import***REMOVED***${styleVar}***REMOVED***from***REMOVED***${JSON.stringify(moduleRequest)}`,
***REMOVED******REMOVED******REMOVED******REMOVED***{***REMOVED***[exposedName]:***REMOVED***styleVar***REMOVED***}
***REMOVED******REMOVED***];
}
async***REMOVED***function***REMOVED***genCustomBlockCode(descriptor,***REMOVED***pluginContext)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***code***REMOVED***=***REMOVED***"";
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***index***REMOVED***=***REMOVED***0;***REMOVED***index***REMOVED***<***REMOVED***descriptor.customBlocks.length;***REMOVED***index++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***block***REMOVED***=***REMOVED***descriptor.customBlocks[index];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***linkSrcToDescriptor(block.src,***REMOVED***descriptor,***REMOVED***pluginContext,***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***src***REMOVED***=***REMOVED***block.src***REMOVED***||***REMOVED***descriptor.filename;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***attrsQuery***REMOVED***=***REMOVED***attrsToQuery(block.attrs,***REMOVED***block.type);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***srcQuery***REMOVED***=***REMOVED***block.src***REMOVED***?***REMOVED***`&src=true`***REMOVED***:***REMOVED***``;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***query***REMOVED***=***REMOVED***`?vue&type=${block.type}&index=${index}${srcQuery}${attrsQuery}`;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request***REMOVED***=***REMOVED***JSON.stringify(src***REMOVED***+***REMOVED***query);
***REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***+=***REMOVED***`import***REMOVED***block${index}***REMOVED***from***REMOVED***${request}
`;
***REMOVED******REMOVED******REMOVED******REMOVED***code***REMOVED***+=***REMOVED***`if***REMOVED***(typeof***REMOVED***block${index}***REMOVED***===***REMOVED***'function')***REMOVED***block${index}(_sfc_main)
`;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***code;
}
async***REMOVED***function***REMOVED***linkSrcToDescriptor(src,***REMOVED***descriptor,***REMOVED***pluginContext,***REMOVED***scoped)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***srcFile***REMOVED***=***REMOVED***(await***REMOVED***pluginContext.resolve(src,***REMOVED***descriptor.filename))?.id***REMOVED***||***REMOVED***src;
***REMOVED******REMOVED***setSrcDescriptor(srcFile.replace(/\?.*$/,***REMOVED***""),***REMOVED***descriptor,***REMOVED***scoped);
}
const***REMOVED***ignoreList***REMOVED***=***REMOVED***[
***REMOVED******REMOVED***"id",
***REMOVED******REMOVED***"index",
***REMOVED******REMOVED***"src",
***REMOVED******REMOVED***"type",
***REMOVED******REMOVED***"lang",
***REMOVED******REMOVED***"module",
***REMOVED******REMOVED***"scoped",
***REMOVED******REMOVED***"generic"
];
function***REMOVED***attrsToQuery(attrs,***REMOVED***langFallback,***REMOVED***forceLangFallback***REMOVED***=***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***query***REMOVED***=***REMOVED***``;
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***name***REMOVED***in***REMOVED***attrs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***attrs[name];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!ignoreList.includes(name))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***query***REMOVED***+=***REMOVED***`&${encodeURIComponent(name)}${value***REMOVED***?***REMOVED***`=${encodeURIComponent(value)}`***REMOVED***:***REMOVED***``}`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(langFallback***REMOVED***||***REMOVED***attrs.lang)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***query***REMOVED***+=***REMOVED***`lang`***REMOVED***in***REMOVED***attrs***REMOVED***?***REMOVED***forceLangFallback***REMOVED***?***REMOVED***`&lang.${langFallback}`***REMOVED***:***REMOVED***`&lang.${attrs.lang}`***REMOVED***:***REMOVED***`&lang.${langFallback}`;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***query;
}

async***REMOVED***function***REMOVED***transformStyle(code,***REMOVED***descriptor,***REMOVED***index,***REMOVED***options,***REMOVED***pluginContext,***REMOVED***filename)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***block***REMOVED***=***REMOVED***descriptor.styles[index];
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***await***REMOVED***options.compiler.compileStyleAsync({
***REMOVED******REMOVED******REMOVED******REMOVED***...options.style,
***REMOVED******REMOVED******REMOVED******REMOVED***filename:***REMOVED***descriptor.filename,
***REMOVED******REMOVED******REMOVED******REMOVED***id:***REMOVED***`data-v-${descriptor.id}`,
***REMOVED******REMOVED******REMOVED******REMOVED***isProd:***REMOVED***options.isProduction,
***REMOVED******REMOVED******REMOVED******REMOVED***source:***REMOVED***code,
***REMOVED******REMOVED******REMOVED******REMOVED***scoped:***REMOVED***block.scoped,
***REMOVED******REMOVED******REMOVED******REMOVED***...options.cssDevSourcemap***REMOVED***?***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***postcssOptions:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***from:***REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***inline:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***annotation:***REMOVED***false
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***:***REMOVED***{}
***REMOVED******REMOVED***});
***REMOVED******REMOVED***if***REMOVED***(result.errors.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result.errors.forEach((error)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error.line***REMOVED***&&***REMOVED***error.column)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***error.loc***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***file:***REMOVED***descriptor.filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line:***REMOVED***error.line***REMOVED***+***REMOVED***block.loc.start.line,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***column:***REMOVED***error.column
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginContext.error(error);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***map***REMOVED***=***REMOVED***result.map***REMOVED***?***REMOVED***await***REMOVED***formatPostcssSourceMap(
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***version***REMOVED***property***REMOVED***of***REMOVED***result.map***REMOVED***is***REMOVED***declared***REMOVED***as***REMOVED***string
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***but***REMOVED***actually***REMOVED***it***REMOVED***is***REMOVED***a***REMOVED***number
***REMOVED******REMOVED******REMOVED******REMOVED***result.map,
***REMOVED******REMOVED******REMOVED******REMOVED***filename
***REMOVED******REMOVED***)***REMOVED***:***REMOVED***{***REMOVED***mappings:***REMOVED***""***REMOVED***};
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***result.code,
***REMOVED******REMOVED******REMOVED******REMOVED***map
***REMOVED******REMOVED***};
}

function***REMOVED***vuePlugin(rawOptions***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***shallowRef({
***REMOVED******REMOVED******REMOVED******REMOVED***isProduction:***REMOVED***process.env.NODE_ENV***REMOVED***===***REMOVED***"production",
***REMOVED******REMOVED******REMOVED******REMOVED***compiler:***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***to***REMOVED***be***REMOVED***set***REMOVED***in***REMOVED***buildStart
***REMOVED******REMOVED******REMOVED******REMOVED***include:***REMOVED***/\.vue$/,
***REMOVED******REMOVED******REMOVED******REMOVED***customElement:***REMOVED***/\.ce\.vue$/,
***REMOVED******REMOVED******REMOVED******REMOVED***reactivityTransform:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***...rawOptions,
***REMOVED******REMOVED******REMOVED******REMOVED***root:***REMOVED***process.cwd(),
***REMOVED******REMOVED******REMOVED******REMOVED***sourceMap:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***cssDevSourcemap:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***devToolsEnabled:***REMOVED***process.env.NODE_ENV***REMOVED***!==***REMOVED***"production"
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***filter***REMOVED***=***REMOVED***computed(
***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***createFilter(options.value.include,***REMOVED***options.value.exclude)
***REMOVED******REMOVED***);
***REMOVED******REMOVED***const***REMOVED***customElementFilter***REMOVED***=***REMOVED***computed(
***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***typeof***REMOVED***options.value.customElement***REMOVED***===***REMOVED***"boolean"***REMOVED***?***REMOVED***()***REMOVED***=>***REMOVED***options.value.customElement***REMOVED***:***REMOVED***createFilter(options.value.customElement)
***REMOVED******REMOVED***);
***REMOVED******REMOVED***const***REMOVED***refTransformFilter***REMOVED***=***REMOVED***computed(
***REMOVED******REMOVED******REMOVED******REMOVED***()***REMOVED***=>***REMOVED***options.value.reactivityTransform***REMOVED***===***REMOVED***false***REMOVED***?***REMOVED***()***REMOVED***=>***REMOVED***false***REMOVED***:***REMOVED***options.value.reactivityTransform***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***createFilter(/\.(j|t)sx?$/,***REMOVED***/node_modules/)***REMOVED***:***REMOVED***createFilter(options.value.reactivityTransform)
***REMOVED******REMOVED***);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***name:***REMOVED***"vite:vue",
***REMOVED******REMOVED******REMOVED******REMOVED***api:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***get***REMOVED***options()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***options.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***set***REMOVED***options(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***version
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***handleHotUpdate(ctx)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.value.compiler.invalidateTypeCache)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value.compiler.invalidateTypeCache(ctx.file);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeDepToSFCMap.has(ctx.file))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***handleTypeDepChange(typeDepToSFCMap.get(ctx.file),***REMOVED***ctx);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(filter.value(ctx.file))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***handleHotUpdate(ctx,***REMOVED***options.value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***config(config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***dedupe:***REMOVED***config.build?.ssr***REMOVED***?***REMOVED***[]***REMOVED***:***REMOVED***["vue"]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***define:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__VUE_OPTIONS_API__:***REMOVED***config.define?.__VUE_OPTIONS_API__***REMOVED***??***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__VUE_PROD_DEVTOOLS__:***REMOVED***config.define?.__VUE_PROD_DEVTOOLS__***REMOVED***??***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__VUE_PROD_HYDRATION_MISMATCH_DETAILS__:***REMOVED***config.define?.__VUE_PROD_HYDRATION_MISMATCH_DETAILS__***REMOVED***??***REMOVED***false
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ssr:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-ignore***REMOVED***--***REMOVED***config.legacy.buildSsrCjsExternalHeuristics***REMOVED***will***REMOVED***be***REMOVED***removed***REMOVED***in***REMOVED***Vite***REMOVED***5
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***external:***REMOVED***config.legacy?.buildSsrCjsExternalHeuristics***REMOVED***?***REMOVED***["vue",***REMOVED***"@vue/server-renderer"]***REMOVED***:***REMOVED***[]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***configResolved(config)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...options.value,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***root:***REMOVED***config.root,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceMap:***REMOVED***config.command***REMOVED***===***REMOVED***"build"***REMOVED***?***REMOVED***!!config.build.sourcemap***REMOVED***:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cssDevSourcemap:***REMOVED***config.css?.devSourcemap***REMOVED***??***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isProduction:***REMOVED***config.isProduction,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***devToolsEnabled:***REMOVED***!!config.define.__VUE_PROD_DEVTOOLS__***REMOVED***||***REMOVED***!config.isProduction
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***configureServer(server)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value.devServer***REMOVED***=***REMOVED***server;
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***buildStart()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***compiler***REMOVED***=***REMOVED***options.value.compiler***REMOVED***=***REMOVED***options.value.compiler***REMOVED***||***REMOVED***resolveCompiler(options.value.root);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(compiler.invalidateTypeCache)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value.devServer?.watcher.on("unlink",***REMOVED***(file)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***compiler.invalidateTypeCache(file);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***async***REMOVED***resolveId(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(id***REMOVED***===***REMOVED***EXPORT_HELPER_ID)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***id;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parseVueRequest(id).query.vue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***id;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***load(id,***REMOVED***opt)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ssr***REMOVED***=***REMOVED***opt?.ssr***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(id***REMOVED***===***REMOVED***EXPORT_HELPER_ID)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***helperCode;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***filename,***REMOVED***query***REMOVED***}***REMOVED***=***REMOVED***parseVueRequest(id);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(query.vue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(query.src)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fs.readFileSync(filename,***REMOVED***"utf-8");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***descriptor***REMOVED***=***REMOVED***getDescriptor(filename,***REMOVED***options.value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***block;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(query.type***REMOVED***===***REMOVED***"script")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***getResolvedScript(descriptor,***REMOVED***ssr);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(query.type***REMOVED***===***REMOVED***"template")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***descriptor.template;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(query.type***REMOVED***===***REMOVED***"style")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***descriptor.styles[query.index];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(query.index***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***descriptor.customBlocks[query.index];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***block.content,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map:***REMOVED***block.map
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***transform(code,***REMOVED***id,***REMOVED***opt)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ssr***REMOVED***=***REMOVED***opt?.ssr***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***filename,***REMOVED***query***REMOVED***}***REMOVED***=***REMOVED***parseVueRequest(id);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(query.raw***REMOVED***||***REMOVED***query.url)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!filter.value(filename)***REMOVED***&&***REMOVED***!query.vue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!query.vue***REMOVED***&&***REMOVED***refTransformFilter.value(filename)***REMOVED***&&***REMOVED***options.value.compiler.shouldTransformRef(code))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***options.value.compiler.transformRef(code,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceMap:***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!query.vue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***transformMain(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customElementFilter.value(filename)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***descriptor***REMOVED***=***REMOVED***query.src***REMOVED***?***REMOVED***getSrcDescriptor(filename,***REMOVED***query)***REMOVED***||***REMOVED***getTempSrcDescriptor(filename,***REMOVED***query)***REMOVED***:***REMOVED***getDescriptor(filename,***REMOVED***options.value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(query.type***REMOVED***===***REMOVED***"template")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***transformTemplateAsModule(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ssr,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***customElementFilter.value(filename)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(query.type***REMOVED***===***REMOVED***"style")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***transformStyle(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***descriptor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Number(query.index***REMOVED***||***REMOVED***0),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options.value,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***filename
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}

export***REMOVED***{***REMOVED***vuePlugin***REMOVED***as***REMOVED***default,***REMOVED***parseVueRequest***REMOVED***};
