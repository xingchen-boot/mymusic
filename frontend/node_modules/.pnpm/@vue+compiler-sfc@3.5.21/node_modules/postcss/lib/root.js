'use***REMOVED***strict'

let***REMOVED***Container***REMOVED***=***REMOVED***require('./container')

let***REMOVED***LazyResult,***REMOVED***Processor

class***REMOVED***Root***REMOVED***extends***REMOVED***Container***REMOVED***{
***REMOVED******REMOVED***constructor(defaults)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***super(defaults)
***REMOVED******REMOVED******REMOVED******REMOVED***this.type***REMOVED***=***REMOVED***'root'
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.nodes)***REMOVED***this.nodes***REMOVED***=***REMOVED***[]
***REMOVED******REMOVED***}

***REMOVED******REMOVED***normalize(child,***REMOVED***sample,***REMOVED***type)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***nodes***REMOVED***=***REMOVED***super.normalize(child)

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sample)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'prepend')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.nodes.length***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sample.raws.before***REMOVED***=***REMOVED***this.nodes[1].raws.before
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***sample.raws.before
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(this.first***REMOVED***!==***REMOVED***sample)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***node***REMOVED***of***REMOVED***nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.raws.before***REMOVED***=***REMOVED***sample.raws.before
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***nodes
***REMOVED******REMOVED***}

***REMOVED******REMOVED***removeChild(child,***REMOVED***ignore)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***this.index(child)

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!ignore***REMOVED***&&***REMOVED***index***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***this.nodes.length***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.nodes[1].raws.before***REMOVED***=***REMOVED***this.nodes[index].raws.before
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***super.removeChild(child)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toResult(opts***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***lazy***REMOVED***=***REMOVED***new***REMOVED***LazyResult(new***REMOVED***Processor(),***REMOVED***this,***REMOVED***opts)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***lazy.stringify()
***REMOVED******REMOVED***}
}

Root.registerLazyResult***REMOVED***=***REMOVED***dependant***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***LazyResult***REMOVED***=***REMOVED***dependant
}

Root.registerProcessor***REMOVED***=***REMOVED***dependant***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***Processor***REMOVED***=***REMOVED***dependant
}

module.exports***REMOVED***=***REMOVED***Root
Root.default***REMOVED***=***REMOVED***Root

Container.registerRoot(Root)
