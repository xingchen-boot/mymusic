/****REMOVED***-*-***REMOVED***Mode:***REMOVED***js;***REMOVED***js-indent-level:***REMOVED***2;***REMOVED***-*-***REMOVED****/
/*
***REMOVED*******REMOVED***Copyright***REMOVED***2011***REMOVED***Mozilla***REMOVED***Foundation***REMOVED***and***REMOVED***contributors
***REMOVED*******REMOVED***Licensed***REMOVED***under***REMOVED***the***REMOVED***New***REMOVED***BSD***REMOVED***license.***REMOVED***See***REMOVED***LICENSE***REMOVED***or:
***REMOVED*******REMOVED***http://opensource.org/licenses/BSD-3-Clause
***REMOVED****
***REMOVED*******REMOVED***Based***REMOVED***on***REMOVED***the***REMOVED***Base***REMOVED***64***REMOVED***VLQ***REMOVED***implementation***REMOVED***in***REMOVED***Closure***REMOVED***Compiler:
***REMOVED*******REMOVED***https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***2011***REMOVED***The***REMOVED***Closure***REMOVED***Compiler***REMOVED***Authors.***REMOVED***All***REMOVED***rights***REMOVED***reserved.
***REMOVED*******REMOVED***Redistribution***REMOVED***and***REMOVED***use***REMOVED***in***REMOVED***source***REMOVED***and***REMOVED***binary***REMOVED***forms,***REMOVED***with***REMOVED***or***REMOVED***without
***REMOVED*******REMOVED***modification,***REMOVED***are***REMOVED***permitted***REMOVED***provided***REMOVED***that***REMOVED***the***REMOVED***following***REMOVED***conditions***REMOVED***are
***REMOVED*******REMOVED***met:
***REMOVED****
***REMOVED*******REMOVED******REMOVED*******REMOVED***Redistributions***REMOVED***of***REMOVED***source***REMOVED***code***REMOVED***must***REMOVED***retain***REMOVED***the***REMOVED***above***REMOVED***copyright
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***notice,***REMOVED***this***REMOVED***list***REMOVED***of***REMOVED***conditions***REMOVED***and***REMOVED***the***REMOVED***following***REMOVED***disclaimer.
***REMOVED*******REMOVED******REMOVED*******REMOVED***Redistributions***REMOVED***in***REMOVED***binary***REMOVED***form***REMOVED***must***REMOVED***reproduce***REMOVED***the***REMOVED***above
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***copyright***REMOVED***notice,***REMOVED***this***REMOVED***list***REMOVED***of***REMOVED***conditions***REMOVED***and***REMOVED***the***REMOVED***following
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***disclaimer***REMOVED***in***REMOVED***the***REMOVED***documentation***REMOVED***and/or***REMOVED***other***REMOVED***materials***REMOVED***provided
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***with***REMOVED***the***REMOVED***distribution.
***REMOVED*******REMOVED******REMOVED*******REMOVED***Neither***REMOVED***the***REMOVED***name***REMOVED***of***REMOVED***Google***REMOVED***Inc.***REMOVED***nor***REMOVED***the***REMOVED***names***REMOVED***of***REMOVED***its
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***contributors***REMOVED***may***REMOVED***be***REMOVED***used***REMOVED***to***REMOVED***endorse***REMOVED***or***REMOVED***promote***REMOVED***products***REMOVED***derived
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***from***REMOVED***this***REMOVED***software***REMOVED***without***REMOVED***specific***REMOVED***prior***REMOVED***written***REMOVED***permission.
***REMOVED****
***REMOVED*******REMOVED***THIS***REMOVED***SOFTWARE***REMOVED***IS***REMOVED***PROVIDED***REMOVED***BY***REMOVED***THE***REMOVED***COPYRIGHT***REMOVED***HOLDERS***REMOVED***AND***REMOVED***CONTRIBUTORS
***REMOVED*******REMOVED***"AS***REMOVED***IS"***REMOVED***AND***REMOVED***ANY***REMOVED***EXPRESS***REMOVED***OR***REMOVED***IMPLIED***REMOVED***WARRANTIES,***REMOVED***INCLUDING,***REMOVED***BUT***REMOVED***NOT
***REMOVED*******REMOVED***LIMITED***REMOVED***TO,***REMOVED***THE***REMOVED***IMPLIED***REMOVED***WARRANTIES***REMOVED***OF***REMOVED***MERCHANTABILITY***REMOVED***AND***REMOVED***FITNESS***REMOVED***FOR
***REMOVED*******REMOVED***A***REMOVED***PARTICULAR***REMOVED***PURPOSE***REMOVED***ARE***REMOVED***DISCLAIMED.***REMOVED***IN***REMOVED***NO***REMOVED***EVENT***REMOVED***SHALL***REMOVED***THE***REMOVED***COPYRIGHT
***REMOVED*******REMOVED***OWNER***REMOVED***OR***REMOVED***CONTRIBUTORS***REMOVED***BE***REMOVED***LIABLE***REMOVED***FOR***REMOVED***ANY***REMOVED***DIRECT,***REMOVED***INDIRECT,***REMOVED***INCIDENTAL,
***REMOVED*******REMOVED***SPECIAL,***REMOVED***EXEMPLARY,***REMOVED***OR***REMOVED***CONSEQUENTIAL***REMOVED***DAMAGES***REMOVED***(INCLUDING,***REMOVED***BUT***REMOVED***NOT
***REMOVED*******REMOVED***LIMITED***REMOVED***TO,***REMOVED***PROCUREMENT***REMOVED***OF***REMOVED***SUBSTITUTE***REMOVED***GOODS***REMOVED***OR***REMOVED***SERVICES;***REMOVED***LOSS***REMOVED***OF***REMOVED***USE,
***REMOVED*******REMOVED***DATA,***REMOVED***OR***REMOVED***PROFITS;***REMOVED***OR***REMOVED***BUSINESS***REMOVED***INTERRUPTION)***REMOVED***HOWEVER***REMOVED***CAUSED***REMOVED***AND***REMOVED***ON***REMOVED***ANY
***REMOVED*******REMOVED***THEORY***REMOVED***OF***REMOVED***LIABILITY,***REMOVED***WHETHER***REMOVED***IN***REMOVED***CONTRACT,***REMOVED***STRICT***REMOVED***LIABILITY,***REMOVED***OR***REMOVED***TORT
***REMOVED*******REMOVED***(INCLUDING***REMOVED***NEGLIGENCE***REMOVED***OR***REMOVED***OTHERWISE)***REMOVED***ARISING***REMOVED***IN***REMOVED***ANY***REMOVED***WAY***REMOVED***OUT***REMOVED***OF***REMOVED***THE***REMOVED***USE
***REMOVED*******REMOVED***OF***REMOVED***THIS***REMOVED***SOFTWARE,***REMOVED***EVEN***REMOVED***IF***REMOVED***ADVISED***REMOVED***OF***REMOVED***THE***REMOVED***POSSIBILITY***REMOVED***OF***REMOVED***SUCH***REMOVED***DAMAGE.
***REMOVED****/

var***REMOVED***base64***REMOVED***=***REMOVED***require('./base64');

//***REMOVED***A***REMOVED***single***REMOVED***base***REMOVED***64***REMOVED***digit***REMOVED***can***REMOVED***contain***REMOVED***6***REMOVED***bits***REMOVED***of***REMOVED***data.***REMOVED***For***REMOVED***the***REMOVED***base***REMOVED***64***REMOVED***variable
//***REMOVED***length***REMOVED***quantities***REMOVED***we***REMOVED***use***REMOVED***in***REMOVED***the***REMOVED***source***REMOVED***map***REMOVED***spec,***REMOVED***the***REMOVED***first***REMOVED***bit***REMOVED***is***REMOVED***the***REMOVED***sign,
//***REMOVED***the***REMOVED***next***REMOVED***four***REMOVED***bits***REMOVED***are***REMOVED***the***REMOVED***actual***REMOVED***value,***REMOVED***and***REMOVED***the***REMOVED***6th***REMOVED***bit***REMOVED***is***REMOVED***the
//***REMOVED***continuation***REMOVED***bit.***REMOVED***The***REMOVED***continuation***REMOVED***bit***REMOVED***tells***REMOVED***us***REMOVED***whether***REMOVED***there***REMOVED***are***REMOVED***more
//***REMOVED***digits***REMOVED***in***REMOVED***this***REMOVED***value***REMOVED***following***REMOVED***this***REMOVED***digit.
//
//***REMOVED******REMOVED******REMOVED***Continuation
//***REMOVED******REMOVED******REMOVED***|***REMOVED******REMOVED******REMOVED******REMOVED***Sign
//***REMOVED******REMOVED******REMOVED***|***REMOVED******REMOVED******REMOVED******REMOVED***|
//***REMOVED******REMOVED******REMOVED***V***REMOVED******REMOVED******REMOVED******REMOVED***V
//***REMOVED******REMOVED******REMOVED***101011

var***REMOVED***VLQ_BASE_SHIFT***REMOVED***=***REMOVED***5;

//***REMOVED***binary:***REMOVED***100000
var***REMOVED***VLQ_BASE***REMOVED***=***REMOVED***1***REMOVED***<<***REMOVED***VLQ_BASE_SHIFT;

//***REMOVED***binary:***REMOVED***011111
var***REMOVED***VLQ_BASE_MASK***REMOVED***=***REMOVED***VLQ_BASE***REMOVED***-***REMOVED***1;

//***REMOVED***binary:***REMOVED***100000
var***REMOVED***VLQ_CONTINUATION_BIT***REMOVED***=***REMOVED***VLQ_BASE;

/**
***REMOVED*******REMOVED***Converts***REMOVED***from***REMOVED***a***REMOVED***two-complement***REMOVED***value***REMOVED***to***REMOVED***a***REMOVED***value***REMOVED***where***REMOVED***the***REMOVED***sign***REMOVED***bit***REMOVED***is
***REMOVED*******REMOVED***placed***REMOVED***in***REMOVED***the***REMOVED***least***REMOVED***significant***REMOVED***bit.***REMOVED******REMOVED***For***REMOVED***example,***REMOVED***as***REMOVED***decimals:
***REMOVED*******REMOVED******REMOVED******REMOVED***1***REMOVED***becomes***REMOVED***2***REMOVED***(10***REMOVED***binary),***REMOVED***-1***REMOVED***becomes***REMOVED***3***REMOVED***(11***REMOVED***binary)
***REMOVED*******REMOVED******REMOVED******REMOVED***2***REMOVED***becomes***REMOVED***4***REMOVED***(100***REMOVED***binary),***REMOVED***-2***REMOVED***becomes***REMOVED***5***REMOVED***(101***REMOVED***binary)
***REMOVED****/
function***REMOVED***toVLQSigned(aValue)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***aValue***REMOVED***<***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***((-aValue)***REMOVED***<<***REMOVED***1)***REMOVED***+***REMOVED***1
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***(aValue***REMOVED***<<***REMOVED***1)***REMOVED***+***REMOVED***0;
}

/**
***REMOVED*******REMOVED***Converts***REMOVED***to***REMOVED***a***REMOVED***two-complement***REMOVED***value***REMOVED***from***REMOVED***a***REMOVED***value***REMOVED***where***REMOVED***the***REMOVED***sign***REMOVED***bit***REMOVED***is
***REMOVED*******REMOVED***placed***REMOVED***in***REMOVED***the***REMOVED***least***REMOVED***significant***REMOVED***bit.***REMOVED******REMOVED***For***REMOVED***example,***REMOVED***as***REMOVED***decimals:
***REMOVED*******REMOVED******REMOVED******REMOVED***2***REMOVED***(10***REMOVED***binary)***REMOVED***becomes***REMOVED***1,***REMOVED***3***REMOVED***(11***REMOVED***binary)***REMOVED***becomes***REMOVED***-1
***REMOVED*******REMOVED******REMOVED******REMOVED***4***REMOVED***(100***REMOVED***binary)***REMOVED***becomes***REMOVED***2,***REMOVED***5***REMOVED***(101***REMOVED***binary)***REMOVED***becomes***REMOVED***-2
***REMOVED****/
function***REMOVED***fromVLQSigned(aValue)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***isNegative***REMOVED***=***REMOVED***(aValue***REMOVED***&***REMOVED***1)***REMOVED***===***REMOVED***1;
***REMOVED******REMOVED***var***REMOVED***shifted***REMOVED***=***REMOVED***aValue***REMOVED***>>***REMOVED***1;
***REMOVED******REMOVED***return***REMOVED***isNegative
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***-shifted
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***shifted;
}

/**
***REMOVED*******REMOVED***Returns***REMOVED***the***REMOVED***base***REMOVED***64***REMOVED***VLQ***REMOVED***encoded***REMOVED***value.
***REMOVED****/
exports.encode***REMOVED***=***REMOVED***function***REMOVED***base64VLQ_encode(aValue)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***encoded***REMOVED***=***REMOVED***"";
***REMOVED******REMOVED***var***REMOVED***digit;

***REMOVED******REMOVED***var***REMOVED***vlq***REMOVED***=***REMOVED***toVLQSigned(aValue);

***REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***digit***REMOVED***=***REMOVED***vlq***REMOVED***&***REMOVED***VLQ_BASE_MASK;
***REMOVED******REMOVED******REMOVED******REMOVED***vlq***REMOVED***>>>=***REMOVED***VLQ_BASE_SHIFT;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(vlq***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***There***REMOVED***are***REMOVED***still***REMOVED***more***REMOVED***digits***REMOVED***in***REMOVED***this***REMOVED***value,***REMOVED***so***REMOVED***we***REMOVED***must***REMOVED***make***REMOVED***sure***REMOVED***the
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***continuation***REMOVED***bit***REMOVED***is***REMOVED***marked.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***digit***REMOVED***|=***REMOVED***VLQ_CONTINUATION_BIT;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***encoded***REMOVED***+=***REMOVED***base64.encode(digit);
***REMOVED******REMOVED***}***REMOVED***while***REMOVED***(vlq***REMOVED***>***REMOVED***0);

***REMOVED******REMOVED***return***REMOVED***encoded;
};

/**
***REMOVED*******REMOVED***Decodes***REMOVED***the***REMOVED***next***REMOVED***base***REMOVED***64***REMOVED***VLQ***REMOVED***value***REMOVED***from***REMOVED***the***REMOVED***given***REMOVED***string***REMOVED***and***REMOVED***returns***REMOVED***the
***REMOVED*******REMOVED***value***REMOVED***and***REMOVED***the***REMOVED***rest***REMOVED***of***REMOVED***the***REMOVED***string***REMOVED***via***REMOVED***the***REMOVED***out***REMOVED***parameter.
***REMOVED****/
exports.decode***REMOVED***=***REMOVED***function***REMOVED***base64VLQ_decode(aStr,***REMOVED***aIndex,***REMOVED***aOutParam)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***strLen***REMOVED***=***REMOVED***aStr.length;
***REMOVED******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***var***REMOVED***shift***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***var***REMOVED***continuation,***REMOVED***digit;

***REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(aIndex***REMOVED***>=***REMOVED***strLen)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Expected***REMOVED***more***REMOVED***digits***REMOVED***in***REMOVED***base***REMOVED***64***REMOVED***VLQ***REMOVED***value.");
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***digit***REMOVED***=***REMOVED***base64.decode(aStr.charCodeAt(aIndex++));
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(digit***REMOVED***===***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Invalid***REMOVED***base64***REMOVED***digit:***REMOVED***"***REMOVED***+***REMOVED***aStr.charAt(aIndex***REMOVED***-***REMOVED***1));
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***continuation***REMOVED***=***REMOVED***!!(digit***REMOVED***&***REMOVED***VLQ_CONTINUATION_BIT);
***REMOVED******REMOVED******REMOVED******REMOVED***digit***REMOVED***&=***REMOVED***VLQ_BASE_MASK;
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***result***REMOVED***+***REMOVED***(digit***REMOVED***<<***REMOVED***shift);
***REMOVED******REMOVED******REMOVED******REMOVED***shift***REMOVED***+=***REMOVED***VLQ_BASE_SHIFT;
***REMOVED******REMOVED***}***REMOVED***while***REMOVED***(continuation);

***REMOVED******REMOVED***aOutParam.value***REMOVED***=***REMOVED***fromVLQSigned(result);
***REMOVED******REMOVED***aOutParam.rest***REMOVED***=***REMOVED***aIndex;
};
