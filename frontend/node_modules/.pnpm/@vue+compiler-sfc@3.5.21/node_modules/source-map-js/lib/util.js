/****REMOVED***-*-***REMOVED***Mode:***REMOVED***js;***REMOVED***js-indent-level:***REMOVED***2;***REMOVED***-*-***REMOVED****/
/*
***REMOVED*******REMOVED***Copyright***REMOVED***2011***REMOVED***Mozilla***REMOVED***Foundation***REMOVED***and***REMOVED***contributors
***REMOVED*******REMOVED***Licensed***REMOVED***under***REMOVED***the***REMOVED***New***REMOVED***BSD***REMOVED***license.***REMOVED***See***REMOVED***LICENSE***REMOVED***or:
***REMOVED*******REMOVED***http://opensource.org/licenses/BSD-3-Clause
***REMOVED****/

/**
***REMOVED*******REMOVED***This***REMOVED***is***REMOVED***a***REMOVED***helper***REMOVED***function***REMOVED***for***REMOVED***getting***REMOVED***values***REMOVED***from***REMOVED***parameter/options
***REMOVED*******REMOVED***objects.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***args***REMOVED***The***REMOVED***object***REMOVED***we***REMOVED***are***REMOVED***extracting***REMOVED***values***REMOVED***from
***REMOVED*******REMOVED***@param***REMOVED***name***REMOVED***The***REMOVED***name***REMOVED***of***REMOVED***the***REMOVED***property***REMOVED***we***REMOVED***are***REMOVED***getting.
***REMOVED*******REMOVED***@param***REMOVED***defaultValue***REMOVED***An***REMOVED***optional***REMOVED***value***REMOVED***to***REMOVED***return***REMOVED***if***REMOVED***the***REMOVED***property***REMOVED***is***REMOVED***missing
***REMOVED*******REMOVED***from***REMOVED***the***REMOVED***object.***REMOVED***If***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***specified***REMOVED***and***REMOVED***the***REMOVED***property***REMOVED***is***REMOVED***missing,***REMOVED***an
***REMOVED*******REMOVED***error***REMOVED***will***REMOVED***be***REMOVED***thrown.
***REMOVED****/
function***REMOVED***getArg(aArgs,***REMOVED***aName,***REMOVED***aDefaultValue)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(aName***REMOVED***in***REMOVED***aArgs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aArgs[aName];
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(arguments.length***REMOVED***===***REMOVED***3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aDefaultValue;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('"'***REMOVED***+***REMOVED***aName***REMOVED***+***REMOVED***'"***REMOVED***is***REMOVED***a***REMOVED***required***REMOVED***argument.');
***REMOVED******REMOVED***}
}
exports.getArg***REMOVED***=***REMOVED***getArg;

var***REMOVED***urlRegexp***REMOVED***=***REMOVED***/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
var***REMOVED***dataUrlRegexp***REMOVED***=***REMOVED***/^data:.+\,.+$/;

function***REMOVED***urlParse(aUrl)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***match***REMOVED***=***REMOVED***aUrl.match(urlRegexp);
***REMOVED******REMOVED***if***REMOVED***(!match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***scheme:***REMOVED***match[1],
***REMOVED******REMOVED******REMOVED******REMOVED***auth:***REMOVED***match[2],
***REMOVED******REMOVED******REMOVED******REMOVED***host:***REMOVED***match[3],
***REMOVED******REMOVED******REMOVED******REMOVED***port:***REMOVED***match[4],
***REMOVED******REMOVED******REMOVED******REMOVED***path:***REMOVED***match[5]
***REMOVED******REMOVED***};
}
exports.urlParse***REMOVED***=***REMOVED***urlParse;

function***REMOVED***urlGenerate(aParsedUrl)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***url***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***if***REMOVED***(aParsedUrl.scheme)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***+=***REMOVED***aParsedUrl.scheme***REMOVED***+***REMOVED***':';
***REMOVED******REMOVED***}
***REMOVED******REMOVED***url***REMOVED***+=***REMOVED***'//';
***REMOVED******REMOVED***if***REMOVED***(aParsedUrl.auth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***+=***REMOVED***aParsedUrl.auth***REMOVED***+***REMOVED***'@';
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(aParsedUrl.host)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***+=***REMOVED***aParsedUrl.host;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(aParsedUrl.port)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***+=***REMOVED***":"***REMOVED***+***REMOVED***aParsedUrl.port
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(aParsedUrl.path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url***REMOVED***+=***REMOVED***aParsedUrl.path;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***url;
}
exports.urlGenerate***REMOVED***=***REMOVED***urlGenerate;

var***REMOVED***MAX_CACHED_INPUTS***REMOVED***=***REMOVED***32;

/**
***REMOVED*******REMOVED***Takes***REMOVED***some***REMOVED***function***REMOVED***`f(input)***REMOVED***->***REMOVED***result`***REMOVED***and***REMOVED***returns***REMOVED***a***REMOVED***memoized***REMOVED***version***REMOVED***of
***REMOVED*******REMOVED***`f`.
***REMOVED****
***REMOVED*******REMOVED***We***REMOVED***keep***REMOVED***at***REMOVED***most***REMOVED***`MAX_CACHED_INPUTS`***REMOVED***memoized***REMOVED***results***REMOVED***of***REMOVED***`f`***REMOVED***alive.***REMOVED***The
***REMOVED*******REMOVED***memoization***REMOVED***is***REMOVED***a***REMOVED***dumb-simple,***REMOVED***linear***REMOVED***least-recently-used***REMOVED***cache.
***REMOVED****/
function***REMOVED***lruMemoize(f)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***cache***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***return***REMOVED***function(input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(var***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***cache.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cache[i].input***REMOVED***===***REMOVED***input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***temp***REMOVED***=***REMOVED***cache[0];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache[0]***REMOVED***=***REMOVED***cache[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache[i]***REMOVED***=***REMOVED***temp;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cache[0].result;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***f(input);

***REMOVED******REMOVED******REMOVED******REMOVED***cache.unshift({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***input,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result,
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cache.length***REMOVED***>***REMOVED***MAX_CACHED_INPUTS)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cache.pop();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result;
***REMOVED******REMOVED***};
}

/**
***REMOVED*******REMOVED***Normalizes***REMOVED***a***REMOVED***path,***REMOVED***or***REMOVED***the***REMOVED***path***REMOVED***portion***REMOVED***of***REMOVED***a***REMOVED***URL:
***REMOVED****
***REMOVED*******REMOVED***-***REMOVED***Replaces***REMOVED***consecutive***REMOVED***slashes***REMOVED***with***REMOVED***one***REMOVED***slash.
***REMOVED*******REMOVED***-***REMOVED***Removes***REMOVED***unnecessary***REMOVED***'.'***REMOVED***parts.
***REMOVED*******REMOVED***-***REMOVED***Removes***REMOVED***unnecessary***REMOVED***'<dir>/..'***REMOVED***parts.
***REMOVED****
***REMOVED*******REMOVED***Based***REMOVED***on***REMOVED***code***REMOVED***in***REMOVED***the***REMOVED***Node.js***REMOVED***'path'***REMOVED***core***REMOVED***module.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***aPath***REMOVED***The***REMOVED***path***REMOVED***or***REMOVED***url***REMOVED***to***REMOVED***normalize.
***REMOVED****/
var***REMOVED***normalize***REMOVED***=***REMOVED***lruMemoize(function***REMOVED***normalize(aPath)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***path***REMOVED***=***REMOVED***aPath;
***REMOVED******REMOVED***var***REMOVED***url***REMOVED***=***REMOVED***urlParse(aPath);
***REMOVED******REMOVED***if***REMOVED***(url)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!url.path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aPath;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***url.path;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***isAbsolute***REMOVED***=***REMOVED***exports.isAbsolute(path);
***REMOVED******REMOVED***//***REMOVED***Split***REMOVED***the***REMOVED***path***REMOVED***into***REMOVED***parts***REMOVED***between***REMOVED***`/`***REMOVED***characters.***REMOVED***This***REMOVED***is***REMOVED***much***REMOVED***faster***REMOVED***than
***REMOVED******REMOVED***//***REMOVED***using***REMOVED***`.split(/\/+/g)`.
***REMOVED******REMOVED***var***REMOVED***parts***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***var***REMOVED***start***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***var***REMOVED***i***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***while***REMOVED***(true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***start***REMOVED***=***REMOVED***i;
***REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***=***REMOVED***path.indexOf("/",***REMOVED***start);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(i***REMOVED***===***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.push(path.slice(start));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.push(path.slice(start,***REMOVED***i));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(i***REMOVED***<***REMOVED***path.length***REMOVED***&&***REMOVED***path[i]***REMOVED***===***REMOVED***"/")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***for***REMOVED***(var***REMOVED***part,***REMOVED***up***REMOVED***=***REMOVED***0,***REMOVED***i***REMOVED***=***REMOVED***parts.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***part***REMOVED***=***REMOVED***parts[i];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(part***REMOVED***===***REMOVED***'.')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.splice(i,***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(part***REMOVED***===***REMOVED***'..')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***up++;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(up***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(part***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***first***REMOVED***part***REMOVED***is***REMOVED***blank***REMOVED***if***REMOVED***the***REMOVED***path***REMOVED***is***REMOVED***absolute.***REMOVED***Trying***REMOVED***to***REMOVED***go
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***above***REMOVED***the***REMOVED***root***REMOVED***is***REMOVED***a***REMOVED***no-op.***REMOVED***Therefore***REMOVED***we***REMOVED***can***REMOVED***remove***REMOVED***all***REMOVED***'..'***REMOVED***parts
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***directly***REMOVED***after***REMOVED***the***REMOVED***root.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.splice(i***REMOVED***+***REMOVED***1,***REMOVED***up);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***up***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.splice(i,***REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***up--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***path***REMOVED***=***REMOVED***parts.join('/');

***REMOVED******REMOVED***if***REMOVED***(path***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***isAbsolute***REMOVED***?***REMOVED***'/'***REMOVED***:***REMOVED***'.';
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(url)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***url.path***REMOVED***=***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***urlGenerate(url);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***path;
});
exports.normalize***REMOVED***=***REMOVED***normalize;

/**
***REMOVED*******REMOVED***Joins***REMOVED***two***REMOVED***paths/URLs.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***aRoot***REMOVED***The***REMOVED***root***REMOVED***path***REMOVED***or***REMOVED***URL.
***REMOVED*******REMOVED***@param***REMOVED***aPath***REMOVED***The***REMOVED***path***REMOVED***or***REMOVED***URL***REMOVED***to***REMOVED***be***REMOVED***joined***REMOVED***with***REMOVED***the***REMOVED***root.
***REMOVED****
***REMOVED*******REMOVED***-***REMOVED***If***REMOVED***aPath***REMOVED***is***REMOVED***a***REMOVED***URL***REMOVED***or***REMOVED***a***REMOVED***data***REMOVED***URI,***REMOVED***aPath***REMOVED***is***REMOVED***returned,***REMOVED***unless***REMOVED***aPath***REMOVED***is***REMOVED***a
***REMOVED*******REMOVED******REMOVED******REMOVED***scheme-relative***REMOVED***URL:***REMOVED***Then***REMOVED***the***REMOVED***scheme***REMOVED***of***REMOVED***aRoot,***REMOVED***if***REMOVED***any,***REMOVED***is***REMOVED***prepended
***REMOVED*******REMOVED******REMOVED******REMOVED***first.
***REMOVED*******REMOVED***-***REMOVED***Otherwise***REMOVED***aPath***REMOVED***is***REMOVED***a***REMOVED***path.***REMOVED***If***REMOVED***aRoot***REMOVED***is***REMOVED***a***REMOVED***URL,***REMOVED***then***REMOVED***its***REMOVED***path***REMOVED***portion
***REMOVED*******REMOVED******REMOVED******REMOVED***is***REMOVED***updated***REMOVED***with***REMOVED***the***REMOVED***result***REMOVED***and***REMOVED***aRoot***REMOVED***is***REMOVED***returned.***REMOVED***Otherwise***REMOVED***the***REMOVED***result
***REMOVED*******REMOVED******REMOVED******REMOVED***is***REMOVED***returned.
***REMOVED*******REMOVED******REMOVED******REMOVED***-***REMOVED***If***REMOVED***aPath***REMOVED***is***REMOVED***absolute,***REMOVED***the***REMOVED***result***REMOVED***is***REMOVED***aPath.
***REMOVED*******REMOVED******REMOVED******REMOVED***-***REMOVED***Otherwise***REMOVED***the***REMOVED***two***REMOVED***paths***REMOVED***are***REMOVED***joined***REMOVED***with***REMOVED***a***REMOVED***slash.
***REMOVED*******REMOVED***-***REMOVED***Joining***REMOVED***for***REMOVED***example***REMOVED***'http://'***REMOVED***and***REMOVED***'www.example.com'***REMOVED***is***REMOVED***also***REMOVED***supported.
***REMOVED****/
function***REMOVED***join(aRoot,***REMOVED***aPath)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(aRoot***REMOVED***===***REMOVED***"")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***aRoot***REMOVED***=***REMOVED***".";
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(aPath***REMOVED***===***REMOVED***"")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***aPath***REMOVED***=***REMOVED***".";
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***aPathUrl***REMOVED***=***REMOVED***urlParse(aPath);
***REMOVED******REMOVED***var***REMOVED***aRootUrl***REMOVED***=***REMOVED***urlParse(aRoot);
***REMOVED******REMOVED***if***REMOVED***(aRootUrl)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***aRoot***REMOVED***=***REMOVED***aRootUrl.path***REMOVED***||***REMOVED***'/';
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***`join(foo,***REMOVED***'//www.example.org')`
***REMOVED******REMOVED***if***REMOVED***(aPathUrl***REMOVED***&&***REMOVED***!aPathUrl.scheme)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(aRootUrl)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***aPathUrl.scheme***REMOVED***=***REMOVED***aRootUrl.scheme;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***urlGenerate(aPathUrl);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(aPathUrl***REMOVED***||***REMOVED***aPath.match(dataUrlRegexp))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aPath;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***`join('http://',***REMOVED***'www.example.com')`
***REMOVED******REMOVED***if***REMOVED***(aRootUrl***REMOVED***&&***REMOVED***!aRootUrl.host***REMOVED***&&***REMOVED***!aRootUrl.path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***aRootUrl.host***REMOVED***=***REMOVED***aPath;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***urlGenerate(aRootUrl);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***var***REMOVED***joined***REMOVED***=***REMOVED***aPath.charAt(0)***REMOVED***===***REMOVED***'/'
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***aPath
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***normalize(aRoot.replace(/\/+$/,***REMOVED***'')***REMOVED***+***REMOVED***'/'***REMOVED***+***REMOVED***aPath);

***REMOVED******REMOVED***if***REMOVED***(aRootUrl)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***aRootUrl.path***REMOVED***=***REMOVED***joined;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***urlGenerate(aRootUrl);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***joined;
}
exports.join***REMOVED***=***REMOVED***join;

exports.isAbsolute***REMOVED***=***REMOVED***function***REMOVED***(aPath)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***aPath.charAt(0)***REMOVED***===***REMOVED***'/'***REMOVED***||***REMOVED***urlRegexp.test(aPath);
};

/**
***REMOVED*******REMOVED***Make***REMOVED***a***REMOVED***path***REMOVED***relative***REMOVED***to***REMOVED***a***REMOVED***URL***REMOVED***or***REMOVED***another***REMOVED***path.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***aRoot***REMOVED***The***REMOVED***root***REMOVED***path***REMOVED***or***REMOVED***URL.
***REMOVED*******REMOVED***@param***REMOVED***aPath***REMOVED***The***REMOVED***path***REMOVED***or***REMOVED***URL***REMOVED***to***REMOVED***be***REMOVED***made***REMOVED***relative***REMOVED***to***REMOVED***aRoot.
***REMOVED****/
function***REMOVED***relative(aRoot,***REMOVED***aPath)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(aRoot***REMOVED***===***REMOVED***"")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***aRoot***REMOVED***=***REMOVED***".";
***REMOVED******REMOVED***}

***REMOVED******REMOVED***aRoot***REMOVED***=***REMOVED***aRoot.replace(/\/$/,***REMOVED***'');

***REMOVED******REMOVED***//***REMOVED***It***REMOVED***is***REMOVED***possible***REMOVED***for***REMOVED***the***REMOVED***path***REMOVED***to***REMOVED***be***REMOVED***above***REMOVED***the***REMOVED***root.***REMOVED***In***REMOVED***this***REMOVED***case,***REMOVED***simply
***REMOVED******REMOVED***//***REMOVED***checking***REMOVED***whether***REMOVED***the***REMOVED***root***REMOVED***is***REMOVED***a***REMOVED***prefix***REMOVED***of***REMOVED***the***REMOVED***path***REMOVED***won't***REMOVED***work.***REMOVED***Instead,***REMOVED***we
***REMOVED******REMOVED***//***REMOVED***need***REMOVED***to***REMOVED***remove***REMOVED***components***REMOVED***from***REMOVED***the***REMOVED***root***REMOVED***one***REMOVED***by***REMOVED***one,***REMOVED***until***REMOVED***either***REMOVED***we***REMOVED***find
***REMOVED******REMOVED***//***REMOVED***a***REMOVED***prefix***REMOVED***that***REMOVED***fits,***REMOVED***or***REMOVED***we***REMOVED***run***REMOVED***out***REMOVED***of***REMOVED***components***REMOVED***to***REMOVED***remove.
***REMOVED******REMOVED***var***REMOVED***level***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***while***REMOVED***(aPath.indexOf(aRoot***REMOVED***+***REMOVED***'/')***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***aRoot.lastIndexOf("/");
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***<***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aPath;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***only***REMOVED***part***REMOVED***of***REMOVED***the***REMOVED***root***REMOVED***that***REMOVED***is***REMOVED***left***REMOVED***is***REMOVED***the***REMOVED***scheme***REMOVED***(i.e.***REMOVED***http://,
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***file:///,***REMOVED***etc.),***REMOVED***one***REMOVED***or***REMOVED***more***REMOVED***slashes***REMOVED***(/),***REMOVED***or***REMOVED***simply***REMOVED***nothing***REMOVED***at***REMOVED***all,***REMOVED***we
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***have***REMOVED***exhausted***REMOVED***all***REMOVED***components,***REMOVED***so***REMOVED***the***REMOVED***path***REMOVED***is***REMOVED***not***REMOVED***relative***REMOVED***to***REMOVED***the***REMOVED***root.
***REMOVED******REMOVED******REMOVED******REMOVED***aRoot***REMOVED***=***REMOVED***aRoot.slice(0,***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(aRoot.match(/^([^\/]+:\/)?\/*$/))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aPath;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***++level;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Make***REMOVED***sure***REMOVED***we***REMOVED***add***REMOVED***a***REMOVED***"../"***REMOVED***for***REMOVED***each***REMOVED***component***REMOVED***we***REMOVED***removed***REMOVED***from***REMOVED***the***REMOVED***root.
***REMOVED******REMOVED***return***REMOVED***Array(level***REMOVED***+***REMOVED***1).join("../")***REMOVED***+***REMOVED***aPath.substr(aRoot.length***REMOVED***+***REMOVED***1);
}
exports.relative***REMOVED***=***REMOVED***relative;

var***REMOVED***supportsNullProto***REMOVED***=***REMOVED***(function***REMOVED***()***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***obj***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED***return***REMOVED***!('__proto__'***REMOVED***in***REMOVED***obj);
}());

function***REMOVED***identity***REMOVED***(s)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***s;
}

/**
***REMOVED*******REMOVED***Because***REMOVED***behavior***REMOVED***goes***REMOVED***wacky***REMOVED***when***REMOVED***you***REMOVED***set***REMOVED***`__proto__`***REMOVED***on***REMOVED***objects,***REMOVED***we
***REMOVED*******REMOVED***have***REMOVED***to***REMOVED***prefix***REMOVED***all***REMOVED***the***REMOVED***strings***REMOVED***in***REMOVED***our***REMOVED***set***REMOVED***with***REMOVED***an***REMOVED***arbitrary***REMOVED***character.
***REMOVED****
***REMOVED*******REMOVED***See***REMOVED***https://github.com/mozilla/source-map/pull/31***REMOVED***and
***REMOVED*******REMOVED***https://github.com/mozilla/source-map/issues/30
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***String***REMOVED***aStr
***REMOVED****/
function***REMOVED***toSetString(aStr)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isProtoString(aStr))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'$'***REMOVED***+***REMOVED***aStr;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***aStr;
}
exports.toSetString***REMOVED***=***REMOVED***supportsNullProto***REMOVED***?***REMOVED***identity***REMOVED***:***REMOVED***toSetString;

function***REMOVED***fromSetString(aStr)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isProtoString(aStr))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aStr.slice(1);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***aStr;
}
exports.fromSetString***REMOVED***=***REMOVED***supportsNullProto***REMOVED***?***REMOVED***identity***REMOVED***:***REMOVED***fromSetString;

function***REMOVED***isProtoString(s)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!s)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***var***REMOVED***length***REMOVED***=***REMOVED***s.length;

***REMOVED******REMOVED***if***REMOVED***(length***REMOVED***<***REMOVED***9***REMOVED***/****REMOVED***"__proto__".length***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(s.charCodeAt(length***REMOVED***-***REMOVED***1)***REMOVED***!==***REMOVED***95***REMOVED******REMOVED***/****REMOVED***'_'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***2)***REMOVED***!==***REMOVED***95***REMOVED******REMOVED***/****REMOVED***'_'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***3)***REMOVED***!==***REMOVED***111***REMOVED***/****REMOVED***'o'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***4)***REMOVED***!==***REMOVED***116***REMOVED***/****REMOVED***'t'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***5)***REMOVED***!==***REMOVED***111***REMOVED***/****REMOVED***'o'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***6)***REMOVED***!==***REMOVED***114***REMOVED***/****REMOVED***'r'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***7)***REMOVED***!==***REMOVED***112***REMOVED***/****REMOVED***'p'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***8)***REMOVED***!==***REMOVED***95***REMOVED******REMOVED***/****REMOVED***'_'***REMOVED****/***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s.charCodeAt(length***REMOVED***-***REMOVED***9)***REMOVED***!==***REMOVED***95***REMOVED******REMOVED***/****REMOVED***'_'***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***for***REMOVED***(var***REMOVED***i***REMOVED***=***REMOVED***length***REMOVED***-***REMOVED***10;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(s.charCodeAt(i)***REMOVED***!==***REMOVED***36***REMOVED***/****REMOVED***'$'***REMOVED****/)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***true;
}

/**
***REMOVED*******REMOVED***Comparator***REMOVED***between***REMOVED***two***REMOVED***mappings***REMOVED***where***REMOVED***the***REMOVED***original***REMOVED***positions***REMOVED***are***REMOVED***compared.
***REMOVED****
***REMOVED*******REMOVED***Optionally***REMOVED***pass***REMOVED***in***REMOVED***`true`***REMOVED***as***REMOVED***`onlyCompareGenerated`***REMOVED***to***REMOVED***consider***REMOVED***two
***REMOVED*******REMOVED***mappings***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***original***REMOVED***source/line/column,***REMOVED***but***REMOVED***different***REMOVED***generated
***REMOVED*******REMOVED***line***REMOVED***and***REMOVED***column***REMOVED***the***REMOVED***same.***REMOVED***Useful***REMOVED***when***REMOVED***searching***REMOVED***for***REMOVED***a***REMOVED***mapping***REMOVED***with***REMOVED***a
***REMOVED*******REMOVED***stubbed***REMOVED***out***REMOVED***mapping.
***REMOVED****/
function***REMOVED***compareByOriginalPositions(mappingA,***REMOVED***mappingB,***REMOVED***onlyCompareOriginal)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***cmp***REMOVED***=***REMOVED***strcmp(mappingA.source,***REMOVED***mappingB.source);
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalLine***REMOVED***-***REMOVED***mappingB.originalLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalColumn***REMOVED***-***REMOVED***mappingB.originalColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0***REMOVED***||***REMOVED***onlyCompareOriginal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedColumn***REMOVED***-***REMOVED***mappingB.generatedColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedLine***REMOVED***-***REMOVED***mappingB.generatedLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***strcmp(mappingA.name,***REMOVED***mappingB.name);
}
exports.compareByOriginalPositions***REMOVED***=***REMOVED***compareByOriginalPositions;

function***REMOVED***compareByOriginalPositionsNoSource(mappingA,***REMOVED***mappingB,***REMOVED***onlyCompareOriginal)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***cmp

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalLine***REMOVED***-***REMOVED***mappingB.originalLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalColumn***REMOVED***-***REMOVED***mappingB.originalColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0***REMOVED***||***REMOVED***onlyCompareOriginal)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedColumn***REMOVED***-***REMOVED***mappingB.generatedColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedLine***REMOVED***-***REMOVED***mappingB.generatedLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***strcmp(mappingA.name,***REMOVED***mappingB.name);
}
exports.compareByOriginalPositionsNoSource***REMOVED***=***REMOVED***compareByOriginalPositionsNoSource;

/**
***REMOVED*******REMOVED***Comparator***REMOVED***between***REMOVED***two***REMOVED***mappings***REMOVED***with***REMOVED***deflated***REMOVED***source***REMOVED***and***REMOVED***name***REMOVED***indices***REMOVED***where
***REMOVED*******REMOVED***the***REMOVED***generated***REMOVED***positions***REMOVED***are***REMOVED***compared.
***REMOVED****
***REMOVED*******REMOVED***Optionally***REMOVED***pass***REMOVED***in***REMOVED***`true`***REMOVED***as***REMOVED***`onlyCompareGenerated`***REMOVED***to***REMOVED***consider***REMOVED***two
***REMOVED*******REMOVED***mappings***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***generated***REMOVED***line***REMOVED***and***REMOVED***column,***REMOVED***but***REMOVED***different
***REMOVED*******REMOVED***source/name/original***REMOVED***line***REMOVED***and***REMOVED***column***REMOVED***the***REMOVED***same.***REMOVED***Useful***REMOVED***when***REMOVED***searching***REMOVED***for***REMOVED***a
***REMOVED*******REMOVED***mapping***REMOVED***with***REMOVED***a***REMOVED***stubbed***REMOVED***out***REMOVED***mapping.
***REMOVED****/
function***REMOVED***compareByGeneratedPositionsDeflated(mappingA,***REMOVED***mappingB,***REMOVED***onlyCompareGenerated)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedLine***REMOVED***-***REMOVED***mappingB.generatedLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedColumn***REMOVED***-***REMOVED***mappingB.generatedColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0***REMOVED***||***REMOVED***onlyCompareGenerated)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***strcmp(mappingA.source,***REMOVED***mappingB.source);
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalLine***REMOVED***-***REMOVED***mappingB.originalLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalColumn***REMOVED***-***REMOVED***mappingB.originalColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***strcmp(mappingA.name,***REMOVED***mappingB.name);
}
exports.compareByGeneratedPositionsDeflated***REMOVED***=***REMOVED***compareByGeneratedPositionsDeflated;

function***REMOVED***compareByGeneratedPositionsDeflatedNoLine(mappingA,***REMOVED***mappingB,***REMOVED***onlyCompareGenerated)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedColumn***REMOVED***-***REMOVED***mappingB.generatedColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0***REMOVED***||***REMOVED***onlyCompareGenerated)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***strcmp(mappingA.source,***REMOVED***mappingB.source);
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalLine***REMOVED***-***REMOVED***mappingB.originalLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalColumn***REMOVED***-***REMOVED***mappingB.originalColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***strcmp(mappingA.name,***REMOVED***mappingB.name);
}
exports.compareByGeneratedPositionsDeflatedNoLine***REMOVED***=***REMOVED***compareByGeneratedPositionsDeflatedNoLine;

function***REMOVED***strcmp(aStr1,***REMOVED***aStr2)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(aStr1***REMOVED***===***REMOVED***aStr2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***0;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(aStr1***REMOVED***===***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***1;***REMOVED***//***REMOVED***aStr2***REMOVED***!==***REMOVED***null
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(aStr2***REMOVED***===***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***-1;***REMOVED***//***REMOVED***aStr1***REMOVED***!==***REMOVED***null
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(aStr1***REMOVED***>***REMOVED***aStr2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***1;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***-1;
}

/**
***REMOVED*******REMOVED***Comparator***REMOVED***between***REMOVED***two***REMOVED***mappings***REMOVED***with***REMOVED***inflated***REMOVED***source***REMOVED***and***REMOVED***name***REMOVED***strings***REMOVED***where
***REMOVED*******REMOVED***the***REMOVED***generated***REMOVED***positions***REMOVED***are***REMOVED***compared.
***REMOVED****/
function***REMOVED***compareByGeneratedPositionsInflated(mappingA,***REMOVED***mappingB)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedLine***REMOVED***-***REMOVED***mappingB.generatedLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.generatedColumn***REMOVED***-***REMOVED***mappingB.generatedColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***strcmp(mappingA.source,***REMOVED***mappingB.source);
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalLine***REMOVED***-***REMOVED***mappingB.originalLine;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***cmp***REMOVED***=***REMOVED***mappingA.originalColumn***REMOVED***-***REMOVED***mappingB.originalColumn;
***REMOVED******REMOVED***if***REMOVED***(cmp***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cmp;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***strcmp(mappingA.name,***REMOVED***mappingB.name);
}
exports.compareByGeneratedPositionsInflated***REMOVED***=***REMOVED***compareByGeneratedPositionsInflated;

/**
***REMOVED*******REMOVED***Strip***REMOVED***any***REMOVED***JSON***REMOVED***XSSI***REMOVED***avoidance***REMOVED***prefix***REMOVED***from***REMOVED***the***REMOVED***string***REMOVED***(as***REMOVED***documented
***REMOVED*******REMOVED***in***REMOVED***the***REMOVED***source***REMOVED***maps***REMOVED***specification),***REMOVED***and***REMOVED***then***REMOVED***parse***REMOVED***the***REMOVED***string***REMOVED***as
***REMOVED*******REMOVED***JSON.
***REMOVED****/
function***REMOVED***parseSourceMapInput(str)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***JSON.parse(str.replace(/^\)]}'[^\n]*\n/,***REMOVED***''));
}
exports.parseSourceMapInput***REMOVED***=***REMOVED***parseSourceMapInput;

/**
***REMOVED*******REMOVED***Compute***REMOVED***the***REMOVED***URL***REMOVED***of***REMOVED***a***REMOVED***source***REMOVED***given***REMOVED***the***REMOVED***the***REMOVED***source***REMOVED***root,***REMOVED***the***REMOVED***source's
***REMOVED*******REMOVED***URL,***REMOVED***and***REMOVED***the***REMOVED***source***REMOVED***map's***REMOVED***URL.
***REMOVED****/
function***REMOVED***computeSourceURL(sourceRoot,***REMOVED***sourceURL,***REMOVED***sourceMapURL)***REMOVED***{
***REMOVED******REMOVED***sourceURL***REMOVED***=***REMOVED***sourceURL***REMOVED***||***REMOVED***'';

***REMOVED******REMOVED***if***REMOVED***(sourceRoot)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***This***REMOVED***follows***REMOVED***what***REMOVED***Chrome***REMOVED***does.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sourceRoot[sourceRoot.length***REMOVED***-***REMOVED***1]***REMOVED***!==***REMOVED***'/'***REMOVED***&&***REMOVED***sourceURL[0]***REMOVED***!==***REMOVED***'/')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sourceRoot***REMOVED***+=***REMOVED***'/';
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***spec***REMOVED***says:
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***Line***REMOVED***4:***REMOVED***An***REMOVED***optional***REMOVED***source***REMOVED***root,***REMOVED***useful***REMOVED***for***REMOVED***relocating***REMOVED***source
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***files***REMOVED***on***REMOVED***a***REMOVED***server***REMOVED***or***REMOVED***removing***REMOVED***repeated***REMOVED***values***REMOVED***in***REMOVED***the
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***“sources”***REMOVED***entry.***REMOVED******REMOVED***This***REMOVED***value***REMOVED***is***REMOVED***prepended***REMOVED***to***REMOVED***the***REMOVED***individual
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***entries***REMOVED***in***REMOVED***the***REMOVED***“source”***REMOVED***field.
***REMOVED******REMOVED******REMOVED******REMOVED***sourceURL***REMOVED***=***REMOVED***sourceRoot***REMOVED***+***REMOVED***sourceURL;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Historically,***REMOVED***SourceMapConsumer***REMOVED***did***REMOVED***not***REMOVED***take***REMOVED***the***REMOVED***sourceMapURL***REMOVED***as
***REMOVED******REMOVED***//***REMOVED***a***REMOVED***parameter.***REMOVED******REMOVED***This***REMOVED***mode***REMOVED***is***REMOVED***still***REMOVED***somewhat***REMOVED***supported,***REMOVED***which***REMOVED***is***REMOVED***why
***REMOVED******REMOVED***//***REMOVED***this***REMOVED***code***REMOVED***block***REMOVED***is***REMOVED***conditional.***REMOVED******REMOVED***However,***REMOVED***it's***REMOVED***preferable***REMOVED***to***REMOVED***pass
***REMOVED******REMOVED***//***REMOVED***the***REMOVED***source***REMOVED***map***REMOVED***URL***REMOVED***to***REMOVED***SourceMapConsumer,***REMOVED***so***REMOVED***that***REMOVED***this***REMOVED***function
***REMOVED******REMOVED***//***REMOVED***can***REMOVED***implement***REMOVED***the***REMOVED***source***REMOVED***URL***REMOVED***resolution***REMOVED***algorithm***REMOVED***as***REMOVED***outlined***REMOVED***in
***REMOVED******REMOVED***//***REMOVED***the***REMOVED***spec.***REMOVED******REMOVED***This***REMOVED***block***REMOVED***is***REMOVED***basically***REMOVED***the***REMOVED***equivalent***REMOVED***of:
***REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED******REMOVED***new***REMOVED***URL(sourceURL,***REMOVED***sourceMapURL).toString()
***REMOVED******REMOVED***//***REMOVED***...***REMOVED***except***REMOVED***it***REMOVED***avoids***REMOVED***using***REMOVED***URL,***REMOVED***which***REMOVED***wasn't***REMOVED***available***REMOVED***in***REMOVED***the
***REMOVED******REMOVED***//***REMOVED***older***REMOVED***releases***REMOVED***of***REMOVED***node***REMOVED***still***REMOVED***supported***REMOVED***by***REMOVED***this***REMOVED***library.
***REMOVED******REMOVED***//
***REMOVED******REMOVED***//***REMOVED***The***REMOVED***spec***REMOVED***says:
***REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***If***REMOVED***the***REMOVED***sources***REMOVED***are***REMOVED***not***REMOVED***absolute***REMOVED***URLs***REMOVED***after***REMOVED***prepending***REMOVED***of***REMOVED***the
***REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***“sourceRoot”,***REMOVED***the***REMOVED***sources***REMOVED***are***REMOVED***resolved***REMOVED***relative***REMOVED***to***REMOVED***the
***REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***SourceMap***REMOVED***(like***REMOVED***resolving***REMOVED***script***REMOVED***src***REMOVED***in***REMOVED***a***REMOVED***html***REMOVED***document).
***REMOVED******REMOVED***if***REMOVED***(sourceMapURL)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***parsed***REMOVED***=***REMOVED***urlParse(sourceMapURL);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!parsed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("sourceMapURL***REMOVED***could***REMOVED***not***REMOVED***be***REMOVED***parsed");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parsed.path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Strip***REMOVED***the***REMOVED***last***REMOVED***path***REMOVED***component,***REMOVED***but***REMOVED***keep***REMOVED***the***REMOVED***"/".
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***parsed.path.lastIndexOf('/');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(index***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parsed.path***REMOVED***=***REMOVED***parsed.path.substring(0,***REMOVED***index***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***sourceURL***REMOVED***=***REMOVED***join(urlGenerate(parsed),***REMOVED***sourceURL);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***normalize(sourceURL);
}
exports.computeSourceURL***REMOVED***=***REMOVED***computeSourceURL;
