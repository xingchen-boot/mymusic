(function***REMOVED***(global,***REMOVED***factory)***REMOVED***{
	typeof***REMOVED***exports***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***typeof***REMOVED***module***REMOVED***!==***REMOVED***'undefined'***REMOVED***?***REMOVED***factory(exports)***REMOVED***:
	typeof***REMOVED***define***REMOVED***===***REMOVED***'function'***REMOVED***&&***REMOVED***define.amd***REMOVED***?***REMOVED***define(['exports'],***REMOVED***factory)***REMOVED***:
	(global***REMOVED***=***REMOVED***global***REMOVED***||***REMOVED***self,***REMOVED***factory(global.estreeWalker***REMOVED***=***REMOVED***{}));
}(this,***REMOVED***(function***REMOVED***(exports)***REMOVED***{***REMOVED***'use***REMOVED***strict';

	//***REMOVED***@ts-check
	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('estree').BaseNode}***REMOVED***BaseNode***REMOVED****/

	/*****REMOVED***@typedef***REMOVED***{{
		skip:***REMOVED***()***REMOVED***=>***REMOVED***void;
		remove:***REMOVED***()***REMOVED***=>***REMOVED***void;
		replace:***REMOVED***(node:***REMOVED***BaseNode)***REMOVED***=>***REMOVED***void;
	}}***REMOVED***WalkerContext***REMOVED****/

	class***REMOVED***WalkerBase***REMOVED***{
		constructor()***REMOVED***{
			/*****REMOVED***@type***REMOVED***{boolean}***REMOVED****/
			this.should_skip***REMOVED***=***REMOVED***false;

			/*****REMOVED***@type***REMOVED***{boolean}***REMOVED****/
			this.should_remove***REMOVED***=***REMOVED***false;

			/*****REMOVED***@type***REMOVED***{BaseNode***REMOVED***|***REMOVED***null}***REMOVED****/
			this.replacement***REMOVED***=***REMOVED***null;

			/*****REMOVED***@type***REMOVED***{WalkerContext}***REMOVED****/
			this.context***REMOVED***=***REMOVED***{
				skip:***REMOVED***()***REMOVED***=>***REMOVED***(this.should_skip***REMOVED***=***REMOVED***true),
				remove:***REMOVED***()***REMOVED***=>***REMOVED***(this.should_remove***REMOVED***=***REMOVED***true),
				replace:***REMOVED***(node)***REMOVED***=>***REMOVED***(this.replacement***REMOVED***=***REMOVED***node)
			};
		}

		/**
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{any}***REMOVED***parent
		***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***prop
		***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***index
		***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***node
		***REMOVED****/
		replace(parent,***REMOVED***prop,***REMOVED***index,***REMOVED***node)***REMOVED***{
			if***REMOVED***(parent)***REMOVED***{
				if***REMOVED***(index***REMOVED***!==***REMOVED***null)***REMOVED***{
					parent[prop][index]***REMOVED***=***REMOVED***node;
				}***REMOVED***else***REMOVED***{
					parent[prop]***REMOVED***=***REMOVED***node;
				}
			}
		}

		/**
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{any}***REMOVED***parent
		***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***prop
		***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***index
		***REMOVED****/
		remove(parent,***REMOVED***prop,***REMOVED***index)***REMOVED***{
			if***REMOVED***(parent)***REMOVED***{
				if***REMOVED***(index***REMOVED***!==***REMOVED***null)***REMOVED***{
					parent[prop].splice(index,***REMOVED***1);
				}***REMOVED***else***REMOVED***{
					delete***REMOVED***parent[prop];
				}
			}
		}
	}

	//***REMOVED***@ts-check

	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('estree').BaseNode}***REMOVED***BaseNode***REMOVED****/
	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('./walker.js').WalkerContext}***REMOVED***WalkerContext***REMOVED****/

	/*****REMOVED***@typedef***REMOVED***{(
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***this:***REMOVED***WalkerContext,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***node:***REMOVED***BaseNode,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***parent:***REMOVED***BaseNode,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***string,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***index:***REMOVED***number
	***REMOVED*******REMOVED***)***REMOVED***=>***REMOVED***void}***REMOVED***SyncHandler***REMOVED****/

	class***REMOVED***SyncWalker***REMOVED***extends***REMOVED***WalkerBase***REMOVED***{
		/**
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{SyncHandler}***REMOVED***enter
		***REMOVED*******REMOVED***@param***REMOVED***{SyncHandler}***REMOVED***leave
		***REMOVED****/
		constructor(enter,***REMOVED***leave)***REMOVED***{
			super();

			/*****REMOVED***@type***REMOVED***{SyncHandler}***REMOVED****/
			this.enter***REMOVED***=***REMOVED***enter;

			/*****REMOVED***@type***REMOVED***{SyncHandler}***REMOVED****/
			this.leave***REMOVED***=***REMOVED***leave;
		}

		/**
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***node
		***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***parent
		***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***[prop]
		***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***[index]
		***REMOVED*******REMOVED***@returns***REMOVED***{BaseNode}
		***REMOVED****/
		visit(node,***REMOVED***parent,***REMOVED***prop,***REMOVED***index)***REMOVED***{
			if***REMOVED***(node)***REMOVED***{
				if***REMOVED***(this.enter)***REMOVED***{
					const***REMOVED***_should_skip***REMOVED***=***REMOVED***this.should_skip;
					const***REMOVED***_should_remove***REMOVED***=***REMOVED***this.should_remove;
					const***REMOVED***_replacement***REMOVED***=***REMOVED***this.replacement;
					this.should_skip***REMOVED***=***REMOVED***false;
					this.should_remove***REMOVED***=***REMOVED***false;
					this.replacement***REMOVED***=***REMOVED***null;

					this.enter.call(this.context,***REMOVED***node,***REMOVED***parent,***REMOVED***prop,***REMOVED***index);

					if***REMOVED***(this.replacement)***REMOVED***{
						node***REMOVED***=***REMOVED***this.replacement;
						this.replace(parent,***REMOVED***prop,***REMOVED***index,***REMOVED***node);
					}

					if***REMOVED***(this.should_remove)***REMOVED***{
						this.remove(parent,***REMOVED***prop,***REMOVED***index);
					}

					const***REMOVED***skipped***REMOVED***=***REMOVED***this.should_skip;
					const***REMOVED***removed***REMOVED***=***REMOVED***this.should_remove;

					this.should_skip***REMOVED***=***REMOVED***_should_skip;
					this.should_remove***REMOVED***=***REMOVED***_should_remove;
					this.replacement***REMOVED***=***REMOVED***_replacement;

					if***REMOVED***(skipped)***REMOVED***return***REMOVED***node;
					if***REMOVED***(removed)***REMOVED***return***REMOVED***null;
				}

				for***REMOVED***(const***REMOVED***key***REMOVED***in***REMOVED***node)***REMOVED***{
					const***REMOVED***value***REMOVED***=***REMOVED***node[key];

					if***REMOVED***(typeof***REMOVED***value***REMOVED***!==***REMOVED***"object")***REMOVED***{
						continue;
					}***REMOVED***else***REMOVED***if***REMOVED***(Array.isArray(value))***REMOVED***{
						for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***value.length;***REMOVED***i***REMOVED***+=***REMOVED***1)***REMOVED***{
							if***REMOVED***(value[i]***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***value[i].type***REMOVED***===***REMOVED***'string')***REMOVED***{
								if***REMOVED***(!this.visit(value[i],***REMOVED***node,***REMOVED***key,***REMOVED***i))***REMOVED***{
									//***REMOVED***removed
									i--;
								}
							}
						}
					}***REMOVED***else***REMOVED***if***REMOVED***(value***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***value.type***REMOVED***===***REMOVED***"string")***REMOVED***{
						this.visit(value,***REMOVED***node,***REMOVED***key,***REMOVED***null);
					}
				}

				if***REMOVED***(this.leave)***REMOVED***{
					const***REMOVED***_replacement***REMOVED***=***REMOVED***this.replacement;
					const***REMOVED***_should_remove***REMOVED***=***REMOVED***this.should_remove;
					this.replacement***REMOVED***=***REMOVED***null;
					this.should_remove***REMOVED***=***REMOVED***false;

					this.leave.call(this.context,***REMOVED***node,***REMOVED***parent,***REMOVED***prop,***REMOVED***index);

					if***REMOVED***(this.replacement)***REMOVED***{
						node***REMOVED***=***REMOVED***this.replacement;
						this.replace(parent,***REMOVED***prop,***REMOVED***index,***REMOVED***node);
					}

					if***REMOVED***(this.should_remove)***REMOVED***{
						this.remove(parent,***REMOVED***prop,***REMOVED***index);
					}

					const***REMOVED***removed***REMOVED***=***REMOVED***this.should_remove;

					this.replacement***REMOVED***=***REMOVED***_replacement;
					this.should_remove***REMOVED***=***REMOVED***_should_remove;

					if***REMOVED***(removed)***REMOVED***return***REMOVED***null;
				}
			}

			return***REMOVED***node;
		}
	}

	//***REMOVED***@ts-check

	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('estree').BaseNode}***REMOVED***BaseNode***REMOVED****/
	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('./walker').WalkerContext}***REMOVED***WalkerContext***REMOVED****/

	/*****REMOVED***@typedef***REMOVED***{(
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***this:***REMOVED***WalkerContext,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***node:***REMOVED***BaseNode,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***parent:***REMOVED***BaseNode,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***string,
	***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED***index:***REMOVED***number
	***REMOVED*******REMOVED***)***REMOVED***=>***REMOVED***Promise<void>}***REMOVED***AsyncHandler***REMOVED****/

	class***REMOVED***AsyncWalker***REMOVED***extends***REMOVED***WalkerBase***REMOVED***{
		/**
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{AsyncHandler}***REMOVED***enter
		***REMOVED*******REMOVED***@param***REMOVED***{AsyncHandler}***REMOVED***leave
		***REMOVED****/
		constructor(enter,***REMOVED***leave)***REMOVED***{
			super();

			/*****REMOVED***@type***REMOVED***{AsyncHandler}***REMOVED****/
			this.enter***REMOVED***=***REMOVED***enter;

			/*****REMOVED***@type***REMOVED***{AsyncHandler}***REMOVED****/
			this.leave***REMOVED***=***REMOVED***leave;
		}

		/**
		***REMOVED****
		***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***node
		***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***parent
		***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***[prop]
		***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***[index]
		***REMOVED*******REMOVED***@returns***REMOVED***{Promise<BaseNode>}
		***REMOVED****/
		async***REMOVED***visit(node,***REMOVED***parent,***REMOVED***prop,***REMOVED***index)***REMOVED***{
			if***REMOVED***(node)***REMOVED***{
				if***REMOVED***(this.enter)***REMOVED***{
					const***REMOVED***_should_skip***REMOVED***=***REMOVED***this.should_skip;
					const***REMOVED***_should_remove***REMOVED***=***REMOVED***this.should_remove;
					const***REMOVED***_replacement***REMOVED***=***REMOVED***this.replacement;
					this.should_skip***REMOVED***=***REMOVED***false;
					this.should_remove***REMOVED***=***REMOVED***false;
					this.replacement***REMOVED***=***REMOVED***null;

					await***REMOVED***this.enter.call(this.context,***REMOVED***node,***REMOVED***parent,***REMOVED***prop,***REMOVED***index);

					if***REMOVED***(this.replacement)***REMOVED***{
						node***REMOVED***=***REMOVED***this.replacement;
						this.replace(parent,***REMOVED***prop,***REMOVED***index,***REMOVED***node);
					}

					if***REMOVED***(this.should_remove)***REMOVED***{
						this.remove(parent,***REMOVED***prop,***REMOVED***index);
					}

					const***REMOVED***skipped***REMOVED***=***REMOVED***this.should_skip;
					const***REMOVED***removed***REMOVED***=***REMOVED***this.should_remove;

					this.should_skip***REMOVED***=***REMOVED***_should_skip;
					this.should_remove***REMOVED***=***REMOVED***_should_remove;
					this.replacement***REMOVED***=***REMOVED***_replacement;

					if***REMOVED***(skipped)***REMOVED***return***REMOVED***node;
					if***REMOVED***(removed)***REMOVED***return***REMOVED***null;
				}

				for***REMOVED***(const***REMOVED***key***REMOVED***in***REMOVED***node)***REMOVED***{
					const***REMOVED***value***REMOVED***=***REMOVED***node[key];

					if***REMOVED***(typeof***REMOVED***value***REMOVED***!==***REMOVED***"object")***REMOVED***{
						continue;
					}***REMOVED***else***REMOVED***if***REMOVED***(Array.isArray(value))***REMOVED***{
						for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***value.length;***REMOVED***i***REMOVED***+=***REMOVED***1)***REMOVED***{
							if***REMOVED***(value[i]***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***value[i].type***REMOVED***===***REMOVED***'string')***REMOVED***{
								if***REMOVED***(!(await***REMOVED***this.visit(value[i],***REMOVED***node,***REMOVED***key,***REMOVED***i)))***REMOVED***{
									//***REMOVED***removed
									i--;
								}
							}
						}
					}***REMOVED***else***REMOVED***if***REMOVED***(value***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***value.type***REMOVED***===***REMOVED***"string")***REMOVED***{
						await***REMOVED***this.visit(value,***REMOVED***node,***REMOVED***key,***REMOVED***null);
					}
				}

				if***REMOVED***(this.leave)***REMOVED***{
					const***REMOVED***_replacement***REMOVED***=***REMOVED***this.replacement;
					const***REMOVED***_should_remove***REMOVED***=***REMOVED***this.should_remove;
					this.replacement***REMOVED***=***REMOVED***null;
					this.should_remove***REMOVED***=***REMOVED***false;

					await***REMOVED***this.leave.call(this.context,***REMOVED***node,***REMOVED***parent,***REMOVED***prop,***REMOVED***index);

					if***REMOVED***(this.replacement)***REMOVED***{
						node***REMOVED***=***REMOVED***this.replacement;
						this.replace(parent,***REMOVED***prop,***REMOVED***index,***REMOVED***node);
					}

					if***REMOVED***(this.should_remove)***REMOVED***{
						this.remove(parent,***REMOVED***prop,***REMOVED***index);
					}

					const***REMOVED***removed***REMOVED***=***REMOVED***this.should_remove;

					this.replacement***REMOVED***=***REMOVED***_replacement;
					this.should_remove***REMOVED***=***REMOVED***_should_remove;

					if***REMOVED***(removed)***REMOVED***return***REMOVED***null;
				}
			}

			return***REMOVED***node;
		}
	}

	//***REMOVED***@ts-check

	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('estree').BaseNode}***REMOVED***BaseNode***REMOVED****/
	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('./sync.js').SyncHandler}***REMOVED***SyncHandler***REMOVED****/
	/*****REMOVED***@typedef***REMOVED***{***REMOVED***import('./async.js').AsyncHandler}***REMOVED***AsyncHandler***REMOVED****/

	/**
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***ast
	***REMOVED*******REMOVED***@param***REMOVED***{{
	***REMOVED*******REMOVED******REMOVED******REMOVED***enter?:***REMOVED***SyncHandler
	***REMOVED*******REMOVED******REMOVED******REMOVED***leave?:***REMOVED***SyncHandler
	***REMOVED*******REMOVED***}}***REMOVED***walker
	***REMOVED*******REMOVED***@returns***REMOVED***{BaseNode}
	***REMOVED****/
	function***REMOVED***walk(ast,***REMOVED***{***REMOVED***enter,***REMOVED***leave***REMOVED***})***REMOVED***{
		const***REMOVED***instance***REMOVED***=***REMOVED***new***REMOVED***SyncWalker(enter,***REMOVED***leave);
		return***REMOVED***instance.visit(ast,***REMOVED***null);
	}

	/**
	***REMOVED****
	***REMOVED*******REMOVED***@param***REMOVED***{BaseNode}***REMOVED***ast
	***REMOVED*******REMOVED***@param***REMOVED***{{
	***REMOVED*******REMOVED******REMOVED******REMOVED***enter?:***REMOVED***AsyncHandler
	***REMOVED*******REMOVED******REMOVED******REMOVED***leave?:***REMOVED***AsyncHandler
	***REMOVED*******REMOVED***}}***REMOVED***walker
	***REMOVED*******REMOVED***@returns***REMOVED***{Promise<BaseNode>}
	***REMOVED****/
	async***REMOVED***function***REMOVED***asyncWalk(ast,***REMOVED***{***REMOVED***enter,***REMOVED***leave***REMOVED***})***REMOVED***{
		const***REMOVED***instance***REMOVED***=***REMOVED***new***REMOVED***AsyncWalker(enter,***REMOVED***leave);
		return***REMOVED***await***REMOVED***instance.visit(ast,***REMOVED***null);
	}

	exports.asyncWalk***REMOVED***=***REMOVED***asyncWalk;
	exports.walk***REMOVED***=***REMOVED***walk;

	Object.defineProperty(exports,***REMOVED***'__esModule',***REMOVED***{***REMOVED***value:***REMOVED***true***REMOVED***});

})));
