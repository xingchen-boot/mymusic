'use***REMOVED***strict';

var***REMOVED***sourcemapCodec***REMOVED***=***REMOVED***require('@jridgewell/sourcemap-codec');

class***REMOVED***BitSet***REMOVED***{
	constructor(arg)***REMOVED***{
		this.bits***REMOVED***=***REMOVED***arg***REMOVED***instanceof***REMOVED***BitSet***REMOVED***?***REMOVED***arg.bits.slice()***REMOVED***:***REMOVED***[];
	}

	add(n)***REMOVED***{
		this.bits[n***REMOVED***>>***REMOVED***5]***REMOVED***|=***REMOVED***1***REMOVED***<<***REMOVED***(n***REMOVED***&***REMOVED***31);
	}

	has(n)***REMOVED***{
		return***REMOVED***!!(this.bits[n***REMOVED***>>***REMOVED***5]***REMOVED***&***REMOVED***(1***REMOVED***<<***REMOVED***(n***REMOVED***&***REMOVED***31)));
	}
}

class***REMOVED***Chunk***REMOVED***{
	constructor(start,***REMOVED***end,***REMOVED***content)***REMOVED***{
		this.start***REMOVED***=***REMOVED***start;
		this.end***REMOVED***=***REMOVED***end;
		this.original***REMOVED***=***REMOVED***content;

		this.intro***REMOVED***=***REMOVED***'';
		this.outro***REMOVED***=***REMOVED***'';

		this.content***REMOVED***=***REMOVED***content;
		this.storeName***REMOVED***=***REMOVED***false;
		this.edited***REMOVED***=***REMOVED***false;

		{
			this.previous***REMOVED***=***REMOVED***null;
			this.next***REMOVED***=***REMOVED***null;
		}
	}

	appendLeft(content)***REMOVED***{
		this.outro***REMOVED***+=***REMOVED***content;
	}

	appendRight(content)***REMOVED***{
		this.intro***REMOVED***=***REMOVED***this.intro***REMOVED***+***REMOVED***content;
	}

	clone()***REMOVED***{
		const***REMOVED***chunk***REMOVED***=***REMOVED***new***REMOVED***Chunk(this.start,***REMOVED***this.end,***REMOVED***this.original);

		chunk.intro***REMOVED***=***REMOVED***this.intro;
		chunk.outro***REMOVED***=***REMOVED***this.outro;
		chunk.content***REMOVED***=***REMOVED***this.content;
		chunk.storeName***REMOVED***=***REMOVED***this.storeName;
		chunk.edited***REMOVED***=***REMOVED***this.edited;

		return***REMOVED***chunk;
	}

	contains(index)***REMOVED***{
		return***REMOVED***this.start***REMOVED***<***REMOVED***index***REMOVED***&&***REMOVED***index***REMOVED***<***REMOVED***this.end;
	}

	eachNext(fn)***REMOVED***{
		let***REMOVED***chunk***REMOVED***=***REMOVED***this;
		while***REMOVED***(chunk)***REMOVED***{
			fn(chunk);
			chunk***REMOVED***=***REMOVED***chunk.next;
		}
	}

	eachPrevious(fn)***REMOVED***{
		let***REMOVED***chunk***REMOVED***=***REMOVED***this;
		while***REMOVED***(chunk)***REMOVED***{
			fn(chunk);
			chunk***REMOVED***=***REMOVED***chunk.previous;
		}
	}

	edit(content,***REMOVED***storeName,***REMOVED***contentOnly)***REMOVED***{
		this.content***REMOVED***=***REMOVED***content;
		if***REMOVED***(!contentOnly)***REMOVED***{
			this.intro***REMOVED***=***REMOVED***'';
			this.outro***REMOVED***=***REMOVED***'';
		}
		this.storeName***REMOVED***=***REMOVED***storeName;

		this.edited***REMOVED***=***REMOVED***true;

		return***REMOVED***this;
	}

	prependLeft(content)***REMOVED***{
		this.outro***REMOVED***=***REMOVED***content***REMOVED***+***REMOVED***this.outro;
	}

	prependRight(content)***REMOVED***{
		this.intro***REMOVED***=***REMOVED***content***REMOVED***+***REMOVED***this.intro;
	}

	reset()***REMOVED***{
		this.intro***REMOVED***=***REMOVED***'';
		this.outro***REMOVED***=***REMOVED***'';
		if***REMOVED***(this.edited)***REMOVED***{
			this.content***REMOVED***=***REMOVED***this.original;
			this.storeName***REMOVED***=***REMOVED***false;
			this.edited***REMOVED***=***REMOVED***false;
		}
	}

	split(index)***REMOVED***{
		const***REMOVED***sliceIndex***REMOVED***=***REMOVED***index***REMOVED***-***REMOVED***this.start;

		const***REMOVED***originalBefore***REMOVED***=***REMOVED***this.original.slice(0,***REMOVED***sliceIndex);
		const***REMOVED***originalAfter***REMOVED***=***REMOVED***this.original.slice(sliceIndex);

		this.original***REMOVED***=***REMOVED***originalBefore;

		const***REMOVED***newChunk***REMOVED***=***REMOVED***new***REMOVED***Chunk(index,***REMOVED***this.end,***REMOVED***originalAfter);
		newChunk.outro***REMOVED***=***REMOVED***this.outro;
		this.outro***REMOVED***=***REMOVED***'';

		this.end***REMOVED***=***REMOVED***index;

		if***REMOVED***(this.edited)***REMOVED***{
			//***REMOVED***after***REMOVED***split***REMOVED***we***REMOVED***should***REMOVED***save***REMOVED***the***REMOVED***edit***REMOVED***content***REMOVED***record***REMOVED***into***REMOVED***the***REMOVED***correct***REMOVED***chunk
			//***REMOVED***to***REMOVED***make***REMOVED***sure***REMOVED***sourcemap***REMOVED***correct
			//***REMOVED***For***REMOVED***example:
			//***REMOVED***'***REMOVED******REMOVED***test'.trim()
			//***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***split***REMOVED******REMOVED******REMOVED***->***REMOVED***'***REMOVED******REMOVED***'***REMOVED***+***REMOVED***'test'
			//***REMOVED******REMOVED******REMOVED***✔️***REMOVED***edit***REMOVED******REMOVED******REMOVED******REMOVED***->***REMOVED***''***REMOVED***+***REMOVED***'test'
			//***REMOVED******REMOVED******REMOVED***✖️***REMOVED***edit***REMOVED******REMOVED******REMOVED******REMOVED***->***REMOVED***'test'***REMOVED***+***REMOVED***''
			//***REMOVED***TODO***REMOVED***is***REMOVED***this***REMOVED***block***REMOVED***necessary?...
			newChunk.edit('',***REMOVED***false);
			this.content***REMOVED***=***REMOVED***'';
		}***REMOVED***else***REMOVED***{
			this.content***REMOVED***=***REMOVED***originalBefore;
		}

		newChunk.next***REMOVED***=***REMOVED***this.next;
		if***REMOVED***(newChunk.next)***REMOVED***newChunk.next.previous***REMOVED***=***REMOVED***newChunk;
		newChunk.previous***REMOVED***=***REMOVED***this;
		this.next***REMOVED***=***REMOVED***newChunk;

		return***REMOVED***newChunk;
	}

	toString()***REMOVED***{
		return***REMOVED***this.intro***REMOVED***+***REMOVED***this.content***REMOVED***+***REMOVED***this.outro;
	}

	trimEnd(rx)***REMOVED***{
		this.outro***REMOVED***=***REMOVED***this.outro.replace(rx,***REMOVED***'');
		if***REMOVED***(this.outro.length)***REMOVED***return***REMOVED***true;

		const***REMOVED***trimmed***REMOVED***=***REMOVED***this.content.replace(rx,***REMOVED***'');

		if***REMOVED***(trimmed.length)***REMOVED***{
			if***REMOVED***(trimmed***REMOVED***!==***REMOVED***this.content)***REMOVED***{
				this.split(this.start***REMOVED***+***REMOVED***trimmed.length).edit('',***REMOVED***undefined,***REMOVED***true);
				if***REMOVED***(this.edited)***REMOVED***{
					//***REMOVED***save***REMOVED***the***REMOVED***change,***REMOVED***if***REMOVED***it***REMOVED***has***REMOVED***been***REMOVED***edited
					this.edit(trimmed,***REMOVED***this.storeName,***REMOVED***true);
				}
			}
			return***REMOVED***true;
		}***REMOVED***else***REMOVED***{
			this.edit('',***REMOVED***undefined,***REMOVED***true);

			this.intro***REMOVED***=***REMOVED***this.intro.replace(rx,***REMOVED***'');
			if***REMOVED***(this.intro.length)***REMOVED***return***REMOVED***true;
		}
	}

	trimStart(rx)***REMOVED***{
		this.intro***REMOVED***=***REMOVED***this.intro.replace(rx,***REMOVED***'');
		if***REMOVED***(this.intro.length)***REMOVED***return***REMOVED***true;

		const***REMOVED***trimmed***REMOVED***=***REMOVED***this.content.replace(rx,***REMOVED***'');

		if***REMOVED***(trimmed.length)***REMOVED***{
			if***REMOVED***(trimmed***REMOVED***!==***REMOVED***this.content)***REMOVED***{
				const***REMOVED***newChunk***REMOVED***=***REMOVED***this.split(this.end***REMOVED***-***REMOVED***trimmed.length);
				if***REMOVED***(this.edited)***REMOVED***{
					//***REMOVED***save***REMOVED***the***REMOVED***change,***REMOVED***if***REMOVED***it***REMOVED***has***REMOVED***been***REMOVED***edited
					newChunk.edit(trimmed,***REMOVED***this.storeName,***REMOVED***true);
				}
				this.edit('',***REMOVED***undefined,***REMOVED***true);
			}
			return***REMOVED***true;
		}***REMOVED***else***REMOVED***{
			this.edit('',***REMOVED***undefined,***REMOVED***true);

			this.outro***REMOVED***=***REMOVED***this.outro.replace(rx,***REMOVED***'');
			if***REMOVED***(this.outro.length)***REMOVED***return***REMOVED***true;
		}
	}
}

function***REMOVED***getBtoa()***REMOVED***{
	if***REMOVED***(typeof***REMOVED***globalThis***REMOVED***!==***REMOVED***'undefined'***REMOVED***&&***REMOVED***typeof***REMOVED***globalThis.btoa***REMOVED***===***REMOVED***'function')***REMOVED***{
		return***REMOVED***(str)***REMOVED***=>***REMOVED***globalThis.btoa(unescape(encodeURIComponent(str)));
	}***REMOVED***else***REMOVED***if***REMOVED***(typeof***REMOVED***Buffer***REMOVED***===***REMOVED***'function')***REMOVED***{
		return***REMOVED***(str)***REMOVED***=>***REMOVED***Buffer.from(str,***REMOVED***'utf-8').toString('base64');
	}***REMOVED***else***REMOVED***{
		return***REMOVED***()***REMOVED***=>***REMOVED***{
			throw***REMOVED***new***REMOVED***Error('Unsupported***REMOVED***environment:***REMOVED***`window.btoa`***REMOVED***or***REMOVED***`Buffer`***REMOVED***should***REMOVED***be***REMOVED***supported.');
		};
	}
}

const***REMOVED***btoa***REMOVED***=***REMOVED***/*#__PURE__*/***REMOVED***getBtoa();

class***REMOVED***SourceMap***REMOVED***{
	constructor(properties)***REMOVED***{
		this.version***REMOVED***=***REMOVED***3;
		this.file***REMOVED***=***REMOVED***properties.file;
		this.sources***REMOVED***=***REMOVED***properties.sources;
		this.sourcesContent***REMOVED***=***REMOVED***properties.sourcesContent;
		this.names***REMOVED***=***REMOVED***properties.names;
		this.mappings***REMOVED***=***REMOVED***sourcemapCodec.encode(properties.mappings);
		if***REMOVED***(typeof***REMOVED***properties.x_google_ignoreList***REMOVED***!==***REMOVED***'undefined')***REMOVED***{
			this.x_google_ignoreList***REMOVED***=***REMOVED***properties.x_google_ignoreList;
		}
		if***REMOVED***(typeof***REMOVED***properties.debugId***REMOVED***!==***REMOVED***'undefined')***REMOVED***{
			this.debugId***REMOVED***=***REMOVED***properties.debugId;
		}
	}

	toString()***REMOVED***{
		return***REMOVED***JSON.stringify(this);
	}

	toUrl()***REMOVED***{
		return***REMOVED***'data:application/json;charset=utf-8;base64,'***REMOVED***+***REMOVED***btoa(this.toString());
	}
}

function***REMOVED***guessIndent(code)***REMOVED***{
	const***REMOVED***lines***REMOVED***=***REMOVED***code.split('\n');

	const***REMOVED***tabbed***REMOVED***=***REMOVED***lines.filter((line)***REMOVED***=>***REMOVED***/^\t+/.test(line));
	const***REMOVED***spaced***REMOVED***=***REMOVED***lines.filter((line)***REMOVED***=>***REMOVED***/^***REMOVED***{2,}/.test(line));

	if***REMOVED***(tabbed.length***REMOVED***===***REMOVED***0***REMOVED***&&***REMOVED***spaced.length***REMOVED***===***REMOVED***0)***REMOVED***{
		return***REMOVED***null;
	}

	//***REMOVED***More***REMOVED***lines***REMOVED***tabbed***REMOVED***than***REMOVED***spaced?***REMOVED***Assume***REMOVED***tabs,***REMOVED***and
	//***REMOVED***default***REMOVED***to***REMOVED***tabs***REMOVED***in***REMOVED***the***REMOVED***case***REMOVED***of***REMOVED***a***REMOVED***tie***REMOVED***(or***REMOVED***nothing
	//***REMOVED***to***REMOVED***go***REMOVED***on)
	if***REMOVED***(tabbed.length***REMOVED***>=***REMOVED***spaced.length)***REMOVED***{
		return***REMOVED***'\t';
	}

	//***REMOVED***Otherwise,***REMOVED***we***REMOVED***need***REMOVED***to***REMOVED***guess***REMOVED***the***REMOVED***multiple
	const***REMOVED***min***REMOVED***=***REMOVED***spaced.reduce((previous,***REMOVED***current)***REMOVED***=>***REMOVED***{
		const***REMOVED***numSpaces***REMOVED***=***REMOVED***/^***REMOVED***+/.exec(current)[0].length;
		return***REMOVED***Math.min(numSpaces,***REMOVED***previous);
	},***REMOVED***Infinity);

	return***REMOVED***new***REMOVED***Array(min***REMOVED***+***REMOVED***1).join('***REMOVED***');
}

function***REMOVED***getRelativePath(from,***REMOVED***to)***REMOVED***{
	const***REMOVED***fromParts***REMOVED***=***REMOVED***from.split(/[/\\]/);
	const***REMOVED***toParts***REMOVED***=***REMOVED***to.split(/[/\\]/);

	fromParts.pop();***REMOVED***//***REMOVED***get***REMOVED***dirname

	while***REMOVED***(fromParts[0]***REMOVED***===***REMOVED***toParts[0])***REMOVED***{
		fromParts.shift();
		toParts.shift();
	}

	if***REMOVED***(fromParts.length)***REMOVED***{
		let***REMOVED***i***REMOVED***=***REMOVED***fromParts.length;
		while***REMOVED***(i--)***REMOVED***fromParts[i]***REMOVED***=***REMOVED***'..';
	}

	return***REMOVED***fromParts.concat(toParts).join('/');
}

const***REMOVED***toString***REMOVED***=***REMOVED***Object.prototype.toString;

function***REMOVED***isObject(thing)***REMOVED***{
	return***REMOVED***toString.call(thing)***REMOVED***===***REMOVED***'[object***REMOVED***Object]';
}

function***REMOVED***getLocator(source)***REMOVED***{
	const***REMOVED***originalLines***REMOVED***=***REMOVED***source.split('\n');
	const***REMOVED***lineOffsets***REMOVED***=***REMOVED***[];

	for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0,***REMOVED***pos***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***originalLines.length;***REMOVED***i++)***REMOVED***{
		lineOffsets.push(pos);
		pos***REMOVED***+=***REMOVED***originalLines[i].length***REMOVED***+***REMOVED***1;
	}

	return***REMOVED***function***REMOVED***locate(index)***REMOVED***{
		let***REMOVED***i***REMOVED***=***REMOVED***0;
		let***REMOVED***j***REMOVED***=***REMOVED***lineOffsets.length;
		while***REMOVED***(i***REMOVED***<***REMOVED***j)***REMOVED***{
			const***REMOVED***m***REMOVED***=***REMOVED***(i***REMOVED***+***REMOVED***j)***REMOVED***>>***REMOVED***1;
			if***REMOVED***(index***REMOVED***<***REMOVED***lineOffsets[m])***REMOVED***{
				j***REMOVED***=***REMOVED***m;
			}***REMOVED***else***REMOVED***{
				i***REMOVED***=***REMOVED***m***REMOVED***+***REMOVED***1;
			}
		}
		const***REMOVED***line***REMOVED***=***REMOVED***i***REMOVED***-***REMOVED***1;
		const***REMOVED***column***REMOVED***=***REMOVED***index***REMOVED***-***REMOVED***lineOffsets[line];
		return***REMOVED***{***REMOVED***line,***REMOVED***column***REMOVED***};
	};
}

const***REMOVED***wordRegex***REMOVED***=***REMOVED***/\w/;

class***REMOVED***Mappings***REMOVED***{
	constructor(hires)***REMOVED***{
		this.hires***REMOVED***=***REMOVED***hires;
		this.generatedCodeLine***REMOVED***=***REMOVED***0;
		this.generatedCodeColumn***REMOVED***=***REMOVED***0;
		this.raw***REMOVED***=***REMOVED***[];
		this.rawSegments***REMOVED***=***REMOVED***this.raw[this.generatedCodeLine]***REMOVED***=***REMOVED***[];
		this.pending***REMOVED***=***REMOVED***null;
	}

	addEdit(sourceIndex,***REMOVED***content,***REMOVED***loc,***REMOVED***nameIndex)***REMOVED***{
		if***REMOVED***(content.length)***REMOVED***{
			const***REMOVED***contentLengthMinusOne***REMOVED***=***REMOVED***content.length***REMOVED***-***REMOVED***1;
			let***REMOVED***contentLineEnd***REMOVED***=***REMOVED***content.indexOf('\n',***REMOVED***0);
			let***REMOVED***previousContentLineEnd***REMOVED***=***REMOVED***-1;
			//***REMOVED***Loop***REMOVED***through***REMOVED***each***REMOVED***line***REMOVED***in***REMOVED***the***REMOVED***content***REMOVED***and***REMOVED***add***REMOVED***a***REMOVED***segment,***REMOVED***but***REMOVED***stop***REMOVED***if***REMOVED***the***REMOVED***last***REMOVED***line***REMOVED***is***REMOVED***empty,
			//***REMOVED***else***REMOVED***code***REMOVED***afterwards***REMOVED***would***REMOVED***fill***REMOVED***one***REMOVED***line***REMOVED***too***REMOVED***many
			while***REMOVED***(contentLineEnd***REMOVED***>=***REMOVED***0***REMOVED***&&***REMOVED***contentLengthMinusOne***REMOVED***>***REMOVED***contentLineEnd)***REMOVED***{
				const***REMOVED***segment***REMOVED***=***REMOVED***[this.generatedCodeColumn,***REMOVED***sourceIndex,***REMOVED***loc.line,***REMOVED***loc.column];
				if***REMOVED***(nameIndex***REMOVED***>=***REMOVED***0)***REMOVED***{
					segment.push(nameIndex);
				}
				this.rawSegments.push(segment);

				this.generatedCodeLine***REMOVED***+=***REMOVED***1;
				this.raw[this.generatedCodeLine]***REMOVED***=***REMOVED***this.rawSegments***REMOVED***=***REMOVED***[];
				this.generatedCodeColumn***REMOVED***=***REMOVED***0;

				previousContentLineEnd***REMOVED***=***REMOVED***contentLineEnd;
				contentLineEnd***REMOVED***=***REMOVED***content.indexOf('\n',***REMOVED***contentLineEnd***REMOVED***+***REMOVED***1);
			}

			const***REMOVED***segment***REMOVED***=***REMOVED***[this.generatedCodeColumn,***REMOVED***sourceIndex,***REMOVED***loc.line,***REMOVED***loc.column];
			if***REMOVED***(nameIndex***REMOVED***>=***REMOVED***0)***REMOVED***{
				segment.push(nameIndex);
			}
			this.rawSegments.push(segment);

			this.advance(content.slice(previousContentLineEnd***REMOVED***+***REMOVED***1));
		}***REMOVED***else***REMOVED***if***REMOVED***(this.pending)***REMOVED***{
			this.rawSegments.push(this.pending);
			this.advance(content);
		}

		this.pending***REMOVED***=***REMOVED***null;
	}

	addUneditedChunk(sourceIndex,***REMOVED***chunk,***REMOVED***original,***REMOVED***loc,***REMOVED***sourcemapLocations)***REMOVED***{
		let***REMOVED***originalCharIndex***REMOVED***=***REMOVED***chunk.start;
		let***REMOVED***first***REMOVED***=***REMOVED***true;
		//***REMOVED***when***REMOVED***iterating***REMOVED***each***REMOVED***char,***REMOVED***check***REMOVED***if***REMOVED***it's***REMOVED***in***REMOVED***a***REMOVED***word***REMOVED***boundary
		let***REMOVED***charInHiresBoundary***REMOVED***=***REMOVED***false;

		while***REMOVED***(originalCharIndex***REMOVED***<***REMOVED***chunk.end)***REMOVED***{
			if***REMOVED***(original[originalCharIndex]***REMOVED***===***REMOVED***'\n')***REMOVED***{
				loc.line***REMOVED***+=***REMOVED***1;
				loc.column***REMOVED***=***REMOVED***0;
				this.generatedCodeLine***REMOVED***+=***REMOVED***1;
				this.raw[this.generatedCodeLine]***REMOVED***=***REMOVED***this.rawSegments***REMOVED***=***REMOVED***[];
				this.generatedCodeColumn***REMOVED***=***REMOVED***0;
				first***REMOVED***=***REMOVED***true;
				charInHiresBoundary***REMOVED***=***REMOVED***false;
			}***REMOVED***else***REMOVED***{
				if***REMOVED***(this.hires***REMOVED***||***REMOVED***first***REMOVED***||***REMOVED***sourcemapLocations.has(originalCharIndex))***REMOVED***{
					const***REMOVED***segment***REMOVED***=***REMOVED***[this.generatedCodeColumn,***REMOVED***sourceIndex,***REMOVED***loc.line,***REMOVED***loc.column];

					if***REMOVED***(this.hires***REMOVED***===***REMOVED***'boundary')***REMOVED***{
						//***REMOVED***in***REMOVED***hires***REMOVED***"boundary",***REMOVED***group***REMOVED***segments***REMOVED***per***REMOVED***word***REMOVED***boundary***REMOVED***than***REMOVED***per***REMOVED***char
						if***REMOVED***(wordRegex.test(original[originalCharIndex]))***REMOVED***{
							//***REMOVED***for***REMOVED***first***REMOVED***char***REMOVED***in***REMOVED***the***REMOVED***boundary***REMOVED***found,***REMOVED***start***REMOVED***the***REMOVED***boundary***REMOVED***by***REMOVED***pushing***REMOVED***a***REMOVED***segment
							if***REMOVED***(!charInHiresBoundary)***REMOVED***{
								this.rawSegments.push(segment);
								charInHiresBoundary***REMOVED***=***REMOVED***true;
							}
						}***REMOVED***else***REMOVED***{
							//***REMOVED***for***REMOVED***non-word***REMOVED***char,***REMOVED***end***REMOVED***the***REMOVED***boundary***REMOVED***by***REMOVED***pushing***REMOVED***a***REMOVED***segment
							this.rawSegments.push(segment);
							charInHiresBoundary***REMOVED***=***REMOVED***false;
						}
					}***REMOVED***else***REMOVED***{
						this.rawSegments.push(segment);
					}
				}

				loc.column***REMOVED***+=***REMOVED***1;
				this.generatedCodeColumn***REMOVED***+=***REMOVED***1;
				first***REMOVED***=***REMOVED***false;
			}

			originalCharIndex***REMOVED***+=***REMOVED***1;
		}

		this.pending***REMOVED***=***REMOVED***null;
	}

	advance(str)***REMOVED***{
		if***REMOVED***(!str)***REMOVED***return;

		const***REMOVED***lines***REMOVED***=***REMOVED***str.split('\n');

		if***REMOVED***(lines.length***REMOVED***>***REMOVED***1)***REMOVED***{
			for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***lines.length***REMOVED***-***REMOVED***1;***REMOVED***i++)***REMOVED***{
				this.generatedCodeLine++;
				this.raw[this.generatedCodeLine]***REMOVED***=***REMOVED***this.rawSegments***REMOVED***=***REMOVED***[];
			}
			this.generatedCodeColumn***REMOVED***=***REMOVED***0;
		}

		this.generatedCodeColumn***REMOVED***+=***REMOVED***lines[lines.length***REMOVED***-***REMOVED***1].length;
	}
}

const***REMOVED***n***REMOVED***=***REMOVED***'\n';

const***REMOVED***warned***REMOVED***=***REMOVED***{
	insertLeft:***REMOVED***false,
	insertRight:***REMOVED***false,
	storeName:***REMOVED***false,
};

class***REMOVED***MagicString***REMOVED***{
	constructor(string,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***{
		const***REMOVED***chunk***REMOVED***=***REMOVED***new***REMOVED***Chunk(0,***REMOVED***string.length,***REMOVED***string);

		Object.defineProperties(this,***REMOVED***{
			original:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***string***REMOVED***},
			outro:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***''***REMOVED***},
			intro:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***''***REMOVED***},
			firstChunk:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***chunk***REMOVED***},
			lastChunk:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***chunk***REMOVED***},
			lastSearchedChunk:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***chunk***REMOVED***},
			byStart:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***{}***REMOVED***},
			byEnd:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***{}***REMOVED***},
			filename:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***options.filename***REMOVED***},
			indentExclusionRanges:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***options.indentExclusionRanges***REMOVED***},
			sourcemapLocations:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***new***REMOVED***BitSet()***REMOVED***},
			storedNames:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***{}***REMOVED***},
			indentStr:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***undefined***REMOVED***},
			ignoreList:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***options.ignoreList***REMOVED***},
			offset:***REMOVED***{***REMOVED***writable:***REMOVED***true,***REMOVED***value:***REMOVED***options.offset***REMOVED***||***REMOVED***0***REMOVED***},
		});

		this.byStart[0]***REMOVED***=***REMOVED***chunk;
		this.byEnd[string.length]***REMOVED***=***REMOVED***chunk;
	}

	addSourcemapLocation(char)***REMOVED***{
		this.sourcemapLocations.add(char);
	}

	append(content)***REMOVED***{
		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('outro***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		this.outro***REMOVED***+=***REMOVED***content;
		return***REMOVED***this;
	}

	appendLeft(index,***REMOVED***content)***REMOVED***{
		index***REMOVED***=***REMOVED***index***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('inserted***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		this._split(index);

		const***REMOVED***chunk***REMOVED***=***REMOVED***this.byEnd[index];

		if***REMOVED***(chunk)***REMOVED***{
			chunk.appendLeft(content);
		}***REMOVED***else***REMOVED***{
			this.intro***REMOVED***+=***REMOVED***content;
		}
		return***REMOVED***this;
	}

	appendRight(index,***REMOVED***content)***REMOVED***{
		index***REMOVED***=***REMOVED***index***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('inserted***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		this._split(index);

		const***REMOVED***chunk***REMOVED***=***REMOVED***this.byStart[index];

		if***REMOVED***(chunk)***REMOVED***{
			chunk.appendRight(content);
		}***REMOVED***else***REMOVED***{
			this.outro***REMOVED***+=***REMOVED***content;
		}
		return***REMOVED***this;
	}

	clone()***REMOVED***{
		const***REMOVED***cloned***REMOVED***=***REMOVED***new***REMOVED***MagicString(this.original,***REMOVED***{***REMOVED***filename:***REMOVED***this.filename,***REMOVED***offset:***REMOVED***this.offset***REMOVED***});

		let***REMOVED***originalChunk***REMOVED***=***REMOVED***this.firstChunk;
		let***REMOVED***clonedChunk***REMOVED***=***REMOVED***(cloned.firstChunk***REMOVED***=***REMOVED***cloned.lastSearchedChunk***REMOVED***=***REMOVED***originalChunk.clone());

		while***REMOVED***(originalChunk)***REMOVED***{
			cloned.byStart[clonedChunk.start]***REMOVED***=***REMOVED***clonedChunk;
			cloned.byEnd[clonedChunk.end]***REMOVED***=***REMOVED***clonedChunk;

			const***REMOVED***nextOriginalChunk***REMOVED***=***REMOVED***originalChunk.next;
			const***REMOVED***nextClonedChunk***REMOVED***=***REMOVED***nextOriginalChunk***REMOVED***&&***REMOVED***nextOriginalChunk.clone();

			if***REMOVED***(nextClonedChunk)***REMOVED***{
				clonedChunk.next***REMOVED***=***REMOVED***nextClonedChunk;
				nextClonedChunk.previous***REMOVED***=***REMOVED***clonedChunk;

				clonedChunk***REMOVED***=***REMOVED***nextClonedChunk;
			}

			originalChunk***REMOVED***=***REMOVED***nextOriginalChunk;
		}

		cloned.lastChunk***REMOVED***=***REMOVED***clonedChunk;

		if***REMOVED***(this.indentExclusionRanges)***REMOVED***{
			cloned.indentExclusionRanges***REMOVED***=***REMOVED***this.indentExclusionRanges.slice();
		}

		cloned.sourcemapLocations***REMOVED***=***REMOVED***new***REMOVED***BitSet(this.sourcemapLocations);

		cloned.intro***REMOVED***=***REMOVED***this.intro;
		cloned.outro***REMOVED***=***REMOVED***this.outro;

		return***REMOVED***cloned;
	}

	generateDecodedMap(options)***REMOVED***{
		options***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};

		const***REMOVED***sourceIndex***REMOVED***=***REMOVED***0;
		const***REMOVED***names***REMOVED***=***REMOVED***Object.keys(this.storedNames);
		const***REMOVED***mappings***REMOVED***=***REMOVED***new***REMOVED***Mappings(options.hires);

		const***REMOVED***locate***REMOVED***=***REMOVED***getLocator(this.original);

		if***REMOVED***(this.intro)***REMOVED***{
			mappings.advance(this.intro);
		}

		this.firstChunk.eachNext((chunk)***REMOVED***=>***REMOVED***{
			const***REMOVED***loc***REMOVED***=***REMOVED***locate(chunk.start);

			if***REMOVED***(chunk.intro.length)***REMOVED***mappings.advance(chunk.intro);

			if***REMOVED***(chunk.edited)***REMOVED***{
				mappings.addEdit(
					sourceIndex,
					chunk.content,
					loc,
					chunk.storeName***REMOVED***?***REMOVED***names.indexOf(chunk.original)***REMOVED***:***REMOVED***-1,
				);
			}***REMOVED***else***REMOVED***{
				mappings.addUneditedChunk(sourceIndex,***REMOVED***chunk,***REMOVED***this.original,***REMOVED***loc,***REMOVED***this.sourcemapLocations);
			}

			if***REMOVED***(chunk.outro.length)***REMOVED***mappings.advance(chunk.outro);
		});

		if***REMOVED***(this.outro)***REMOVED***{
			mappings.advance(this.outro);
		}

		return***REMOVED***{
			file:***REMOVED***options.file***REMOVED***?***REMOVED***options.file.split(/[/\\]/).pop()***REMOVED***:***REMOVED***undefined,
			sources:***REMOVED***[
				options.source***REMOVED***?***REMOVED***getRelativePath(options.file***REMOVED***||***REMOVED***'',***REMOVED***options.source)***REMOVED***:***REMOVED***options.file***REMOVED***||***REMOVED***'',
			],
			sourcesContent:***REMOVED***options.includeContent***REMOVED***?***REMOVED***[this.original]***REMOVED***:***REMOVED***undefined,
			names,
			mappings:***REMOVED***mappings.raw,
			x_google_ignoreList:***REMOVED***this.ignoreList***REMOVED***?***REMOVED***[sourceIndex]***REMOVED***:***REMOVED***undefined,
		};
	}

	generateMap(options)***REMOVED***{
		return***REMOVED***new***REMOVED***SourceMap(this.generateDecodedMap(options));
	}

	_ensureindentStr()***REMOVED***{
		if***REMOVED***(this.indentStr***REMOVED***===***REMOVED***undefined)***REMOVED***{
			this.indentStr***REMOVED***=***REMOVED***guessIndent(this.original);
		}
	}

	_getRawIndentString()***REMOVED***{
		this._ensureindentStr();
		return***REMOVED***this.indentStr;
	}

	getIndentString()***REMOVED***{
		this._ensureindentStr();
		return***REMOVED***this.indentStr***REMOVED***===***REMOVED***null***REMOVED***?***REMOVED***'\t'***REMOVED***:***REMOVED***this.indentStr;
	}

	indent(indentStr,***REMOVED***options)***REMOVED***{
		const***REMOVED***pattern***REMOVED***=***REMOVED***/^[^\r\n]/gm;

		if***REMOVED***(isObject(indentStr))***REMOVED***{
			options***REMOVED***=***REMOVED***indentStr;
			indentStr***REMOVED***=***REMOVED***undefined;
		}

		if***REMOVED***(indentStr***REMOVED***===***REMOVED***undefined)***REMOVED***{
			this._ensureindentStr();
			indentStr***REMOVED***=***REMOVED***this.indentStr***REMOVED***||***REMOVED***'\t';
		}

		if***REMOVED***(indentStr***REMOVED***===***REMOVED***'')***REMOVED***return***REMOVED***this;***REMOVED***//***REMOVED***noop

		options***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};

		//***REMOVED***Process***REMOVED***exclusion***REMOVED***ranges
		const***REMOVED***isExcluded***REMOVED***=***REMOVED***{};

		if***REMOVED***(options.exclude)***REMOVED***{
			const***REMOVED***exclusions***REMOVED***=
				typeof***REMOVED***options.exclude[0]***REMOVED***===***REMOVED***'number'***REMOVED***?***REMOVED***[options.exclude]***REMOVED***:***REMOVED***options.exclude;
			exclusions.forEach((exclusion)***REMOVED***=>***REMOVED***{
				for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***exclusion[0];***REMOVED***i***REMOVED***<***REMOVED***exclusion[1];***REMOVED***i***REMOVED***+=***REMOVED***1)***REMOVED***{
					isExcluded[i]***REMOVED***=***REMOVED***true;
				}
			});
		}

		let***REMOVED***shouldIndentNextCharacter***REMOVED***=***REMOVED***options.indentStart***REMOVED***!==***REMOVED***false;
		const***REMOVED***replacer***REMOVED***=***REMOVED***(match)***REMOVED***=>***REMOVED***{
			if***REMOVED***(shouldIndentNextCharacter)***REMOVED***return***REMOVED***`${indentStr}${match}`;
			shouldIndentNextCharacter***REMOVED***=***REMOVED***true;
			return***REMOVED***match;
		};

		this.intro***REMOVED***=***REMOVED***this.intro.replace(pattern,***REMOVED***replacer);

		let***REMOVED***charIndex***REMOVED***=***REMOVED***0;
		let***REMOVED***chunk***REMOVED***=***REMOVED***this.firstChunk;

		while***REMOVED***(chunk)***REMOVED***{
			const***REMOVED***end***REMOVED***=***REMOVED***chunk.end;

			if***REMOVED***(chunk.edited)***REMOVED***{
				if***REMOVED***(!isExcluded[charIndex])***REMOVED***{
					chunk.content***REMOVED***=***REMOVED***chunk.content.replace(pattern,***REMOVED***replacer);

					if***REMOVED***(chunk.content.length)***REMOVED***{
						shouldIndentNextCharacter***REMOVED***=***REMOVED***chunk.content[chunk.content.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'\n';
					}
				}
			}***REMOVED***else***REMOVED***{
				charIndex***REMOVED***=***REMOVED***chunk.start;

				while***REMOVED***(charIndex***REMOVED***<***REMOVED***end)***REMOVED***{
					if***REMOVED***(!isExcluded[charIndex])***REMOVED***{
						const***REMOVED***char***REMOVED***=***REMOVED***this.original[charIndex];

						if***REMOVED***(char***REMOVED***===***REMOVED***'\n')***REMOVED***{
							shouldIndentNextCharacter***REMOVED***=***REMOVED***true;
						}***REMOVED***else***REMOVED***if***REMOVED***(char***REMOVED***!==***REMOVED***'\r'***REMOVED***&&***REMOVED***shouldIndentNextCharacter)***REMOVED***{
							shouldIndentNextCharacter***REMOVED***=***REMOVED***false;

							if***REMOVED***(charIndex***REMOVED***===***REMOVED***chunk.start)***REMOVED***{
								chunk.prependRight(indentStr);
							}***REMOVED***else***REMOVED***{
								this._splitChunk(chunk,***REMOVED***charIndex);
								chunk***REMOVED***=***REMOVED***chunk.next;
								chunk.prependRight(indentStr);
							}
						}
					}

					charIndex***REMOVED***+=***REMOVED***1;
				}
			}

			charIndex***REMOVED***=***REMOVED***chunk.end;
			chunk***REMOVED***=***REMOVED***chunk.next;
		}

		this.outro***REMOVED***=***REMOVED***this.outro.replace(pattern,***REMOVED***replacer);

		return***REMOVED***this;
	}

	insert()***REMOVED***{
		throw***REMOVED***new***REMOVED***Error(
			'magicString.insert(...)***REMOVED***is***REMOVED***deprecated.***REMOVED***Use***REMOVED***prependRight(...)***REMOVED***or***REMOVED***appendLeft(...)',
		);
	}

	insertLeft(index,***REMOVED***content)***REMOVED***{
		if***REMOVED***(!warned.insertLeft)***REMOVED***{
			console.warn(
				'magicString.insertLeft(...)***REMOVED***is***REMOVED***deprecated.***REMOVED***Use***REMOVED***magicString.appendLeft(...)***REMOVED***instead',
			);
			warned.insertLeft***REMOVED***=***REMOVED***true;
		}

		return***REMOVED***this.appendLeft(index,***REMOVED***content);
	}

	insertRight(index,***REMOVED***content)***REMOVED***{
		if***REMOVED***(!warned.insertRight)***REMOVED***{
			console.warn(
				'magicString.insertRight(...)***REMOVED***is***REMOVED***deprecated.***REMOVED***Use***REMOVED***magicString.prependRight(...)***REMOVED***instead',
			);
			warned.insertRight***REMOVED***=***REMOVED***true;
		}

		return***REMOVED***this.prependRight(index,***REMOVED***content);
	}

	move(start,***REMOVED***end,***REMOVED***index)***REMOVED***{
		start***REMOVED***=***REMOVED***start***REMOVED***+***REMOVED***this.offset;
		end***REMOVED***=***REMOVED***end***REMOVED***+***REMOVED***this.offset;
		index***REMOVED***=***REMOVED***index***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(index***REMOVED***>=***REMOVED***start***REMOVED***&&***REMOVED***index***REMOVED***<=***REMOVED***end)***REMOVED***throw***REMOVED***new***REMOVED***Error('Cannot***REMOVED***move***REMOVED***a***REMOVED***selection***REMOVED***inside***REMOVED***itself');

		this._split(start);
		this._split(end);
		this._split(index);

		const***REMOVED***first***REMOVED***=***REMOVED***this.byStart[start];
		const***REMOVED***last***REMOVED***=***REMOVED***this.byEnd[end];

		const***REMOVED***oldLeft***REMOVED***=***REMOVED***first.previous;
		const***REMOVED***oldRight***REMOVED***=***REMOVED***last.next;

		const***REMOVED***newRight***REMOVED***=***REMOVED***this.byStart[index];
		if***REMOVED***(!newRight***REMOVED***&&***REMOVED***last***REMOVED***===***REMOVED***this.lastChunk)***REMOVED***return***REMOVED***this;
		const***REMOVED***newLeft***REMOVED***=***REMOVED***newRight***REMOVED***?***REMOVED***newRight.previous***REMOVED***:***REMOVED***this.lastChunk;

		if***REMOVED***(oldLeft)***REMOVED***oldLeft.next***REMOVED***=***REMOVED***oldRight;
		if***REMOVED***(oldRight)***REMOVED***oldRight.previous***REMOVED***=***REMOVED***oldLeft;

		if***REMOVED***(newLeft)***REMOVED***newLeft.next***REMOVED***=***REMOVED***first;
		if***REMOVED***(newRight)***REMOVED***newRight.previous***REMOVED***=***REMOVED***last;

		if***REMOVED***(!first.previous)***REMOVED***this.firstChunk***REMOVED***=***REMOVED***last.next;
		if***REMOVED***(!last.next)***REMOVED***{
			this.lastChunk***REMOVED***=***REMOVED***first.previous;
			this.lastChunk.next***REMOVED***=***REMOVED***null;
		}

		first.previous***REMOVED***=***REMOVED***newLeft;
		last.next***REMOVED***=***REMOVED***newRight***REMOVED***||***REMOVED***null;

		if***REMOVED***(!newLeft)***REMOVED***this.firstChunk***REMOVED***=***REMOVED***first;
		if***REMOVED***(!newRight)***REMOVED***this.lastChunk***REMOVED***=***REMOVED***last;
		return***REMOVED***this;
	}

	overwrite(start,***REMOVED***end,***REMOVED***content,***REMOVED***options)***REMOVED***{
		options***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
		return***REMOVED***this.update(start,***REMOVED***end,***REMOVED***content,***REMOVED***{***REMOVED***...options,***REMOVED***overwrite:***REMOVED***!options.contentOnly***REMOVED***});
	}

	update(start,***REMOVED***end,***REMOVED***content,***REMOVED***options)***REMOVED***{
		start***REMOVED***=***REMOVED***start***REMOVED***+***REMOVED***this.offset;
		end***REMOVED***=***REMOVED***end***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('replacement***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		if***REMOVED***(this.original.length***REMOVED***!==***REMOVED***0)***REMOVED***{
			while***REMOVED***(start***REMOVED***<***REMOVED***0)***REMOVED***start***REMOVED***+=***REMOVED***this.original.length;
			while***REMOVED***(end***REMOVED***<***REMOVED***0)***REMOVED***end***REMOVED***+=***REMOVED***this.original.length;
		}

		if***REMOVED***(end***REMOVED***>***REMOVED***this.original.length)***REMOVED***throw***REMOVED***new***REMOVED***Error('end***REMOVED***is***REMOVED***out***REMOVED***of***REMOVED***bounds');
		if***REMOVED***(start***REMOVED***===***REMOVED***end)
			throw***REMOVED***new***REMOVED***Error(
				'Cannot***REMOVED***overwrite***REMOVED***a***REMOVED***zero-length***REMOVED***range***REMOVED***–***REMOVED***use***REMOVED***appendLeft***REMOVED***or***REMOVED***prependRight***REMOVED***instead',
			);

		this._split(start);
		this._split(end);

		if***REMOVED***(options***REMOVED***===***REMOVED***true)***REMOVED***{
			if***REMOVED***(!warned.storeName)***REMOVED***{
				console.warn(
					'The***REMOVED***final***REMOVED***argument***REMOVED***to***REMOVED***magicString.overwrite(...)***REMOVED***should***REMOVED***be***REMOVED***an***REMOVED***options***REMOVED***object.***REMOVED***See***REMOVED***https://github.com/rich-harris/magic-string',
				);
				warned.storeName***REMOVED***=***REMOVED***true;
			}

			options***REMOVED***=***REMOVED***{***REMOVED***storeName:***REMOVED***true***REMOVED***};
		}
		const***REMOVED***storeName***REMOVED***=***REMOVED***options***REMOVED***!==***REMOVED***undefined***REMOVED***?***REMOVED***options.storeName***REMOVED***:***REMOVED***false;
		const***REMOVED***overwrite***REMOVED***=***REMOVED***options***REMOVED***!==***REMOVED***undefined***REMOVED***?***REMOVED***options.overwrite***REMOVED***:***REMOVED***false;

		if***REMOVED***(storeName)***REMOVED***{
			const***REMOVED***original***REMOVED***=***REMOVED***this.original.slice(start,***REMOVED***end);
			Object.defineProperty(this.storedNames,***REMOVED***original,***REMOVED***{
				writable:***REMOVED***true,
				value:***REMOVED***true,
				enumerable:***REMOVED***true,
			});
		}

		const***REMOVED***first***REMOVED***=***REMOVED***this.byStart[start];
		const***REMOVED***last***REMOVED***=***REMOVED***this.byEnd[end];

		if***REMOVED***(first)***REMOVED***{
			let***REMOVED***chunk***REMOVED***=***REMOVED***first;
			while***REMOVED***(chunk***REMOVED***!==***REMOVED***last)***REMOVED***{
				if***REMOVED***(chunk.next***REMOVED***!==***REMOVED***this.byStart[chunk.end])***REMOVED***{
					throw***REMOVED***new***REMOVED***Error('Cannot***REMOVED***overwrite***REMOVED***across***REMOVED***a***REMOVED***split***REMOVED***point');
				}
				chunk***REMOVED***=***REMOVED***chunk.next;
				chunk.edit('',***REMOVED***false);
			}

			first.edit(content,***REMOVED***storeName,***REMOVED***!overwrite);
		}***REMOVED***else***REMOVED***{
			//***REMOVED***must***REMOVED***be***REMOVED***inserting***REMOVED***at***REMOVED***the***REMOVED***end
			const***REMOVED***newChunk***REMOVED***=***REMOVED***new***REMOVED***Chunk(start,***REMOVED***end,***REMOVED***'').edit(content,***REMOVED***storeName);

			//***REMOVED***TODO***REMOVED***last***REMOVED***chunk***REMOVED***in***REMOVED***the***REMOVED***array***REMOVED***may***REMOVED***not***REMOVED***be***REMOVED***the***REMOVED***last***REMOVED***chunk,***REMOVED***if***REMOVED***it's***REMOVED***moved...
			last.next***REMOVED***=***REMOVED***newChunk;
			newChunk.previous***REMOVED***=***REMOVED***last;
		}
		return***REMOVED***this;
	}

	prepend(content)***REMOVED***{
		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('outro***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		this.intro***REMOVED***=***REMOVED***content***REMOVED***+***REMOVED***this.intro;
		return***REMOVED***this;
	}

	prependLeft(index,***REMOVED***content)***REMOVED***{
		index***REMOVED***=***REMOVED***index***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('inserted***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		this._split(index);

		const***REMOVED***chunk***REMOVED***=***REMOVED***this.byEnd[index];

		if***REMOVED***(chunk)***REMOVED***{
			chunk.prependLeft(content);
		}***REMOVED***else***REMOVED***{
			this.intro***REMOVED***=***REMOVED***content***REMOVED***+***REMOVED***this.intro;
		}
		return***REMOVED***this;
	}

	prependRight(index,***REMOVED***content)***REMOVED***{
		index***REMOVED***=***REMOVED***index***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(typeof***REMOVED***content***REMOVED***!==***REMOVED***'string')***REMOVED***throw***REMOVED***new***REMOVED***TypeError('inserted***REMOVED***content***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string');

		this._split(index);

		const***REMOVED***chunk***REMOVED***=***REMOVED***this.byStart[index];

		if***REMOVED***(chunk)***REMOVED***{
			chunk.prependRight(content);
		}***REMOVED***else***REMOVED***{
			this.outro***REMOVED***=***REMOVED***content***REMOVED***+***REMOVED***this.outro;
		}
		return***REMOVED***this;
	}

	remove(start,***REMOVED***end)***REMOVED***{
		start***REMOVED***=***REMOVED***start***REMOVED***+***REMOVED***this.offset;
		end***REMOVED***=***REMOVED***end***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(this.original.length***REMOVED***!==***REMOVED***0)***REMOVED***{
			while***REMOVED***(start***REMOVED***<***REMOVED***0)***REMOVED***start***REMOVED***+=***REMOVED***this.original.length;
			while***REMOVED***(end***REMOVED***<***REMOVED***0)***REMOVED***end***REMOVED***+=***REMOVED***this.original.length;
		}

		if***REMOVED***(start***REMOVED***===***REMOVED***end)***REMOVED***return***REMOVED***this;

		if***REMOVED***(start***REMOVED***<***REMOVED***0***REMOVED***||***REMOVED***end***REMOVED***>***REMOVED***this.original.length)***REMOVED***throw***REMOVED***new***REMOVED***Error('Character***REMOVED***is***REMOVED***out***REMOVED***of***REMOVED***bounds');
		if***REMOVED***(start***REMOVED***>***REMOVED***end)***REMOVED***throw***REMOVED***new***REMOVED***Error('end***REMOVED***must***REMOVED***be***REMOVED***greater***REMOVED***than***REMOVED***start');

		this._split(start);
		this._split(end);

		let***REMOVED***chunk***REMOVED***=***REMOVED***this.byStart[start];

		while***REMOVED***(chunk)***REMOVED***{
			chunk.intro***REMOVED***=***REMOVED***'';
			chunk.outro***REMOVED***=***REMOVED***'';
			chunk.edit('');

			chunk***REMOVED***=***REMOVED***end***REMOVED***>***REMOVED***chunk.end***REMOVED***?***REMOVED***this.byStart[chunk.end]***REMOVED***:***REMOVED***null;
		}
		return***REMOVED***this;
	}

	reset(start,***REMOVED***end)***REMOVED***{
		start***REMOVED***=***REMOVED***start***REMOVED***+***REMOVED***this.offset;
		end***REMOVED***=***REMOVED***end***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(this.original.length***REMOVED***!==***REMOVED***0)***REMOVED***{
			while***REMOVED***(start***REMOVED***<***REMOVED***0)***REMOVED***start***REMOVED***+=***REMOVED***this.original.length;
			while***REMOVED***(end***REMOVED***<***REMOVED***0)***REMOVED***end***REMOVED***+=***REMOVED***this.original.length;
		}

		if***REMOVED***(start***REMOVED***===***REMOVED***end)***REMOVED***return***REMOVED***this;

		if***REMOVED***(start***REMOVED***<***REMOVED***0***REMOVED***||***REMOVED***end***REMOVED***>***REMOVED***this.original.length)***REMOVED***throw***REMOVED***new***REMOVED***Error('Character***REMOVED***is***REMOVED***out***REMOVED***of***REMOVED***bounds');
		if***REMOVED***(start***REMOVED***>***REMOVED***end)***REMOVED***throw***REMOVED***new***REMOVED***Error('end***REMOVED***must***REMOVED***be***REMOVED***greater***REMOVED***than***REMOVED***start');

		this._split(start);
		this._split(end);

		let***REMOVED***chunk***REMOVED***=***REMOVED***this.byStart[start];

		while***REMOVED***(chunk)***REMOVED***{
			chunk.reset();

			chunk***REMOVED***=***REMOVED***end***REMOVED***>***REMOVED***chunk.end***REMOVED***?***REMOVED***this.byStart[chunk.end]***REMOVED***:***REMOVED***null;
		}
		return***REMOVED***this;
	}

	lastChar()***REMOVED***{
		if***REMOVED***(this.outro.length)***REMOVED***return***REMOVED***this.outro[this.outro.length***REMOVED***-***REMOVED***1];
		let***REMOVED***chunk***REMOVED***=***REMOVED***this.lastChunk;
		do***REMOVED***{
			if***REMOVED***(chunk.outro.length)***REMOVED***return***REMOVED***chunk.outro[chunk.outro.length***REMOVED***-***REMOVED***1];
			if***REMOVED***(chunk.content.length)***REMOVED***return***REMOVED***chunk.content[chunk.content.length***REMOVED***-***REMOVED***1];
			if***REMOVED***(chunk.intro.length)***REMOVED***return***REMOVED***chunk.intro[chunk.intro.length***REMOVED***-***REMOVED***1];
		}***REMOVED***while***REMOVED***((chunk***REMOVED***=***REMOVED***chunk.previous));
		if***REMOVED***(this.intro.length)***REMOVED***return***REMOVED***this.intro[this.intro.length***REMOVED***-***REMOVED***1];
		return***REMOVED***'';
	}

	lastLine()***REMOVED***{
		let***REMOVED***lineIndex***REMOVED***=***REMOVED***this.outro.lastIndexOf(n);
		if***REMOVED***(lineIndex***REMOVED***!==***REMOVED***-1)***REMOVED***return***REMOVED***this.outro.substr(lineIndex***REMOVED***+***REMOVED***1);
		let***REMOVED***lineStr***REMOVED***=***REMOVED***this.outro;
		let***REMOVED***chunk***REMOVED***=***REMOVED***this.lastChunk;
		do***REMOVED***{
			if***REMOVED***(chunk.outro.length***REMOVED***>***REMOVED***0)***REMOVED***{
				lineIndex***REMOVED***=***REMOVED***chunk.outro.lastIndexOf(n);
				if***REMOVED***(lineIndex***REMOVED***!==***REMOVED***-1)***REMOVED***return***REMOVED***chunk.outro.substr(lineIndex***REMOVED***+***REMOVED***1)***REMOVED***+***REMOVED***lineStr;
				lineStr***REMOVED***=***REMOVED***chunk.outro***REMOVED***+***REMOVED***lineStr;
			}

			if***REMOVED***(chunk.content.length***REMOVED***>***REMOVED***0)***REMOVED***{
				lineIndex***REMOVED***=***REMOVED***chunk.content.lastIndexOf(n);
				if***REMOVED***(lineIndex***REMOVED***!==***REMOVED***-1)***REMOVED***return***REMOVED***chunk.content.substr(lineIndex***REMOVED***+***REMOVED***1)***REMOVED***+***REMOVED***lineStr;
				lineStr***REMOVED***=***REMOVED***chunk.content***REMOVED***+***REMOVED***lineStr;
			}

			if***REMOVED***(chunk.intro.length***REMOVED***>***REMOVED***0)***REMOVED***{
				lineIndex***REMOVED***=***REMOVED***chunk.intro.lastIndexOf(n);
				if***REMOVED***(lineIndex***REMOVED***!==***REMOVED***-1)***REMOVED***return***REMOVED***chunk.intro.substr(lineIndex***REMOVED***+***REMOVED***1)***REMOVED***+***REMOVED***lineStr;
				lineStr***REMOVED***=***REMOVED***chunk.intro***REMOVED***+***REMOVED***lineStr;
			}
		}***REMOVED***while***REMOVED***((chunk***REMOVED***=***REMOVED***chunk.previous));
		lineIndex***REMOVED***=***REMOVED***this.intro.lastIndexOf(n);
		if***REMOVED***(lineIndex***REMOVED***!==***REMOVED***-1)***REMOVED***return***REMOVED***this.intro.substr(lineIndex***REMOVED***+***REMOVED***1)***REMOVED***+***REMOVED***lineStr;
		return***REMOVED***this.intro***REMOVED***+***REMOVED***lineStr;
	}

	slice(start***REMOVED***=***REMOVED***0,***REMOVED***end***REMOVED***=***REMOVED***this.original.length***REMOVED***-***REMOVED***this.offset)***REMOVED***{
		start***REMOVED***=***REMOVED***start***REMOVED***+***REMOVED***this.offset;
		end***REMOVED***=***REMOVED***end***REMOVED***+***REMOVED***this.offset;

		if***REMOVED***(this.original.length***REMOVED***!==***REMOVED***0)***REMOVED***{
			while***REMOVED***(start***REMOVED***<***REMOVED***0)***REMOVED***start***REMOVED***+=***REMOVED***this.original.length;
			while***REMOVED***(end***REMOVED***<***REMOVED***0)***REMOVED***end***REMOVED***+=***REMOVED***this.original.length;
		}

		let***REMOVED***result***REMOVED***=***REMOVED***'';

		//***REMOVED***find***REMOVED***start***REMOVED***chunk
		let***REMOVED***chunk***REMOVED***=***REMOVED***this.firstChunk;
		while***REMOVED***(chunk***REMOVED***&&***REMOVED***(chunk.start***REMOVED***>***REMOVED***start***REMOVED***||***REMOVED***chunk.end***REMOVED***<=***REMOVED***start))***REMOVED***{
			//***REMOVED***found***REMOVED***end***REMOVED***chunk***REMOVED***before***REMOVED***start
			if***REMOVED***(chunk.start***REMOVED***<***REMOVED***end***REMOVED***&&***REMOVED***chunk.end***REMOVED***>=***REMOVED***end)***REMOVED***{
				return***REMOVED***result;
			}

			chunk***REMOVED***=***REMOVED***chunk.next;
		}

		if***REMOVED***(chunk***REMOVED***&&***REMOVED***chunk.edited***REMOVED***&&***REMOVED***chunk.start***REMOVED***!==***REMOVED***start)
			throw***REMOVED***new***REMOVED***Error(`Cannot***REMOVED***use***REMOVED***replaced***REMOVED***character***REMOVED***${start}***REMOVED***as***REMOVED***slice***REMOVED***start***REMOVED***anchor.`);

		const***REMOVED***startChunk***REMOVED***=***REMOVED***chunk;
		while***REMOVED***(chunk)***REMOVED***{
			if***REMOVED***(chunk.intro***REMOVED***&&***REMOVED***(startChunk***REMOVED***!==***REMOVED***chunk***REMOVED***||***REMOVED***chunk.start***REMOVED***===***REMOVED***start))***REMOVED***{
				result***REMOVED***+=***REMOVED***chunk.intro;
			}

			const***REMOVED***containsEnd***REMOVED***=***REMOVED***chunk.start***REMOVED***<***REMOVED***end***REMOVED***&&***REMOVED***chunk.end***REMOVED***>=***REMOVED***end;
			if***REMOVED***(containsEnd***REMOVED***&&***REMOVED***chunk.edited***REMOVED***&&***REMOVED***chunk.end***REMOVED***!==***REMOVED***end)
				throw***REMOVED***new***REMOVED***Error(`Cannot***REMOVED***use***REMOVED***replaced***REMOVED***character***REMOVED***${end}***REMOVED***as***REMOVED***slice***REMOVED***end***REMOVED***anchor.`);

			const***REMOVED***sliceStart***REMOVED***=***REMOVED***startChunk***REMOVED***===***REMOVED***chunk***REMOVED***?***REMOVED***start***REMOVED***-***REMOVED***chunk.start***REMOVED***:***REMOVED***0;
			const***REMOVED***sliceEnd***REMOVED***=***REMOVED***containsEnd***REMOVED***?***REMOVED***chunk.content.length***REMOVED***+***REMOVED***end***REMOVED***-***REMOVED***chunk.end***REMOVED***:***REMOVED***chunk.content.length;

			result***REMOVED***+=***REMOVED***chunk.content.slice(sliceStart,***REMOVED***sliceEnd);

			if***REMOVED***(chunk.outro***REMOVED***&&***REMOVED***(!containsEnd***REMOVED***||***REMOVED***chunk.end***REMOVED***===***REMOVED***end))***REMOVED***{
				result***REMOVED***+=***REMOVED***chunk.outro;
			}

			if***REMOVED***(containsEnd)***REMOVED***{
				break;
			}

			chunk***REMOVED***=***REMOVED***chunk.next;
		}

		return***REMOVED***result;
	}

	//***REMOVED***TODO***REMOVED***deprecate***REMOVED***this?***REMOVED***not***REMOVED***really***REMOVED***very***REMOVED***useful
	snip(start,***REMOVED***end)***REMOVED***{
		const***REMOVED***clone***REMOVED***=***REMOVED***this.clone();
		clone.remove(0,***REMOVED***start);
		clone.remove(end,***REMOVED***clone.original.length);

		return***REMOVED***clone;
	}

	_split(index)***REMOVED***{
		if***REMOVED***(this.byStart[index]***REMOVED***||***REMOVED***this.byEnd[index])***REMOVED***return;

		let***REMOVED***chunk***REMOVED***=***REMOVED***this.lastSearchedChunk;
		let***REMOVED***previousChunk***REMOVED***=***REMOVED***chunk;
		const***REMOVED***searchForward***REMOVED***=***REMOVED***index***REMOVED***>***REMOVED***chunk.end;

		while***REMOVED***(chunk)***REMOVED***{
			if***REMOVED***(chunk.contains(index))***REMOVED***return***REMOVED***this._splitChunk(chunk,***REMOVED***index);

			chunk***REMOVED***=***REMOVED***searchForward***REMOVED***?***REMOVED***this.byStart[chunk.end]***REMOVED***:***REMOVED***this.byEnd[chunk.start];

			//***REMOVED***Prevent***REMOVED***infinite***REMOVED***loop***REMOVED***(e.g.***REMOVED***via***REMOVED***empty***REMOVED***chunks,***REMOVED***where***REMOVED***start***REMOVED***===***REMOVED***end)
			if***REMOVED***(chunk***REMOVED***===***REMOVED***previousChunk)***REMOVED***return;

			previousChunk***REMOVED***=***REMOVED***chunk;
		}
	}

	_splitChunk(chunk,***REMOVED***index)***REMOVED***{
		if***REMOVED***(chunk.edited***REMOVED***&&***REMOVED***chunk.content.length)***REMOVED***{
			//***REMOVED***zero-length***REMOVED***edited***REMOVED***chunks***REMOVED***are***REMOVED***a***REMOVED***special***REMOVED***case***REMOVED***(overlapping***REMOVED***replacements)
			const***REMOVED***loc***REMOVED***=***REMOVED***getLocator(this.original)(index);
			throw***REMOVED***new***REMOVED***Error(
				`Cannot***REMOVED***split***REMOVED***a***REMOVED***chunk***REMOVED***that***REMOVED***has***REMOVED***already***REMOVED***been***REMOVED***edited***REMOVED***(${loc.line}:${loc.column}***REMOVED***–***REMOVED***"${chunk.original}")`,
			);
		}

		const***REMOVED***newChunk***REMOVED***=***REMOVED***chunk.split(index);

		this.byEnd[index]***REMOVED***=***REMOVED***chunk;
		this.byStart[index]***REMOVED***=***REMOVED***newChunk;
		this.byEnd[newChunk.end]***REMOVED***=***REMOVED***newChunk;

		if***REMOVED***(chunk***REMOVED***===***REMOVED***this.lastChunk)***REMOVED***this.lastChunk***REMOVED***=***REMOVED***newChunk;

		this.lastSearchedChunk***REMOVED***=***REMOVED***chunk;
		return***REMOVED***true;
	}

	toString()***REMOVED***{
		let***REMOVED***str***REMOVED***=***REMOVED***this.intro;

		let***REMOVED***chunk***REMOVED***=***REMOVED***this.firstChunk;
		while***REMOVED***(chunk)***REMOVED***{
			str***REMOVED***+=***REMOVED***chunk.toString();
			chunk***REMOVED***=***REMOVED***chunk.next;
		}

		return***REMOVED***str***REMOVED***+***REMOVED***this.outro;
	}

	isEmpty()***REMOVED***{
		let***REMOVED***chunk***REMOVED***=***REMOVED***this.firstChunk;
		do***REMOVED***{
			if***REMOVED***(
				(chunk.intro.length***REMOVED***&&***REMOVED***chunk.intro.trim())***REMOVED***||
				(chunk.content.length***REMOVED***&&***REMOVED***chunk.content.trim())***REMOVED***||
				(chunk.outro.length***REMOVED***&&***REMOVED***chunk.outro.trim())
			)
				return***REMOVED***false;
		}***REMOVED***while***REMOVED***((chunk***REMOVED***=***REMOVED***chunk.next));
		return***REMOVED***true;
	}

	length()***REMOVED***{
		let***REMOVED***chunk***REMOVED***=***REMOVED***this.firstChunk;
		let***REMOVED***length***REMOVED***=***REMOVED***0;
		do***REMOVED***{
			length***REMOVED***+=***REMOVED***chunk.intro.length***REMOVED***+***REMOVED***chunk.content.length***REMOVED***+***REMOVED***chunk.outro.length;
		}***REMOVED***while***REMOVED***((chunk***REMOVED***=***REMOVED***chunk.next));
		return***REMOVED***length;
	}

	trimLines()***REMOVED***{
		return***REMOVED***this.trim('[\\r\\n]');
	}

	trim(charType)***REMOVED***{
		return***REMOVED***this.trimStart(charType).trimEnd(charType);
	}

	trimEndAborted(charType)***REMOVED***{
		const***REMOVED***rx***REMOVED***=***REMOVED***new***REMOVED***RegExp((charType***REMOVED***||***REMOVED***'\\s')***REMOVED***+***REMOVED***'+$');

		this.outro***REMOVED***=***REMOVED***this.outro.replace(rx,***REMOVED***'');
		if***REMOVED***(this.outro.length)***REMOVED***return***REMOVED***true;

		let***REMOVED***chunk***REMOVED***=***REMOVED***this.lastChunk;

		do***REMOVED***{
			const***REMOVED***end***REMOVED***=***REMOVED***chunk.end;
			const***REMOVED***aborted***REMOVED***=***REMOVED***chunk.trimEnd(rx);

			//***REMOVED***if***REMOVED***chunk***REMOVED***was***REMOVED***trimmed,***REMOVED***we***REMOVED***have***REMOVED***a***REMOVED***new***REMOVED***lastChunk
			if***REMOVED***(chunk.end***REMOVED***!==***REMOVED***end)***REMOVED***{
				if***REMOVED***(this.lastChunk***REMOVED***===***REMOVED***chunk)***REMOVED***{
					this.lastChunk***REMOVED***=***REMOVED***chunk.next;
				}

				this.byEnd[chunk.end]***REMOVED***=***REMOVED***chunk;
				this.byStart[chunk.next.start]***REMOVED***=***REMOVED***chunk.next;
				this.byEnd[chunk.next.end]***REMOVED***=***REMOVED***chunk.next;
			}

			if***REMOVED***(aborted)***REMOVED***return***REMOVED***true;
			chunk***REMOVED***=***REMOVED***chunk.previous;
		}***REMOVED***while***REMOVED***(chunk);

		return***REMOVED***false;
	}

	trimEnd(charType)***REMOVED***{
		this.trimEndAborted(charType);
		return***REMOVED***this;
	}
	trimStartAborted(charType)***REMOVED***{
		const***REMOVED***rx***REMOVED***=***REMOVED***new***REMOVED***RegExp('^'***REMOVED***+***REMOVED***(charType***REMOVED***||***REMOVED***'\\s')***REMOVED***+***REMOVED***'+');

		this.intro***REMOVED***=***REMOVED***this.intro.replace(rx,***REMOVED***'');
		if***REMOVED***(this.intro.length)***REMOVED***return***REMOVED***true;

		let***REMOVED***chunk***REMOVED***=***REMOVED***this.firstChunk;

		do***REMOVED***{
			const***REMOVED***end***REMOVED***=***REMOVED***chunk.end;
			const***REMOVED***aborted***REMOVED***=***REMOVED***chunk.trimStart(rx);

			if***REMOVED***(chunk.end***REMOVED***!==***REMOVED***end)***REMOVED***{
				//***REMOVED***special***REMOVED***case...
				if***REMOVED***(chunk***REMOVED***===***REMOVED***this.lastChunk)***REMOVED***this.lastChunk***REMOVED***=***REMOVED***chunk.next;

				this.byEnd[chunk.end]***REMOVED***=***REMOVED***chunk;
				this.byStart[chunk.next.start]***REMOVED***=***REMOVED***chunk.next;
				this.byEnd[chunk.next.end]***REMOVED***=***REMOVED***chunk.next;
			}

			if***REMOVED***(aborted)***REMOVED***return***REMOVED***true;
			chunk***REMOVED***=***REMOVED***chunk.next;
		}***REMOVED***while***REMOVED***(chunk);

		return***REMOVED***false;
	}

	trimStart(charType)***REMOVED***{
		this.trimStartAborted(charType);
		return***REMOVED***this;
	}

	hasChanged()***REMOVED***{
		return***REMOVED***this.original***REMOVED***!==***REMOVED***this.toString();
	}

	_replaceRegexp(searchValue,***REMOVED***replacement)***REMOVED***{
		function***REMOVED***getReplacement(match,***REMOVED***str)***REMOVED***{
			if***REMOVED***(typeof***REMOVED***replacement***REMOVED***===***REMOVED***'string')***REMOVED***{
				return***REMOVED***replacement.replace(/\$(\$|&|\d+)/g,***REMOVED***(_,***REMOVED***i)***REMOVED***=>***REMOVED***{
					//***REMOVED***https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_string_as_a_parameter
					if***REMOVED***(i***REMOVED***===***REMOVED***'$')***REMOVED***return***REMOVED***'$';
					if***REMOVED***(i***REMOVED***===***REMOVED***'&')***REMOVED***return***REMOVED***match[0];
					const***REMOVED***num***REMOVED***=***REMOVED***+i;
					if***REMOVED***(num***REMOVED***<***REMOVED***match.length)***REMOVED***return***REMOVED***match[+i];
					return***REMOVED***`$${i}`;
				});
			}***REMOVED***else***REMOVED***{
				return***REMOVED***replacement(...match,***REMOVED***match.index,***REMOVED***str,***REMOVED***match.groups);
			}
		}
		function***REMOVED***matchAll(re,***REMOVED***str)***REMOVED***{
			let***REMOVED***match;
			const***REMOVED***matches***REMOVED***=***REMOVED***[];
			while***REMOVED***((match***REMOVED***=***REMOVED***re.exec(str)))***REMOVED***{
				matches.push(match);
			}
			return***REMOVED***matches;
		}
		if***REMOVED***(searchValue.global)***REMOVED***{
			const***REMOVED***matches***REMOVED***=***REMOVED***matchAll(searchValue,***REMOVED***this.original);
			matches.forEach((match)***REMOVED***=>***REMOVED***{
				if***REMOVED***(match.index***REMOVED***!=***REMOVED***null)***REMOVED***{
					const***REMOVED***replacement***REMOVED***=***REMOVED***getReplacement(match,***REMOVED***this.original);
					if***REMOVED***(replacement***REMOVED***!==***REMOVED***match[0])***REMOVED***{
						this.overwrite(match.index,***REMOVED***match.index***REMOVED***+***REMOVED***match[0].length,***REMOVED***replacement);
					}
				}
			});
		}***REMOVED***else***REMOVED***{
			const***REMOVED***match***REMOVED***=***REMOVED***this.original.match(searchValue);
			if***REMOVED***(match***REMOVED***&&***REMOVED***match.index***REMOVED***!=***REMOVED***null)***REMOVED***{
				const***REMOVED***replacement***REMOVED***=***REMOVED***getReplacement(match,***REMOVED***this.original);
				if***REMOVED***(replacement***REMOVED***!==***REMOVED***match[0])***REMOVED***{
					this.overwrite(match.index,***REMOVED***match.index***REMOVED***+***REMOVED***match[0].length,***REMOVED***replacement);
				}
			}
		}
		return***REMOVED***this;
	}

	_replaceString(string,***REMOVED***replacement)***REMOVED***{
		const***REMOVED***{***REMOVED***original***REMOVED***}***REMOVED***=***REMOVED***this;
		const***REMOVED***index***REMOVED***=***REMOVED***original.indexOf(string);

		if***REMOVED***(index***REMOVED***!==***REMOVED***-1)***REMOVED***{
			if***REMOVED***(typeof***REMOVED***replacement***REMOVED***===***REMOVED***'function')***REMOVED***{
				replacement***REMOVED***=***REMOVED***replacement(string,***REMOVED***index,***REMOVED***original);
			}
			if***REMOVED***(string***REMOVED***!==***REMOVED***replacement)***REMOVED***{
				this.overwrite(index,***REMOVED***index***REMOVED***+***REMOVED***string.length,***REMOVED***replacement);
			}
		}

		return***REMOVED***this;
	}

	replace(searchValue,***REMOVED***replacement)***REMOVED***{
		if***REMOVED***(typeof***REMOVED***searchValue***REMOVED***===***REMOVED***'string')***REMOVED***{
			return***REMOVED***this._replaceString(searchValue,***REMOVED***replacement);
		}

		return***REMOVED***this._replaceRegexp(searchValue,***REMOVED***replacement);
	}

	_replaceAllString(string,***REMOVED***replacement)***REMOVED***{
		const***REMOVED***{***REMOVED***original***REMOVED***}***REMOVED***=***REMOVED***this;
		const***REMOVED***stringLength***REMOVED***=***REMOVED***string.length;
		for***REMOVED***(
			let***REMOVED***index***REMOVED***=***REMOVED***original.indexOf(string);
			index***REMOVED***!==***REMOVED***-1;
			index***REMOVED***=***REMOVED***original.indexOf(string,***REMOVED***index***REMOVED***+***REMOVED***stringLength)
		)***REMOVED***{
			const***REMOVED***previous***REMOVED***=***REMOVED***original.slice(index,***REMOVED***index***REMOVED***+***REMOVED***stringLength);
			let***REMOVED***_replacement***REMOVED***=***REMOVED***replacement;
			if***REMOVED***(typeof***REMOVED***replacement***REMOVED***===***REMOVED***'function')***REMOVED***{
				_replacement***REMOVED***=***REMOVED***replacement(previous,***REMOVED***index,***REMOVED***original);
			}
			if***REMOVED***(previous***REMOVED***!==***REMOVED***_replacement)***REMOVED***this.overwrite(index,***REMOVED***index***REMOVED***+***REMOVED***stringLength,***REMOVED***_replacement);
		}

		return***REMOVED***this;
	}

	replaceAll(searchValue,***REMOVED***replacement)***REMOVED***{
		if***REMOVED***(typeof***REMOVED***searchValue***REMOVED***===***REMOVED***'string')***REMOVED***{
			return***REMOVED***this._replaceAllString(searchValue,***REMOVED***replacement);
		}

		if***REMOVED***(!searchValue.global)***REMOVED***{
			throw***REMOVED***new***REMOVED***TypeError(
				'MagicString.prototype.replaceAll***REMOVED***called***REMOVED***with***REMOVED***a***REMOVED***non-global***REMOVED***RegExp***REMOVED***argument',
			);
		}

		return***REMOVED***this._replaceRegexp(searchValue,***REMOVED***replacement);
	}
}

const***REMOVED***hasOwnProp***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty;

class***REMOVED***Bundle***REMOVED***{
	constructor(options***REMOVED***=***REMOVED***{})***REMOVED***{
		this.intro***REMOVED***=***REMOVED***options.intro***REMOVED***||***REMOVED***'';
		this.separator***REMOVED***=***REMOVED***options.separator***REMOVED***!==***REMOVED***undefined***REMOVED***?***REMOVED***options.separator***REMOVED***:***REMOVED***'\n';
		this.sources***REMOVED***=***REMOVED***[];
		this.uniqueSources***REMOVED***=***REMOVED***[];
		this.uniqueSourceIndexByFilename***REMOVED***=***REMOVED***{};
	}

	addSource(source)***REMOVED***{
		if***REMOVED***(source***REMOVED***instanceof***REMOVED***MagicString)***REMOVED***{
			return***REMOVED***this.addSource({
				content:***REMOVED***source,
				filename:***REMOVED***source.filename,
				separator:***REMOVED***this.separator,
			});
		}

		if***REMOVED***(!isObject(source)***REMOVED***||***REMOVED***!source.content)***REMOVED***{
			throw***REMOVED***new***REMOVED***Error(
				'bundle.addSource()***REMOVED***takes***REMOVED***an***REMOVED***object***REMOVED***with***REMOVED***a***REMOVED***`content`***REMOVED***property,***REMOVED***which***REMOVED***should***REMOVED***be***REMOVED***an***REMOVED***instance***REMOVED***of***REMOVED***MagicString,***REMOVED***and***REMOVED***an***REMOVED***optional***REMOVED***`filename`',
			);
		}

		['filename',***REMOVED***'ignoreList',***REMOVED***'indentExclusionRanges',***REMOVED***'separator'].forEach((option)***REMOVED***=>***REMOVED***{
			if***REMOVED***(!hasOwnProp.call(source,***REMOVED***option))***REMOVED***source[option]***REMOVED***=***REMOVED***source.content[option];
		});

		if***REMOVED***(source.separator***REMOVED***===***REMOVED***undefined)***REMOVED***{
			//***REMOVED***TODO***REMOVED***there's***REMOVED***a***REMOVED***bunch***REMOVED***of***REMOVED***this***REMOVED***sort***REMOVED***of***REMOVED***thing,***REMOVED***needs***REMOVED***cleaning***REMOVED***up
			source.separator***REMOVED***=***REMOVED***this.separator;
		}

		if***REMOVED***(source.filename)***REMOVED***{
			if***REMOVED***(!hasOwnProp.call(this.uniqueSourceIndexByFilename,***REMOVED***source.filename))***REMOVED***{
				this.uniqueSourceIndexByFilename[source.filename]***REMOVED***=***REMOVED***this.uniqueSources.length;
				this.uniqueSources.push({***REMOVED***filename:***REMOVED***source.filename,***REMOVED***content:***REMOVED***source.content.original***REMOVED***});
			}***REMOVED***else***REMOVED***{
				const***REMOVED***uniqueSource***REMOVED***=***REMOVED***this.uniqueSources[this.uniqueSourceIndexByFilename[source.filename]];
				if***REMOVED***(source.content.original***REMOVED***!==***REMOVED***uniqueSource.content)***REMOVED***{
					throw***REMOVED***new***REMOVED***Error(`Illegal***REMOVED***source:***REMOVED***same***REMOVED***filename***REMOVED***(${source.filename}),***REMOVED***different***REMOVED***contents`);
				}
			}
		}

		this.sources.push(source);
		return***REMOVED***this;
	}

	append(str,***REMOVED***options)***REMOVED***{
		this.addSource({
			content:***REMOVED***new***REMOVED***MagicString(str),
			separator:***REMOVED***(options***REMOVED***&&***REMOVED***options.separator)***REMOVED***||***REMOVED***'',
		});

		return***REMOVED***this;
	}

	clone()***REMOVED***{
		const***REMOVED***bundle***REMOVED***=***REMOVED***new***REMOVED***Bundle({
			intro:***REMOVED***this.intro,
			separator:***REMOVED***this.separator,
		});

		this.sources.forEach((source)***REMOVED***=>***REMOVED***{
			bundle.addSource({
				filename:***REMOVED***source.filename,
				content:***REMOVED***source.content.clone(),
				separator:***REMOVED***source.separator,
			});
		});

		return***REMOVED***bundle;
	}

	generateDecodedMap(options***REMOVED***=***REMOVED***{})***REMOVED***{
		const***REMOVED***names***REMOVED***=***REMOVED***[];
		let***REMOVED***x_google_ignoreList***REMOVED***=***REMOVED***undefined;
		this.sources.forEach((source)***REMOVED***=>***REMOVED***{
			Object.keys(source.content.storedNames).forEach((name)***REMOVED***=>***REMOVED***{
				if***REMOVED***(!~names.indexOf(name))***REMOVED***names.push(name);
			});
		});

		const***REMOVED***mappings***REMOVED***=***REMOVED***new***REMOVED***Mappings(options.hires);

		if***REMOVED***(this.intro)***REMOVED***{
			mappings.advance(this.intro);
		}

		this.sources.forEach((source,***REMOVED***i)***REMOVED***=>***REMOVED***{
			if***REMOVED***(i***REMOVED***>***REMOVED***0)***REMOVED***{
				mappings.advance(this.separator);
			}

			const***REMOVED***sourceIndex***REMOVED***=***REMOVED***source.filename***REMOVED***?***REMOVED***this.uniqueSourceIndexByFilename[source.filename]***REMOVED***:***REMOVED***-1;
			const***REMOVED***magicString***REMOVED***=***REMOVED***source.content;
			const***REMOVED***locate***REMOVED***=***REMOVED***getLocator(magicString.original);

			if***REMOVED***(magicString.intro)***REMOVED***{
				mappings.advance(magicString.intro);
			}

			magicString.firstChunk.eachNext((chunk)***REMOVED***=>***REMOVED***{
				const***REMOVED***loc***REMOVED***=***REMOVED***locate(chunk.start);

				if***REMOVED***(chunk.intro.length)***REMOVED***mappings.advance(chunk.intro);

				if***REMOVED***(source.filename)***REMOVED***{
					if***REMOVED***(chunk.edited)***REMOVED***{
						mappings.addEdit(
							sourceIndex,
							chunk.content,
							loc,
							chunk.storeName***REMOVED***?***REMOVED***names.indexOf(chunk.original)***REMOVED***:***REMOVED***-1,
						);
					}***REMOVED***else***REMOVED***{
						mappings.addUneditedChunk(
							sourceIndex,
							chunk,
							magicString.original,
							loc,
							magicString.sourcemapLocations,
						);
					}
				}***REMOVED***else***REMOVED***{
					mappings.advance(chunk.content);
				}

				if***REMOVED***(chunk.outro.length)***REMOVED***mappings.advance(chunk.outro);
			});

			if***REMOVED***(magicString.outro)***REMOVED***{
				mappings.advance(magicString.outro);
			}

			if***REMOVED***(source.ignoreList***REMOVED***&&***REMOVED***sourceIndex***REMOVED***!==***REMOVED***-1)***REMOVED***{
				if***REMOVED***(x_google_ignoreList***REMOVED***===***REMOVED***undefined)***REMOVED***{
					x_google_ignoreList***REMOVED***=***REMOVED***[];
				}
				x_google_ignoreList.push(sourceIndex);
			}
		});

		return***REMOVED***{
			file:***REMOVED***options.file***REMOVED***?***REMOVED***options.file.split(/[/\\]/).pop()***REMOVED***:***REMOVED***undefined,
			sources:***REMOVED***this.uniqueSources.map((source)***REMOVED***=>***REMOVED***{
				return***REMOVED***options.file***REMOVED***?***REMOVED***getRelativePath(options.file,***REMOVED***source.filename)***REMOVED***:***REMOVED***source.filename;
			}),
			sourcesContent:***REMOVED***this.uniqueSources.map((source)***REMOVED***=>***REMOVED***{
				return***REMOVED***options.includeContent***REMOVED***?***REMOVED***source.content***REMOVED***:***REMOVED***null;
			}),
			names,
			mappings:***REMOVED***mappings.raw,
			x_google_ignoreList,
		};
	}

	generateMap(options)***REMOVED***{
		return***REMOVED***new***REMOVED***SourceMap(this.generateDecodedMap(options));
	}

	getIndentString()***REMOVED***{
		const***REMOVED***indentStringCounts***REMOVED***=***REMOVED***{};

		this.sources.forEach((source)***REMOVED***=>***REMOVED***{
			const***REMOVED***indentStr***REMOVED***=***REMOVED***source.content._getRawIndentString();

			if***REMOVED***(indentStr***REMOVED***===***REMOVED***null)***REMOVED***return;

			if***REMOVED***(!indentStringCounts[indentStr])***REMOVED***indentStringCounts[indentStr]***REMOVED***=***REMOVED***0;
			indentStringCounts[indentStr]***REMOVED***+=***REMOVED***1;
		});

		return***REMOVED***(
			Object.keys(indentStringCounts).sort((a,***REMOVED***b)***REMOVED***=>***REMOVED***{
				return***REMOVED***indentStringCounts[a]***REMOVED***-***REMOVED***indentStringCounts[b];
			})[0]***REMOVED***||***REMOVED***'\t'
		);
	}

	indent(indentStr)***REMOVED***{
		if***REMOVED***(!arguments.length)***REMOVED***{
			indentStr***REMOVED***=***REMOVED***this.getIndentString();
		}

		if***REMOVED***(indentStr***REMOVED***===***REMOVED***'')***REMOVED***return***REMOVED***this;***REMOVED***//***REMOVED***noop

		let***REMOVED***trailingNewline***REMOVED***=***REMOVED***!this.intro***REMOVED***||***REMOVED***this.intro.slice(-1)***REMOVED***===***REMOVED***'\n';

		this.sources.forEach((source,***REMOVED***i)***REMOVED***=>***REMOVED***{
			const***REMOVED***separator***REMOVED***=***REMOVED***source.separator***REMOVED***!==***REMOVED***undefined***REMOVED***?***REMOVED***source.separator***REMOVED***:***REMOVED***this.separator;
			const***REMOVED***indentStart***REMOVED***=***REMOVED***trailingNewline***REMOVED***||***REMOVED***(i***REMOVED***>***REMOVED***0***REMOVED***&&***REMOVED***/\r?\n$/.test(separator));

			source.content.indent(indentStr,***REMOVED***{
				exclude:***REMOVED***source.indentExclusionRanges,
				indentStart,***REMOVED***//:***REMOVED***trailingNewline***REMOVED***||***REMOVED***/\r?\n$/.test(***REMOVED***separator***REMOVED***)***REMOVED******REMOVED***//true///\r?\n/.test(***REMOVED***separator***REMOVED***)
			});

			trailingNewline***REMOVED***=***REMOVED***source.content.lastChar()***REMOVED***===***REMOVED***'\n';
		});

		if***REMOVED***(this.intro)***REMOVED***{
			this.intro***REMOVED***=
				indentStr***REMOVED***+
				this.intro.replace(/^[^\n]/gm,***REMOVED***(match,***REMOVED***index)***REMOVED***=>***REMOVED***{
					return***REMOVED***index***REMOVED***>***REMOVED***0***REMOVED***?***REMOVED***indentStr***REMOVED***+***REMOVED***match***REMOVED***:***REMOVED***match;
				});
		}

		return***REMOVED***this;
	}

	prepend(str)***REMOVED***{
		this.intro***REMOVED***=***REMOVED***str***REMOVED***+***REMOVED***this.intro;
		return***REMOVED***this;
	}

	toString()***REMOVED***{
		const***REMOVED***body***REMOVED***=***REMOVED***this.sources
			.map((source,***REMOVED***i)***REMOVED***=>***REMOVED***{
				const***REMOVED***separator***REMOVED***=***REMOVED***source.separator***REMOVED***!==***REMOVED***undefined***REMOVED***?***REMOVED***source.separator***REMOVED***:***REMOVED***this.separator;
				const***REMOVED***str***REMOVED***=***REMOVED***(i***REMOVED***>***REMOVED***0***REMOVED***?***REMOVED***separator***REMOVED***:***REMOVED***'')***REMOVED***+***REMOVED***source.content.toString();

				return***REMOVED***str;
			})
			.join('');

		return***REMOVED***this.intro***REMOVED***+***REMOVED***body;
	}

	isEmpty()***REMOVED***{
		if***REMOVED***(this.intro.length***REMOVED***&&***REMOVED***this.intro.trim())***REMOVED***return***REMOVED***false;
		if***REMOVED***(this.sources.some((source)***REMOVED***=>***REMOVED***!source.content.isEmpty()))***REMOVED***return***REMOVED***false;
		return***REMOVED***true;
	}

	length()***REMOVED***{
		return***REMOVED***this.sources.reduce(
			(length,***REMOVED***source)***REMOVED***=>***REMOVED***length***REMOVED***+***REMOVED***source.content.length(),
			this.intro.length,
		);
	}

	trimLines()***REMOVED***{
		return***REMOVED***this.trim('[\\r\\n]');
	}

	trim(charType)***REMOVED***{
		return***REMOVED***this.trimStart(charType).trimEnd(charType);
	}

	trimStart(charType)***REMOVED***{
		const***REMOVED***rx***REMOVED***=***REMOVED***new***REMOVED***RegExp('^'***REMOVED***+***REMOVED***(charType***REMOVED***||***REMOVED***'\\s')***REMOVED***+***REMOVED***'+');
		this.intro***REMOVED***=***REMOVED***this.intro.replace(rx,***REMOVED***'');

		if***REMOVED***(!this.intro)***REMOVED***{
			let***REMOVED***source;
			let***REMOVED***i***REMOVED***=***REMOVED***0;

			do***REMOVED***{
				source***REMOVED***=***REMOVED***this.sources[i++];
				if***REMOVED***(!source)***REMOVED***{
					break;
				}
			}***REMOVED***while***REMOVED***(!source.content.trimStartAborted(charType));
		}

		return***REMOVED***this;
	}

	trimEnd(charType)***REMOVED***{
		const***REMOVED***rx***REMOVED***=***REMOVED***new***REMOVED***RegExp((charType***REMOVED***||***REMOVED***'\\s')***REMOVED***+***REMOVED***'+$');

		let***REMOVED***source;
		let***REMOVED***i***REMOVED***=***REMOVED***this.sources.length***REMOVED***-***REMOVED***1;

		do***REMOVED***{
			source***REMOVED***=***REMOVED***this.sources[i--];
			if***REMOVED***(!source)***REMOVED***{
				this.intro***REMOVED***=***REMOVED***this.intro.replace(rx,***REMOVED***'');
				break;
			}
		}***REMOVED***while***REMOVED***(!source.content.trimEndAborted(charType));

		return***REMOVED***this;
	}
}

MagicString.Bundle***REMOVED***=***REMOVED***Bundle;
MagicString.SourceMap***REMOVED***=***REMOVED***SourceMap;
MagicString.default***REMOVED***=***REMOVED***MagicString;***REMOVED***//***REMOVED***work***REMOVED***around***REMOVED***TypeScript***REMOVED***bug***REMOVED***https://github.com/Rich-Harris/magic-string/pull/121

module.exports***REMOVED***=***REMOVED***MagicString;
//#***REMOVED***sourceMappingURL=magic-string.cjs.js.map
