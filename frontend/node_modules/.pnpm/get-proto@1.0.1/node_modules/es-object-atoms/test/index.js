'use***REMOVED***strict';

var***REMOVED***test***REMOVED***=***REMOVED***require('tape');

var***REMOVED***$Object***REMOVED***=***REMOVED***require('../');
var***REMOVED***isObject***REMOVED***=***REMOVED***require('../isObject');
var***REMOVED***ToObject***REMOVED***=***REMOVED***require('../ToObject');
var***REMOVED***RequireObjectCoercible***REMOVED***=***REMOVED***require('..//RequireObjectCoercible');

test('errors',***REMOVED***function***REMOVED***(t)***REMOVED***{
	t.equal($Object,***REMOVED***Object);
	//***REMOVED***@ts-expect-error
	t['throws'](function***REMOVED***()***REMOVED***{***REMOVED***ToObject(null);***REMOVED***},***REMOVED***TypeError);
	//***REMOVED***@ts-expect-error
	t['throws'](function***REMOVED***()***REMOVED***{***REMOVED***ToObject(undefined);***REMOVED***},***REMOVED***TypeError);
	//***REMOVED***@ts-expect-error
	t['throws'](function***REMOVED***()***REMOVED***{***REMOVED***RequireObjectCoercible(null);***REMOVED***},***REMOVED***TypeError);
	//***REMOVED***@ts-expect-error
	t['throws'](function***REMOVED***()***REMOVED***{***REMOVED***RequireObjectCoercible(undefined);***REMOVED***},***REMOVED***TypeError);

	t.deepEqual(RequireObjectCoercible(true),***REMOVED***true);
	t.deepEqual(ToObject(true),***REMOVED***Object(true));
	t.deepEqual(ToObject(42),***REMOVED***Object(42));
	var***REMOVED***f***REMOVED***=***REMOVED***function***REMOVED***()***REMOVED***{};
	t.equal(ToObject(f),***REMOVED***f);

	t.equal(isObject(undefined),***REMOVED***false);
	t.equal(isObject(null),***REMOVED***false);
	t.equal(isObject({}),***REMOVED***true);
	t.equal(isObject([]),***REMOVED***true);
	t.equal(isObject(function***REMOVED***()***REMOVED***{}),***REMOVED***true);

	var***REMOVED***obj***REMOVED***=***REMOVED***{};
	t.equal(RequireObjectCoercible(obj),***REMOVED***obj);
	t.equal(ToObject(obj),***REMOVED***obj);

	t.end();
});
