export***REMOVED***interface***REMOVED***BundleOptions***REMOVED***{
	intro?:***REMOVED***string;
	separator?:***REMOVED***string;
}

export***REMOVED***interface***REMOVED***SourceMapOptions***REMOVED***{
	/**
	***REMOVED*******REMOVED***Whether***REMOVED***the***REMOVED***mapping***REMOVED***should***REMOVED***be***REMOVED***high-resolution.
	***REMOVED*******REMOVED***Hi-res***REMOVED***mappings***REMOVED***map***REMOVED***every***REMOVED***single***REMOVED***character,***REMOVED***meaning***REMOVED***(for***REMOVED***example)***REMOVED***your***REMOVED***devtools***REMOVED***will***REMOVED***always
	***REMOVED*******REMOVED***be***REMOVED***able***REMOVED***to***REMOVED***pinpoint***REMOVED***the***REMOVED***exact***REMOVED***location***REMOVED***of***REMOVED***function***REMOVED***calls***REMOVED***and***REMOVED***so***REMOVED***on.
	***REMOVED*******REMOVED***With***REMOVED***lo-res***REMOVED***mappings,***REMOVED***devtools***REMOVED***may***REMOVED***only***REMOVED***be***REMOVED***able***REMOVED***to***REMOVED***identify***REMOVED***the***REMOVED***correct
	***REMOVED*******REMOVED***line***REMOVED***-***REMOVED***but***REMOVED***they're***REMOVED***quicker***REMOVED***to***REMOVED***generate***REMOVED***and***REMOVED***less***REMOVED***bulky.
	***REMOVED*******REMOVED***You***REMOVED***can***REMOVED***also***REMOVED***set***REMOVED***`"boundary"`***REMOVED***to***REMOVED***generate***REMOVED***a***REMOVED***semi-hi-res***REMOVED***mappings***REMOVED***segmented***REMOVED***per***REMOVED***word***REMOVED***boundary
	***REMOVED*******REMOVED***instead***REMOVED***of***REMOVED***per***REMOVED***character,***REMOVED***suitable***REMOVED***for***REMOVED***string***REMOVED***semantics***REMOVED***that***REMOVED***are***REMOVED***separated***REMOVED***by***REMOVED***words.
	***REMOVED*******REMOVED***If***REMOVED***sourcemap***REMOVED***locations***REMOVED***have***REMOVED***been***REMOVED***specified***REMOVED***with***REMOVED***s.addSourceMapLocation(),***REMOVED***they***REMOVED***will***REMOVED***be***REMOVED***used***REMOVED***here.
	***REMOVED****/
	hires?:***REMOVED***boolean***REMOVED***|***REMOVED***'boundary';
	/**
	***REMOVED*******REMOVED***The***REMOVED***filename***REMOVED***where***REMOVED***you***REMOVED***plan***REMOVED***to***REMOVED***write***REMOVED***the***REMOVED***sourcemap.
	***REMOVED****/
	file?:***REMOVED***string;
	/**
	***REMOVED*******REMOVED***The***REMOVED***filename***REMOVED***of***REMOVED***the***REMOVED***file***REMOVED***containing***REMOVED***the***REMOVED***original***REMOVED***source.
	***REMOVED****/
	source?:***REMOVED***string;
	/**
	***REMOVED*******REMOVED***Whether***REMOVED***to***REMOVED***include***REMOVED***the***REMOVED***original***REMOVED***content***REMOVED***in***REMOVED***the***REMOVED***map's***REMOVED***sourcesContent***REMOVED***array.
	***REMOVED****/
	includeContent?:***REMOVED***boolean;
}

export***REMOVED***type***REMOVED***SourceMapSegment***REMOVED***=
	|***REMOVED***[number]
	|***REMOVED***[number,***REMOVED***number,***REMOVED***number,***REMOVED***number]
	|***REMOVED***[number,***REMOVED***number,***REMOVED***number,***REMOVED***number,***REMOVED***number];

export***REMOVED***interface***REMOVED***DecodedSourceMap***REMOVED***{
	file:***REMOVED***string;
	sources:***REMOVED***string[];
	sourcesContent?:***REMOVED***string[];
	names:***REMOVED***string[];
	mappings:***REMOVED***SourceMapSegment[][];
	x_google_ignoreList?:***REMOVED***number[];
}

export***REMOVED***class***REMOVED***SourceMap***REMOVED***{
	constructor(properties:***REMOVED***DecodedSourceMap);

	version:***REMOVED***number;
	file:***REMOVED***string;
	sources:***REMOVED***string[];
	sourcesContent?:***REMOVED***string[];
	names:***REMOVED***string[];
	mappings:***REMOVED***string;
	x_google_ignoreList?:***REMOVED***number[];
	debugId?:***REMOVED***string;

	/**
	***REMOVED*******REMOVED***Returns***REMOVED***the***REMOVED***equivalent***REMOVED***of***REMOVED***`JSON.stringify(map)`
	***REMOVED****/
	toString():***REMOVED***string;
	/**
	***REMOVED*******REMOVED***Returns***REMOVED***a***REMOVED***DataURI***REMOVED***containing***REMOVED***the***REMOVED***sourcemap.***REMOVED***Useful***REMOVED***for***REMOVED***doing***REMOVED***this***REMOVED***sort***REMOVED***of***REMOVED***thing:
	***REMOVED*******REMOVED***`generateMap(options?:***REMOVED***SourceMapOptions):***REMOVED***SourceMap;`
	***REMOVED****/
	toUrl():***REMOVED***string;
}

export***REMOVED***class***REMOVED***Bundle***REMOVED***{
	constructor(options?:***REMOVED***BundleOptions);
	/**
	***REMOVED*******REMOVED***Adds***REMOVED***the***REMOVED***specified***REMOVED***source***REMOVED***to***REMOVED***the***REMOVED***bundle,***REMOVED***which***REMOVED***can***REMOVED***either***REMOVED***be***REMOVED***a***REMOVED***`MagicString`***REMOVED***object***REMOVED***directly,
	***REMOVED*******REMOVED***or***REMOVED***an***REMOVED***options***REMOVED***object***REMOVED***that***REMOVED***holds***REMOVED***a***REMOVED***magic***REMOVED***string***REMOVED***`content`***REMOVED***property***REMOVED***and***REMOVED***optionally***REMOVED***provides
	***REMOVED*******REMOVED***a***REMOVED***`filename`***REMOVED***for***REMOVED***the***REMOVED***source***REMOVED***within***REMOVED***the***REMOVED***bundle,***REMOVED***as***REMOVED***well***REMOVED***as***REMOVED***an***REMOVED***optional***REMOVED***`ignoreList`***REMOVED***hint
	***REMOVED*******REMOVED***(which***REMOVED***defaults***REMOVED***to***REMOVED***`false`).***REMOVED***The***REMOVED***`filename`***REMOVED***is***REMOVED***used***REMOVED***when***REMOVED***constructing***REMOVED***the***REMOVED***source***REMOVED***map***REMOVED***for***REMOVED***the
	***REMOVED*******REMOVED***bundle,***REMOVED***to***REMOVED***identify***REMOVED***this***REMOVED***`source`***REMOVED***in***REMOVED***the***REMOVED***source***REMOVED***map's***REMOVED***`sources`***REMOVED***field.***REMOVED***The***REMOVED***`ignoreList`***REMOVED***hint
	***REMOVED*******REMOVED***is***REMOVED***used***REMOVED***to***REMOVED***populate***REMOVED***the***REMOVED***`x_google_ignoreList`***REMOVED***extension***REMOVED***field***REMOVED***in***REMOVED***the***REMOVED***source***REMOVED***map,***REMOVED***which***REMOVED***is***REMOVED***a
	***REMOVED*******REMOVED***mechanism***REMOVED***for***REMOVED***tools***REMOVED***to***REMOVED***signal***REMOVED***to***REMOVED***debuggers***REMOVED***that***REMOVED***certain***REMOVED***sources***REMOVED***should***REMOVED***be***REMOVED***ignored***REMOVED***by***REMOVED***default
	***REMOVED*******REMOVED***(depending***REMOVED***on***REMOVED***user***REMOVED***preferences).
	***REMOVED****/
	addSource(
		source:***REMOVED***MagicString***REMOVED***|***REMOVED***{***REMOVED***filename?:***REMOVED***string;***REMOVED***content:***REMOVED***MagicString;***REMOVED***ignoreList?:***REMOVED***boolean***REMOVED***},
	):***REMOVED***this;
	append(str:***REMOVED***string,***REMOVED***options?:***REMOVED***BundleOptions):***REMOVED***this;
	clone():***REMOVED***this;
	generateMap(
		options?:***REMOVED***SourceMapOptions,
	):***REMOVED***Omit<SourceMap,***REMOVED***'sourcesContent'>***REMOVED***&***REMOVED***{***REMOVED***sourcesContent:***REMOVED***Array<string***REMOVED***|***REMOVED***null>***REMOVED***};
	generateDecodedMap(
		options?:***REMOVED***SourceMapOptions,
	):***REMOVED***Omit<DecodedSourceMap,***REMOVED***'sourcesContent'>***REMOVED***&***REMOVED***{***REMOVED***sourcesContent:***REMOVED***Array<string***REMOVED***|***REMOVED***null>***REMOVED***};
	getIndentString():***REMOVED***string;
	indent(indentStr?:***REMOVED***string):***REMOVED***this;
	indentExclusionRanges:***REMOVED***ExclusionRange***REMOVED***|***REMOVED***Array<ExclusionRange>;
	prepend(str:***REMOVED***string):***REMOVED***this;
	toString():***REMOVED***string;
	trimLines():***REMOVED***this;
	trim(charType?:***REMOVED***string):***REMOVED***this;
	trimStart(charType?:***REMOVED***string):***REMOVED***this;
	trimEnd(charType?:***REMOVED***string):***REMOVED***this;
	isEmpty():***REMOVED***boolean;
	length():***REMOVED***number;
}

export***REMOVED***type***REMOVED***ExclusionRange***REMOVED***=***REMOVED***[number,***REMOVED***number];

export***REMOVED***interface***REMOVED***MagicStringOptions***REMOVED***{
	filename?:***REMOVED***string;
	indentExclusionRanges?:***REMOVED***ExclusionRange***REMOVED***|***REMOVED***Array<ExclusionRange>;
	offset?:***REMOVED***number;
}

export***REMOVED***interface***REMOVED***IndentOptions***REMOVED***{
	exclude?:***REMOVED***ExclusionRange***REMOVED***|***REMOVED***Array<ExclusionRange>;
	indentStart?:***REMOVED***boolean;
}

export***REMOVED***interface***REMOVED***OverwriteOptions***REMOVED***{
	storeName?:***REMOVED***boolean;
	contentOnly?:***REMOVED***boolean;
}

export***REMOVED***interface***REMOVED***UpdateOptions***REMOVED***{
	storeName?:***REMOVED***boolean;
	overwrite?:***REMOVED***boolean;
}

export***REMOVED***default***REMOVED***class***REMOVED***MagicString***REMOVED***{
	constructor(str:***REMOVED***string,***REMOVED***options?:***REMOVED***MagicStringOptions);
	/**
	***REMOVED*******REMOVED***Adds***REMOVED***the***REMOVED***specified***REMOVED***character***REMOVED***index***REMOVED***(with***REMOVED***respect***REMOVED***to***REMOVED***the***REMOVED***original***REMOVED***string)***REMOVED***to***REMOVED***sourcemap***REMOVED***mappings,***REMOVED***if***REMOVED***`hires`***REMOVED***is***REMOVED***false.
	***REMOVED****/
	addSourcemapLocation(char:***REMOVED***number):***REMOVED***void;
	/**
	***REMOVED*******REMOVED***Appends***REMOVED***the***REMOVED***specified***REMOVED***content***REMOVED***to***REMOVED***the***REMOVED***end***REMOVED***of***REMOVED***the***REMOVED***string.
	***REMOVED****/
	append(content:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Appends***REMOVED***the***REMOVED***specified***REMOVED***content***REMOVED***at***REMOVED***the***REMOVED***index***REMOVED***in***REMOVED***the***REMOVED***original***REMOVED***string.
	***REMOVED*******REMOVED***If***REMOVED***a***REMOVED***range***REMOVED****ending****REMOVED***with***REMOVED***index***REMOVED***is***REMOVED***subsequently***REMOVED***moved,***REMOVED***the***REMOVED***insert***REMOVED***will***REMOVED***be***REMOVED***moved***REMOVED***with***REMOVED***it.
	***REMOVED*******REMOVED***See***REMOVED***also***REMOVED***`s.prependLeft(...)`.
	***REMOVED****/
	appendLeft(index:***REMOVED***number,***REMOVED***content:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Appends***REMOVED***the***REMOVED***specified***REMOVED***content***REMOVED***at***REMOVED***the***REMOVED***index***REMOVED***in***REMOVED***the***REMOVED***original***REMOVED***string.
	***REMOVED*******REMOVED***If***REMOVED***a***REMOVED***range***REMOVED****starting****REMOVED***with***REMOVED***index***REMOVED***is***REMOVED***subsequently***REMOVED***moved,***REMOVED***the***REMOVED***insert***REMOVED***will***REMOVED***be***REMOVED***moved***REMOVED***with***REMOVED***it.
	***REMOVED*******REMOVED***See***REMOVED***also***REMOVED***`s.prependRight(...)`.
	***REMOVED****/
	appendRight(index:***REMOVED***number,***REMOVED***content:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Does***REMOVED***what***REMOVED***you'd***REMOVED***expect.
	***REMOVED****/
	clone():***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Generates***REMOVED***a***REMOVED***version***REMOVED***3***REMOVED***sourcemap.
	***REMOVED****/
	generateMap(options?:***REMOVED***SourceMapOptions):***REMOVED***SourceMap;
	/**
	***REMOVED*******REMOVED***Generates***REMOVED***a***REMOVED***sourcemap***REMOVED***object***REMOVED***with***REMOVED***raw***REMOVED***mappings***REMOVED***in***REMOVED***array***REMOVED***form,***REMOVED***rather***REMOVED***than***REMOVED***encoded***REMOVED***as***REMOVED***a***REMOVED***string.
	***REMOVED*******REMOVED***Useful***REMOVED***if***REMOVED***you***REMOVED***need***REMOVED***to***REMOVED***manipulate***REMOVED***the***REMOVED***sourcemap***REMOVED***further,***REMOVED***but***REMOVED***most***REMOVED***of***REMOVED***the***REMOVED***time***REMOVED***you***REMOVED***will***REMOVED***use***REMOVED***`generateMap`***REMOVED***instead.
	***REMOVED****/
	generateDecodedMap(options?:***REMOVED***SourceMapOptions):***REMOVED***DecodedSourceMap;
	getIndentString():***REMOVED***string;

	/**
	***REMOVED*******REMOVED***Prefixes***REMOVED***each***REMOVED***line***REMOVED***of***REMOVED***the***REMOVED***string***REMOVED***with***REMOVED***prefix.
	***REMOVED*******REMOVED***If***REMOVED***prefix***REMOVED***is***REMOVED***not***REMOVED***supplied,***REMOVED***the***REMOVED***indentation***REMOVED***will***REMOVED***be***REMOVED***guessed***REMOVED***from***REMOVED***the***REMOVED***original***REMOVED***content,***REMOVED***falling***REMOVED***back***REMOVED***to***REMOVED***a***REMOVED***single***REMOVED***tab***REMOVED***character.
	***REMOVED****/
	indent(options?:***REMOVED***IndentOptions):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Prefixes***REMOVED***each***REMOVED***line***REMOVED***of***REMOVED***the***REMOVED***string***REMOVED***with***REMOVED***prefix.
	***REMOVED*******REMOVED***If***REMOVED***prefix***REMOVED***is***REMOVED***not***REMOVED***supplied,***REMOVED***the***REMOVED***indentation***REMOVED***will***REMOVED***be***REMOVED***guessed***REMOVED***from***REMOVED***the***REMOVED***original***REMOVED***content,***REMOVED***falling***REMOVED***back***REMOVED***to***REMOVED***a***REMOVED***single***REMOVED***tab***REMOVED***character.
	***REMOVED****
	***REMOVED*******REMOVED***The***REMOVED***options***REMOVED***argument***REMOVED***can***REMOVED***have***REMOVED***an***REMOVED***exclude***REMOVED***property,***REMOVED***which***REMOVED***is***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***[start,***REMOVED***end]***REMOVED***character***REMOVED***ranges.
	***REMOVED*******REMOVED***These***REMOVED***ranges***REMOVED***will***REMOVED***be***REMOVED***excluded***REMOVED***from***REMOVED***the***REMOVED***indentation***REMOVED***-***REMOVED***useful***REMOVED***for***REMOVED***(e.g.)***REMOVED***multiline***REMOVED***strings.
	***REMOVED****/
	indent(indentStr?:***REMOVED***string,***REMOVED***options?:***REMOVED***IndentOptions):***REMOVED***this;
	indentExclusionRanges:***REMOVED***ExclusionRange***REMOVED***|***REMOVED***Array<ExclusionRange>;

	/**
	***REMOVED*******REMOVED***Moves***REMOVED***the***REMOVED***characters***REMOVED***from***REMOVED***`start`***REMOVED***and***REMOVED***`end`***REMOVED***to***REMOVED***`index`.
	***REMOVED****/
	move(start:***REMOVED***number,***REMOVED***end:***REMOVED***number,***REMOVED***index:***REMOVED***number):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Replaces***REMOVED***the***REMOVED***characters***REMOVED***from***REMOVED***`start`***REMOVED***to***REMOVED***`end`***REMOVED***with***REMOVED***`content`,***REMOVED***along***REMOVED***with***REMOVED***the***REMOVED***appended/prepended***REMOVED***content***REMOVED***in
	***REMOVED*******REMOVED***that***REMOVED***range.***REMOVED***The***REMOVED***same***REMOVED***restrictions***REMOVED***as***REMOVED***`s.remove()`***REMOVED***apply.
	***REMOVED****
	***REMOVED*******REMOVED***The***REMOVED***fourth***REMOVED***argument***REMOVED***is***REMOVED***optional.***REMOVED***It***REMOVED***can***REMOVED***have***REMOVED***a***REMOVED***storeName***REMOVED***property***REMOVED***—***REMOVED***if***REMOVED***true,***REMOVED***the***REMOVED***original***REMOVED***name***REMOVED***will***REMOVED***be***REMOVED***stored
	***REMOVED*******REMOVED***for***REMOVED***later***REMOVED***inclusion***REMOVED***in***REMOVED***a***REMOVED***sourcemap's***REMOVED***names***REMOVED***array***REMOVED***—***REMOVED***and***REMOVED***a***REMOVED***contentOnly***REMOVED***property***REMOVED***which***REMOVED***determines***REMOVED***whether***REMOVED***only
	***REMOVED*******REMOVED***the***REMOVED***content***REMOVED***is***REMOVED***overwritten,***REMOVED***or***REMOVED***anything***REMOVED***that***REMOVED***was***REMOVED***appended/prepended***REMOVED***to***REMOVED***the***REMOVED***range***REMOVED***as***REMOVED***well.
	***REMOVED****
	***REMOVED*******REMOVED***It***REMOVED***may***REMOVED***be***REMOVED***preferred***REMOVED***to***REMOVED***use***REMOVED***`s.update(...)`***REMOVED***instead***REMOVED***if***REMOVED***you***REMOVED***wish***REMOVED***to***REMOVED***avoid***REMOVED***overwriting***REMOVED***the***REMOVED***appended/prepended***REMOVED***content.
	***REMOVED****/
	overwrite(
		start:***REMOVED***number,
		end:***REMOVED***number,
		content:***REMOVED***string,
		options?:***REMOVED***boolean***REMOVED***|***REMOVED***OverwriteOptions,
	):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Replaces***REMOVED***the***REMOVED***characters***REMOVED***from***REMOVED***`start`***REMOVED***to***REMOVED***`end`***REMOVED***with***REMOVED***`content`.***REMOVED***The***REMOVED***same***REMOVED***restrictions***REMOVED***as***REMOVED***`s.remove()`***REMOVED***apply.
	***REMOVED****
	***REMOVED*******REMOVED***The***REMOVED***fourth***REMOVED***argument***REMOVED***is***REMOVED***optional.***REMOVED***It***REMOVED***can***REMOVED***have***REMOVED***a***REMOVED***storeName***REMOVED***property***REMOVED***—***REMOVED***if***REMOVED***true,***REMOVED***the***REMOVED***original***REMOVED***name***REMOVED***will***REMOVED***be***REMOVED***stored
	***REMOVED*******REMOVED***for***REMOVED***later***REMOVED***inclusion***REMOVED***in***REMOVED***a***REMOVED***sourcemap's***REMOVED***names***REMOVED***array***REMOVED***—***REMOVED***and***REMOVED***an***REMOVED***overwrite***REMOVED***property***REMOVED***which***REMOVED***determines***REMOVED***whether***REMOVED***only
	***REMOVED*******REMOVED***the***REMOVED***content***REMOVED***is***REMOVED***overwritten,***REMOVED***or***REMOVED***anything***REMOVED***that***REMOVED***was***REMOVED***appended/prepended***REMOVED***to***REMOVED***the***REMOVED***range***REMOVED***as***REMOVED***well.
	***REMOVED****/
	update(start:***REMOVED***number,***REMOVED***end:***REMOVED***number,***REMOVED***content:***REMOVED***string,***REMOVED***options?:***REMOVED***boolean***REMOVED***|***REMOVED***UpdateOptions):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Prepends***REMOVED***the***REMOVED***string***REMOVED***with***REMOVED***the***REMOVED***specified***REMOVED***content.
	***REMOVED****/
	prepend(content:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Same***REMOVED***as***REMOVED***`s.appendLeft(...)`,***REMOVED***except***REMOVED***that***REMOVED***the***REMOVED***inserted***REMOVED***content***REMOVED***will***REMOVED***go***REMOVED****before****REMOVED***any***REMOVED***previous***REMOVED***appends***REMOVED***or***REMOVED***prepends***REMOVED***at***REMOVED***index
	***REMOVED****/
	prependLeft(index:***REMOVED***number,***REMOVED***content:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Same***REMOVED***as***REMOVED***`s.appendRight(...)`,***REMOVED***except***REMOVED***that***REMOVED***the***REMOVED***inserted***REMOVED***content***REMOVED***will***REMOVED***go***REMOVED****before****REMOVED***any***REMOVED***previous***REMOVED***appends***REMOVED***or***REMOVED***prepends***REMOVED***at***REMOVED***`index`
	***REMOVED****/
	prependRight(index:***REMOVED***number,***REMOVED***content:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Removes***REMOVED***the***REMOVED***characters***REMOVED***from***REMOVED***`start`***REMOVED***to***REMOVED***`end`***REMOVED***(of***REMOVED***the***REMOVED***original***REMOVED***string,***REMOVED*****not*****REMOVED***the***REMOVED***generated***REMOVED***string).
	***REMOVED*******REMOVED***Removing***REMOVED***the***REMOVED***same***REMOVED***content***REMOVED***twice,***REMOVED***or***REMOVED***making***REMOVED***removals***REMOVED***that***REMOVED***partially***REMOVED***overlap,***REMOVED***will***REMOVED***cause***REMOVED***an***REMOVED***error.
	***REMOVED****/
	remove(start:***REMOVED***number,***REMOVED***end:***REMOVED***number):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Reset***REMOVED***the***REMOVED***modified***REMOVED***characters***REMOVED***from***REMOVED***`start`***REMOVED***to***REMOVED***`end`***REMOVED***(of***REMOVED***the***REMOVED***original***REMOVED***string,***REMOVED*****not*****REMOVED***the***REMOVED***generated***REMOVED***string).
	***REMOVED****/
	reset(start:***REMOVED***number,***REMOVED***end:***REMOVED***number):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Returns***REMOVED***the***REMOVED***content***REMOVED***of***REMOVED***the***REMOVED***generated***REMOVED***string***REMOVED***that***REMOVED***corresponds***REMOVED***to***REMOVED***the***REMOVED***slice***REMOVED***between***REMOVED***`start`***REMOVED***and***REMOVED***`end`***REMOVED***of***REMOVED***the***REMOVED***original***REMOVED***string.
	***REMOVED*******REMOVED***Throws***REMOVED***error***REMOVED***if***REMOVED***the***REMOVED***indices***REMOVED***are***REMOVED***for***REMOVED***characters***REMOVED***that***REMOVED***were***REMOVED***already***REMOVED***removed.
	***REMOVED****/
	slice(start:***REMOVED***number,***REMOVED***end:***REMOVED***number):***REMOVED***string;
	/**
	***REMOVED*******REMOVED***Returns***REMOVED***a***REMOVED***clone***REMOVED***of***REMOVED***`s`,***REMOVED***with***REMOVED***all***REMOVED***content***REMOVED***before***REMOVED***the***REMOVED***`start`***REMOVED***and***REMOVED***`end`***REMOVED***characters***REMOVED***of***REMOVED***the***REMOVED***original***REMOVED***string***REMOVED***removed.
	***REMOVED****/
	snip(start:***REMOVED***number,***REMOVED***end:***REMOVED***number):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Trims***REMOVED***content***REMOVED***matching***REMOVED***`charType`***REMOVED***(defaults***REMOVED***to***REMOVED***`\s`,***REMOVED***i.e.***REMOVED***whitespace)***REMOVED***from***REMOVED***the***REMOVED***start***REMOVED***and***REMOVED***end.
	***REMOVED****/
	trim(charType?:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Trims***REMOVED***content***REMOVED***matching***REMOVED***`charType`***REMOVED***(defaults***REMOVED***to***REMOVED***`\s`,***REMOVED***i.e.***REMOVED***whitespace)***REMOVED***from***REMOVED***the***REMOVED***start.
	***REMOVED****/
	trimStart(charType?:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Trims***REMOVED***content***REMOVED***matching***REMOVED***`charType`***REMOVED***(defaults***REMOVED***to***REMOVED***`\s`,***REMOVED***i.e.***REMOVED***whitespace)***REMOVED***from***REMOVED***the***REMOVED***end.
	***REMOVED****/
	trimEnd(charType?:***REMOVED***string):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Removes***REMOVED***empty***REMOVED***lines***REMOVED***from***REMOVED***the***REMOVED***start***REMOVED***and***REMOVED***end.
	***REMOVED****/
	trimLines():***REMOVED***this;
	/**
	***REMOVED*******REMOVED***String***REMOVED***replacement***REMOVED***with***REMOVED***RegExp***REMOVED***or***REMOVED***string.
	***REMOVED****/
	replace(
		regex:***REMOVED***RegExp***REMOVED***|***REMOVED***string,
		replacement:***REMOVED***string***REMOVED***|***REMOVED***((substring:***REMOVED***string,***REMOVED***...args:***REMOVED***any[])***REMOVED***=>***REMOVED***string),
	):***REMOVED***this;
	/**
	***REMOVED*******REMOVED***Same***REMOVED***as***REMOVED***`s.replace`,***REMOVED***but***REMOVED***replace***REMOVED***all***REMOVED***matched***REMOVED***strings***REMOVED***instead***REMOVED***of***REMOVED***just***REMOVED***one.
	***REMOVED****/
	replaceAll(
		regex:***REMOVED***RegExp***REMOVED***|***REMOVED***string,
		replacement:***REMOVED***string***REMOVED***|***REMOVED***((substring:***REMOVED***string,***REMOVED***...args:***REMOVED***any[])***REMOVED***=>***REMOVED***string),
	):***REMOVED***this;

	lastChar():***REMOVED***string;
	lastLine():***REMOVED***string;
	/**
	***REMOVED*******REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***the***REMOVED***resulting***REMOVED***source***REMOVED***is***REMOVED***empty***REMOVED***(disregarding***REMOVED***white***REMOVED***space).
	***REMOVED****/
	isEmpty():***REMOVED***boolean;
	length():***REMOVED***number;

	/**
	***REMOVED*******REMOVED***Indicates***REMOVED***if***REMOVED***the***REMOVED***string***REMOVED***has***REMOVED***been***REMOVED***changed.
	***REMOVED****/
	hasChanged():***REMOVED***boolean;

	original:***REMOVED***string;
	/**
	***REMOVED*******REMOVED***Returns***REMOVED***the***REMOVED***generated***REMOVED***string.
	***REMOVED****/
	toString():***REMOVED***string;

	offset:***REMOVED***number;
}
