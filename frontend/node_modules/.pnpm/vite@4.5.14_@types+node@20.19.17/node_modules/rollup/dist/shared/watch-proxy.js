/*
***REMOVED******REMOVED***@license
	Rollup.js***REMOVED***v3.29.4
	Sat,***REMOVED***21***REMOVED***Sep***REMOVED***2024***REMOVED***06:29:06***REMOVED***GMT***REMOVED***-***REMOVED***commit***REMOVED***2ef77c00ec2635d42697cff2c0567ccc8db34fb4

	https://github.com/rollup/rollup

	Released***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
*/
'use***REMOVED***strict';

const***REMOVED***rollup***REMOVED***=***REMOVED***require('./rollup.js');
const***REMOVED***fseventsImporter***REMOVED***=***REMOVED***require('./fsevents-importer.js');

class***REMOVED***WatchEmitter***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.currentHandlers***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.persistentHandlers***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Will***REMOVED***be***REMOVED***overwritten***REMOVED***by***REMOVED***Rollup
***REMOVED******REMOVED******REMOVED******REMOVED***async***REMOVED***close()***REMOVED***{***REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***emit(event,***REMOVED***...parameters)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Promise.all([...this.getCurrentHandlers(event),***REMOVED***...this.getPersistentHandlers(event)].map(handler***REMOVED***=>***REMOVED***handler(...parameters)));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***off(event,***REMOVED***listener)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***listeners***REMOVED***=***REMOVED***this.persistentHandlers[event];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(listeners)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***A***REMOVED***hack***REMOVED***stolen***REMOVED***from***REMOVED***"mitt":***REMOVED***">>>***REMOVED***0"***REMOVED***does***REMOVED***not***REMOVED***change***REMOVED***numbers***REMOVED***>=***REMOVED***0,***REMOVED***but***REMOVED***-1
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***(which***REMOVED***would***REMOVED***remove***REMOVED***the***REMOVED***last***REMOVED***array***REMOVED***element***REMOVED***if***REMOVED***used***REMOVED***unchanged)***REMOVED***is***REMOVED***turned
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***into***REMOVED***max_int,***REMOVED***which***REMOVED***is***REMOVED***outside***REMOVED***the***REMOVED***array***REMOVED***and***REMOVED***does***REMOVED***not***REMOVED***change***REMOVED***anything.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listeners.splice(listeners.indexOf(listener)***REMOVED***>>>***REMOVED***0,***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***on(event,***REMOVED***listener)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.getPersistentHandlers(event).push(listener);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***onCurrentRun(event,***REMOVED***listener)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.getCurrentHandlers(event).push(listener);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***once(event,***REMOVED***listener)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***selfRemovingListener***REMOVED***=***REMOVED***(...parameters)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.off(event,***REMOVED***selfRemovingListener);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***listener(...parameters);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.on(event,***REMOVED***selfRemovingListener);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***removeAllListeners()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.removeListenersForCurrentRun();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.persistentHandlers***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***removeListenersForCurrentRun()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.currentHandlers***REMOVED***=***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***getCurrentHandlers(event)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.currentHandlers[event]***REMOVED***||***REMOVED***(this.currentHandlers[event]***REMOVED***=***REMOVED***[]);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***getPersistentHandlers(event)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.persistentHandlers[event]***REMOVED***||***REMOVED***(this.persistentHandlers[event]***REMOVED***=***REMOVED***[]);
***REMOVED******REMOVED******REMOVED******REMOVED***}
}

function***REMOVED***watch(configs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***emitter***REMOVED***=***REMOVED***new***REMOVED***WatchEmitter();
***REMOVED******REMOVED******REMOVED******REMOVED***watchInternal(configs,***REMOVED***emitter).catch(error***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rollup.handleError(error);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***emitter;
}
async***REMOVED***function***REMOVED***watchInternal(configs,***REMOVED***emitter)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***optionsList***REMOVED***=***REMOVED***await***REMOVED***Promise.all(rollup.ensureArray(configs).map(config***REMOVED***=>***REMOVED***rollup.mergeOptions(config,***REMOVED***true)));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***watchOptionsList***REMOVED***=***REMOVED***optionsList.filter(config***REMOVED***=>***REMOVED***config.watch***REMOVED***!==***REMOVED***false);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(watchOptionsList.length***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***rollup.error(rollup.logInvalidOption('watch',***REMOVED***rollup.URL_WATCH,***REMOVED***'there***REMOVED***must***REMOVED***be***REMOVED***at***REMOVED***least***REMOVED***one***REMOVED***config***REMOVED***where***REMOVED***"watch"***REMOVED***is***REMOVED***not***REMOVED***set***REMOVED***to***REMOVED***"false"'));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***fseventsImporter.loadFsEvents();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***Watcher***REMOVED***}***REMOVED***=***REMOVED***await***REMOVED***Promise.resolve().then(()***REMOVED***=>***REMOVED***require('./watch.js'));
***REMOVED******REMOVED******REMOVED******REMOVED***new***REMOVED***Watcher(watchOptionsList,***REMOVED***emitter);
}

exports.watch***REMOVED***=***REMOVED***watch;
//#***REMOVED***sourceMappingURL=watch-proxy.js.map
