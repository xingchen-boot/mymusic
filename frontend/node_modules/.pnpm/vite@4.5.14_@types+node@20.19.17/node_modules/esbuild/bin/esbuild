#!/usr/bin/env***REMOVED***node
"use***REMOVED***strict";
var***REMOVED***__create***REMOVED***=***REMOVED***Object.create;
var***REMOVED***__defProp***REMOVED***=***REMOVED***Object.defineProperty;
var***REMOVED***__getOwnPropDesc***REMOVED***=***REMOVED***Object.getOwnPropertyDescriptor;
var***REMOVED***__getOwnPropNames***REMOVED***=***REMOVED***Object.getOwnPropertyNames;
var***REMOVED***__getProtoOf***REMOVED***=***REMOVED***Object.getPrototypeOf;
var***REMOVED***__hasOwnProp***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty;
var***REMOVED***__copyProps***REMOVED***=***REMOVED***(to,***REMOVED***from,***REMOVED***except,***REMOVED***desc)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(from***REMOVED***&&***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"object"***REMOVED***||***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"function")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***of***REMOVED***__getOwnPropNames(from))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!__hasOwnProp.call(to,***REMOVED***key)***REMOVED***&&***REMOVED***key***REMOVED***!==***REMOVED***except)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__defProp(to,***REMOVED***key,***REMOVED***{***REMOVED***get:***REMOVED***()***REMOVED***=>***REMOVED***from[key],***REMOVED***enumerable:***REMOVED***!(desc***REMOVED***=***REMOVED***__getOwnPropDesc(from,***REMOVED***key))***REMOVED***||***REMOVED***desc.enumerable***REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***to;
};
var***REMOVED***__toESM***REMOVED***=***REMOVED***(mod,***REMOVED***isNodeMode,***REMOVED***target)***REMOVED***=>***REMOVED***(target***REMOVED***=***REMOVED***mod***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***__create(__getProtoOf(mod))***REMOVED***:***REMOVED***{},***REMOVED***__copyProps(
***REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***importer***REMOVED***is***REMOVED***in***REMOVED***node***REMOVED***compatibility***REMOVED***mode***REMOVED***or***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***an***REMOVED***ESM
***REMOVED******REMOVED***//***REMOVED***file***REMOVED***that***REMOVED***has***REMOVED***been***REMOVED***converted***REMOVED***to***REMOVED***a***REMOVED***CommonJS***REMOVED***file***REMOVED***using***REMOVED***a***REMOVED***Babel-
***REMOVED******REMOVED***//***REMOVED***compatible***REMOVED***transform***REMOVED***(i.e.***REMOVED***"__esModule"***REMOVED***has***REMOVED***not***REMOVED***been***REMOVED***set),***REMOVED***then***REMOVED***set
***REMOVED******REMOVED***//***REMOVED***"default"***REMOVED***to***REMOVED***the***REMOVED***CommonJS***REMOVED***"module.exports"***REMOVED***for***REMOVED***node***REMOVED***compatibility.
***REMOVED******REMOVED***isNodeMode***REMOVED***||***REMOVED***!mod***REMOVED***||***REMOVED***!mod.__esModule***REMOVED***?***REMOVED***__defProp(target,***REMOVED***"default",***REMOVED***{***REMOVED***value:***REMOVED***mod,***REMOVED***enumerable:***REMOVED***true***REMOVED***})***REMOVED***:***REMOVED***target,
***REMOVED******REMOVED***mod
));

//***REMOVED***lib/npm/node-platform.ts
var***REMOVED***fs***REMOVED***=***REMOVED***require("fs");
var***REMOVED***os***REMOVED***=***REMOVED***require("os");
var***REMOVED***path***REMOVED***=***REMOVED***require("path");
var***REMOVED***ESBUILD_BINARY_PATH***REMOVED***=***REMOVED***process.env.ESBUILD_BINARY_PATH***REMOVED***||***REMOVED***ESBUILD_BINARY_PATH;
var***REMOVED***isValidBinaryPath***REMOVED***=***REMOVED***(x)***REMOVED***=>***REMOVED***!!x***REMOVED***&&***REMOVED***x***REMOVED***!==***REMOVED***"/usr/bin/esbuild";
var***REMOVED***packageDarwin_arm64***REMOVED***=***REMOVED***"@esbuild/darwin-arm64";
var***REMOVED***packageDarwin_x64***REMOVED***=***REMOVED***"@esbuild/darwin-x64";
var***REMOVED***knownWindowsPackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"win32***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/win32-arm64",
***REMOVED******REMOVED***"win32***REMOVED***ia32***REMOVED***LE":***REMOVED***"@esbuild/win32-ia32",
***REMOVED******REMOVED***"win32***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/win32-x64"
};
var***REMOVED***knownUnixlikePackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"android***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/android-arm64",
***REMOVED******REMOVED***"darwin***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/darwin-arm64",
***REMOVED******REMOVED***"darwin***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/darwin-x64",
***REMOVED******REMOVED***"freebsd***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/freebsd-arm64",
***REMOVED******REMOVED***"freebsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/freebsd-x64",
***REMOVED******REMOVED***"linux***REMOVED***arm***REMOVED***LE":***REMOVED***"@esbuild/linux-arm",
***REMOVED******REMOVED***"linux***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/linux-arm64",
***REMOVED******REMOVED***"linux***REMOVED***ia32***REMOVED***LE":***REMOVED***"@esbuild/linux-ia32",
***REMOVED******REMOVED***"linux***REMOVED***mips64el***REMOVED***LE":***REMOVED***"@esbuild/linux-mips64el",
***REMOVED******REMOVED***"linux***REMOVED***ppc64***REMOVED***LE":***REMOVED***"@esbuild/linux-ppc64",
***REMOVED******REMOVED***"linux***REMOVED***riscv64***REMOVED***LE":***REMOVED***"@esbuild/linux-riscv64",
***REMOVED******REMOVED***"linux***REMOVED***s390x***REMOVED***BE":***REMOVED***"@esbuild/linux-s390x",
***REMOVED******REMOVED***"linux***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/linux-x64",
***REMOVED******REMOVED***"linux***REMOVED***loong64***REMOVED***LE":***REMOVED***"@esbuild/linux-loong64",
***REMOVED******REMOVED***"netbsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/netbsd-x64",
***REMOVED******REMOVED***"openbsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/openbsd-x64",
***REMOVED******REMOVED***"sunos***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/sunos-x64"
};
var***REMOVED***knownWebAssemblyFallbackPackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"android***REMOVED***arm***REMOVED***LE":***REMOVED***"@esbuild/android-arm",
***REMOVED******REMOVED***"android***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/android-x64"
};
function***REMOVED***pkgAndSubpathForCurrentPlatform()***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***pkg;
***REMOVED******REMOVED***let***REMOVED***subpath;
***REMOVED******REMOVED***let***REMOVED***isWASM2***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***platformKey***REMOVED***=***REMOVED***`${process.platform}***REMOVED***${os.arch()}***REMOVED***${os.endianness()}`;
***REMOVED******REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownWindowsPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownWindowsPackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"esbuild.exe";
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownUnixlikePackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownUnixlikePackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"bin/esbuild";
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownWebAssemblyFallbackPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownWebAssemblyFallbackPackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"bin/esbuild";
***REMOVED******REMOVED******REMOVED******REMOVED***isWASM2***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Unsupported***REMOVED***platform:***REMOVED***${platformKey}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***pkg,***REMOVED***subpath,***REMOVED***isWASM:***REMOVED***isWASM2***REMOVED***};
}
function***REMOVED***pkgForSomeOtherPlatform()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***libMainJS***REMOVED***=***REMOVED***require.resolve("esbuild");
***REMOVED******REMOVED***const***REMOVED***nodeModulesDirectory***REMOVED***=***REMOVED***path.dirname(path.dirname(path.dirname(libMainJS)));
***REMOVED******REMOVED***if***REMOVED***(path.basename(nodeModulesDirectory)***REMOVED***===***REMOVED***"node_modules")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***unixKey***REMOVED***in***REMOVED***knownUnixlikePackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pkg***REMOVED***=***REMOVED***knownUnixlikePackages[unixKey];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(fs.existsSync(path.join(nodeModulesDirectory,***REMOVED***pkg)))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***pkg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***windowsKey***REMOVED***in***REMOVED***knownWindowsPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pkg***REMOVED***=***REMOVED***knownWindowsPackages[windowsKey];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(fs.existsSync(path.join(nodeModulesDirectory,***REMOVED***pkg)))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***pkg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***null;
}
function***REMOVED***downloadedBinPath(pkg,***REMOVED***subpath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***esbuildLibDir***REMOVED***=***REMOVED***path.dirname(require.resolve("esbuild"));
***REMOVED******REMOVED***return***REMOVED***path.join(esbuildLibDir,***REMOVED***`downloaded-${pkg.replace("/",***REMOVED***"-")}-${path.basename(subpath)}`);
}
function***REMOVED***generateBinPath()***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isValidBinaryPath(ESBUILD_BINARY_PATH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(ESBUILD_BINARY_PATH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.warn(`[esbuild]***REMOVED***Ignoring***REMOVED***bad***REMOVED***configuration:***REMOVED***ESBUILD_BINARY_PATH=${ESBUILD_BINARY_PATH}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***binPath:***REMOVED***ESBUILD_BINARY_PATH,***REMOVED***isWASM:***REMOVED***false***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***pkg,***REMOVED***subpath,***REMOVED***isWASM:***REMOVED***isWASM2***REMOVED***}***REMOVED***=***REMOVED***pkgAndSubpathForCurrentPlatform();
***REMOVED******REMOVED***let***REMOVED***binPath2;
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***binPath2***REMOVED***=***REMOVED***require.resolve(`${pkg}/${subpath}`);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***binPath2***REMOVED***=***REMOVED***downloadedBinPath(pkg,***REMOVED***subpath);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(binPath2))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***require.resolve(pkg);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***otherPkg***REMOVED***=***REMOVED***pkgForSomeOtherPlatform();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(otherPkg)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***suggestions***REMOVED***=***REMOVED***`
Specifically***REMOVED***the***REMOVED***"${otherPkg}"***REMOVED***package***REMOVED***is***REMOVED***present***REMOVED***but***REMOVED***this***REMOVED***platform
needs***REMOVED***the***REMOVED***"${pkg}"***REMOVED***package***REMOVED***instead.***REMOVED***People***REMOVED***often***REMOVED***get***REMOVED***into***REMOVED***this
situation***REMOVED***by***REMOVED***installing***REMOVED***esbuild***REMOVED***on***REMOVED***Windows***REMOVED***or***REMOVED***macOS***REMOVED***and***REMOVED***copying***REMOVED***"node_modules"
into***REMOVED***a***REMOVED***Docker***REMOVED***image***REMOVED***that***REMOVED***runs***REMOVED***Linux,***REMOVED***or***REMOVED***by***REMOVED***copying***REMOVED***"node_modules"***REMOVED***between
Windows***REMOVED***and***REMOVED***WSL***REMOVED***environments.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***npm,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***not***REMOVED***copying***REMOVED***the***REMOVED***"node_modules"
directory***REMOVED***when***REMOVED***you***REMOVED***copy***REMOVED***the***REMOVED***files***REMOVED***over,***REMOVED***and***REMOVED***running***REMOVED***"npm***REMOVED***ci"***REMOVED***or***REMOVED***"npm***REMOVED***install"
on***REMOVED***the***REMOVED***destination***REMOVED***platform***REMOVED***after***REMOVED***the***REMOVED***copy.***REMOVED***Or***REMOVED***you***REMOVED***could***REMOVED***consider***REMOVED***using***REMOVED***yarn
instead***REMOVED***of***REMOVED***npm***REMOVED***which***REMOVED***has***REMOVED***built-in***REMOVED***support***REMOVED***for***REMOVED***installing***REMOVED***a***REMOVED***package***REMOVED***on***REMOVED***multiple
platforms***REMOVED***simultaneously.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***yarn,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***listing***REMOVED***both***REMOVED***this***REMOVED***platform***REMOVED***and***REMOVED***the
other***REMOVED***platform***REMOVED***in***REMOVED***your***REMOVED***".yarnrc.yml"***REMOVED***file***REMOVED***using***REMOVED***the***REMOVED***"supportedArchitectures"
feature:***REMOVED***https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep***REMOVED***in***REMOVED***mind***REMOVED***that***REMOVED***this***REMOVED***means***REMOVED***multiple***REMOVED***copies***REMOVED***of***REMOVED***esbuild***REMOVED***will***REMOVED***be***REMOVED***present.
`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pkg***REMOVED***===***REMOVED***packageDarwin_x64***REMOVED***&&***REMOVED***otherPkg***REMOVED***===***REMOVED***packageDarwin_arm64***REMOVED***||***REMOVED***pkg***REMOVED***===***REMOVED***packageDarwin_arm64***REMOVED***&&***REMOVED***otherPkg***REMOVED***===***REMOVED***packageDarwin_x64)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***suggestions***REMOVED***=***REMOVED***`
Specifically***REMOVED***the***REMOVED***"${otherPkg}"***REMOVED***package***REMOVED***is***REMOVED***present***REMOVED***but***REMOVED***this***REMOVED***platform
needs***REMOVED***the***REMOVED***"${pkg}"***REMOVED***package***REMOVED***instead.***REMOVED***People***REMOVED***often***REMOVED***get***REMOVED***into***REMOVED***this
situation***REMOVED***by***REMOVED***installing***REMOVED***esbuild***REMOVED***with***REMOVED***npm***REMOVED***running***REMOVED***inside***REMOVED***of***REMOVED***Rosetta***REMOVED***2***REMOVED***and***REMOVED***then
trying***REMOVED***to***REMOVED***use***REMOVED***it***REMOVED***with***REMOVED***node***REMOVED***running***REMOVED***outside***REMOVED***of***REMOVED***Rosetta***REMOVED***2,***REMOVED***or***REMOVED***vice***REMOVED***versa***REMOVED***(Rosetta
2***REMOVED***is***REMOVED***Apple's***REMOVED***on-the-fly***REMOVED***x86_64-to-arm64***REMOVED***translation***REMOVED***service).

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***npm,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***ensuring***REMOVED***that***REMOVED***both***REMOVED***npm***REMOVED***and***REMOVED***node***REMOVED***are
not***REMOVED***running***REMOVED***under***REMOVED***Rosetta***REMOVED***2***REMOVED***and***REMOVED***then***REMOVED***reinstalling***REMOVED***esbuild.***REMOVED***This***REMOVED***likely***REMOVED***involves
changing***REMOVED***how***REMOVED***you***REMOVED***installed***REMOVED***npm***REMOVED***and/or***REMOVED***node.***REMOVED***For***REMOVED***example,***REMOVED***installing***REMOVED***node***REMOVED***with
the***REMOVED***universal***REMOVED***installer***REMOVED***here***REMOVED***should***REMOVED***work:***REMOVED***https://nodejs.org/en/download/.***REMOVED***Or
you***REMOVED***could***REMOVED***consider***REMOVED***using***REMOVED***yarn***REMOVED***instead***REMOVED***of***REMOVED***npm***REMOVED***which***REMOVED***has***REMOVED***built-in***REMOVED***support***REMOVED***for
installing***REMOVED***a***REMOVED***package***REMOVED***on***REMOVED***multiple***REMOVED***platforms***REMOVED***simultaneously.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***yarn,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***listing***REMOVED***both***REMOVED***"arm64"***REMOVED***and***REMOVED***"x64"
in***REMOVED***your***REMOVED***".yarnrc.yml"***REMOVED***file***REMOVED***using***REMOVED***the***REMOVED***"supportedArchitectures"***REMOVED***feature:
https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep***REMOVED***in***REMOVED***mind***REMOVED***that***REMOVED***this***REMOVED***means***REMOVED***multiple***REMOVED***copies***REMOVED***of***REMOVED***esbuild***REMOVED***will***REMOVED***be***REMOVED***present.
`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`
You***REMOVED***installed***REMOVED***esbuild***REMOVED***for***REMOVED***another***REMOVED***platform***REMOVED***than***REMOVED***the***REMOVED***one***REMOVED***you're***REMOVED***currently***REMOVED***using.
This***REMOVED***won't***REMOVED***work***REMOVED***because***REMOVED***esbuild***REMOVED***is***REMOVED***written***REMOVED***with***REMOVED***native***REMOVED***code***REMOVED***and***REMOVED***needs***REMOVED***to
install***REMOVED***a***REMOVED***platform-specific***REMOVED***binary***REMOVED***executable.
${suggestions}
Another***REMOVED***alternative***REMOVED***is***REMOVED***to***REMOVED***use***REMOVED***the***REMOVED***"esbuild-wasm"***REMOVED***package***REMOVED***instead,***REMOVED***which***REMOVED***works
the***REMOVED***same***REMOVED***way***REMOVED***on***REMOVED***all***REMOVED***platforms.***REMOVED***But***REMOVED***it***REMOVED***comes***REMOVED***with***REMOVED***a***REMOVED***heavy***REMOVED***performance***REMOVED***cost***REMOVED***and
can***REMOVED***sometimes***REMOVED***be***REMOVED***10x***REMOVED***slower***REMOVED***than***REMOVED***the***REMOVED***"esbuild"***REMOVED***package,***REMOVED***so***REMOVED***you***REMOVED***may***REMOVED***also***REMOVED***not
want***REMOVED***to***REMOVED***do***REMOVED***that.
`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***package***REMOVED***"${pkg}"***REMOVED***could***REMOVED***not***REMOVED***be***REMOVED***found,***REMOVED***and***REMOVED***is***REMOVED***needed***REMOVED***by***REMOVED***esbuild.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***esbuild***REMOVED***with***REMOVED***npm,***REMOVED***make***REMOVED***sure***REMOVED***that***REMOVED***you***REMOVED***don't***REMOVED***specify***REMOVED***the
"--no-optional"***REMOVED***or***REMOVED***"--omit=optional"***REMOVED***flags.***REMOVED***The***REMOVED***"optionalDependencies"***REMOVED***feature
of***REMOVED***"package.json"***REMOVED***is***REMOVED***used***REMOVED***by***REMOVED***esbuild***REMOVED***to***REMOVED***install***REMOVED***the***REMOVED***correct***REMOVED***binary***REMOVED***executable
for***REMOVED***your***REMOVED***current***REMOVED***platform.`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***e;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(/\.zip\//.test(binPath2))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pnpapi;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pnpapi***REMOVED***=***REMOVED***require("pnpapi");
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pnpapi)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***root***REMOVED***=***REMOVED***pnpapi.getPackageInformation(pnpapi.topLevel).packageLocation;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***binTargetPath***REMOVED***=***REMOVED***path.join(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***root,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"node_modules",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***".cache",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"esbuild",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`pnpapi-${pkg.replace("/",***REMOVED***"-")}-${"0.18.20"}-${path.basename(subpath)}`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(binTargetPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs.mkdirSync(path.dirname(binTargetPath),***REMOVED***{***REMOVED***recursive:***REMOVED***true***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs.copyFileSync(binPath2,***REMOVED***binTargetPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs.chmodSync(binTargetPath,***REMOVED***493);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***binPath:***REMOVED***binTargetPath,***REMOVED***isWASM:***REMOVED***isWASM2***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***binPath:***REMOVED***binPath2,***REMOVED***isWASM:***REMOVED***isWASM2***REMOVED***};
}

//***REMOVED***lib/npm/node-shim.ts
var***REMOVED***{***REMOVED***binPath,***REMOVED***isWASM***REMOVED***}***REMOVED***=***REMOVED***generateBinPath();
if***REMOVED***(isWASM)***REMOVED***{
***REMOVED******REMOVED***require("child_process").execFileSync("node",***REMOVED***[binPath].concat(process.argv.slice(2)),***REMOVED***{***REMOVED***stdio:***REMOVED***"inherit"***REMOVED***});
}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED***require("child_process").execFileSync(binPath,***REMOVED***process.argv.slice(2),***REMOVED***{***REMOVED***stdio:***REMOVED***"inherit"***REMOVED***});
}
