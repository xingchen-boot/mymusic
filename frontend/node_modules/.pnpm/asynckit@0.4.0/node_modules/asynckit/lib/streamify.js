var***REMOVED***async***REMOVED***=***REMOVED***require('./async.js');

//***REMOVED***API
module.exports***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***iterator:***REMOVED***wrapIterator,
***REMOVED******REMOVED***callback:***REMOVED***wrapCallback
};

/**
***REMOVED*******REMOVED***Wraps***REMOVED***iterators***REMOVED***with***REMOVED***long***REMOVED***signature
***REMOVED****
***REMOVED*******REMOVED***@this***REMOVED******REMOVED******REMOVED******REMOVED***ReadableAsyncKit#
***REMOVED*******REMOVED***@param***REMOVED******REMOVED******REMOVED***{function}***REMOVED***iterator***REMOVED***-***REMOVED***function***REMOVED***to***REMOVED***wrap
***REMOVED*******REMOVED***@returns***REMOVED***{function}***REMOVED***-***REMOVED***wrapped***REMOVED***function
***REMOVED****/
function***REMOVED***wrapIterator(iterator)
{
***REMOVED******REMOVED***var***REMOVED***stream***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED***return***REMOVED***function(item,***REMOVED***key,***REMOVED***cb)
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***aborter
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***,***REMOVED***wrappedCb***REMOVED***=***REMOVED***async(wrapIteratorCallback.call(stream,***REMOVED***cb,***REMOVED***key))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***;

***REMOVED******REMOVED******REMOVED******REMOVED***stream.jobs[key]***REMOVED***=***REMOVED***wrappedCb;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***it's***REMOVED***either***REMOVED***shortcut***REMOVED***(item,***REMOVED***cb)
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(iterator.length***REMOVED***==***REMOVED***2)
***REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***aborter***REMOVED***=***REMOVED***iterator(item,***REMOVED***wrappedCb);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***or***REMOVED***long***REMOVED***format***REMOVED***(item,***REMOVED***key,***REMOVED***cb)
***REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***aborter***REMOVED***=***REMOVED***iterator(item,***REMOVED***key,***REMOVED***wrappedCb);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***aborter;
***REMOVED******REMOVED***};
}

/**
***REMOVED*******REMOVED***Wraps***REMOVED***provided***REMOVED***callback***REMOVED***function
***REMOVED*******REMOVED***allowing***REMOVED***to***REMOVED***execute***REMOVED***snitch***REMOVED***function***REMOVED***before
***REMOVED*******REMOVED***real***REMOVED***callback
***REMOVED****
***REMOVED*******REMOVED***@this***REMOVED******REMOVED******REMOVED******REMOVED***ReadableAsyncKit#
***REMOVED*******REMOVED***@param***REMOVED******REMOVED******REMOVED***{function}***REMOVED***callback***REMOVED***-***REMOVED***function***REMOVED***to***REMOVED***wrap
***REMOVED*******REMOVED***@returns***REMOVED***{function}***REMOVED***-***REMOVED***wrapped***REMOVED***function
***REMOVED****/
function***REMOVED***wrapCallback(callback)
{
***REMOVED******REMOVED***var***REMOVED***stream***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED***var***REMOVED***wrapped***REMOVED***=***REMOVED***function(error,***REMOVED***result)
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***finisher.call(stream,***REMOVED***error,***REMOVED***result,***REMOVED***callback);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***wrapped;
}

/**
***REMOVED*******REMOVED***Wraps***REMOVED***provided***REMOVED***iterator***REMOVED***callback***REMOVED***function
***REMOVED*******REMOVED***makes***REMOVED***sure***REMOVED***snitch***REMOVED***only***REMOVED***called***REMOVED***once,
***REMOVED*******REMOVED***but***REMOVED***passes***REMOVED***secondary***REMOVED***calls***REMOVED***to***REMOVED***the***REMOVED***original***REMOVED***callback
***REMOVED****
***REMOVED*******REMOVED***@this***REMOVED******REMOVED******REMOVED******REMOVED***ReadableAsyncKit#
***REMOVED*******REMOVED***@param***REMOVED******REMOVED******REMOVED***{function}***REMOVED***callback***REMOVED***-***REMOVED***callback***REMOVED***to***REMOVED***wrap
***REMOVED*******REMOVED***@param***REMOVED******REMOVED******REMOVED***{number|string}***REMOVED***key***REMOVED***-***REMOVED***iteration***REMOVED***key
***REMOVED*******REMOVED***@returns***REMOVED***{function}***REMOVED***wrapped***REMOVED***callback
***REMOVED****/
function***REMOVED***wrapIteratorCallback(callback,***REMOVED***key)
{
***REMOVED******REMOVED***var***REMOVED***stream***REMOVED***=***REMOVED***this;

***REMOVED******REMOVED***return***REMOVED***function(error,***REMOVED***output)
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***don't***REMOVED***repeat***REMOVED***yourself
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!(key***REMOVED***in***REMOVED***stream.jobs))
***REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(error,***REMOVED***output);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***clean***REMOVED***up***REMOVED***jobs
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***stream.jobs[key];

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***streamer.call(stream,***REMOVED***error,***REMOVED***{key:***REMOVED***key,***REMOVED***value:***REMOVED***output},***REMOVED***callback);
***REMOVED******REMOVED***};
}

/**
***REMOVED*******REMOVED***Stream***REMOVED***wrapper***REMOVED***for***REMOVED***iterator***REMOVED***callback
***REMOVED****
***REMOVED*******REMOVED***@this***REMOVED******REMOVED***ReadableAsyncKit#
***REMOVED*******REMOVED***@param***REMOVED***{mixed}***REMOVED***error***REMOVED***-***REMOVED***error***REMOVED***response
***REMOVED*******REMOVED***@param***REMOVED***{mixed}***REMOVED***output***REMOVED***-***REMOVED***iterator***REMOVED***output
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***callback***REMOVED***-***REMOVED***callback***REMOVED***that***REMOVED***expects***REMOVED***iterator***REMOVED***results
***REMOVED****/
function***REMOVED***streamer(error,***REMOVED***output,***REMOVED***callback)
{
***REMOVED******REMOVED***if***REMOVED***(error***REMOVED***&&***REMOVED***!this.error)
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.error***REMOVED***=***REMOVED***error;
***REMOVED******REMOVED******REMOVED******REMOVED***this.pause();
***REMOVED******REMOVED******REMOVED******REMOVED***this.emit('error',***REMOVED***error);
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***send***REMOVED***back***REMOVED***value***REMOVED***only,***REMOVED***as***REMOVED***expected
***REMOVED******REMOVED******REMOVED******REMOVED***callback(error,***REMOVED***output***REMOVED***&&***REMOVED***output.value);
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***stream***REMOVED***stuff
***REMOVED******REMOVED***this.push(output);

***REMOVED******REMOVED***//***REMOVED***back***REMOVED***to***REMOVED***original***REMOVED***track
***REMOVED******REMOVED***//***REMOVED***send***REMOVED***back***REMOVED***value***REMOVED***only,***REMOVED***as***REMOVED***expected
***REMOVED******REMOVED***callback(error,***REMOVED***output***REMOVED***&&***REMOVED***output.value);
}

/**
***REMOVED*******REMOVED***Stream***REMOVED***wrapper***REMOVED***for***REMOVED***finishing***REMOVED***callback
***REMOVED****
***REMOVED*******REMOVED***@this***REMOVED******REMOVED***ReadableAsyncKit#
***REMOVED*******REMOVED***@param***REMOVED***{mixed}***REMOVED***error***REMOVED***-***REMOVED***error***REMOVED***response
***REMOVED*******REMOVED***@param***REMOVED***{mixed}***REMOVED***output***REMOVED***-***REMOVED***iterator***REMOVED***output
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***callback***REMOVED***-***REMOVED***callback***REMOVED***that***REMOVED***expects***REMOVED***final***REMOVED***results
***REMOVED****/
function***REMOVED***finisher(error,***REMOVED***output,***REMOVED***callback)
{
***REMOVED******REMOVED***//***REMOVED***signal***REMOVED***end***REMOVED***of***REMOVED***the***REMOVED***stream
***REMOVED******REMOVED***//***REMOVED***only***REMOVED***for***REMOVED***successfully***REMOVED***finished***REMOVED***streams
***REMOVED******REMOVED***if***REMOVED***(!error)
***REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.push(null);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***back***REMOVED***to***REMOVED***original***REMOVED***track
***REMOVED******REMOVED***callback(error,***REMOVED***output);
}
