import***REMOVED***Symbol***REMOVED***from***REMOVED***'./_Symbol.js';
import***REMOVED***arrayMap***REMOVED***from***REMOVED***'./_arrayMap.js';
import***REMOVED***isArray***REMOVED***from***REMOVED***'./isArray.js';
import***REMOVED***isSymbol***REMOVED***from***REMOVED***'./isSymbol.js';

/*****REMOVED***Used***REMOVED***as***REMOVED***references***REMOVED***for***REMOVED***various***REMOVED***`Number`***REMOVED***constants.***REMOVED****/
var***REMOVED***INFINITY***REMOVED***=***REMOVED***1***REMOVED***/***REMOVED***0;

/*****REMOVED***Used***REMOVED***to***REMOVED***convert***REMOVED***symbols***REMOVED***to***REMOVED***primitives***REMOVED***and***REMOVED***strings.***REMOVED****/
var***REMOVED***symbolProto***REMOVED***=***REMOVED***Symbol***REMOVED***?***REMOVED***Symbol.prototype***REMOVED***:***REMOVED***undefined,
***REMOVED******REMOVED******REMOVED******REMOVED***symbolToString***REMOVED***=***REMOVED***symbolProto***REMOVED***?***REMOVED***symbolProto.toString***REMOVED***:***REMOVED***undefined;

/**
***REMOVED*******REMOVED***The***REMOVED***base***REMOVED***implementation***REMOVED***of***REMOVED***`_.toString`***REMOVED***which***REMOVED***doesn't***REMOVED***convert***REMOVED***nullish
***REMOVED*******REMOVED***values***REMOVED***to***REMOVED***empty***REMOVED***strings.
***REMOVED****
***REMOVED*******REMOVED***@private
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***value***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***process.
***REMOVED*******REMOVED***@returns***REMOVED***{string}***REMOVED***Returns***REMOVED***the***REMOVED***string.
***REMOVED****/
function***REMOVED***baseToString(value)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Exit***REMOVED***early***REMOVED***for***REMOVED***strings***REMOVED***to***REMOVED***avoid***REMOVED***a***REMOVED***performance***REMOVED***hit***REMOVED***in***REMOVED***some***REMOVED***environments.
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isArray(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Recursively***REMOVED***convert***REMOVED***values***REMOVED***(susceptible***REMOVED***to***REMOVED***call***REMOVED***stack***REMOVED***limits).
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***arrayMap(value,***REMOVED***baseToString)***REMOVED***+***REMOVED***'';
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isSymbol(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***symbolToString***REMOVED***?***REMOVED***symbolToString.call(value)***REMOVED***:***REMOVED***'';
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***(value***REMOVED***+***REMOVED***'');
***REMOVED******REMOVED***return***REMOVED***(result***REMOVED***==***REMOVED***'0'***REMOVED***&&***REMOVED***(1***REMOVED***/***REMOVED***value)***REMOVED***==***REMOVED***-INFINITY)***REMOVED***?***REMOVED***'-0'***REMOVED***:***REMOVED***result;
}

export***REMOVED***default***REMOVED***baseToString;
