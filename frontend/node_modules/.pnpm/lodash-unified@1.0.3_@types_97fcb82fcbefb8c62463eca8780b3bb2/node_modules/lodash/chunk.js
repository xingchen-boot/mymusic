var***REMOVED***baseSlice***REMOVED***=***REMOVED***require('./_baseSlice'),
***REMOVED******REMOVED******REMOVED******REMOVED***isIterateeCall***REMOVED***=***REMOVED***require('./_isIterateeCall'),
***REMOVED******REMOVED******REMOVED******REMOVED***toInteger***REMOVED***=***REMOVED***require('./toInteger');

/****REMOVED***Built-in***REMOVED***method***REMOVED***references***REMOVED***for***REMOVED***those***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***name***REMOVED***as***REMOVED***other***REMOVED***`lodash`***REMOVED***methods.***REMOVED****/
var***REMOVED***nativeCeil***REMOVED***=***REMOVED***Math.ceil,
***REMOVED******REMOVED******REMOVED******REMOVED***nativeMax***REMOVED***=***REMOVED***Math.max;

/**
***REMOVED*******REMOVED***Creates***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***elements***REMOVED***split***REMOVED***into***REMOVED***groups***REMOVED***the***REMOVED***length***REMOVED***of***REMOVED***`size`.
***REMOVED*******REMOVED***If***REMOVED***`array`***REMOVED***can't***REMOVED***be***REMOVED***split***REMOVED***evenly,***REMOVED***the***REMOVED***final***REMOVED***chunk***REMOVED***will***REMOVED***be***REMOVED***the***REMOVED***remaining
***REMOVED*******REMOVED***elements.
***REMOVED****
***REMOVED*******REMOVED***@static
***REMOVED*******REMOVED***@memberOf***REMOVED***_
***REMOVED*******REMOVED***@since***REMOVED***3.0.0
***REMOVED*******REMOVED***@category***REMOVED***Array
***REMOVED*******REMOVED***@param***REMOVED***{Array}***REMOVED***array***REMOVED***The***REMOVED***array***REMOVED***to***REMOVED***process.
***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***[size=1]***REMOVED***The***REMOVED***length***REMOVED***of***REMOVED***each***REMOVED***chunk
***REMOVED*******REMOVED***@param-***REMOVED***{Object}***REMOVED***[guard]***REMOVED***Enables***REMOVED***use***REMOVED***as***REMOVED***an***REMOVED***iteratee***REMOVED***for***REMOVED***methods***REMOVED***like***REMOVED***`_.map`.
***REMOVED*******REMOVED***@returns***REMOVED***{Array}***REMOVED***Returns***REMOVED***the***REMOVED***new***REMOVED***array***REMOVED***of***REMOVED***chunks.
***REMOVED*******REMOVED***@example
***REMOVED****
***REMOVED*******REMOVED***_.chunk(['a',***REMOVED***'b',***REMOVED***'c',***REMOVED***'d'],***REMOVED***2);
***REMOVED*******REMOVED***//***REMOVED***=>***REMOVED***[['a',***REMOVED***'b'],***REMOVED***['c',***REMOVED***'d']]
***REMOVED****
***REMOVED*******REMOVED***_.chunk(['a',***REMOVED***'b',***REMOVED***'c',***REMOVED***'d'],***REMOVED***3);
***REMOVED*******REMOVED***//***REMOVED***=>***REMOVED***[['a',***REMOVED***'b',***REMOVED***'c'],***REMOVED***['d']]
***REMOVED****/
function***REMOVED***chunk(array,***REMOVED***size,***REMOVED***guard)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***((guard***REMOVED***?***REMOVED***isIterateeCall(array,***REMOVED***size,***REMOVED***guard)***REMOVED***:***REMOVED***size***REMOVED***===***REMOVED***undefined))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***size***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***size***REMOVED***=***REMOVED***nativeMax(toInteger(size),***REMOVED***0);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***length***REMOVED***=***REMOVED***array***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***0***REMOVED***:***REMOVED***array.length;
***REMOVED******REMOVED***if***REMOVED***(!length***REMOVED***||***REMOVED***size***REMOVED***<***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resIndex***REMOVED***=***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***Array(nativeCeil(length***REMOVED***/***REMOVED***size));

***REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result[resIndex++]***REMOVED***=***REMOVED***baseSlice(array,***REMOVED***index,***REMOVED***(index***REMOVED***+=***REMOVED***size));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}

module.exports***REMOVED***=***REMOVED***chunk;
