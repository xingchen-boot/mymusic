/*!***REMOVED********************************************************************************
Copyright***REMOVED***(c)***REMOVED***Microsoft***REMOVED***Corporation.***REMOVED***All***REMOVED***rights***REMOVED***reserved.
Licensed***REMOVED***under***REMOVED***the***REMOVED***Apache***REMOVED***License,***REMOVED***Version***REMOVED***2.0***REMOVED***(the***REMOVED***"License");***REMOVED***you***REMOVED***may***REMOVED***not***REMOVED***use
this***REMOVED***file***REMOVED***except***REMOVED***in***REMOVED***compliance***REMOVED***with***REMOVED***the***REMOVED***License.***REMOVED***You***REMOVED***may***REMOVED***obtain***REMOVED***a***REMOVED***copy***REMOVED***of***REMOVED***the
License***REMOVED***at***REMOVED***http://www.apache.org/licenses/LICENSE-2.0

THIS***REMOVED***CODE***REMOVED***IS***REMOVED***PROVIDED***REMOVED***ON***REMOVED***AN***REMOVED****AS***REMOVED***IS****REMOVED***BASIS,***REMOVED***WITHOUT***REMOVED***WARRANTIES***REMOVED***OR***REMOVED***CONDITIONS***REMOVED***OF***REMOVED***ANY
KIND,***REMOVED***EITHER***REMOVED***EXPRESS***REMOVED***OR***REMOVED***IMPLIED,***REMOVED***INCLUDING***REMOVED***WITHOUT***REMOVED***LIMITATION***REMOVED***ANY***REMOVED***IMPLIED
WARRANTIES***REMOVED***OR***REMOVED***CONDITIONS***REMOVED***OF***REMOVED***TITLE,***REMOVED***FITNESS***REMOVED***FOR***REMOVED***A***REMOVED***PARTICULAR***REMOVED***PURPOSE,
MERCHANTABLITY***REMOVED***OR***REMOVED***NON-INFRINGEMENT.

See***REMOVED***the***REMOVED***Apache***REMOVED***Version***REMOVED***2.0***REMOVED***License***REMOVED***for***REMOVED***specific***REMOVED***language***REMOVED***governing***REMOVED***permissions
and***REMOVED***limitations***REMOVED***under***REMOVED***the***REMOVED***License.
********************************************************************************REMOVED****/


"use***REMOVED***strict";
var***REMOVED***__create***REMOVED***=***REMOVED***Object.create;
var***REMOVED***__defProp***REMOVED***=***REMOVED***Object.defineProperty;
var***REMOVED***__getOwnPropDesc***REMOVED***=***REMOVED***Object.getOwnPropertyDescriptor;
var***REMOVED***__getOwnPropNames***REMOVED***=***REMOVED***Object.getOwnPropertyNames;
var***REMOVED***__getProtoOf***REMOVED***=***REMOVED***Object.getPrototypeOf;
var***REMOVED***__hasOwnProp***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty;
var***REMOVED***__copyProps***REMOVED***=***REMOVED***(to,***REMOVED***from,***REMOVED***except,***REMOVED***desc)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(from***REMOVED***&&***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"object"***REMOVED***||***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"function")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***of***REMOVED***__getOwnPropNames(from))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!__hasOwnProp.call(to,***REMOVED***key)***REMOVED***&&***REMOVED***key***REMOVED***!==***REMOVED***except)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__defProp(to,***REMOVED***key,***REMOVED***{***REMOVED***get:***REMOVED***()***REMOVED***=>***REMOVED***from[key],***REMOVED***enumerable:***REMOVED***!(desc***REMOVED***=***REMOVED***__getOwnPropDesc(from,***REMOVED***key))***REMOVED***||***REMOVED***desc.enumerable***REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***to;
};
var***REMOVED***__reExport***REMOVED***=***REMOVED***(target,***REMOVED***mod,***REMOVED***secondTarget)***REMOVED***=>***REMOVED***(__copyProps(target,***REMOVED***mod,***REMOVED***"default"),***REMOVED***secondTarget***REMOVED***&&***REMOVED***__copyProps(secondTarget,***REMOVED***mod,***REMOVED***"default"));
var***REMOVED***__toESM***REMOVED***=***REMOVED***(mod,***REMOVED***isNodeMode,***REMOVED***target)***REMOVED***=>***REMOVED***(target***REMOVED***=***REMOVED***mod***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***__create(__getProtoOf(mod))***REMOVED***:***REMOVED***{},***REMOVED***__copyProps(
***REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***importer***REMOVED***is***REMOVED***in***REMOVED***node***REMOVED***compatibility***REMOVED***mode***REMOVED***or***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***an***REMOVED***ESM
***REMOVED******REMOVED***//***REMOVED***file***REMOVED***that***REMOVED***has***REMOVED***been***REMOVED***converted***REMOVED***to***REMOVED***a***REMOVED***CommonJS***REMOVED***file***REMOVED***using***REMOVED***a***REMOVED***Babel-
***REMOVED******REMOVED***//***REMOVED***compatible***REMOVED***transform***REMOVED***(i.e.***REMOVED***"__esModule"***REMOVED***has***REMOVED***not***REMOVED***been***REMOVED***set),***REMOVED***then***REMOVED***set
***REMOVED******REMOVED***//***REMOVED***"default"***REMOVED***to***REMOVED***the***REMOVED***CommonJS***REMOVED***"module.exports"***REMOVED***for***REMOVED***node***REMOVED***compatibility.
***REMOVED******REMOVED***isNodeMode***REMOVED***||***REMOVED***!mod***REMOVED***||***REMOVED***!mod.__esModule***REMOVED***?***REMOVED***__defProp(target,***REMOVED***"default",***REMOVED***{***REMOVED***value:***REMOVED***mod,***REMOVED***enumerable:***REMOVED***true***REMOVED***})***REMOVED***:***REMOVED***target,
***REMOVED******REMOVED***mod
));

//***REMOVED***src/tsserver/server.ts
var***REMOVED***import_os2***REMOVED***=***REMOVED***__toESM(require("os"));

//***REMOVED***src/typescript/typescript.ts
var***REMOVED***typescript_exports***REMOVED***=***REMOVED***{};
__reExport(typescript_exports,***REMOVED***require("./typescript.js"));

//***REMOVED***src/tsserver/nodeServer.ts
var***REMOVED***import_child_process***REMOVED***=***REMOVED***__toESM(require("child_process"));
var***REMOVED***import_fs***REMOVED***=***REMOVED***__toESM(require("fs"));
var***REMOVED***import_net***REMOVED***=***REMOVED***__toESM(require("net"));
var***REMOVED***import_os***REMOVED***=***REMOVED***__toESM(require("os"));
var***REMOVED***import_readline***REMOVED***=***REMOVED***__toESM(require("readline"));

//***REMOVED***src/tsserver/common.ts
function***REMOVED***getLogLevel(level)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(level)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***l***REMOVED***=***REMOVED***level.toLowerCase();
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***name***REMOVED***in***REMOVED***typescript_exports.server.LogLevel)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isNaN(+name)***REMOVED***&&***REMOVED***l***REMOVED***===***REMOVED***name.toLowerCase())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.server.LogLevel[name];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***void***REMOVED***0;
}

//***REMOVED***src/tsserver/nodeServer.ts
function***REMOVED***parseLoggingEnvironmentString(logEnvStr)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!logEnvStr)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***logEnv***REMOVED***=***REMOVED***{***REMOVED***logToFile:***REMOVED***true***REMOVED***};
***REMOVED******REMOVED***const***REMOVED***args***REMOVED***=***REMOVED***logEnvStr.split("***REMOVED***");
***REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***args.length***REMOVED***-***REMOVED***1;
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***len;***REMOVED***i***REMOVED***+=***REMOVED***2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***option***REMOVED***=***REMOVED***args[i];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***value,***REMOVED***extraPartCounter***REMOVED***}***REMOVED***=***REMOVED***getEntireValue(i***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***+=***REMOVED***extraPartCounter;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(option***REMOVED***&&***REMOVED***value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(option)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"-file":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logEnv.file***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"-level":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***level***REMOVED***=***REMOVED***getLogLevel(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logEnv.detailLevel***REMOVED***=***REMOVED***level***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***level***REMOVED***:***REMOVED***typescript_exports.server.LogLevel.normal;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"-traceToConsole":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logEnv.traceToConsole***REMOVED***=***REMOVED***value.toLowerCase()***REMOVED***===***REMOVED***"true";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"-logToFile":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logEnv.logToFile***REMOVED***=***REMOVED***value.toLowerCase()***REMOVED***===***REMOVED***"true";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***logEnv;
***REMOVED******REMOVED***function***REMOVED***getEntireValue(initialIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pathStart***REMOVED***=***REMOVED***args[initialIndex];
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***extraPartCounter***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pathStart.charCodeAt(0)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.doubleQuote***REMOVED***&&***REMOVED***pathStart.charCodeAt(pathStart.length***REMOVED***-***REMOVED***1)***REMOVED***!==***REMOVED***typescript_exports.CharacterCodes.doubleQuote)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***initialIndex***REMOVED***+***REMOVED***1;***REMOVED***i***REMOVED***<***REMOVED***args.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pathStart***REMOVED***+=***REMOVED***"***REMOVED***";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pathStart***REMOVED***+=***REMOVED***args[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***extraPartCounter++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pathStart.charCodeAt(pathStart.length***REMOVED***-***REMOVED***1)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.doubleQuote)***REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***value:***REMOVED***(0,***REMOVED***typescript_exports.stripQuotes)(pathStart),***REMOVED***extraPartCounter***REMOVED***};
***REMOVED******REMOVED***}
}
function***REMOVED***parseServerMode()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***mode***REMOVED***=***REMOVED***typescript_exports.server.findArgument("--serverMode");
***REMOVED******REMOVED***if***REMOVED***(!mode)***REMOVED***return***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED***switch***REMOVED***(mode.toLowerCase())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"semantic":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.LanguageServiceMode.Semantic;
***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"partialsemantic":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.LanguageServiceMode.PartialSemantic;
***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"syntactic":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.LanguageServiceMode.Syntactic;
***REMOVED******REMOVED******REMOVED******REMOVED***default:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***mode;
***REMOVED******REMOVED***}
}
function***REMOVED***initializeNodeSystem()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***sys4***REMOVED***=***REMOVED***typescript_exports.Debug.checkDefined(typescript_exports.sys);
***REMOVED******REMOVED***class***REMOVED***Logger***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor(logFilename,***REMOVED***traceToConsole,***REMOVED***level)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.logFilename***REMOVED***=***REMOVED***logFilename;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.traceToConsole***REMOVED***=***REMOVED***traceToConsole;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.level***REMOVED***=***REMOVED***level;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.seq***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.inGroup***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.firstInGroup***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fd***REMOVED***=***REMOVED***-1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.logFilename)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fd***REMOVED***=***REMOVED***import_fs.default.openSync(this.logFilename,***REMOVED***"w");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***static***REMOVED***padStringRight(str,***REMOVED***padding)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(str***REMOVED***+***REMOVED***padding).slice(0,***REMOVED***padding.length);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***close()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fd***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***import_fs.default.close(this.fd,***REMOVED***typescript_exports.noop);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***getLogFileName()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.logFilename;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***perftrc(s)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.msg(s,***REMOVED***typescript_exports.server.Msg.Perf);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***info(s)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.msg(s,***REMOVED***typescript_exports.server.Msg.Info);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***err(s)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.msg(s,***REMOVED***typescript_exports.server.Msg.Err);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***startGroup()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.inGroup***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.firstInGroup***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***endGroup()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.inGroup***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***loggingEnabled()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!this.logFilename***REMOVED***||***REMOVED***this.traceToConsole;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***hasLevel(level)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.loggingEnabled()***REMOVED***&&***REMOVED***this.level***REMOVED***>=***REMOVED***level;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***msg(s,***REMOVED***type***REMOVED***=***REMOVED***typescript_exports.server.Msg.Err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.canWrite())***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s***REMOVED***=***REMOVED***`[${typescript_exports.server.nowString()}]***REMOVED***${s}
`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.inGroup***REMOVED***||***REMOVED***this.firstInGroup)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***prefix***REMOVED***=***REMOVED***Logger.padStringRight(type***REMOVED***+***REMOVED***"***REMOVED***"***REMOVED***+***REMOVED***this.seq.toString(),***REMOVED***"***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***s***REMOVED***=***REMOVED***prefix***REMOVED***+***REMOVED***s;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.write(s,***REMOVED***type);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.inGroup)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.seq++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***canWrite()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.fd***REMOVED***>=***REMOVED***0***REMOVED***||***REMOVED***this.traceToConsole;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***write(s,***REMOVED***_type)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fd***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***buf***REMOVED***=***REMOVED***Buffer.from(s);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***import_fs.default.writeSync(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fd,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buf,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buf.length,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*position*/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***null
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.traceToConsole)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.warn(s);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***libDirectory***REMOVED***=***REMOVED***(0,***REMOVED***typescript_exports.getDirectoryPath)((0,***REMOVED***typescript_exports.normalizePath)(sys4.getExecutingFilePath()));
***REMOVED******REMOVED***const***REMOVED***useWatchGuard***REMOVED***=***REMOVED***process.platform***REMOVED***===***REMOVED***"win32";
***REMOVED******REMOVED***const***REMOVED***originalWatchDirectory***REMOVED***=***REMOVED***sys4.watchDirectory.bind(sys4);
***REMOVED******REMOVED***const***REMOVED***logger***REMOVED***=***REMOVED***createLogger();
***REMOVED******REMOVED***typescript_exports.Debug.loggingHost***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***log(level,***REMOVED***s)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(level)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***typescript_exports.LogLevel.Error:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***typescript_exports.LogLevel.Warning:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***logger.msg(s,***REMOVED***typescript_exports.server.Msg.Err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***typescript_exports.LogLevel.Info:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***typescript_exports.LogLevel.Verbose:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***logger.msg(s,***REMOVED***typescript_exports.server.Msg.Info);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***const***REMOVED***pending***REMOVED***=***REMOVED***(0,***REMOVED***typescript_exports.createQueue)();
***REMOVED******REMOVED***let***REMOVED***canWrite***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***if***REMOVED***(useWatchGuard)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currentDrive***REMOVED***=***REMOVED***extractWatchDirectoryCacheKey(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sys4.resolvePath(sys4.getCurrentDirectory()),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/*currentDriveKey*/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***void***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***statusCache***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED******REMOVED******REMOVED***sys4.watchDirectory***REMOVED***=***REMOVED***(path,***REMOVED***callback,***REMOVED***recursive,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cacheKey***REMOVED***=***REMOVED***extractWatchDirectoryCacheKey(path,***REMOVED***currentDrive);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***status***REMOVED***=***REMOVED***cacheKey***REMOVED***&&***REMOVED***statusCache.get(cacheKey);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(status***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(logger.hasLevel(typescript_exports.server.LogLevel.verbose))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`${cacheKey}***REMOVED***for***REMOVED***path***REMOVED***${path}***REMOVED***not***REMOVED***found***REMOVED***in***REMOVED***cache...`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***args***REMOVED***=***REMOVED***[(0,***REMOVED***typescript_exports.combinePaths)(libDirectory,***REMOVED***"watchGuard.js"),***REMOVED***path];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(logger.hasLevel(typescript_exports.server.LogLevel.verbose))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`Starting***REMOVED***${process.execPath}***REMOVED***with***REMOVED***args:${typescript_exports.server.stringifyIndented(args)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***import_child_process.default.execFileSync(process.execPath,***REMOVED***args,***REMOVED***{***REMOVED***stdio:***REMOVED***"ignore",***REMOVED***env:***REMOVED***{***REMOVED***ELECTRON_RUN_AS_NODE:***REMOVED***"1"***REMOVED***}***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(logger.hasLevel(typescript_exports.server.LogLevel.verbose))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`WatchGuard***REMOVED***for***REMOVED***path***REMOVED***${path}***REMOVED***returned:***REMOVED***OK`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(logger.hasLevel(typescript_exports.server.LogLevel.verbose))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`WatchGuard***REMOVED***for***REMOVED***path***REMOVED***${path}***REMOVED***returned:***REMOVED***${e.message}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cacheKey)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusCache.set(cacheKey,***REMOVED***status);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(logger.hasLevel(typescript_exports.server.LogLevel.verbose))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`watchDirectory***REMOVED***for***REMOVED***${path}***REMOVED***uses***REMOVED***cached***REMOVED***drive***REMOVED***information.`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(status)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***watchDirectorySwallowingException(path,***REMOVED***callback,***REMOVED***recursive,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.noopFileWatcher;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***sys4.watchDirectory***REMOVED***=***REMOVED***watchDirectorySwallowingException;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***sys4.write***REMOVED***=***REMOVED***(s)***REMOVED***=>***REMOVED***writeMessage(Buffer.from(s,***REMOVED***"utf8"));
***REMOVED******REMOVED***sys4.setTimeout***REMOVED***=***REMOVED***setTimeout;
***REMOVED******REMOVED***sys4.clearTimeout***REMOVED***=***REMOVED***clearTimeout;
***REMOVED******REMOVED***sys4.setImmediate***REMOVED***=***REMOVED***setImmediate;
***REMOVED******REMOVED***sys4.clearImmediate***REMOVED***=***REMOVED***clearImmediate;
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***global***REMOVED***!==***REMOVED***"undefined"***REMOVED***&&***REMOVED***global.gc)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***sys4.gc***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(_a***REMOVED***=***REMOVED***global.gc)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.call(global);
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***cancellationToken***REMOVED***=***REMOVED***createCancellationToken(sys4.args);
***REMOVED******REMOVED***const***REMOVED***localeStr***REMOVED***=***REMOVED***typescript_exports.server.findArgument("--locale");
***REMOVED******REMOVED***if***REMOVED***(localeStr)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***(0,***REMOVED***typescript_exports.validateLocaleAndSetLanguage)(localeStr,***REMOVED***sys4);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***modeOrUnknown***REMOVED***=***REMOVED***parseServerMode();
***REMOVED******REMOVED***let***REMOVED***serverMode;
***REMOVED******REMOVED***let***REMOVED***unknownServerMode;
***REMOVED******REMOVED***if***REMOVED***(modeOrUnknown***REMOVED***!==***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***modeOrUnknown***REMOVED***===***REMOVED***"number")***REMOVED***serverMode***REMOVED***=***REMOVED***modeOrUnknown;
***REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***unknownServerMode***REMOVED***=***REMOVED***modeOrUnknown;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***args:***REMOVED***process.argv,
***REMOVED******REMOVED******REMOVED******REMOVED***logger,
***REMOVED******REMOVED******REMOVED******REMOVED***cancellationToken,
***REMOVED******REMOVED******REMOVED******REMOVED***serverMode,
***REMOVED******REMOVED******REMOVED******REMOVED***unknownServerMode,
***REMOVED******REMOVED******REMOVED******REMOVED***startSession:***REMOVED***startNodeSession
***REMOVED******REMOVED***};
***REMOVED******REMOVED***function***REMOVED***createLogger()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cmdLineLogFileName***REMOVED***=***REMOVED***typescript_exports.server.findArgument("--logFile");
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cmdLineVerbosity***REMOVED***=***REMOVED***getLogLevel(typescript_exports.server.findArgument("--logVerbosity"));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***envLogOptions***REMOVED***=***REMOVED***parseLoggingEnvironmentString(process.env.TSS_LOG);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***unsubstitutedLogFileName***REMOVED***=***REMOVED***cmdLineLogFileName***REMOVED***?***REMOVED***(0,***REMOVED***typescript_exports.stripQuotes)(cmdLineLogFileName)***REMOVED***:***REMOVED***envLogOptions.logToFile***REMOVED***?***REMOVED***envLogOptions.file***REMOVED***||***REMOVED***libDirectory***REMOVED***+***REMOVED***"/.log"***REMOVED***+***REMOVED***process.pid.toString()***REMOVED***:***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***substitutedLogFileName***REMOVED***=***REMOVED***unsubstitutedLogFileName***REMOVED***?***REMOVED***unsubstitutedLogFileName.replace("PID",***REMOVED***process.pid.toString())***REMOVED***:***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***logVerbosity***REMOVED***=***REMOVED***cmdLineVerbosity***REMOVED***||***REMOVED***envLogOptions.detailLevel;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***new***REMOVED***Logger(substitutedLogFileName,***REMOVED***envLogOptions.traceToConsole,***REMOVED***logVerbosity);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***writeMessage(buf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!canWrite)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pending.enqueue(buf);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***canWrite***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.stdout.write(buf,***REMOVED***setCanWriteFlagAndWriteMessageIfNecessary);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***setCanWriteFlagAndWriteMessageIfNecessary()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***canWrite***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!pending.isEmpty())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***writeMessage(pending.dequeue());
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***extractWatchDirectoryCacheKey(path,***REMOVED***currentDriveKey)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***(0,***REMOVED***typescript_exports.normalizeSlashes)(path);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isUNCPath(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***firstSlash***REMOVED***=***REMOVED***path.indexOf(typescript_exports.directorySeparator,***REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***firstSlash***REMOVED***!==***REMOVED***-1***REMOVED***?***REMOVED***(0,***REMOVED***typescript_exports.toFileNameLowerCase)(path.substring(0,***REMOVED***firstSlash))***REMOVED***:***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***rootLength***REMOVED***=***REMOVED***(0,***REMOVED***typescript_exports.getRootLength)(path);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(rootLength***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***currentDriveKey;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path.charCodeAt(1)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.colon***REMOVED***&&***REMOVED***path.charCodeAt(2)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.slash)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(0,***REMOVED***typescript_exports.toFileNameLowerCase)(path.charAt(0));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path.charCodeAt(0)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.slash***REMOVED***&&***REMOVED***path.charCodeAt(1)***REMOVED***!==***REMOVED***typescript_exports.CharacterCodes.slash)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***currentDriveKey;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***isUNCPath(s)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***s.length***REMOVED***>***REMOVED***2***REMOVED***&&***REMOVED***s.charCodeAt(0)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.slash***REMOVED***&&***REMOVED***s.charCodeAt(1)***REMOVED***===***REMOVED***typescript_exports.CharacterCodes.slash;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***watchDirectorySwallowingException(path,***REMOVED***callback,***REMOVED***recursive,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***originalWatchDirectory(path,***REMOVED***callback,***REMOVED***recursive,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`Exception***REMOVED***when***REMOVED***creating***REMOVED***directory***REMOVED***watcher:***REMOVED***${e.message}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.noopFileWatcher;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}
function***REMOVED***parseEventPort(eventPortStr)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***eventPort***REMOVED***=***REMOVED***eventPortStr***REMOVED***===***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***parseInt(eventPortStr);
***REMOVED******REMOVED***return***REMOVED***eventPort***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***&&***REMOVED***!isNaN(eventPort)***REMOVED***?***REMOVED***eventPort***REMOVED***:***REMOVED***void***REMOVED***0;
}
function***REMOVED***startNodeSession(options,***REMOVED***logger,***REMOVED***cancellationToken)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***rl***REMOVED***=***REMOVED***import_readline.default.createInterface({
***REMOVED******REMOVED******REMOVED******REMOVED***input:***REMOVED***process.stdin,
***REMOVED******REMOVED******REMOVED******REMOVED***output:***REMOVED***process.stdout,
***REMOVED******REMOVED******REMOVED******REMOVED***terminal:***REMOVED***false
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***_NodeTypingsInstallerAdapter***REMOVED***=***REMOVED***class***REMOVED***_NodeTypingsInstallerAdapter***REMOVED***extends***REMOVED***typescript_exports.server.TypingsInstallerAdapter***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor(telemetryEnabled2,***REMOVED***logger2,***REMOVED***host,***REMOVED***globalTypingsCacheLocation,***REMOVED***typingSafeListLocation2,***REMOVED***typesMapLocation2,***REMOVED***npmLocation2,***REMOVED***validateDefaultNpmLocation2,***REMOVED***event)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***super(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***telemetryEnabled2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***host,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***globalTypingsCacheLocation,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***event,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***_NodeTypingsInstallerAdapter.maxActiveRequestCount
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.typingSafeListLocation***REMOVED***=***REMOVED***typingSafeListLocation2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.typesMapLocation***REMOVED***=***REMOVED***typesMapLocation2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.npmLocation***REMOVED***=***REMOVED***npmLocation2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.validateDefaultNpmLocation***REMOVED***=***REMOVED***validateDefaultNpmLocation2;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***createInstallerProcess()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.logger.hasLevel(typescript_exports.server.LogLevel.requestTime))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.logger.info("Binding...");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***args***REMOVED***=***REMOVED***[typescript_exports.server.Arguments.GlobalCacheLocation,***REMOVED***this.globalTypingsCacheLocation];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.telemetryEnabled)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(typescript_exports.server.Arguments.EnableTelemetry);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.logger.loggingEnabled()***REMOVED***&&***REMOVED***this.logger.getLogFileName())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(typescript_exports.server.Arguments.LogFile,***REMOVED***(0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.getDirectoryPath)((0,***REMOVED***typescript_exports.normalizeSlashes)(this.logger.getLogFileName())),***REMOVED***`ti-${process.pid}.log`));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.typingSafeListLocation)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(typescript_exports.server.Arguments.TypingSafeListLocation,***REMOVED***this.typingSafeListLocation);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.typesMapLocation)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(typescript_exports.server.Arguments.TypesMapLocation,***REMOVED***this.typesMapLocation);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.npmLocation)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(typescript_exports.server.Arguments.NpmLocation,***REMOVED***this.npmLocation);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.validateDefaultNpmLocation)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(typescript_exports.server.Arguments.ValidateDefaultNpmLocation);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***execArgv***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***arg***REMOVED***of***REMOVED***process.execArgv)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***match***REMOVED***=***REMOVED***/^--((?:debug|inspect)(?:-brk)?)(?:=(\d+))?$/.exec(arg);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currentPort***REMOVED***=***REMOVED***match[2]***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***+match[2]***REMOVED***:***REMOVED***match[1].charAt(0)***REMOVED***===***REMOVED***"d"***REMOVED***?***REMOVED***5858***REMOVED***:***REMOVED***9229;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***execArgv.push(`--${match[1]}=${currentPort***REMOVED***+***REMOVED***1}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***typingsInstaller***REMOVED***=***REMOVED***(0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.getDirectoryPath)(typescript_exports.sys.getExecutingFilePath()),***REMOVED***"typingsInstaller.js");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.installer***REMOVED***=***REMOVED***import_child_process.default.fork(typingsInstaller,***REMOVED***args,***REMOVED***{***REMOVED***execArgv***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.installer.on("message",***REMOVED***(m)***REMOVED***=>***REMOVED***this.handleMessage(m));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.host.setImmediate(()***REMOVED***=>***REMOVED***this.event({***REMOVED***pid:***REMOVED***this.installer.pid***REMOVED***},***REMOVED***"typingsInstallerPid"));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.on("exit",***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.installer.kill();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.installer;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***//***REMOVED***This***REMOVED***number***REMOVED***is***REMOVED***essentially***REMOVED***arbitrary.***REMOVED******REMOVED***Processing***REMOVED***more***REMOVED***than***REMOVED***one***REMOVED***typings***REMOVED***request
***REMOVED******REMOVED***//***REMOVED***at***REMOVED***a***REMOVED***time***REMOVED***makes***REMOVED***sense,***REMOVED***but***REMOVED***having***REMOVED***too***REMOVED***many***REMOVED***in***REMOVED***the***REMOVED***pipe***REMOVED***results***REMOVED***in***REMOVED***a***REMOVED***hang
***REMOVED******REMOVED***//***REMOVED***(see***REMOVED***https://github.com/nodejs/node/issues/7657).
***REMOVED******REMOVED***//***REMOVED***It***REMOVED***would***REMOVED***be***REMOVED***preferable***REMOVED***to***REMOVED***base***REMOVED***our***REMOVED***limit***REMOVED***on***REMOVED***the***REMOVED***amount***REMOVED***of***REMOVED***space***REMOVED***left***REMOVED***in***REMOVED***the
***REMOVED******REMOVED***//***REMOVED***buffer,***REMOVED***but***REMOVED***we***REMOVED***have***REMOVED***yet***REMOVED***to***REMOVED***find***REMOVED***a***REMOVED***way***REMOVED***to***REMOVED***retrieve***REMOVED***that***REMOVED***value.
***REMOVED******REMOVED***_NodeTypingsInstallerAdapter.maxActiveRequestCount***REMOVED***=***REMOVED***10;
***REMOVED******REMOVED***let***REMOVED***NodeTypingsInstallerAdapter***REMOVED***=***REMOVED***_NodeTypingsInstallerAdapter;
***REMOVED******REMOVED***class***REMOVED***IOSession***REMOVED***extends***REMOVED***typescript_exports.server.Session***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***constructor()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***event***REMOVED***=***REMOVED***(body,***REMOVED***eventName)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.event(body,***REMOVED***eventName);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***host***REMOVED***=***REMOVED***typescript_exports.sys;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***typingsInstaller***REMOVED***=***REMOVED***disableAutomaticTypingAcquisition***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***new***REMOVED***NodeTypingsInstallerAdapter(telemetryEnabled,***REMOVED***logger,***REMOVED***host,***REMOVED***getGlobalTypingsCacheLocation(),***REMOVED***typingSafeListLocation,***REMOVED***typesMapLocation,***REMOVED***npmLocation,***REMOVED***validateDefaultNpmLocation,***REMOVED***event);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***super({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***host,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancellationToken,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typingsInstaller,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***byteLength:***REMOVED***Buffer.byteLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***hrtime:***REMOVED***process.hrtime,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***canUseEvents:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typesMapLocation
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.eventPort***REMOVED***=***REMOVED***eventPort;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.canUseEvents***REMOVED***&&***REMOVED***this.eventPort)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***s***REMOVED***=***REMOVED***import_net.default.connect({***REMOVED***port:***REMOVED***this.eventPort***REMOVED***},***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.eventSocket***REMOVED***=***REMOVED***s;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.socketEventQueue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***event2***REMOVED***of***REMOVED***this.socketEventQueue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.writeToEventSocket(event2.body,***REMOVED***event2.eventName);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.socketEventQueue***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.constructed***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***event(body,***REMOVED***eventName)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typescript_exports.Debug.assert(!!this.constructed,***REMOVED***"Should***REMOVED***only***REMOVED***call***REMOVED***`IOSession.prototype.event`***REMOVED***on***REMOVED***an***REMOVED***initialized***REMOVED***IOSession");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.canUseEvents***REMOVED***&&***REMOVED***this.eventPort)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.eventSocket)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.logger.hasLevel(typescript_exports.server.LogLevel.verbose))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.logger.info(`eventPort:***REMOVED***event***REMOVED***"${eventName}"***REMOVED***queued,***REMOVED***but***REMOVED***socket***REMOVED***not***REMOVED***yet***REMOVED***initialized`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(this.socketEventQueue***REMOVED***||***REMOVED***(this.socketEventQueue***REMOVED***=***REMOVED***[])).push({***REMOVED***body,***REMOVED***eventName***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typescript_exports.Debug.assert(this.socketEventQueue***REMOVED***===***REMOVED***void***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.writeToEventSocket(body,***REMOVED***eventName);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***super.event(body,***REMOVED***eventName);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***writeToEventSocket(body,***REMOVED***eventName)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.eventSocket.write(typescript_exports.server.formatMessage(typescript_exports.server.toEvent(eventName,***REMOVED***body),***REMOVED***this.logger,***REMOVED***this.byteLength,***REMOVED***this.host.newLine),***REMOVED***"utf8");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***exit()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.logger.info("Exiting...");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.projectService.closeLog();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***typescript_exports.tracing)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.stopTracing();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.exit(0);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***listen()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rl.on("line",***REMOVED***(input)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***message***REMOVED***=***REMOVED***input.trim();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.onMessage(message);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rl.on("close",***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.exit();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***class***REMOVED***IpcIOSession***REMOVED***extends***REMOVED***IOSession***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***writeMessage(msg)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***verboseLogging***REMOVED***=***REMOVED***logger.hasLevel(typescript_exports.server.LogLevel.verbose);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(verboseLogging)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***json***REMOVED***=***REMOVED***JSON.stringify(msg);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***logger.info(`${msg.type}:${typescript_exports.server.indent(json)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.send(msg);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***parseMessage(message)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***message;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***toStringMessage(message)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***JSON.stringify(message,***REMOVED***void***REMOVED***0,***REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***listen()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.on("message",***REMOVED***(e)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.onMessage(e);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.on("disconnect",***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.exit();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***eventPort***REMOVED***=***REMOVED***parseEventPort(typescript_exports.server.findArgument("--eventPort"));
***REMOVED******REMOVED***const***REMOVED***typingSafeListLocation***REMOVED***=***REMOVED***typescript_exports.server.findArgument(typescript_exports.server.Arguments.TypingSafeListLocation);
***REMOVED******REMOVED***const***REMOVED***typesMapLocation***REMOVED***=***REMOVED***typescript_exports.server.findArgument(typescript_exports.server.Arguments.TypesMapLocation)***REMOVED***||***REMOVED***(0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.getDirectoryPath)(typescript_exports.sys.getExecutingFilePath()),***REMOVED***"typesMap.json");
***REMOVED******REMOVED***const***REMOVED***npmLocation***REMOVED***=***REMOVED***typescript_exports.server.findArgument(typescript_exports.server.Arguments.NpmLocation);
***REMOVED******REMOVED***const***REMOVED***validateDefaultNpmLocation***REMOVED***=***REMOVED***typescript_exports.server.hasArgument(typescript_exports.server.Arguments.ValidateDefaultNpmLocation);
***REMOVED******REMOVED***const***REMOVED***disableAutomaticTypingAcquisition***REMOVED***=***REMOVED***typescript_exports.server.hasArgument("--disableAutomaticTypingAcquisition");
***REMOVED******REMOVED***const***REMOVED***useNodeIpc***REMOVED***=***REMOVED***typescript_exports.server.hasArgument("--useNodeIpc");
***REMOVED******REMOVED***const***REMOVED***telemetryEnabled***REMOVED***=***REMOVED***typescript_exports.server.hasArgument(typescript_exports.server.Arguments.EnableTelemetry);
***REMOVED******REMOVED***const***REMOVED***commandLineTraceDir***REMOVED***=***REMOVED***typescript_exports.server.findArgument("--traceDirectory");
***REMOVED******REMOVED***const***REMOVED***traceDir***REMOVED***=***REMOVED***commandLineTraceDir***REMOVED***?***REMOVED***(0,***REMOVED***typescript_exports.stripQuotes)(commandLineTraceDir)***REMOVED***:***REMOVED***process.env.TSS_TRACE;
***REMOVED******REMOVED***if***REMOVED***(traceDir)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***(0,***REMOVED***typescript_exports.startTracing)("server",***REMOVED***traceDir);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***ioSession***REMOVED***=***REMOVED***useNodeIpc***REMOVED***?***REMOVED***new***REMOVED***IpcIOSession()***REMOVED***:***REMOVED***new***REMOVED***IOSession();
***REMOVED******REMOVED***process.on("uncaughtException",***REMOVED***(err)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ioSession.logError(err,***REMOVED***"unknown");
***REMOVED******REMOVED***});
***REMOVED******REMOVED***process.noAsar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***ioSession.listen();
***REMOVED******REMOVED***function***REMOVED***getGlobalTypingsCacheLocation()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(process.platform)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"win32":***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***basePath***REMOVED***=***REMOVED***process.env.LOCALAPPDATA***REMOVED***||***REMOVED***process.env.APPDATA***REMOVED***||***REMOVED***import_os.default.homedir***REMOVED***&&***REMOVED***import_os.default.homedir()***REMOVED***||***REMOVED***process.env.USERPROFILE***REMOVED***||***REMOVED***process.env.HOMEDRIVE***REMOVED***&&***REMOVED***process.env.HOMEPATH***REMOVED***&&***REMOVED***(0,***REMOVED***typescript_exports.normalizeSlashes)(process.env.HOMEDRIVE***REMOVED***+***REMOVED***process.env.HOMEPATH)***REMOVED***||***REMOVED***import_os.default.tmpdir();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.normalizeSlashes)(basePath),***REMOVED***"Microsoft/TypeScript"),***REMOVED***typescript_exports.versionMajorMinor);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"openbsd":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"freebsd":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"netbsd":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"darwin":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"linux":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"android":***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cacheLocation***REMOVED***=***REMOVED***getNonWindowsCacheLocation(process.platform***REMOVED***===***REMOVED***"darwin");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.combinePaths)(cacheLocation,***REMOVED***"typescript"),***REMOVED***typescript_exports.versionMajorMinor);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***default:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.Debug.fail(`unsupported***REMOVED***platform***REMOVED***'${process.platform}'`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getNonWindowsCacheLocation(platformIsDarwin)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(process.env.XDG_CACHE_HOME)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***process.env.XDG_CACHE_HOME;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***usersDir***REMOVED***=***REMOVED***platformIsDarwin***REMOVED***?***REMOVED***"Users"***REMOVED***:***REMOVED***"home";
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***homePath***REMOVED***=***REMOVED***import_os.default.homedir***REMOVED***&&***REMOVED***import_os.default.homedir()***REMOVED***||***REMOVED***process.env.HOME***REMOVED***||***REMOVED***(process.env.LOGNAME***REMOVED***||***REMOVED***process.env.USER)***REMOVED***&&***REMOVED***`/${usersDir}/${process.env.LOGNAME***REMOVED***||***REMOVED***process.env.USER}`***REMOVED***||***REMOVED***import_os.default.tmpdir();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***cacheFolder***REMOVED***=***REMOVED***platformIsDarwin***REMOVED***?***REMOVED***"Library/Caches"***REMOVED***:***REMOVED***".cache";
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(0,***REMOVED***typescript_exports.combinePaths)((0,***REMOVED***typescript_exports.normalizeSlashes)(homePath),***REMOVED***cacheFolder);
***REMOVED******REMOVED***}
}
function***REMOVED***pipeExists(name)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***import_fs.default.existsSync(name);
}
function***REMOVED***createCancellationToken(args)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***cancellationPipeName;
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***args.length***REMOVED***-***REMOVED***1;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(args[i]***REMOVED***===***REMOVED***"--cancellationPipeName")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancellationPipeName***REMOVED***=***REMOVED***args[i***REMOVED***+***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(!cancellationPipeName)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.server.nullCancellationToken;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(cancellationPipeName.charAt(cancellationPipeName.length***REMOVED***-***REMOVED***1)***REMOVED***===***REMOVED***"*")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***namePrefix***REMOVED***=***REMOVED***cancellationPipeName.slice(0,***REMOVED***-1);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(namePrefix.length***REMOVED***===***REMOVED***0***REMOVED***||***REMOVED***namePrefix.includes("*"))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Invalid***REMOVED***name***REMOVED***for***REMOVED***template***REMOVED***cancellation***REMOVED***pipe:***REMOVED***it***REMOVED***should***REMOVED***have***REMOVED***length***REMOVED***greater***REMOVED***than***REMOVED***2***REMOVED***characters***REMOVED***and***REMOVED***contain***REMOVED***only***REMOVED***one***REMOVED***'*'.");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***perRequestPipeName;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***currentRequestId;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isCancellationRequested:***REMOVED***()***REMOVED***=>***REMOVED***perRequestPipeName***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***&&***REMOVED***pipeExists(perRequestPipeName),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setRequest(requestId)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentRequestId***REMOVED***=***REMOVED***requestId;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***perRequestPipeName***REMOVED***=***REMOVED***namePrefix***REMOVED***+***REMOVED***requestId;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resetRequest(requestId)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(currentRequestId***REMOVED***!==***REMOVED***requestId)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Mismatched***REMOVED***request***REMOVED***id,***REMOVED***expected***REMOVED***${currentRequestId},***REMOVED***actual***REMOVED***${requestId}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***perRequestPipeName***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isCancellationRequested:***REMOVED***()***REMOVED***=>***REMOVED***pipeExists(cancellationPipeName),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setRequest:***REMOVED***(_requestId)***REMOVED***=>***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resetRequest:***REMOVED***(_requestId)***REMOVED***=>***REMOVED***void***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
}

//***REMOVED***src/tsserver/server.ts
function***REMOVED***findArgumentStringArray(argName)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***arg***REMOVED***=***REMOVED***typescript_exports.server.findArgument(argName);
***REMOVED******REMOVED***if***REMOVED***(arg***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***typescript_exports.emptyArray;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***arg.split(",").filter((name)***REMOVED***=>***REMOVED***name***REMOVED***!==***REMOVED***"");
}
function***REMOVED***start({***REMOVED***args,***REMOVED***logger,***REMOVED***cancellationToken,***REMOVED***serverMode,***REMOVED***unknownServerMode,***REMOVED***startSession:***REMOVED***startServer***REMOVED***},***REMOVED***platform)***REMOVED***{
***REMOVED******REMOVED***logger.info(`Starting***REMOVED***TS***REMOVED***Server`);
***REMOVED******REMOVED***logger.info(`Version:***REMOVED***${typescript_exports.version}`);
***REMOVED******REMOVED***logger.info(`Arguments:***REMOVED***${args.join("***REMOVED***")}`);
***REMOVED******REMOVED***logger.info(`Platform:***REMOVED***${platform}***REMOVED***NodeVersion:***REMOVED***${process.version}***REMOVED***CaseSensitive:***REMOVED***${typescript_exports.sys.useCaseSensitiveFileNames}`);
***REMOVED******REMOVED***logger.info(`ServerMode:***REMOVED***${serverMode}***REMOVED***hasUnknownServerMode:***REMOVED***${unknownServerMode}`);
***REMOVED******REMOVED***typescript_exports.setStackTraceLimit();
***REMOVED******REMOVED***if***REMOVED***(typescript_exports.Debug.isDebugging)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***typescript_exports.Debug.enableDebugInfo();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(typescript_exports.sys.tryEnableSourceMapsForHost***REMOVED***&&***REMOVED***/^development$/i.test(typescript_exports.sys.getEnvironmentVariable("NODE_ENV")))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***typescript_exports.sys.tryEnableSourceMapsForHost();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***console.log***REMOVED***=***REMOVED***(...args2)***REMOVED***=>***REMOVED***logger.msg(args2.length***REMOVED***===***REMOVED***1***REMOVED***?***REMOVED***args2[0]***REMOVED***:***REMOVED***args2.join(",***REMOVED***"),***REMOVED***typescript_exports.server.Msg.Info);
***REMOVED******REMOVED***console.warn***REMOVED***=***REMOVED***(...args2)***REMOVED***=>***REMOVED***logger.msg(args2.length***REMOVED***===***REMOVED***1***REMOVED***?***REMOVED***args2[0]***REMOVED***:***REMOVED***args2.join(",***REMOVED***"),***REMOVED***typescript_exports.server.Msg.Err);
***REMOVED******REMOVED***console.error***REMOVED***=***REMOVED***(...args2)***REMOVED***=>***REMOVED***logger.msg(args2.length***REMOVED***===***REMOVED***1***REMOVED***?***REMOVED***args2[0]***REMOVED***:***REMOVED***args2.join(",***REMOVED***"),***REMOVED***typescript_exports.server.Msg.Err);
***REMOVED******REMOVED***startServer(
***REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***globalPlugins:***REMOVED***findArgumentStringArray("--globalPlugins"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginProbeLocations:***REMOVED***findArgumentStringArray("--pluginProbeLocations"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***allowLocalPluginLoads:***REMOVED***typescript_exports.server.hasArgument("--allowLocalPluginLoads"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***useSingleInferredProject:***REMOVED***typescript_exports.server.hasArgument("--useSingleInferredProject"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***useInferredProjectPerProjectRoot:***REMOVED***typescript_exports.server.hasArgument("--useInferredProjectPerProjectRoot"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***suppressDiagnosticEvents:***REMOVED***typescript_exports.server.hasArgument("--suppressDiagnosticEvents"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***noGetErrOnBackgroundUpdate:***REMOVED***typescript_exports.server.hasArgument("--noGetErrOnBackgroundUpdate"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***canUseWatchEvents:***REMOVED***typescript_exports.server.hasArgument("--canUseWatchEvents"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***serverMode
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***logger,
***REMOVED******REMOVED******REMOVED******REMOVED***cancellationToken
***REMOVED******REMOVED***);
}
typescript_exports.setStackTraceLimit();
start(initializeNodeSystem(),***REMOVED***import_os2.default.platform());
//#***REMOVED***sourceMappingURL=_tsserver.js.map
