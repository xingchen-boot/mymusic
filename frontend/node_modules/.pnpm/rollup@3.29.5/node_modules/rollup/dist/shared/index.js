/*
***REMOVED******REMOVED***@license
	Rollup.js***REMOVED***v3.29.4
	Sat,***REMOVED***21***REMOVED***Sep***REMOVED***2024***REMOVED***06:29:06***REMOVED***GMT***REMOVED***-***REMOVED***commit***REMOVED***2ef77c00ec2635d42697cff2c0567ccc8db34fb4

	https://github.com/rollup/rollup

	Released***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
*/
'use***REMOVED***strict';

const***REMOVED***rollup***REMOVED***=***REMOVED***require('./rollup.js');
const***REMOVED***require$$0$1***REMOVED***=***REMOVED***require('fs');
const***REMOVED***require$$2***REMOVED***=***REMOVED***require('util');
const***REMOVED***require$$1***REMOVED***=***REMOVED***require('stream');
const***REMOVED***require$$0$2***REMOVED***=***REMOVED***require('path');
const***REMOVED***require$$2$1***REMOVED***=***REMOVED***require('os');
const***REMOVED***fseventsImporter***REMOVED***=***REMOVED***require('./fsevents-importer.js');
const***REMOVED***require$$0$3***REMOVED***=***REMOVED***require('events');

var***REMOVED***chokidar***REMOVED***=***REMOVED***{};

const***REMOVED***fs$3***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***{***REMOVED***Readable***REMOVED***}***REMOVED***=***REMOVED***require$$1;
const***REMOVED***sysPath$3***REMOVED***=***REMOVED***require$$0$2;
const***REMOVED***{***REMOVED***promisify:***REMOVED***promisify$3***REMOVED***}***REMOVED***=***REMOVED***require$$2;
const***REMOVED***picomatch$1***REMOVED***=***REMOVED***rollup.picomatch;

const***REMOVED***readdir$1***REMOVED***=***REMOVED***promisify$3(fs$3.readdir);
const***REMOVED***stat$3***REMOVED***=***REMOVED***promisify$3(fs$3.stat);
const***REMOVED***lstat$2***REMOVED***=***REMOVED***promisify$3(fs$3.lstat);
const***REMOVED***realpath$1***REMOVED***=***REMOVED***promisify$3(fs$3.realpath);

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{Object}***REMOVED***EntryInfo
***REMOVED*******REMOVED***@property***REMOVED***{String}***REMOVED***path
***REMOVED*******REMOVED***@property***REMOVED***{String}***REMOVED***fullPath
***REMOVED*******REMOVED***@property***REMOVED***{fs.Stats=}***REMOVED***stats
***REMOVED*******REMOVED***@property***REMOVED***{fs.Dirent=}***REMOVED***dirent
***REMOVED*******REMOVED***@property***REMOVED***{String}***REMOVED***basename
***REMOVED****/

const***REMOVED***BANG$2***REMOVED***=***REMOVED***'!';
const***REMOVED***RECURSIVE_ERROR_CODE***REMOVED***=***REMOVED***'READDIRP_RECURSIVE_ERROR';
const***REMOVED***NORMAL_FLOW_ERRORS***REMOVED***=***REMOVED***new***REMOVED***Set(['ENOENT',***REMOVED***'EPERM',***REMOVED***'EACCES',***REMOVED***'ELOOP',***REMOVED***RECURSIVE_ERROR_CODE]);
const***REMOVED***FILE_TYPE***REMOVED***=***REMOVED***'files';
const***REMOVED***DIR_TYPE***REMOVED***=***REMOVED***'directories';
const***REMOVED***FILE_DIR_TYPE***REMOVED***=***REMOVED***'files_directories';
const***REMOVED***EVERYTHING_TYPE***REMOVED***=***REMOVED***'all';
const***REMOVED***ALL_TYPES***REMOVED***=***REMOVED***[FILE_TYPE,***REMOVED***DIR_TYPE,***REMOVED***FILE_DIR_TYPE,***REMOVED***EVERYTHING_TYPE];

const***REMOVED***isNormalFlowError***REMOVED***=***REMOVED***error***REMOVED***=>***REMOVED***NORMAL_FLOW_ERRORS.has(error.code);
const***REMOVED***[maj,***REMOVED***min]***REMOVED***=***REMOVED***process.versions.node.split('.').slice(0,***REMOVED***2).map(n***REMOVED***=>***REMOVED***Number.parseInt(n,***REMOVED***10));
const***REMOVED***wantBigintFsStats***REMOVED***=***REMOVED***process.platform***REMOVED***===***REMOVED***'win32'***REMOVED***&&***REMOVED***(maj***REMOVED***>***REMOVED***10***REMOVED***||***REMOVED***(maj***REMOVED***===***REMOVED***10***REMOVED***&&***REMOVED***min***REMOVED***>=***REMOVED***5));

const***REMOVED***normalizeFilter***REMOVED***=***REMOVED***filter***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(filter***REMOVED***===***REMOVED***undefined)***REMOVED***return;
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***filter***REMOVED***===***REMOVED***'function')***REMOVED***return***REMOVED***filter;

***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***filter***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***glob***REMOVED***=***REMOVED***picomatch$1(filter.trim());
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry***REMOVED***=>***REMOVED***glob(entry.basename);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(Array.isArray(filter))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***positive***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***negative***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***item***REMOVED***of***REMOVED***filter)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***trimmed***REMOVED***=***REMOVED***item.trim();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(trimmed.charAt(0)***REMOVED***===***REMOVED***BANG$2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***negative.push(picomatch$1(trimmed.slice(1)));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***positive.push(picomatch$1(trimmed));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(negative.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(positive.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry***REMOVED***=>
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***positive.some(f***REMOVED***=>***REMOVED***f(entry.basename))***REMOVED***&&***REMOVED***!negative.some(f***REMOVED***=>***REMOVED***f(entry.basename));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry***REMOVED***=>***REMOVED***!negative.some(f***REMOVED***=>***REMOVED***f(entry.basename));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry***REMOVED***=>***REMOVED***positive.some(f***REMOVED***=>***REMOVED***f(entry.basename));
***REMOVED******REMOVED***}
};

class***REMOVED***ReaddirpStream***REMOVED***extends***REMOVED***Readable***REMOVED***{
***REMOVED******REMOVED***static***REMOVED***get***REMOVED***defaultOptions()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***root:***REMOVED***'.',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***eslint-disable***REMOVED***no-unused-vars***REMOVED****/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fileFilter:***REMOVED***(path)***REMOVED***=>***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***directoryFilter:***REMOVED***(path)***REMOVED***=>***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***/****REMOVED***eslint-enable***REMOVED***no-unused-vars***REMOVED****/
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***type:***REMOVED***FILE_TYPE,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lstat:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***depth:***REMOVED***2147483648,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***alwaysStat:***REMOVED***false
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}

***REMOVED******REMOVED***constructor(options***REMOVED***=***REMOVED***{})***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***super({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***objectMode:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***autoDestroy:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***highWaterMark:***REMOVED***options.highWaterMark***REMOVED***||***REMOVED***4096
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***{***REMOVED***...ReaddirpStream.defaultOptions,***REMOVED***...options***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***root,***REMOVED***type***REMOVED***}***REMOVED***=***REMOVED***opts;

***REMOVED******REMOVED******REMOVED******REMOVED***this._fileFilter***REMOVED***=***REMOVED***normalizeFilter(opts.fileFilter);
***REMOVED******REMOVED******REMOVED******REMOVED***this._directoryFilter***REMOVED***=***REMOVED***normalizeFilter(opts.directoryFilter);

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***statMethod***REMOVED***=***REMOVED***opts.lstat***REMOVED***?***REMOVED***lstat$2***REMOVED***:***REMOVED***stat$3;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Use***REMOVED***bigint***REMOVED***stats***REMOVED***if***REMOVED***it's***REMOVED***windows***REMOVED***and***REMOVED***stat()***REMOVED***supports***REMOVED***options***REMOVED***(node***REMOVED***10+).
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(wantBigintFsStats)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._stat***REMOVED***=***REMOVED***path***REMOVED***=>***REMOVED***statMethod(path,***REMOVED***{***REMOVED***bigint:***REMOVED***true***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._stat***REMOVED***=***REMOVED***statMethod;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***this._maxDepth***REMOVED***=***REMOVED***opts.depth;
***REMOVED******REMOVED******REMOVED******REMOVED***this._wantsDir***REMOVED***=***REMOVED***[DIR_TYPE,***REMOVED***FILE_DIR_TYPE,***REMOVED***EVERYTHING_TYPE].includes(type);
***REMOVED******REMOVED******REMOVED******REMOVED***this._wantsFile***REMOVED***=***REMOVED***[FILE_TYPE,***REMOVED***FILE_DIR_TYPE,***REMOVED***EVERYTHING_TYPE].includes(type);
***REMOVED******REMOVED******REMOVED******REMOVED***this._wantsEverything***REMOVED***=***REMOVED***type***REMOVED***===***REMOVED***EVERYTHING_TYPE;
***REMOVED******REMOVED******REMOVED******REMOVED***this._root***REMOVED***=***REMOVED***sysPath$3.resolve(root);
***REMOVED******REMOVED******REMOVED******REMOVED***this._isDirent***REMOVED***=***REMOVED***('Dirent'***REMOVED***in***REMOVED***fs$3)***REMOVED***&&***REMOVED***!opts.alwaysStat;
***REMOVED******REMOVED******REMOVED******REMOVED***this._statsProp***REMOVED***=***REMOVED***this._isDirent***REMOVED***?***REMOVED***'dirent'***REMOVED***:***REMOVED***'stats';
***REMOVED******REMOVED******REMOVED******REMOVED***this._rdOptions***REMOVED***=***REMOVED***{***REMOVED***encoding:***REMOVED***'utf8',***REMOVED***withFileTypes:***REMOVED***this._isDirent***REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Launch***REMOVED***stream***REMOVED***with***REMOVED***one***REMOVED***parent,***REMOVED***the***REMOVED***root***REMOVED***dir.
***REMOVED******REMOVED******REMOVED******REMOVED***this.parents***REMOVED***=***REMOVED***[this._exploreDir(root,***REMOVED***1)];
***REMOVED******REMOVED******REMOVED******REMOVED***this.reading***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.parent***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***async***REMOVED***_read(batch)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.reading)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***this.reading***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(!this.destroyed***REMOVED***&&***REMOVED***batch***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***path,***REMOVED***depth,***REMOVED***files***REMOVED***=***REMOVED***[]***REMOVED***}***REMOVED***=***REMOVED***this.parent***REMOVED***||***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(files.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***slice***REMOVED***=***REMOVED***files.splice(0,***REMOVED***batch).map(dirent***REMOVED***=>***REMOVED***this._formatEntry(dirent,***REMOVED***path));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***entry***REMOVED***of***REMOVED***await***REMOVED***Promise.all(slice))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.destroyed)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***entryType***REMOVED***=***REMOVED***await***REMOVED***this._getEntryType(entry);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(entryType***REMOVED***===***REMOVED***'directory'***REMOVED***&&***REMOVED***this._directoryFilter(entry))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(depth***REMOVED***<=***REMOVED***this._maxDepth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.parents.push(this._exploreDir(entry.fullPath,***REMOVED***depth***REMOVED***+***REMOVED***1));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this._wantsDir)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.push(entry);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***batch--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***((entryType***REMOVED***===***REMOVED***'file'***REMOVED***||***REMOVED***this._includeAsFile(entry))***REMOVED***&&***REMOVED***this._fileFilter(entry))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this._wantsFile)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.push(entry);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***batch--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parent***REMOVED***=***REMOVED***this.parents.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!parent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.push(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.parent***REMOVED***=***REMOVED***await***REMOVED***parent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.destroyed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.destroy(error);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***finally***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.reading***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***async***REMOVED***_exploreDir(path,***REMOVED***depth)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***files;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***files***REMOVED***=***REMOVED***await***REMOVED***readdir$1(path,***REMOVED***this._rdOptions);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._onError(error);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***files,***REMOVED***depth,***REMOVED***path***REMOVED***};
***REMOVED******REMOVED***}

***REMOVED******REMOVED***async***REMOVED***_formatEntry(dirent,***REMOVED***path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***entry;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***basename***REMOVED***=***REMOVED***this._isDirent***REMOVED***?***REMOVED***dirent.name***REMOVED***:***REMOVED***dirent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fullPath***REMOVED***=***REMOVED***sysPath$3.resolve(sysPath$3.join(path,***REMOVED***basename));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entry***REMOVED***=***REMOVED***{***REMOVED***path:***REMOVED***sysPath$3.relative(this._root,***REMOVED***fullPath),***REMOVED***fullPath,***REMOVED***basename***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entry[this._statsProp]***REMOVED***=***REMOVED***this._isDirent***REMOVED***?***REMOVED***dirent***REMOVED***:***REMOVED***await***REMOVED***this._stat(fullPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._onError(err);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***_onError(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isNormalFlowError(err)***REMOVED***&&***REMOVED***!this.destroyed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emit('warn',***REMOVED***err);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.destroy(err);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***async***REMOVED***_getEntryType(entry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***entry***REMOVED***may***REMOVED***be***REMOVED***undefined,***REMOVED***because***REMOVED***a***REMOVED***warning***REMOVED***or***REMOVED***an***REMOVED***error***REMOVED***were***REMOVED***emitted
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***and***REMOVED***the***REMOVED***statsProp***REMOVED***is***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stats***REMOVED***=***REMOVED***entry***REMOVED***&&***REMOVED***entry[this._statsProp];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!stats)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats.isFile())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'file';
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats.isDirectory())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'directory';
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats***REMOVED***&&***REMOVED***stats.isSymbolicLink())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***full***REMOVED***=***REMOVED***entry.fullPath;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***entryRealPath***REMOVED***=***REMOVED***await***REMOVED***realpath$1(full);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***entryRealPathStats***REMOVED***=***REMOVED***await***REMOVED***lstat$2(entryRealPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(entryRealPathStats.isFile())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'file';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(entryRealPathStats.isDirectory())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***len***REMOVED***=***REMOVED***entryRealPath.length;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(full.startsWith(entryRealPath)***REMOVED***&&***REMOVED***full.substr(len,***REMOVED***1)***REMOVED***===***REMOVED***sysPath$3.sep)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***recursiveError***REMOVED***=***REMOVED***new***REMOVED***Error(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`Circular***REMOVED***symlink***REMOVED***detected:***REMOVED***"${full}"***REMOVED***points***REMOVED***to***REMOVED***"${entryRealPath}"`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***recursiveError.code***REMOVED***=***REMOVED***RECURSIVE_ERROR_CODE;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this._onError(recursiveError);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'directory';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._onError(error);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***_includeAsFile(entry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stats***REMOVED***=***REMOVED***entry***REMOVED***&&***REMOVED***entry[this._statsProp];

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***stats***REMOVED***&&***REMOVED***this._wantsEverything***REMOVED***&&***REMOVED***!stats.isDirectory();
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{Object}***REMOVED***ReaddirpArguments
***REMOVED*******REMOVED***@property***REMOVED***{Function=}***REMOVED***fileFilter
***REMOVED*******REMOVED***@property***REMOVED***{Function=}***REMOVED***directoryFilter
***REMOVED*******REMOVED***@property***REMOVED***{String=}***REMOVED***type
***REMOVED*******REMOVED***@property***REMOVED***{Number=}***REMOVED***depth
***REMOVED*******REMOVED***@property***REMOVED***{String=}***REMOVED***root
***REMOVED*******REMOVED***@property***REMOVED***{Boolean=}***REMOVED***lstat
***REMOVED*******REMOVED***@property***REMOVED***{Boolean=}***REMOVED***bigint
***REMOVED****/

/**
***REMOVED*******REMOVED***Main***REMOVED***function***REMOVED***which***REMOVED***ends***REMOVED***up***REMOVED***calling***REMOVED***readdirRec***REMOVED***and***REMOVED***reads***REMOVED***all***REMOVED***files***REMOVED***and***REMOVED***directories***REMOVED***in***REMOVED***given***REMOVED***root***REMOVED***recursively.
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***root***REMOVED***Root***REMOVED***directory
***REMOVED*******REMOVED***@param***REMOVED***{ReaddirpArguments=}***REMOVED***options***REMOVED***Options***REMOVED***to***REMOVED***specify***REMOVED***root***REMOVED***(start***REMOVED***directory),***REMOVED***filters***REMOVED***and***REMOVED***recursion***REMOVED***depth
***REMOVED****/
const***REMOVED***readdirp$1***REMOVED***=***REMOVED***(root,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***type***REMOVED***=***REMOVED***options.entryType***REMOVED***||***REMOVED***options.type;
***REMOVED******REMOVED***if***REMOVED***(type***REMOVED***===***REMOVED***'both')***REMOVED***type***REMOVED***=***REMOVED***FILE_DIR_TYPE;***REMOVED***//***REMOVED***backwards-compatibility
***REMOVED******REMOVED***if***REMOVED***(type)***REMOVED***options.type***REMOVED***=***REMOVED***type;
***REMOVED******REMOVED***if***REMOVED***(!root)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('readdirp:***REMOVED***root***REMOVED***argument***REMOVED***is***REMOVED***required.***REMOVED***Usage:***REMOVED***readdirp(root,***REMOVED***options)');
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(typeof***REMOVED***root***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('readdirp:***REMOVED***root***REMOVED***argument***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string.***REMOVED***Usage:***REMOVED***readdirp(root,***REMOVED***options)');
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(type***REMOVED***&&***REMOVED***!ALL_TYPES.includes(type))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`readdirp:***REMOVED***Invalid***REMOVED***type***REMOVED***passed.***REMOVED***Use***REMOVED***one***REMOVED***of***REMOVED***${ALL_TYPES.join(',***REMOVED***')}`);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***options.root***REMOVED***=***REMOVED***root;
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***ReaddirpStream(options);
};

const***REMOVED***readdirpPromise***REMOVED***=***REMOVED***(root,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***files***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***readdirp$1(root,***REMOVED***options)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.on('data',***REMOVED***entry***REMOVED***=>***REMOVED***files.push(entry))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.on('end',***REMOVED***()***REMOVED***=>***REMOVED***resolve(files))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.on('error',***REMOVED***error***REMOVED***=>***REMOVED***reject(error));
***REMOVED******REMOVED***});
};

readdirp$1.promise***REMOVED***=***REMOVED***readdirpPromise;
readdirp$1.ReaddirpStream***REMOVED***=***REMOVED***ReaddirpStream;
readdirp$1.default***REMOVED***=***REMOVED***readdirp$1;

var***REMOVED***readdirp_1***REMOVED***=***REMOVED***readdirp$1;

var***REMOVED***anymatch$2***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

/*!
***REMOVED*******REMOVED***normalize-path***REMOVED***<https://github.com/jonschlinkert/normalize-path>
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***(c)***REMOVED***2014-2018,***REMOVED***Jon***REMOVED***Schlinkert.
***REMOVED*******REMOVED***Released***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
***REMOVED****/

var***REMOVED***normalizePath$2***REMOVED***=***REMOVED***function(path,***REMOVED***stripTrailing)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***path***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('expected***REMOVED***path***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***string');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(path***REMOVED***===***REMOVED***'\\'***REMOVED***||***REMOVED***path***REMOVED***===***REMOVED***'/')***REMOVED***return***REMOVED***'/';

***REMOVED******REMOVED***var***REMOVED***len***REMOVED***=***REMOVED***path.length;
***REMOVED******REMOVED***if***REMOVED***(len***REMOVED***<=***REMOVED***1)***REMOVED***return***REMOVED***path;

***REMOVED******REMOVED***//***REMOVED***ensure***REMOVED***that***REMOVED***win32***REMOVED***namespaces***REMOVED***has***REMOVED***two***REMOVED***leading***REMOVED***slashes,***REMOVED***so***REMOVED***that***REMOVED***the***REMOVED***path***REMOVED***is
***REMOVED******REMOVED***//***REMOVED***handled***REMOVED***properly***REMOVED***by***REMOVED***the***REMOVED***win32***REMOVED***version***REMOVED***of***REMOVED***path.parse()***REMOVED***after***REMOVED***being***REMOVED***normalized
***REMOVED******REMOVED***//***REMOVED***https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces
***REMOVED******REMOVED***var***REMOVED***prefix***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***if***REMOVED***(len***REMOVED***>***REMOVED***4***REMOVED***&&***REMOVED***path[3]***REMOVED***===***REMOVED***'\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***ch***REMOVED***=***REMOVED***path[2];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((ch***REMOVED***===***REMOVED***'?'***REMOVED***||***REMOVED***ch***REMOVED***===***REMOVED***'.')***REMOVED***&&***REMOVED***path.slice(0,***REMOVED***2)***REMOVED***===***REMOVED***'\\\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***path.slice(2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prefix***REMOVED***=***REMOVED***'//';
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***var***REMOVED***segs***REMOVED***=***REMOVED***path.split(/[/\\]+/);
***REMOVED******REMOVED***if***REMOVED***(stripTrailing***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***segs[segs.length***REMOVED***-***REMOVED***1]***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***segs.pop();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***prefix***REMOVED***+***REMOVED***segs.join('/');
};

var***REMOVED***anymatch_1***REMOVED***=***REMOVED***anymatch$2.exports;

Object.defineProperty(anymatch_1,***REMOVED***"__esModule",***REMOVED***{***REMOVED***value:***REMOVED***true***REMOVED***});

const***REMOVED***picomatch***REMOVED***=***REMOVED***rollup.picomatch;
const***REMOVED***normalizePath$1***REMOVED***=***REMOVED***normalizePath$2;

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{(testString:***REMOVED***string)***REMOVED***=>***REMOVED***boolean}***REMOVED***AnymatchFn
***REMOVED*******REMOVED***@typedef***REMOVED***{string|RegExp|AnymatchFn}***REMOVED***AnymatchPattern
***REMOVED*******REMOVED***@typedef***REMOVED***{AnymatchPattern|AnymatchPattern[]}***REMOVED***AnymatchMatcher
***REMOVED****/
const***REMOVED***BANG$1***REMOVED***=***REMOVED***'!';
const***REMOVED***DEFAULT_OPTIONS***REMOVED***=***REMOVED***{returnIndex:***REMOVED***false};
const***REMOVED***arrify$1***REMOVED***=***REMOVED***(item)***REMOVED***=>***REMOVED***Array.isArray(item)***REMOVED***?***REMOVED***item***REMOVED***:***REMOVED***[item];

/**
***REMOVED*******REMOVED***@param***REMOVED***{AnymatchPattern}***REMOVED***matcher
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***options
***REMOVED*******REMOVED***@returns***REMOVED***{AnymatchFn}
***REMOVED****/
const***REMOVED***createPattern***REMOVED***=***REMOVED***(matcher,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***matcher***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***matcher;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***matcher***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***glob***REMOVED***=***REMOVED***picomatch(matcher,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(string)***REMOVED***=>***REMOVED***matcher***REMOVED***===***REMOVED***string***REMOVED***||***REMOVED***glob(string);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(matcher***REMOVED***instanceof***REMOVED***RegExp)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(string)***REMOVED***=>***REMOVED***matcher.test(string);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***(string)***REMOVED***=>***REMOVED***false;
};

/**
***REMOVED*******REMOVED***@param***REMOVED***{Array<Function>}***REMOVED***patterns
***REMOVED*******REMOVED***@param***REMOVED***{Array<Function>}***REMOVED***negPatterns
***REMOVED*******REMOVED***@param***REMOVED***{String|Array}***REMOVED***args
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***returnIndex
***REMOVED*******REMOVED***@returns***REMOVED***{boolean|number}
***REMOVED****/
const***REMOVED***matchPatterns***REMOVED***=***REMOVED***(patterns,***REMOVED***negPatterns,***REMOVED***args,***REMOVED***returnIndex)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***isList***REMOVED***=***REMOVED***Array.isArray(args);
***REMOVED******REMOVED***const***REMOVED***_path***REMOVED***=***REMOVED***isList***REMOVED***?***REMOVED***args[0]***REMOVED***:***REMOVED***args;
***REMOVED******REMOVED***if***REMOVED***(!isList***REMOVED***&&***REMOVED***typeof***REMOVED***_path***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('anymatch:***REMOVED***second***REMOVED***argument***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string:***REMOVED***got***REMOVED***'***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.prototype.toString.call(_path))
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***normalizePath$1(_path,***REMOVED***false);

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***index***REMOVED***=***REMOVED***0;***REMOVED***index***REMOVED***<***REMOVED***negPatterns.length;***REMOVED***index++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nglob***REMOVED***=***REMOVED***negPatterns[index];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(nglob(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***returnIndex***REMOVED***?***REMOVED***-1***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***applied***REMOVED***=***REMOVED***isList***REMOVED***&&***REMOVED***[path].concat(args.slice(1));
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***index***REMOVED***=***REMOVED***0;***REMOVED***index***REMOVED***<***REMOVED***patterns.length;***REMOVED***index++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pattern***REMOVED***=***REMOVED***patterns[index];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isList***REMOVED***?***REMOVED***pattern(...applied)***REMOVED***:***REMOVED***pattern(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***returnIndex***REMOVED***?***REMOVED***index***REMOVED***:***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***returnIndex***REMOVED***?***REMOVED***-1***REMOVED***:***REMOVED***false;
};

/**
***REMOVED*******REMOVED***@param***REMOVED***{AnymatchMatcher}***REMOVED***matchers
***REMOVED*******REMOVED***@param***REMOVED***{Array|string}***REMOVED***testString
***REMOVED*******REMOVED***@param***REMOVED***{object}***REMOVED***options
***REMOVED*******REMOVED***@returns***REMOVED***{boolean|number|Function}
***REMOVED****/
const***REMOVED***anymatch$1***REMOVED***=***REMOVED***(matchers,***REMOVED***testString,***REMOVED***options***REMOVED***=***REMOVED***DEFAULT_OPTIONS)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(matchers***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('anymatch:***REMOVED***specify***REMOVED***first***REMOVED***argument');
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***typeof***REMOVED***options***REMOVED***===***REMOVED***'boolean'***REMOVED***?***REMOVED***{returnIndex:***REMOVED***options}***REMOVED***:***REMOVED***options;
***REMOVED******REMOVED***const***REMOVED***returnIndex***REMOVED***=***REMOVED***opts.returnIndex***REMOVED***||***REMOVED***false;

***REMOVED******REMOVED***//***REMOVED***Early***REMOVED***cache***REMOVED***for***REMOVED***matchers.
***REMOVED******REMOVED***const***REMOVED***mtchers***REMOVED***=***REMOVED***arrify$1(matchers);
***REMOVED******REMOVED***const***REMOVED***negatedGlobs***REMOVED***=***REMOVED***mtchers
***REMOVED******REMOVED******REMOVED******REMOVED***.filter(item***REMOVED***=>***REMOVED***typeof***REMOVED***item***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***item.charAt(0)***REMOVED***===***REMOVED***BANG$1)
***REMOVED******REMOVED******REMOVED******REMOVED***.map(item***REMOVED***=>***REMOVED***item.slice(1))
***REMOVED******REMOVED******REMOVED******REMOVED***.map(item***REMOVED***=>***REMOVED***picomatch(item,***REMOVED***opts));
***REMOVED******REMOVED***const***REMOVED***patterns***REMOVED***=***REMOVED***mtchers
***REMOVED******REMOVED******REMOVED******REMOVED***.filter(item***REMOVED***=>***REMOVED***typeof***REMOVED***item***REMOVED***!==***REMOVED***'string'***REMOVED***||***REMOVED***(typeof***REMOVED***item***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***item.charAt(0)***REMOVED***!==***REMOVED***BANG$1))
***REMOVED******REMOVED******REMOVED******REMOVED***.map(matcher***REMOVED***=>***REMOVED***createPattern(matcher,***REMOVED***opts));

***REMOVED******REMOVED***if***REMOVED***(testString***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(testString,***REMOVED***ri***REMOVED***=***REMOVED***false)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***returnIndex***REMOVED***=***REMOVED***typeof***REMOVED***ri***REMOVED***===***REMOVED***'boolean'***REMOVED***?***REMOVED***ri***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***matchPatterns(patterns,***REMOVED***negatedGlobs,***REMOVED***testString,***REMOVED***returnIndex);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***matchPatterns(patterns,***REMOVED***negatedGlobs,***REMOVED***testString,***REMOVED***returnIndex);
};

anymatch$1.default***REMOVED***=***REMOVED***anymatch$1;
anymatch$2.exports***REMOVED***=***REMOVED***anymatch$1;

var***REMOVED***anymatchExports***REMOVED***=***REMOVED***anymatch$2.exports;

/*!
***REMOVED*******REMOVED***is-extglob***REMOVED***<https://github.com/jonschlinkert/is-extglob>
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***(c)***REMOVED***2014-2016,***REMOVED***Jon***REMOVED***Schlinkert.
***REMOVED*******REMOVED***Licensed***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
***REMOVED****/

var***REMOVED***isExtglob$1***REMOVED***=***REMOVED***function***REMOVED***isExtglob(str)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***str***REMOVED***!==***REMOVED***'string'***REMOVED***||***REMOVED***str***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***var***REMOVED***match;
***REMOVED******REMOVED***while***REMOVED***((match***REMOVED***=***REMOVED***/(\\).|([@?!+*]\(.*\))/g.exec(str)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match[2])***REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***=***REMOVED***str.slice(match.index***REMOVED***+***REMOVED***match[0].length);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***false;
};

/*!
***REMOVED*******REMOVED***is-glob***REMOVED***<https://github.com/jonschlinkert/is-glob>
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***(c)***REMOVED***2014-2017,***REMOVED***Jon***REMOVED***Schlinkert.
***REMOVED*******REMOVED***Released***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
***REMOVED****/

var***REMOVED***isExtglob***REMOVED***=***REMOVED***isExtglob$1;
var***REMOVED***chars***REMOVED***=***REMOVED***{***REMOVED***'{':***REMOVED***'}',***REMOVED***'(':***REMOVED***')',***REMOVED***'[':***REMOVED***']'};
var***REMOVED***strictCheck***REMOVED***=***REMOVED***function(str)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(str[0]***REMOVED***===***REMOVED***'!')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***var***REMOVED***pipeIndex***REMOVED***=***REMOVED***-2;
***REMOVED******REMOVED***var***REMOVED***closeSquareIndex***REMOVED***=***REMOVED***-2;
***REMOVED******REMOVED***var***REMOVED***closeCurlyIndex***REMOVED***=***REMOVED***-2;
***REMOVED******REMOVED***var***REMOVED***closeParenIndex***REMOVED***=***REMOVED***-2;
***REMOVED******REMOVED***var***REMOVED***backSlashIndex***REMOVED***=***REMOVED***-2;
***REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***str.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(str[index]***REMOVED***===***REMOVED***'*')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(str[index***REMOVED***+***REMOVED***1]***REMOVED***===***REMOVED***'?'***REMOVED***&&***REMOVED***/[\].+)]/.test(str[index]))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeSquareIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***str[index]***REMOVED***===***REMOVED***'['***REMOVED***&&***REMOVED***str[index***REMOVED***+***REMOVED***1]***REMOVED***!==***REMOVED***']')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeSquareIndex***REMOVED***<***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closeSquareIndex***REMOVED***=***REMOVED***str.indexOf(']',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeSquareIndex***REMOVED***>***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(backSlashIndex***REMOVED***===***REMOVED***-1***REMOVED***||***REMOVED***backSlashIndex***REMOVED***>***REMOVED***closeSquareIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backSlashIndex***REMOVED***=***REMOVED***str.indexOf('\\',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(backSlashIndex***REMOVED***===***REMOVED***-1***REMOVED***||***REMOVED***backSlashIndex***REMOVED***>***REMOVED***closeSquareIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeCurlyIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***str[index]***REMOVED***===***REMOVED***'{'***REMOVED***&&***REMOVED***str[index***REMOVED***+***REMOVED***1]***REMOVED***!==***REMOVED***'}')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closeCurlyIndex***REMOVED***=***REMOVED***str.indexOf('}',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeCurlyIndex***REMOVED***>***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backSlashIndex***REMOVED***=***REMOVED***str.indexOf('\\',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(backSlashIndex***REMOVED***===***REMOVED***-1***REMOVED***||***REMOVED***backSlashIndex***REMOVED***>***REMOVED***closeCurlyIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeParenIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***str[index]***REMOVED***===***REMOVED***'('***REMOVED***&&***REMOVED***str[index***REMOVED***+***REMOVED***1]***REMOVED***===***REMOVED***'?'***REMOVED***&&***REMOVED***/[:!=]/.test(str[index***REMOVED***+***REMOVED***2])***REMOVED***&&***REMOVED***str[index***REMOVED***+***REMOVED***3]***REMOVED***!==***REMOVED***')')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closeParenIndex***REMOVED***=***REMOVED***str.indexOf(')',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeParenIndex***REMOVED***>***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backSlashIndex***REMOVED***=***REMOVED***str.indexOf('\\',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(backSlashIndex***REMOVED***===***REMOVED***-1***REMOVED***||***REMOVED***backSlashIndex***REMOVED***>***REMOVED***closeParenIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pipeIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***str[index]***REMOVED***===***REMOVED***'('***REMOVED***&&***REMOVED***str[index***REMOVED***+***REMOVED***1]***REMOVED***!==***REMOVED***'|')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pipeIndex***REMOVED***<***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pipeIndex***REMOVED***=***REMOVED***str.indexOf('|',***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pipeIndex***REMOVED***!==***REMOVED***-1***REMOVED***&&***REMOVED***str[pipeIndex***REMOVED***+***REMOVED***1]***REMOVED***!==***REMOVED***')')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closeParenIndex***REMOVED***=***REMOVED***str.indexOf(')',***REMOVED***pipeIndex);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeParenIndex***REMOVED***>***REMOVED***pipeIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***backSlashIndex***REMOVED***=***REMOVED***str.indexOf('\\',***REMOVED***pipeIndex);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(backSlashIndex***REMOVED***===***REMOVED***-1***REMOVED***||***REMOVED***backSlashIndex***REMOVED***>***REMOVED***closeParenIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(str[index]***REMOVED***===***REMOVED***'\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***open***REMOVED***=***REMOVED***str[index***REMOVED***+***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index***REMOVED***+=***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***close***REMOVED***=***REMOVED***chars[open];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(close)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***n***REMOVED***=***REMOVED***str.indexOf(close,***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(n***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index***REMOVED***=***REMOVED***n***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(str[index]***REMOVED***===***REMOVED***'!')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index++;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
};

var***REMOVED***relaxedCheck***REMOVED***=***REMOVED***function(str)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(str[0]***REMOVED***===***REMOVED***'!')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***str.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(/[*?{}()[\]]/.test(str[index]))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(str[index]***REMOVED***===***REMOVED***'\\')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***open***REMOVED***=***REMOVED***str[index***REMOVED***+***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index***REMOVED***+=***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***close***REMOVED***=***REMOVED***chars[open];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(close)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***n***REMOVED***=***REMOVED***str.indexOf(close,***REMOVED***index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(n***REMOVED***!==***REMOVED***-1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index***REMOVED***=***REMOVED***n***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(str[index]***REMOVED***===***REMOVED***'!')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***index++;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
};

var***REMOVED***isGlob$2***REMOVED***=***REMOVED***function***REMOVED***isGlob(str,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***str***REMOVED***!==***REMOVED***'string'***REMOVED***||***REMOVED***str***REMOVED***===***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isExtglob(str))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***var***REMOVED***check***REMOVED***=***REMOVED***strictCheck;

***REMOVED******REMOVED***//***REMOVED***optionally***REMOVED***relax***REMOVED***check
***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.strict***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***check***REMOVED***=***REMOVED***relaxedCheck;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***check(str);
};

var***REMOVED***isGlob$1***REMOVED***=***REMOVED***isGlob$2;
var***REMOVED***pathPosixDirname***REMOVED***=***REMOVED***require$$0$2.posix.dirname;
var***REMOVED***isWin32***REMOVED***=***REMOVED***require$$2$1.platform()***REMOVED***===***REMOVED***'win32';

var***REMOVED***slash***REMOVED***=***REMOVED***'/';
var***REMOVED***backslash***REMOVED***=***REMOVED***/\\/g;
var***REMOVED***enclosure***REMOVED***=***REMOVED***/[\{\[].*[\}\]]$/;
var***REMOVED***globby***REMOVED***=***REMOVED***/(^|[^\\])([\{\[]|\([^\)]+$)/;
var***REMOVED***escaped***REMOVED***=***REMOVED***/\\([\!\*\?\|\[\]\(\)\{\}])/g;

/**
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***str
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***opts
***REMOVED*******REMOVED***@param***REMOVED***{boolean}***REMOVED***[opts.flipBackslashes=true]
***REMOVED*******REMOVED***@returns***REMOVED***{string}
***REMOVED****/
var***REMOVED***globParent$1***REMOVED***=***REMOVED***function***REMOVED***globParent(str,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***options***REMOVED***=***REMOVED***Object.assign({***REMOVED***flipBackslashes:***REMOVED***true***REMOVED***},***REMOVED***opts);

***REMOVED******REMOVED***//***REMOVED***flip***REMOVED***windows***REMOVED***path***REMOVED***separators
***REMOVED******REMOVED***if***REMOVED***(options.flipBackslashes***REMOVED***&&***REMOVED***isWin32***REMOVED***&&***REMOVED***str.indexOf(slash)***REMOVED***<***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***=***REMOVED***str.replace(backslash,***REMOVED***slash);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***special***REMOVED***case***REMOVED***for***REMOVED***strings***REMOVED***ending***REMOVED***in***REMOVED***enclosure***REMOVED***containing***REMOVED***path***REMOVED***separator
***REMOVED******REMOVED***if***REMOVED***(enclosure.test(str))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***+=***REMOVED***slash;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***preserves***REMOVED***full***REMOVED***path***REMOVED***in***REMOVED***case***REMOVED***of***REMOVED***trailing***REMOVED***path***REMOVED***separator
***REMOVED******REMOVED***str***REMOVED***+=***REMOVED***'a';

***REMOVED******REMOVED***//***REMOVED***remove***REMOVED***path***REMOVED***parts***REMOVED***that***REMOVED***are***REMOVED***globby
***REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***=***REMOVED***pathPosixDirname(str);
***REMOVED******REMOVED***}***REMOVED***while***REMOVED***(isGlob$1(str)***REMOVED***||***REMOVED***globby.test(str));

***REMOVED******REMOVED***//***REMOVED***remove***REMOVED***escape***REMOVED***chars***REMOVED***and***REMOVED***return***REMOVED***result
***REMOVED******REMOVED***return***REMOVED***str.replace(escaped,***REMOVED***'$1');
};

var***REMOVED***utils$3***REMOVED***=***REMOVED***{};

(function***REMOVED***(exports)***REMOVED***{

	exports.isInteger***REMOVED***=***REMOVED***num***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***num***REMOVED***===***REMOVED***'number')***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Number.isInteger(num);
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***num***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***num.trim()***REMOVED***!==***REMOVED***'')***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Number.isInteger(Number(num));
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***false;
	};

	/**
	***REMOVED*******REMOVED***Find***REMOVED***a***REMOVED***node***REMOVED***of***REMOVED***the***REMOVED***given***REMOVED***type
	***REMOVED****/

	exports.find***REMOVED***=***REMOVED***(node,***REMOVED***type)***REMOVED***=>***REMOVED***node.nodes.find(node***REMOVED***=>***REMOVED***node.type***REMOVED***===***REMOVED***type);

	/**
	***REMOVED*******REMOVED***Find***REMOVED***a***REMOVED***node***REMOVED***of***REMOVED***the***REMOVED***given***REMOVED***type
	***REMOVED****/

	exports.exceedsLimit***REMOVED***=***REMOVED***(min,***REMOVED***max,***REMOVED***step***REMOVED***=***REMOVED***1,***REMOVED***limit)***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(limit***REMOVED***===***REMOVED***false)***REMOVED***return***REMOVED***false;
	***REMOVED******REMOVED***if***REMOVED***(!exports.isInteger(min)***REMOVED***||***REMOVED***!exports.isInteger(max))***REMOVED***return***REMOVED***false;
	***REMOVED******REMOVED***return***REMOVED***((Number(max)***REMOVED***-***REMOVED***Number(min))***REMOVED***/***REMOVED***Number(step))***REMOVED***>=***REMOVED***limit;
	};

	/**
	***REMOVED*******REMOVED***Escape***REMOVED***the***REMOVED***given***REMOVED***node***REMOVED***with***REMOVED***'\\'***REMOVED***before***REMOVED***node.value
	***REMOVED****/

	exports.escapeNode***REMOVED***=***REMOVED***(block,***REMOVED***n***REMOVED***=***REMOVED***0,***REMOVED***type)***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***let***REMOVED***node***REMOVED***=***REMOVED***block.nodes[n];
	***REMOVED******REMOVED***if***REMOVED***(!node)***REMOVED***return;

	***REMOVED******REMOVED***if***REMOVED***((type***REMOVED***&&***REMOVED***node.type***REMOVED***===***REMOVED***type)***REMOVED***||***REMOVED***node.type***REMOVED***===***REMOVED***'open'***REMOVED***||***REMOVED***node.type***REMOVED***===***REMOVED***'close')***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.escaped***REMOVED***!==***REMOVED***true)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.value***REMOVED***=***REMOVED***'\\'***REMOVED***+***REMOVED***node.value;
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.escaped***REMOVED***=***REMOVED***true;
	***REMOVED******REMOVED******REMOVED******REMOVED***}
	***REMOVED******REMOVED***}
	};

	/**
	***REMOVED*******REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***the***REMOVED***given***REMOVED***brace***REMOVED***node***REMOVED***should***REMOVED***be***REMOVED***enclosed***REMOVED***in***REMOVED***literal***REMOVED***braces
	***REMOVED****/

	exports.encloseBrace***REMOVED***=***REMOVED***node***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***!==***REMOVED***'brace')***REMOVED***return***REMOVED***false;
	***REMOVED******REMOVED***if***REMOVED***((node.commas***REMOVED***>>***REMOVED***0***REMOVED***+***REMOVED***node.ranges***REMOVED***>>***REMOVED***0)***REMOVED***===***REMOVED***0)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***node.invalid***REMOVED***=***REMOVED***true;
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***false;
	};

	/**
	***REMOVED*******REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***a***REMOVED***brace***REMOVED***node***REMOVED***is***REMOVED***invalid.
	***REMOVED****/

	exports.isInvalidBrace***REMOVED***=***REMOVED***block***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(block.type***REMOVED***!==***REMOVED***'brace')***REMOVED***return***REMOVED***false;
	***REMOVED******REMOVED***if***REMOVED***(block.invalid***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***block.dollar)***REMOVED***return***REMOVED***true;
	***REMOVED******REMOVED***if***REMOVED***((block.commas***REMOVED***>>***REMOVED***0***REMOVED***+***REMOVED***block.ranges***REMOVED***>>***REMOVED***0)***REMOVED***===***REMOVED***0)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***block.invalid***REMOVED***=***REMOVED***true;
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***if***REMOVED***(block.open***REMOVED***!==***REMOVED***true***REMOVED***||***REMOVED***block.close***REMOVED***!==***REMOVED***true)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***block.invalid***REMOVED***=***REMOVED***true;
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***false;
	};

	/**
	***REMOVED*******REMOVED***Returns***REMOVED***true***REMOVED***if***REMOVED***a***REMOVED***node***REMOVED***is***REMOVED***an***REMOVED***open***REMOVED***or***REMOVED***close***REMOVED***node
	***REMOVED****/

	exports.isOpenOrClose***REMOVED***=***REMOVED***node***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'open'***REMOVED***||***REMOVED***node.type***REMOVED***===***REMOVED***'close')***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
	***REMOVED******REMOVED***}
	***REMOVED******REMOVED***return***REMOVED***node.open***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***node.close***REMOVED***===***REMOVED***true;
	};

	/**
	***REMOVED*******REMOVED***Reduce***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***text***REMOVED***nodes.
	***REMOVED****/

	exports.reduce***REMOVED***=***REMOVED***nodes***REMOVED***=>***REMOVED***nodes.reduce((acc,***REMOVED***node)***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'text')***REMOVED***acc.push(node.value);
	***REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'range')***REMOVED***node.type***REMOVED***=***REMOVED***'text';
	***REMOVED******REMOVED***return***REMOVED***acc;
	},***REMOVED***[]);

	/**
	***REMOVED*******REMOVED***Flatten***REMOVED***an***REMOVED***array
	***REMOVED****/

	exports.flatten***REMOVED***=***REMOVED***(...args)***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***[];
	***REMOVED******REMOVED***const***REMOVED***flat***REMOVED***=***REMOVED***arr***REMOVED***=>***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***arr.length;***REMOVED***i++)***REMOVED***{
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***ele***REMOVED***=***REMOVED***arr[i];
	***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Array.isArray(ele)***REMOVED***?***REMOVED***flat(ele)***REMOVED***:***REMOVED***ele***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***&&***REMOVED***result.push(ele);
	***REMOVED******REMOVED******REMOVED******REMOVED***}
	***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result;
	***REMOVED******REMOVED***};
	***REMOVED******REMOVED***flat(args);
	***REMOVED******REMOVED***return***REMOVED***result;
	};***REMOVED***
}***REMOVED***(utils$3));

const***REMOVED***utils$2***REMOVED***=***REMOVED***utils$3;

var***REMOVED***stringify$4***REMOVED***=***REMOVED***(ast,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***stringify***REMOVED***=***REMOVED***(node,***REMOVED***parent***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***invalidBlock***REMOVED***=***REMOVED***options.escapeInvalid***REMOVED***&&***REMOVED***utils$2.isInvalidBrace(parent);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***invalidNode***REMOVED***=***REMOVED***node.invalid***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***options.escapeInvalid***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((invalidBlock***REMOVED***||***REMOVED***invalidNode)***REMOVED***&&***REMOVED***utils$2.isOpenOrClose(node))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'\\'***REMOVED***+***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***child***REMOVED***of***REMOVED***node.nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***+=***REMOVED***stringify(child);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***output;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***stringify(ast);
};

/*!
***REMOVED*******REMOVED***is-number***REMOVED***<https://github.com/jonschlinkert/is-number>
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***(c)***REMOVED***2014-present,***REMOVED***Jon***REMOVED***Schlinkert.
***REMOVED*******REMOVED***Released***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
***REMOVED****/

var***REMOVED***isNumber$2***REMOVED***=***REMOVED***function(num)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***num***REMOVED***===***REMOVED***'number')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***num***REMOVED***-***REMOVED***num***REMOVED***===***REMOVED***0;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***num***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***num.trim()***REMOVED***!==***REMOVED***'')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Number.isFinite***REMOVED***?***REMOVED***Number.isFinite(+num)***REMOVED***:***REMOVED***isFinite(+num);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
};

/*!
***REMOVED*******REMOVED***to-regex-range***REMOVED***<https://github.com/micromatch/to-regex-range>
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***(c)***REMOVED***2015-present,***REMOVED***Jon***REMOVED***Schlinkert.
***REMOVED*******REMOVED***Released***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
***REMOVED****/

const***REMOVED***isNumber$1***REMOVED***=***REMOVED***isNumber$2;

const***REMOVED***toRegexRange$1***REMOVED***=***REMOVED***(min,***REMOVED***max,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isNumber$1(min)***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('toRegexRange:***REMOVED***expected***REMOVED***the***REMOVED***first***REMOVED***argument***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***number');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(max***REMOVED***===***REMOVED***void***REMOVED***0***REMOVED***||***REMOVED***min***REMOVED***===***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***String(min);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isNumber$1(max)***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('toRegexRange:***REMOVED***expected***REMOVED***the***REMOVED***second***REMOVED***argument***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***number.');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***opts***REMOVED***=***REMOVED***{***REMOVED***relaxZeros:***REMOVED***true,***REMOVED***...options***REMOVED***};
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***opts.strictZeros***REMOVED***===***REMOVED***'boolean')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***opts.relaxZeros***REMOVED***=***REMOVED***opts.strictZeros***REMOVED***===***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***relax***REMOVED***=***REMOVED***String(opts.relaxZeros);
***REMOVED******REMOVED***let***REMOVED***shorthand***REMOVED***=***REMOVED***String(opts.shorthand);
***REMOVED******REMOVED***let***REMOVED***capture***REMOVED***=***REMOVED***String(opts.capture);
***REMOVED******REMOVED***let***REMOVED***wrap***REMOVED***=***REMOVED***String(opts.wrap);
***REMOVED******REMOVED***let***REMOVED***cacheKey***REMOVED***=***REMOVED***min***REMOVED***+***REMOVED***':'***REMOVED***+***REMOVED***max***REMOVED***+***REMOVED***'='***REMOVED***+***REMOVED***relax***REMOVED***+***REMOVED***shorthand***REMOVED***+***REMOVED***capture***REMOVED***+***REMOVED***wrap;

***REMOVED******REMOVED***if***REMOVED***(toRegexRange$1.cache.hasOwnProperty(cacheKey))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toRegexRange$1.cache[cacheKey].result;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***a***REMOVED***=***REMOVED***Math.min(min,***REMOVED***max);
***REMOVED******REMOVED***let***REMOVED***b***REMOVED***=***REMOVED***Math.max(min,***REMOVED***max);

***REMOVED******REMOVED***if***REMOVED***(Math.abs(a***REMOVED***-***REMOVED***b)***REMOVED***===***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***min***REMOVED***+***REMOVED***'|'***REMOVED***+***REMOVED***max;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.capture)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(${result})`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(opts.wrap***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(?:${result})`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***isPadded***REMOVED***=***REMOVED***hasPadding(min)***REMOVED***||***REMOVED***hasPadding(max);
***REMOVED******REMOVED***let***REMOVED***state***REMOVED***=***REMOVED***{***REMOVED***min,***REMOVED***max,***REMOVED***a,***REMOVED***b***REMOVED***};
***REMOVED******REMOVED***let***REMOVED***positives***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***negatives***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***if***REMOVED***(isPadded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.isPadded***REMOVED***=***REMOVED***isPadded;
***REMOVED******REMOVED******REMOVED******REMOVED***state.maxLen***REMOVED***=***REMOVED***String(state.max).length;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(a***REMOVED***<***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***newMin***REMOVED***=***REMOVED***b***REMOVED***<***REMOVED***0***REMOVED***?***REMOVED***Math.abs(b)***REMOVED***:***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***negatives***REMOVED***=***REMOVED***splitToPatterns(newMin,***REMOVED***Math.abs(a),***REMOVED***state,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED***a***REMOVED***=***REMOVED***state.a***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(b***REMOVED***>=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***positives***REMOVED***=***REMOVED***splitToPatterns(a,***REMOVED***b,***REMOVED***state,***REMOVED***opts);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***state.negatives***REMOVED***=***REMOVED***negatives;
***REMOVED******REMOVED***state.positives***REMOVED***=***REMOVED***positives;
***REMOVED******REMOVED***state.result***REMOVED***=***REMOVED***collatePatterns(negatives,***REMOVED***positives);

***REMOVED******REMOVED***if***REMOVED***(opts.capture***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.result***REMOVED***=***REMOVED***`(${state.result})`;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(opts.wrap***REMOVED***!==***REMOVED***false***REMOVED***&&***REMOVED***(positives.length***REMOVED***+***REMOVED***negatives.length)***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***state.result***REMOVED***=***REMOVED***`(?:${state.result})`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***toRegexRange$1.cache[cacheKey]***REMOVED***=***REMOVED***state;
***REMOVED******REMOVED***return***REMOVED***state.result;
};

function***REMOVED***collatePatterns(neg,***REMOVED***pos,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***onlyNegative***REMOVED***=***REMOVED***filterPatterns(neg,***REMOVED***pos,***REMOVED***'-',***REMOVED***false)***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***onlyPositive***REMOVED***=***REMOVED***filterPatterns(pos,***REMOVED***neg,***REMOVED***'',***REMOVED***false)***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***intersected***REMOVED***=***REMOVED***filterPatterns(neg,***REMOVED***pos,***REMOVED***'-?',***REMOVED***true)***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***subpatterns***REMOVED***=***REMOVED***onlyNegative.concat(intersected).concat(onlyPositive);
***REMOVED******REMOVED***return***REMOVED***subpatterns.join('|');
}

function***REMOVED***splitToRanges(min,***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***nines***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED***let***REMOVED***zeros***REMOVED***=***REMOVED***1;

***REMOVED******REMOVED***let***REMOVED***stop***REMOVED***=***REMOVED***countNines(min,***REMOVED***nines);
***REMOVED******REMOVED***let***REMOVED***stops***REMOVED***=***REMOVED***new***REMOVED***Set([max]);

***REMOVED******REMOVED***while***REMOVED***(min***REMOVED***<=***REMOVED***stop***REMOVED***&&***REMOVED***stop***REMOVED***<=***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stops.add(stop);
***REMOVED******REMOVED******REMOVED******REMOVED***nines***REMOVED***+=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***stop***REMOVED***=***REMOVED***countNines(min,***REMOVED***nines);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***stop***REMOVED***=***REMOVED***countZeros(max***REMOVED***+***REMOVED***1,***REMOVED***zeros)***REMOVED***-***REMOVED***1;

***REMOVED******REMOVED***while***REMOVED***(min***REMOVED***<***REMOVED***stop***REMOVED***&&***REMOVED***stop***REMOVED***<=***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stops.add(stop);
***REMOVED******REMOVED******REMOVED******REMOVED***zeros***REMOVED***+=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***stop***REMOVED***=***REMOVED***countZeros(max***REMOVED***+***REMOVED***1,***REMOVED***zeros)***REMOVED***-***REMOVED***1;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***stops***REMOVED***=***REMOVED***[...stops];
***REMOVED******REMOVED***stops.sort(compare);
***REMOVED******REMOVED***return***REMOVED***stops;
}

/**
***REMOVED*******REMOVED***Convert***REMOVED***a***REMOVED***range***REMOVED***to***REMOVED***a***REMOVED***regex***REMOVED***pattern
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***`start`
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***`stop`
***REMOVED*******REMOVED***@return***REMOVED***{String}
***REMOVED****/

function***REMOVED***rangeToPattern(start,***REMOVED***stop,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(start***REMOVED***===***REMOVED***stop)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***pattern:***REMOVED***start,***REMOVED***count:***REMOVED***[],***REMOVED***digits:***REMOVED***0***REMOVED***};
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***zipped***REMOVED***=***REMOVED***zip(start,***REMOVED***stop);
***REMOVED******REMOVED***let***REMOVED***digits***REMOVED***=***REMOVED***zipped.length;
***REMOVED******REMOVED***let***REMOVED***pattern***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***let***REMOVED***count***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***digits;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***[startDigit,***REMOVED***stopDigit]***REMOVED***=***REMOVED***zipped[i];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(startDigit***REMOVED***===***REMOVED***stopDigit)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pattern***REMOVED***+=***REMOVED***startDigit;

***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(startDigit***REMOVED***!==***REMOVED***'0'***REMOVED***||***REMOVED***stopDigit***REMOVED***!==***REMOVED***'9')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pattern***REMOVED***+=***REMOVED***toCharacterClass(startDigit,***REMOVED***stopDigit);

***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***count++;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(count)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pattern***REMOVED***+=***REMOVED***options.shorthand***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***'\\d'***REMOVED***:***REMOVED***'[0-9]';
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***{***REMOVED***pattern,***REMOVED***count:***REMOVED***[count],***REMOVED***digits***REMOVED***};
}

function***REMOVED***splitToPatterns(min,***REMOVED***max,***REMOVED***tok,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***ranges***REMOVED***=***REMOVED***splitToRanges(min,***REMOVED***max);
***REMOVED******REMOVED***let***REMOVED***tokens***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***start***REMOVED***=***REMOVED***min;
***REMOVED******REMOVED***let***REMOVED***prev;

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***ranges.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***max***REMOVED***=***REMOVED***ranges[i];
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***obj***REMOVED***=***REMOVED***rangeToPattern(String(start),***REMOVED***String(max),***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***zeros***REMOVED***=***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!tok.isPadded***REMOVED***&&***REMOVED***prev***REMOVED***&&***REMOVED***prev.pattern***REMOVED***===***REMOVED***obj.pattern)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.count.length***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.count.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.count.push(obj.count[0]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.string***REMOVED***=***REMOVED***prev.pattern***REMOVED***+***REMOVED***toQuantifier(prev.count);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***start***REMOVED***=***REMOVED***max***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(tok.isPadded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***zeros***REMOVED***=***REMOVED***padZeros(max,***REMOVED***tok,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***obj.string***REMOVED***=***REMOVED***zeros***REMOVED***+***REMOVED***obj.pattern***REMOVED***+***REMOVED***toQuantifier(obj.count);
***REMOVED******REMOVED******REMOVED******REMOVED***tokens.push(obj);
***REMOVED******REMOVED******REMOVED******REMOVED***start***REMOVED***=***REMOVED***max***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***prev***REMOVED***=***REMOVED***obj;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***tokens;
}

function***REMOVED***filterPatterns(arr,***REMOVED***comparison,***REMOVED***prefix,***REMOVED***intersection,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***ele***REMOVED***of***REMOVED***arr)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{***REMOVED***string***REMOVED***}***REMOVED***=***REMOVED***ele;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***only***REMOVED***push***REMOVED***if***REMOVED***_both_***REMOVED***are***REMOVED***negative...
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!intersection***REMOVED***&&***REMOVED***!contains(comparison,***REMOVED***'string',***REMOVED***string))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.push(prefix***REMOVED***+***REMOVED***string);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***or***REMOVED***_both_***REMOVED***are***REMOVED***positive
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(intersection***REMOVED***&&***REMOVED***contains(comparison,***REMOVED***'string',***REMOVED***string))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.push(prefix***REMOVED***+***REMOVED***string);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}

/**
***REMOVED*******REMOVED***Zip***REMOVED***strings
***REMOVED****/

function***REMOVED***zip(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***arr***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***a.length;***REMOVED***i++)***REMOVED***arr.push([a[i],***REMOVED***b[i]]);
***REMOVED******REMOVED***return***REMOVED***arr;
}

function***REMOVED***compare(a,***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***a***REMOVED***>***REMOVED***b***REMOVED***?***REMOVED***1***REMOVED***:***REMOVED***b***REMOVED***>***REMOVED***a***REMOVED***?***REMOVED***-1***REMOVED***:***REMOVED***0;
}

function***REMOVED***contains(arr,***REMOVED***key,***REMOVED***val)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***arr.some(ele***REMOVED***=>***REMOVED***ele[key]***REMOVED***===***REMOVED***val);
}

function***REMOVED***countNines(min,***REMOVED***len)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***Number(String(min).slice(0,***REMOVED***-len)***REMOVED***+***REMOVED***'9'.repeat(len));
}

function***REMOVED***countZeros(integer,***REMOVED***zeros)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***integer***REMOVED***-***REMOVED***(integer***REMOVED***%***REMOVED***Math.pow(10,***REMOVED***zeros));
}

function***REMOVED***toQuantifier(digits)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***[start***REMOVED***=***REMOVED***0,***REMOVED***stop***REMOVED***=***REMOVED***'']***REMOVED***=***REMOVED***digits;
***REMOVED******REMOVED***if***REMOVED***(stop***REMOVED***||***REMOVED***start***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`{${start***REMOVED***+***REMOVED***(stop***REMOVED***?***REMOVED***','***REMOVED***+***REMOVED***stop***REMOVED***:***REMOVED***'')}}`;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***'';
}

function***REMOVED***toCharacterClass(a,***REMOVED***b,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***`[${a}${(b***REMOVED***-***REMOVED***a***REMOVED***===***REMOVED***1)***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'-'}${b}]`;
}

function***REMOVED***hasPadding(str)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***/^-?(0+)\d/.test(str);
}

function***REMOVED***padZeros(value,***REMOVED***tok,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!tok.isPadded)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***diff***REMOVED***=***REMOVED***Math.abs(tok.maxLen***REMOVED***-***REMOVED***String(value).length);
***REMOVED******REMOVED***let***REMOVED***relax***REMOVED***=***REMOVED***options.relaxZeros***REMOVED***!==***REMOVED***false;

***REMOVED******REMOVED***switch***REMOVED***(diff)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***0:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***1:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***relax***REMOVED***?***REMOVED***'0?'***REMOVED***:***REMOVED***'0';
***REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***2:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***relax***REMOVED***?***REMOVED***'0{0,2}'***REMOVED***:***REMOVED***'00';
***REMOVED******REMOVED******REMOVED******REMOVED***default:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***relax***REMOVED***?***REMOVED***`0{0,${diff}}`***REMOVED***:***REMOVED***`0{${diff}}`;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Cache
***REMOVED****/

toRegexRange$1.cache***REMOVED***=***REMOVED***{};
toRegexRange$1.clearCache***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***(toRegexRange$1.cache***REMOVED***=***REMOVED***{});

/**
***REMOVED*******REMOVED***Expose***REMOVED***`toRegexRange`
***REMOVED****/

var***REMOVED***toRegexRange_1***REMOVED***=***REMOVED***toRegexRange$1;

/*!
***REMOVED*******REMOVED***fill-range***REMOVED***<https://github.com/jonschlinkert/fill-range>
***REMOVED****
***REMOVED*******REMOVED***Copyright***REMOVED***(c)***REMOVED***2014-present,***REMOVED***Jon***REMOVED***Schlinkert.
***REMOVED*******REMOVED***Licensed***REMOVED***under***REMOVED***the***REMOVED***MIT***REMOVED***License.
***REMOVED****/

const***REMOVED***util***REMOVED***=***REMOVED***require$$2;
const***REMOVED***toRegexRange***REMOVED***=***REMOVED***toRegexRange_1;

const***REMOVED***isObject***REMOVED***=***REMOVED***val***REMOVED***=>***REMOVED***val***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***typeof***REMOVED***val***REMOVED***===***REMOVED***'object'***REMOVED***&&***REMOVED***!Array.isArray(val);

const***REMOVED***transform***REMOVED***=***REMOVED***toNumber***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***value***REMOVED***=>***REMOVED***toNumber***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***Number(value)***REMOVED***:***REMOVED***String(value);
};

const***REMOVED***isValidValue***REMOVED***=***REMOVED***value***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***'number'***REMOVED***||***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***'string'***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***'');
};

const***REMOVED***isNumber***REMOVED***=***REMOVED***num***REMOVED***=>***REMOVED***Number.isInteger(+num);

const***REMOVED***zeros***REMOVED***=***REMOVED***input***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***value***REMOVED***=***REMOVED***`${input}`;
***REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***-1;
***REMOVED******REMOVED***if***REMOVED***(value[0]***REMOVED***===***REMOVED***'-')***REMOVED***value***REMOVED***=***REMOVED***value.slice(1);
***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***'0')***REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***while***REMOVED***(value[++index]***REMOVED***===***REMOVED***'0');
***REMOVED******REMOVED***return***REMOVED***index***REMOVED***>***REMOVED***0;
};

const***REMOVED***stringify$3***REMOVED***=***REMOVED***(start,***REMOVED***end,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***start***REMOVED***===***REMOVED***'string'***REMOVED***||***REMOVED***typeof***REMOVED***end***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***options.stringify***REMOVED***===***REMOVED***true;
};

const***REMOVED***pad***REMOVED***=***REMOVED***(input,***REMOVED***maxLength,***REMOVED***toNumber)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(maxLength***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***dash***REMOVED***=***REMOVED***input[0]***REMOVED***===***REMOVED***'-'***REMOVED***?***REMOVED***'-'***REMOVED***:***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(dash)***REMOVED***input***REMOVED***=***REMOVED***input.slice(1);
***REMOVED******REMOVED******REMOVED******REMOVED***input***REMOVED***=***REMOVED***(dash***REMOVED***+***REMOVED***input.padStart(dash***REMOVED***?***REMOVED***maxLength***REMOVED***-***REMOVED***1***REMOVED***:***REMOVED***maxLength,***REMOVED***'0'));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(toNumber***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***String(input);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***input;
};

const***REMOVED***toMaxLen***REMOVED***=***REMOVED***(input,***REMOVED***maxLength)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***negative***REMOVED***=***REMOVED***input[0]***REMOVED***===***REMOVED***'-'***REMOVED***?***REMOVED***'-'***REMOVED***:***REMOVED***'';
***REMOVED******REMOVED***if***REMOVED***(negative)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***input***REMOVED***=***REMOVED***input.slice(1);
***REMOVED******REMOVED******REMOVED******REMOVED***maxLength--;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***while***REMOVED***(input.length***REMOVED***<***REMOVED***maxLength)***REMOVED***input***REMOVED***=***REMOVED***'0'***REMOVED***+***REMOVED***input;
***REMOVED******REMOVED***return***REMOVED***negative***REMOVED***?***REMOVED***('-'***REMOVED***+***REMOVED***input)***REMOVED***:***REMOVED***input;
};

const***REMOVED***toSequence***REMOVED***=***REMOVED***(parts,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***parts.negatives.sort((a,***REMOVED***b)***REMOVED***=>***REMOVED***a***REMOVED***<***REMOVED***b***REMOVED***?***REMOVED***-1***REMOVED***:***REMOVED***a***REMOVED***>***REMOVED***b***REMOVED***?***REMOVED***1***REMOVED***:***REMOVED***0);
***REMOVED******REMOVED***parts.positives.sort((a,***REMOVED***b)***REMOVED***=>***REMOVED***a***REMOVED***<***REMOVED***b***REMOVED***?***REMOVED***-1***REMOVED***:***REMOVED***a***REMOVED***>***REMOVED***b***REMOVED***?***REMOVED***1***REMOVED***:***REMOVED***0);

***REMOVED******REMOVED***let***REMOVED***prefix***REMOVED***=***REMOVED***options.capture***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'?:';
***REMOVED******REMOVED***let***REMOVED***positives***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***let***REMOVED***negatives***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED***let***REMOVED***result;

***REMOVED******REMOVED***if***REMOVED***(parts.positives.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***positives***REMOVED***=***REMOVED***parts.positives.join('|');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(parts.negatives.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***negatives***REMOVED***=***REMOVED***`-(${prefix}${parts.negatives.join('|')})`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(positives***REMOVED***&&***REMOVED***negatives)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***`${positives}|${negatives}`;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***positives***REMOVED***||***REMOVED***negatives;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(options.wrap)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`(${prefix}${result})`;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***result;
};

const***REMOVED***toRange***REMOVED***=***REMOVED***(a,***REMOVED***b,***REMOVED***isNumbers,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isNumbers)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toRegexRange(a,***REMOVED***b,***REMOVED***{***REMOVED***wrap:***REMOVED***false,***REMOVED***...options***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***start***REMOVED***=***REMOVED***String.fromCharCode(a);
***REMOVED******REMOVED***if***REMOVED***(a***REMOVED***===***REMOVED***b)***REMOVED***return***REMOVED***start;

***REMOVED******REMOVED***let***REMOVED***stop***REMOVED***=***REMOVED***String.fromCharCode(b);
***REMOVED******REMOVED***return***REMOVED***`[${start}-${stop}]`;
};

const***REMOVED***toRegex***REMOVED***=***REMOVED***(start,***REMOVED***end,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(Array.isArray(start))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***wrap***REMOVED***=***REMOVED***options.wrap***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***prefix***REMOVED***=***REMOVED***options.capture***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***'?:';
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***wrap***REMOVED***?***REMOVED***`(${prefix}${start.join('|')})`***REMOVED***:***REMOVED***start.join('|');
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***toRegexRange(start,***REMOVED***end,***REMOVED***options);
};

const***REMOVED***rangeError***REMOVED***=***REMOVED***(...args)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***RangeError('Invalid***REMOVED***range***REMOVED***arguments:***REMOVED***'***REMOVED***+***REMOVED***util.inspect(...args));
};

const***REMOVED***invalidRange***REMOVED***=***REMOVED***(start,***REMOVED***end,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(options.strictRanges***REMOVED***===***REMOVED***true)***REMOVED***throw***REMOVED***rangeError([start,***REMOVED***end]);
***REMOVED******REMOVED***return***REMOVED***[];
};

const***REMOVED***invalidStep***REMOVED***=***REMOVED***(step,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(options.strictRanges***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError(`Expected***REMOVED***step***REMOVED***"${step}"***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***number`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***[];
};

const***REMOVED***fillNumbers***REMOVED***=***REMOVED***(start,***REMOVED***end,***REMOVED***step***REMOVED***=***REMOVED***1,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***a***REMOVED***=***REMOVED***Number(start);
***REMOVED******REMOVED***let***REMOVED***b***REMOVED***=***REMOVED***Number(end);

***REMOVED******REMOVED***if***REMOVED***(!Number.isInteger(a)***REMOVED***||***REMOVED***!Number.isInteger(b))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.strictRanges***REMOVED***===***REMOVED***true)***REMOVED***throw***REMOVED***rangeError([start,***REMOVED***end]);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***fix***REMOVED***negative***REMOVED***zero
***REMOVED******REMOVED***if***REMOVED***(a***REMOVED***===***REMOVED***0)***REMOVED***a***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***if***REMOVED***(b***REMOVED***===***REMOVED***0)***REMOVED***b***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED***let***REMOVED***descending***REMOVED***=***REMOVED***a***REMOVED***>***REMOVED***b;
***REMOVED******REMOVED***let***REMOVED***startString***REMOVED***=***REMOVED***String(start);
***REMOVED******REMOVED***let***REMOVED***endString***REMOVED***=***REMOVED***String(end);
***REMOVED******REMOVED***let***REMOVED***stepString***REMOVED***=***REMOVED***String(step);
***REMOVED******REMOVED***step***REMOVED***=***REMOVED***Math.max(Math.abs(step),***REMOVED***1);

***REMOVED******REMOVED***let***REMOVED***padded***REMOVED***=***REMOVED***zeros(startString)***REMOVED***||***REMOVED***zeros(endString)***REMOVED***||***REMOVED***zeros(stepString);
***REMOVED******REMOVED***let***REMOVED***maxLen***REMOVED***=***REMOVED***padded***REMOVED***?***REMOVED***Math.max(startString.length,***REMOVED***endString.length,***REMOVED***stepString.length)***REMOVED***:***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***toNumber***REMOVED***=***REMOVED***padded***REMOVED***===***REMOVED***false***REMOVED***&&***REMOVED***stringify$3(start,***REMOVED***end,***REMOVED***options)***REMOVED***===***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***format***REMOVED***=***REMOVED***options.transform***REMOVED***||***REMOVED***transform(toNumber);

***REMOVED******REMOVED***if***REMOVED***(options.toRegex***REMOVED***&&***REMOVED***step***REMOVED***===***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toRange(toMaxLen(start,***REMOVED***maxLen),***REMOVED***toMaxLen(end,***REMOVED***maxLen),***REMOVED***true,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***parts***REMOVED***=***REMOVED***{***REMOVED***negatives:***REMOVED***[],***REMOVED***positives:***REMOVED***[]***REMOVED***};
***REMOVED******REMOVED***let***REMOVED***push***REMOVED***=***REMOVED***num***REMOVED***=>***REMOVED***parts[num***REMOVED***<***REMOVED***0***REMOVED***?***REMOVED***'negatives'***REMOVED***:***REMOVED***'positives'].push(Math.abs(num));
***REMOVED******REMOVED***let***REMOVED***range***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED***while***REMOVED***(descending***REMOVED***?***REMOVED***a***REMOVED***>=***REMOVED***b***REMOVED***:***REMOVED***a***REMOVED***<=***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.toRegex***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***step***REMOVED***>***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push(a);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***range.push(pad(format(a,***REMOVED***index),***REMOVED***maxLen,***REMOVED***toNumber));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***a***REMOVED***=***REMOVED***descending***REMOVED***?***REMOVED***a***REMOVED***-***REMOVED***step***REMOVED***:***REMOVED***a***REMOVED***+***REMOVED***step;
***REMOVED******REMOVED******REMOVED******REMOVED***index++;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(options.toRegex***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***step***REMOVED***>***REMOVED***1
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***toSequence(parts,***REMOVED***options)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***toRegex(range,***REMOVED***null,***REMOVED***{***REMOVED***wrap:***REMOVED***false,***REMOVED***...options***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***range;
};

const***REMOVED***fillLetters***REMOVED***=***REMOVED***(start,***REMOVED***end,***REMOVED***step***REMOVED***=***REMOVED***1,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***((!isNumber(start)***REMOVED***&&***REMOVED***start.length***REMOVED***>***REMOVED***1)***REMOVED***||***REMOVED***(!isNumber(end)***REMOVED***&&***REMOVED***end.length***REMOVED***>***REMOVED***1))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***invalidRange(start,***REMOVED***end,***REMOVED***options);
***REMOVED******REMOVED***}


***REMOVED******REMOVED***let***REMOVED***format***REMOVED***=***REMOVED***options.transform***REMOVED***||***REMOVED***(val***REMOVED***=>***REMOVED***String.fromCharCode(val));
***REMOVED******REMOVED***let***REMOVED***a***REMOVED***=***REMOVED***`${start}`.charCodeAt(0);
***REMOVED******REMOVED***let***REMOVED***b***REMOVED***=***REMOVED***`${end}`.charCodeAt(0);

***REMOVED******REMOVED***let***REMOVED***descending***REMOVED***=***REMOVED***a***REMOVED***>***REMOVED***b;
***REMOVED******REMOVED***let***REMOVED***min***REMOVED***=***REMOVED***Math.min(a,***REMOVED***b);
***REMOVED******REMOVED***let***REMOVED***max***REMOVED***=***REMOVED***Math.max(a,***REMOVED***b);

***REMOVED******REMOVED***if***REMOVED***(options.toRegex***REMOVED***&&***REMOVED***step***REMOVED***===***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toRange(min,***REMOVED***max,***REMOVED***false,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***range***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***0;

***REMOVED******REMOVED***while***REMOVED***(descending***REMOVED***?***REMOVED***a***REMOVED***>=***REMOVED***b***REMOVED***:***REMOVED***a***REMOVED***<=***REMOVED***b)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***range.push(format(a,***REMOVED***index));
***REMOVED******REMOVED******REMOVED******REMOVED***a***REMOVED***=***REMOVED***descending***REMOVED***?***REMOVED***a***REMOVED***-***REMOVED***step***REMOVED***:***REMOVED***a***REMOVED***+***REMOVED***step;
***REMOVED******REMOVED******REMOVED******REMOVED***index++;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(options.toRegex***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***toRegex(range,***REMOVED***null,***REMOVED***{***REMOVED***wrap:***REMOVED***false,***REMOVED***options***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***range;
};

const***REMOVED***fill$2***REMOVED***=***REMOVED***(start,***REMOVED***end,***REMOVED***step,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(end***REMOVED***==***REMOVED***null***REMOVED***&&***REMOVED***isValidValue(start))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[start];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(!isValidValue(start)***REMOVED***||***REMOVED***!isValidValue(end))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***invalidRange(start,***REMOVED***end,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***step***REMOVED***===***REMOVED***'function')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fill$2(start,***REMOVED***end,***REMOVED***1,***REMOVED***{***REMOVED***transform:***REMOVED***step***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isObject(step))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fill$2(start,***REMOVED***end,***REMOVED***0,***REMOVED***step);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***opts***REMOVED***=***REMOVED***{***REMOVED***...options***REMOVED***};
***REMOVED******REMOVED***if***REMOVED***(opts.capture***REMOVED***===***REMOVED***true)***REMOVED***opts.wrap***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***step***REMOVED***=***REMOVED***step***REMOVED***||***REMOVED***opts.step***REMOVED***||***REMOVED***1;

***REMOVED******REMOVED***if***REMOVED***(!isNumber(step))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(step***REMOVED***!=***REMOVED***null***REMOVED***&&***REMOVED***!isObject(step))***REMOVED***return***REMOVED***invalidStep(step,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fill$2(start,***REMOVED***end,***REMOVED***1,***REMOVED***step);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(isNumber(start)***REMOVED***&&***REMOVED***isNumber(end))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fillNumbers(start,***REMOVED***end,***REMOVED***step,***REMOVED***opts);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***fillLetters(start,***REMOVED***end,***REMOVED***Math.max(Math.abs(step),***REMOVED***1),***REMOVED***opts);
};

var***REMOVED***fillRange***REMOVED***=***REMOVED***fill$2;

const***REMOVED***fill$1***REMOVED***=***REMOVED***fillRange;
const***REMOVED***utils$1***REMOVED***=***REMOVED***utils$3;

const***REMOVED***compile$1***REMOVED***=***REMOVED***(ast,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***walk***REMOVED***=***REMOVED***(node,***REMOVED***parent***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***invalidBlock***REMOVED***=***REMOVED***utils$1.isInvalidBrace(parent);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***invalidNode***REMOVED***=***REMOVED***node.invalid***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***options.escapeInvalid***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***invalid***REMOVED***=***REMOVED***invalidBlock***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***invalidNode***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***prefix***REMOVED***=***REMOVED***options.escapeInvalid***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***'\\'***REMOVED***:***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***'';

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.isOpen***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***prefix***REMOVED***+***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.isClose***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***prefix***REMOVED***+***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'open')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***invalid***REMOVED***?***REMOVED***(prefix***REMOVED***+***REMOVED***node.value)***REMOVED***:***REMOVED***'(';
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'close')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***invalid***REMOVED***?***REMOVED***(prefix***REMOVED***+***REMOVED***node.value)***REMOVED***:***REMOVED***')';
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'comma')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node.prev.type***REMOVED***===***REMOVED***'comma'***REMOVED***?***REMOVED***''***REMOVED***:***REMOVED***(invalid***REMOVED***?***REMOVED***node.value***REMOVED***:***REMOVED***'|');
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.nodes***REMOVED***&&***REMOVED***node.ranges***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***args***REMOVED***=***REMOVED***utils$1.reduce(node.nodes);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***range***REMOVED***=***REMOVED***fill$1(...args,***REMOVED***{***REMOVED***...options,***REMOVED***wrap:***REMOVED***false,***REMOVED***toRegex:***REMOVED***true***REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(range.length***REMOVED***!==***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***args.length***REMOVED***>***REMOVED***1***REMOVED***&&***REMOVED***range.length***REMOVED***>***REMOVED***1***REMOVED***?***REMOVED***`(${range})`***REMOVED***:***REMOVED***range;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***child***REMOVED***of***REMOVED***node.nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***+=***REMOVED***walk(child,***REMOVED***node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***output;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***walk(ast);
};

var***REMOVED***compile_1***REMOVED***=***REMOVED***compile$1;

const***REMOVED***fill***REMOVED***=***REMOVED***fillRange;
const***REMOVED***stringify$2***REMOVED***=***REMOVED***stringify$4;
const***REMOVED***utils***REMOVED***=***REMOVED***utils$3;

const***REMOVED***append***REMOVED***=***REMOVED***(queue***REMOVED***=***REMOVED***'',***REMOVED***stash***REMOVED***=***REMOVED***'',***REMOVED***enclose***REMOVED***=***REMOVED***false)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***queue***REMOVED***=***REMOVED***[].concat(queue);
***REMOVED******REMOVED***stash***REMOVED***=***REMOVED***[].concat(stash);

***REMOVED******REMOVED***if***REMOVED***(!stash.length)***REMOVED***return***REMOVED***queue;
***REMOVED******REMOVED***if***REMOVED***(!queue.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***enclose***REMOVED***?***REMOVED***utils.flatten(stash).map(ele***REMOVED***=>***REMOVED***`{${ele}}`)***REMOVED***:***REMOVED***stash;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***item***REMOVED***of***REMOVED***queue)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Array.isArray(item))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***value***REMOVED***of***REMOVED***item)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.push(append(value,***REMOVED***stash,***REMOVED***enclose));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***ele***REMOVED***of***REMOVED***stash)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(enclose***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***typeof***REMOVED***ele***REMOVED***===***REMOVED***'string')***REMOVED***ele***REMOVED***=***REMOVED***`{${ele}}`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.push(Array.isArray(ele)***REMOVED***?***REMOVED***append(item,***REMOVED***ele,***REMOVED***enclose)***REMOVED***:***REMOVED***(item***REMOVED***+***REMOVED***ele));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***utils.flatten(result);
};

const***REMOVED***expand$1***REMOVED***=***REMOVED***(ast,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***rangeLimit***REMOVED***=***REMOVED***options.rangeLimit***REMOVED***===***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***1000***REMOVED***:***REMOVED***options.rangeLimit;

***REMOVED******REMOVED***let***REMOVED***walk***REMOVED***=***REMOVED***(node,***REMOVED***parent***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***node.queue***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***p***REMOVED***=***REMOVED***parent;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***q***REMOVED***=***REMOVED***parent.queue;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(p.type***REMOVED***!==***REMOVED***'brace'***REMOVED***&&***REMOVED***p.type***REMOVED***!==***REMOVED***'root'***REMOVED***&&***REMOVED***p.parent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***p***REMOVED***=***REMOVED***p.parent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***q***REMOVED***=***REMOVED***p.queue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.invalid***REMOVED***||***REMOVED***node.dollar)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***q.push(append(q.pop(),***REMOVED***stringify$2(node,***REMOVED***options)));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'brace'***REMOVED***&&***REMOVED***node.invalid***REMOVED***!==***REMOVED***true***REMOVED***&&***REMOVED***node.nodes.length***REMOVED***===***REMOVED***2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***q.push(append(q.pop(),***REMOVED***['{}']));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.nodes***REMOVED***&&***REMOVED***node.ranges***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***args***REMOVED***=***REMOVED***utils.reduce(node.nodes);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.exceedsLimit(...args,***REMOVED***options.step,***REMOVED***rangeLimit))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***RangeError('expanded***REMOVED***array***REMOVED***length***REMOVED***exceeds***REMOVED***range***REMOVED***limit.***REMOVED***Use***REMOVED***options.rangeLimit***REMOVED***to***REMOVED***increase***REMOVED***or***REMOVED***disable***REMOVED***the***REMOVED***limit.');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***range***REMOVED***=***REMOVED***fill(...args,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(range.length***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***range***REMOVED***=***REMOVED***stringify$2(node,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***q.push(append(q.pop(),***REMOVED***range));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.nodes***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***enclose***REMOVED***=***REMOVED***utils.encloseBrace(node);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***queue***REMOVED***=***REMOVED***node.queue;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***block***REMOVED***=***REMOVED***node;

***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(block.type***REMOVED***!==***REMOVED***'brace'***REMOVED***&&***REMOVED***block.type***REMOVED***!==***REMOVED***'root'***REMOVED***&&***REMOVED***block.parent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***block.parent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***queue***REMOVED***=***REMOVED***block.queue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***node.nodes.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***child***REMOVED***=***REMOVED***node.nodes[i];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(child.type***REMOVED***===***REMOVED***'comma'***REMOVED***&&***REMOVED***node.type***REMOVED***===***REMOVED***'brace')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(i***REMOVED***===***REMOVED***1)***REMOVED***queue.push('');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***queue.push('');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(child.type***REMOVED***===***REMOVED***'close')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***q.push(append(q.pop(),***REMOVED***queue,***REMOVED***enclose));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(child.value***REMOVED***&&***REMOVED***child.type***REMOVED***!==***REMOVED***'open')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***queue.push(append(queue.pop(),***REMOVED***child.value));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(child.nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***walk(child,***REMOVED***node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***queue;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***utils.flatten(walk(ast));
};

var***REMOVED***expand_1***REMOVED***=***REMOVED***expand$1;

var***REMOVED***constants$1***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***MAX_LENGTH:***REMOVED***1024***REMOVED*******REMOVED***64,

***REMOVED******REMOVED***//***REMOVED***Digits
***REMOVED******REMOVED***CHAR_0:***REMOVED***'0',***REMOVED***/****REMOVED***0***REMOVED****/
***REMOVED******REMOVED***CHAR_9:***REMOVED***'9',***REMOVED***/****REMOVED***9***REMOVED****/

***REMOVED******REMOVED***//***REMOVED***Alphabet***REMOVED***chars.
***REMOVED******REMOVED***CHAR_UPPERCASE_A:***REMOVED***'A',***REMOVED***/****REMOVED***A***REMOVED****/
***REMOVED******REMOVED***CHAR_LOWERCASE_A:***REMOVED***'a',***REMOVED***/****REMOVED***a***REMOVED****/
***REMOVED******REMOVED***CHAR_UPPERCASE_Z:***REMOVED***'Z',***REMOVED***/****REMOVED***Z***REMOVED****/
***REMOVED******REMOVED***CHAR_LOWERCASE_Z:***REMOVED***'z',***REMOVED***/****REMOVED***z***REMOVED****/

***REMOVED******REMOVED***CHAR_LEFT_PARENTHESES:***REMOVED***'(',***REMOVED***/****REMOVED***(***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_PARENTHESES:***REMOVED***')',***REMOVED***/****REMOVED***)***REMOVED****/

***REMOVED******REMOVED***CHAR_ASTERISK:***REMOVED***'*',***REMOVED***/****REMOVED*******REMOVED****/

***REMOVED******REMOVED***//***REMOVED***Non-alphabetic***REMOVED***chars.
***REMOVED******REMOVED***CHAR_AMPERSAND:***REMOVED***'&',***REMOVED***/****REMOVED***&***REMOVED****/
***REMOVED******REMOVED***CHAR_AT:***REMOVED***'@',***REMOVED***/****REMOVED***@***REMOVED****/
***REMOVED******REMOVED***CHAR_BACKSLASH:***REMOVED***'\\',***REMOVED***/****REMOVED***\***REMOVED****/
***REMOVED******REMOVED***CHAR_BACKTICK:***REMOVED***'`',***REMOVED***/****REMOVED***`***REMOVED****/
***REMOVED******REMOVED***CHAR_CARRIAGE_RETURN:***REMOVED***'\r',***REMOVED***/****REMOVED***\r***REMOVED****/
***REMOVED******REMOVED***CHAR_CIRCUMFLEX_ACCENT:***REMOVED***'^',***REMOVED***/****REMOVED***^***REMOVED****/
***REMOVED******REMOVED***CHAR_COLON:***REMOVED***':',***REMOVED***/****REMOVED***:***REMOVED****/
***REMOVED******REMOVED***CHAR_COMMA:***REMOVED***',',***REMOVED***/****REMOVED***,***REMOVED****/
***REMOVED******REMOVED***CHAR_DOLLAR:***REMOVED***'$',***REMOVED***/****REMOVED***.***REMOVED****/
***REMOVED******REMOVED***CHAR_DOT:***REMOVED***'.',***REMOVED***/****REMOVED***.***REMOVED****/
***REMOVED******REMOVED***CHAR_DOUBLE_QUOTE:***REMOVED***'"',***REMOVED***/****REMOVED***"***REMOVED****/
***REMOVED******REMOVED***CHAR_EQUAL:***REMOVED***'=',***REMOVED***/****REMOVED***=***REMOVED****/
***REMOVED******REMOVED***CHAR_EXCLAMATION_MARK:***REMOVED***'!',***REMOVED***/****REMOVED***!***REMOVED****/
***REMOVED******REMOVED***CHAR_FORM_FEED:***REMOVED***'\f',***REMOVED***/****REMOVED***\f***REMOVED****/
***REMOVED******REMOVED***CHAR_FORWARD_SLASH:***REMOVED***'/',***REMOVED***/****REMOVED***/***REMOVED****/
***REMOVED******REMOVED***CHAR_HASH:***REMOVED***'#',***REMOVED***/****REMOVED***#***REMOVED****/
***REMOVED******REMOVED***CHAR_HYPHEN_MINUS:***REMOVED***'-',***REMOVED***/****REMOVED***-***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_ANGLE_BRACKET:***REMOVED***'<',***REMOVED***/****REMOVED***<***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_CURLY_BRACE:***REMOVED***'{',***REMOVED***/****REMOVED***{***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_SQUARE_BRACKET:***REMOVED***'[',***REMOVED***/****REMOVED***[***REMOVED****/
***REMOVED******REMOVED***CHAR_LINE_FEED:***REMOVED***'\n',***REMOVED***/****REMOVED***\n***REMOVED****/
***REMOVED******REMOVED***CHAR_NO_BREAK_SPACE:***REMOVED***'\u00A0',***REMOVED***/****REMOVED***\u00A0***REMOVED****/
***REMOVED******REMOVED***CHAR_PERCENT:***REMOVED***'%',***REMOVED***/****REMOVED***%***REMOVED****/
***REMOVED******REMOVED***CHAR_PLUS:***REMOVED***'+',***REMOVED***/****REMOVED***+***REMOVED****/
***REMOVED******REMOVED***CHAR_QUESTION_MARK:***REMOVED***'?',***REMOVED***/****REMOVED***?***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_ANGLE_BRACKET:***REMOVED***'>',***REMOVED***/****REMOVED***>***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_CURLY_BRACE:***REMOVED***'}',***REMOVED***/****REMOVED***}***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_SQUARE_BRACKET:***REMOVED***']',***REMOVED***/****REMOVED***]***REMOVED****/
***REMOVED******REMOVED***CHAR_SEMICOLON:***REMOVED***';',***REMOVED***/****REMOVED***;***REMOVED****/
***REMOVED******REMOVED***CHAR_SINGLE_QUOTE:***REMOVED***'\'',***REMOVED***/****REMOVED***'***REMOVED****/
***REMOVED******REMOVED***CHAR_SPACE:***REMOVED***'***REMOVED***',***REMOVED***/****REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***CHAR_TAB:***REMOVED***'\t',***REMOVED***/****REMOVED***\t***REMOVED****/
***REMOVED******REMOVED***CHAR_UNDERSCORE:***REMOVED***'_',***REMOVED***/****REMOVED***_***REMOVED****/
***REMOVED******REMOVED***CHAR_VERTICAL_LINE:***REMOVED***'|',***REMOVED***/****REMOVED***|***REMOVED****/
***REMOVED******REMOVED***CHAR_ZERO_WIDTH_NOBREAK_SPACE:***REMOVED***'\uFEFF'***REMOVED***/****REMOVED***\uFEFF***REMOVED****/
};

const***REMOVED***stringify$1***REMOVED***=***REMOVED***stringify$4;

/**
***REMOVED*******REMOVED***Constants
***REMOVED****/

const***REMOVED***{
***REMOVED******REMOVED***MAX_LENGTH,
***REMOVED******REMOVED***CHAR_BACKSLASH,***REMOVED***/****REMOVED***\***REMOVED****/
***REMOVED******REMOVED***CHAR_BACKTICK,***REMOVED***/****REMOVED***`***REMOVED****/
***REMOVED******REMOVED***CHAR_COMMA,***REMOVED***/****REMOVED***,***REMOVED****/
***REMOVED******REMOVED***CHAR_DOT,***REMOVED***/****REMOVED***.***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_PARENTHESES,***REMOVED***/****REMOVED***(***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_PARENTHESES,***REMOVED***/****REMOVED***)***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_CURLY_BRACE,***REMOVED***/****REMOVED***{***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_CURLY_BRACE,***REMOVED***/****REMOVED***}***REMOVED****/
***REMOVED******REMOVED***CHAR_LEFT_SQUARE_BRACKET,***REMOVED***/****REMOVED***[***REMOVED****/
***REMOVED******REMOVED***CHAR_RIGHT_SQUARE_BRACKET,***REMOVED***/****REMOVED***]***REMOVED****/
***REMOVED******REMOVED***CHAR_DOUBLE_QUOTE,***REMOVED***/****REMOVED***"***REMOVED****/
***REMOVED******REMOVED***CHAR_SINGLE_QUOTE,***REMOVED***/****REMOVED***'***REMOVED****/
***REMOVED******REMOVED***CHAR_NO_BREAK_SPACE,
***REMOVED******REMOVED***CHAR_ZERO_WIDTH_NOBREAK_SPACE
}***REMOVED***=***REMOVED***constants$1;

/**
***REMOVED*******REMOVED***parse
***REMOVED****/

const***REMOVED***parse$1***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***!==***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError('Expected***REMOVED***a***REMOVED***string');
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***opts***REMOVED***=***REMOVED***options***REMOVED***||***REMOVED***{};
***REMOVED******REMOVED***let***REMOVED***max***REMOVED***=***REMOVED***typeof***REMOVED***opts.maxLength***REMOVED***===***REMOVED***'number'***REMOVED***?***REMOVED***Math.min(MAX_LENGTH,***REMOVED***opts.maxLength)***REMOVED***:***REMOVED***MAX_LENGTH;
***REMOVED******REMOVED***if***REMOVED***(input.length***REMOVED***>***REMOVED***max)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***SyntaxError(`Input***REMOVED***length***REMOVED***(${input.length}),***REMOVED***exceeds***REMOVED***max***REMOVED***characters***REMOVED***(${max})`);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***ast***REMOVED***=***REMOVED***{***REMOVED***type:***REMOVED***'root',***REMOVED***input,***REMOVED***nodes:***REMOVED***[]***REMOVED***};
***REMOVED******REMOVED***let***REMOVED***stack***REMOVED***=***REMOVED***[ast];
***REMOVED******REMOVED***let***REMOVED***block***REMOVED***=***REMOVED***ast;
***REMOVED******REMOVED***let***REMOVED***prev***REMOVED***=***REMOVED***ast;
***REMOVED******REMOVED***let***REMOVED***brackets***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***length***REMOVED***=***REMOVED***input.length;
***REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***depth***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***value;

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***Helpers
***REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED***const***REMOVED***advance***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***input[index++];
***REMOVED******REMOVED***const***REMOVED***push***REMOVED***=***REMOVED***node***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'text'***REMOVED***&&***REMOVED***prev.type***REMOVED***===***REMOVED***'dot')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'text';
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev***REMOVED***&&***REMOVED***prev.type***REMOVED***===***REMOVED***'text'***REMOVED***&&***REMOVED***node.type***REMOVED***===***REMOVED***'text')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***node.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***block.nodes.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED***node.parent***REMOVED***=***REMOVED***block;
***REMOVED******REMOVED******REMOVED******REMOVED***node.prev***REMOVED***=***REMOVED***prev;
***REMOVED******REMOVED******REMOVED******REMOVED***prev***REMOVED***=***REMOVED***node;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'bos'***REMOVED***});

***REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***stack[stack.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***advance();

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Invalid***REMOVED***chars
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_ZERO_WIDTH_NOBREAK_SPACE***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***CHAR_NO_BREAK_SPACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Escaped***REMOVED***chars
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_BACKSLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value:***REMOVED***(options.keepEscaping***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***'')***REMOVED***+***REMOVED***advance()***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Right***REMOVED***square***REMOVED***bracket***REMOVED***(literal):***REMOVED***']'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_RIGHT_SQUARE_BRACKET)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value:***REMOVED***'\\'***REMOVED***+***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Left***REMOVED***square***REMOVED***bracket:***REMOVED***'['
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_LEFT_SQUARE_BRACKET)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***brackets++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***next;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***length***REMOVED***&&***REMOVED***(next***REMOVED***=***REMOVED***advance()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***next;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***CHAR_LEFT_SQUARE_BRACKET)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***brackets++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***CHAR_BACKSLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***CHAR_RIGHT_SQUARE_BRACKET)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***brackets--;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(brackets***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Parentheses
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_LEFT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***push({***REMOVED***type:***REMOVED***'paren',***REMOVED***nodes:***REMOVED***[]***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack.push(block);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_RIGHT_PARENTHESES)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block.type***REMOVED***!==***REMOVED***'paren')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***stack.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***stack[stack.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Quotes:***REMOVED***'|"|`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_DOUBLE_QUOTE***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***CHAR_SINGLE_QUOTE***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***CHAR_BACKTICK)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***open***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***next;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.keepQuotes***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(index***REMOVED***<***REMOVED***length***REMOVED***&&***REMOVED***(next***REMOVED***=***REMOVED***advance()))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***CHAR_BACKSLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***next***REMOVED***+***REMOVED***advance();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***===***REMOVED***open)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options.keepQuotes***REMOVED***===***REMOVED***true)***REMOVED***value***REMOVED***+=***REMOVED***next;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***next;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Left***REMOVED***curly***REMOVED***brace:***REMOVED***'{'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_LEFT_CURLY_BRACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***depth++;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***dollar***REMOVED***=***REMOVED***prev.value***REMOVED***&&***REMOVED***prev.value.slice(-1)***REMOVED***===***REMOVED***'$'***REMOVED***||***REMOVED***block.dollar***REMOVED***===***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***brace***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***type:***REMOVED***'brace',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***open:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***close:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***dollar,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***depth,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***commas:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ranges:***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodes:***REMOVED***[]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***push(brace);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack.push(block);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'open',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Right***REMOVED***curly***REMOVED***brace:***REMOVED***'}'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_RIGHT_CURLY_BRACE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block.type***REMOVED***!==***REMOVED***'brace')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***type***REMOVED***=***REMOVED***'close';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***stack.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.close***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type,***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***depth--;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***stack[stack.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Comma:***REMOVED***','
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_COMMA***REMOVED***&&***REMOVED***depth***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block.ranges***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.ranges***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***open***REMOVED***=***REMOVED***block.nodes.shift();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.nodes***REMOVED***=***REMOVED***[open,***REMOVED***{***REMOVED***type:***REMOVED***'text',***REMOVED***value:***REMOVED***stringify$1(block)***REMOVED***}];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'comma',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.commas++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Dot:***REMOVED***'.'
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***CHAR_DOT***REMOVED***&&***REMOVED***depth***REMOVED***>***REMOVED***0***REMOVED***&&***REMOVED***block.commas***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***siblings***REMOVED***=***REMOVED***block.nodes;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(depth***REMOVED***===***REMOVED***0***REMOVED***||***REMOVED***siblings.length***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'dot')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.range***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.value***REMOVED***+=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'range';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block.nodes.length***REMOVED***!==***REMOVED***3***REMOVED***&&***REMOVED***block.nodes.length***REMOVED***!==***REMOVED***5)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.invalid***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.ranges***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev.type***REMOVED***=***REMOVED***'text';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.ranges++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.args***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prev.type***REMOVED***===***REMOVED***'range')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***siblings.pop();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***before***REMOVED***=***REMOVED***siblings[siblings.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***before.value***REMOVED***+=***REMOVED***prev.value***REMOVED***+***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prev***REMOVED***=***REMOVED***before;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.ranges--;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'dot',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***Text
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/

***REMOVED******REMOVED******REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'text',***REMOVED***value***REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Mark***REMOVED***imbalanced***REMOVED***braces***REMOVED***and***REMOVED***brackets***REMOVED***as***REMOVED***invalid
***REMOVED******REMOVED***do***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***block***REMOVED***=***REMOVED***stack.pop();

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(block.type***REMOVED***!==***REMOVED***'root')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***block.nodes.forEach(node***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node.nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'open')***REMOVED***node.isOpen***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.type***REMOVED***===***REMOVED***'close')***REMOVED***node.isClose***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node.nodes)***REMOVED***node.type***REMOVED***=***REMOVED***'text';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.invalid***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***get***REMOVED***the***REMOVED***location***REMOVED***of***REMOVED***the***REMOVED***block***REMOVED***on***REMOVED***parent.nodes***REMOVED***(block's***REMOVED***siblings)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***parent***REMOVED***=***REMOVED***stack[stack.length***REMOVED***-***REMOVED***1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***parent.nodes.indexOf(block);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***replace***REMOVED***the***REMOVED***(invalid)***REMOVED***block***REMOVED***with***REMOVED***it's***REMOVED***nodes
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parent.nodes.splice(index,***REMOVED***1,***REMOVED***...block.nodes);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***while***REMOVED***(stack.length***REMOVED***>***REMOVED***0);

***REMOVED******REMOVED***push({***REMOVED***type:***REMOVED***'eos'***REMOVED***});
***REMOVED******REMOVED***return***REMOVED***ast;
};

var***REMOVED***parse_1***REMOVED***=***REMOVED***parse$1;

const***REMOVED***stringify***REMOVED***=***REMOVED***stringify$4;
const***REMOVED***compile***REMOVED***=***REMOVED***compile_1;
const***REMOVED***expand***REMOVED***=***REMOVED***expand_1;
const***REMOVED***parse***REMOVED***=***REMOVED***parse_1;

/**
***REMOVED*******REMOVED***Expand***REMOVED***the***REMOVED***given***REMOVED***pattern***REMOVED***or***REMOVED***create***REMOVED***a***REMOVED***regex-compatible***REMOVED***string.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***braces***REMOVED***=***REMOVED***require('braces');
***REMOVED*******REMOVED***console.log(braces('{a,b,c}',***REMOVED***{***REMOVED***compile:***REMOVED***true***REMOVED***}));***REMOVED***//=>***REMOVED***['(a|b|c)']
***REMOVED*******REMOVED***console.log(braces('{a,b,c}'));***REMOVED***//=>***REMOVED***['a',***REMOVED***'b',***REMOVED***'c']
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`str`
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{String}
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

const***REMOVED***braces$1***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***[];

***REMOVED******REMOVED***if***REMOVED***(Array.isArray(input))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***pattern***REMOVED***of***REMOVED***input)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***braces$1.create(pattern,***REMOVED***options);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Array.isArray(result))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output.push(...result);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***output.push(result);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***[].concat(braces$1.create(input,***REMOVED***options));
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(options***REMOVED***&&***REMOVED***options.expand***REMOVED***===***REMOVED***true***REMOVED***&&***REMOVED***options.nodupes***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***output***REMOVED***=***REMOVED***[...new***REMOVED***Set(output)];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***output;
};

/**
***REMOVED*******REMOVED***Parse***REMOVED***the***REMOVED***given***REMOVED***`str`***REMOVED***with***REMOVED***the***REMOVED***given***REMOVED***`options`.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***//***REMOVED***braces.parse(pattern,***REMOVED***[,***REMOVED***options]);
***REMOVED*******REMOVED***const***REMOVED***ast***REMOVED***=***REMOVED***braces.parse('a/{b,c}/d');
***REMOVED*******REMOVED***console.log(ast);
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***pattern***REMOVED***Brace***REMOVED***pattern***REMOVED***to***REMOVED***parse
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***options
***REMOVED*******REMOVED***@return***REMOVED***{Object}***REMOVED***Returns***REMOVED***an***REMOVED***AST
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

braces$1.parse***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***parse(input,***REMOVED***options);

/**
***REMOVED*******REMOVED***Creates***REMOVED***a***REMOVED***braces***REMOVED***string***REMOVED***from***REMOVED***an***REMOVED***AST,***REMOVED***or***REMOVED***an***REMOVED***AST***REMOVED***node.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***braces***REMOVED***=***REMOVED***require('braces');
***REMOVED*******REMOVED***let***REMOVED***ast***REMOVED***=***REMOVED***braces.parse('foo/{a,b}/bar');
***REMOVED*******REMOVED***console.log(stringify(ast.nodes[2]));***REMOVED***//=>***REMOVED***'{a,b}'
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`input`***REMOVED***Brace***REMOVED***pattern***REMOVED***or***REMOVED***AST.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Array}***REMOVED***Returns***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***expanded***REMOVED***values.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

braces$1.stringify***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***stringify(braces$1.parse(input,***REMOVED***options),***REMOVED***options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***stringify(input,***REMOVED***options);
};

/**
***REMOVED*******REMOVED***Compiles***REMOVED***a***REMOVED***brace***REMOVED***pattern***REMOVED***into***REMOVED***a***REMOVED***regex-compatible,***REMOVED***optimized***REMOVED***string.
***REMOVED*******REMOVED***This***REMOVED***method***REMOVED***is***REMOVED***called***REMOVED***by***REMOVED***the***REMOVED***main***REMOVED***[braces](#braces)***REMOVED***function***REMOVED***by***REMOVED***default.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***braces***REMOVED***=***REMOVED***require('braces');
***REMOVED*******REMOVED***console.log(braces.compile('a/{b,c}/d'));
***REMOVED*******REMOVED***//=>***REMOVED***['a/(b|c)/d']
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`input`***REMOVED***Brace***REMOVED***pattern***REMOVED***or***REMOVED***AST.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Array}***REMOVED***Returns***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***expanded***REMOVED***values.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

braces$1.compile***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***input***REMOVED***=***REMOVED***braces$1.parse(input,***REMOVED***options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***compile(input,***REMOVED***options);
};

/**
***REMOVED*******REMOVED***Expands***REMOVED***a***REMOVED***brace***REMOVED***pattern***REMOVED***into***REMOVED***an***REMOVED***array.***REMOVED***This***REMOVED***method***REMOVED***is***REMOVED***called***REMOVED***by***REMOVED***the
***REMOVED*******REMOVED***main***REMOVED***[braces](#braces)***REMOVED***function***REMOVED***when***REMOVED***`options.expand`***REMOVED***is***REMOVED***true.***REMOVED***Before
***REMOVED*******REMOVED***using***REMOVED***this***REMOVED***method***REMOVED***it's***REMOVED***recommended***REMOVED***that***REMOVED***you***REMOVED***read***REMOVED***the***REMOVED***[performance***REMOVED***notes](#performance))
***REMOVED*******REMOVED***and***REMOVED***advantages***REMOVED***of***REMOVED***using***REMOVED***[.compile](#compile)***REMOVED***instead.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***braces***REMOVED***=***REMOVED***require('braces');
***REMOVED*******REMOVED***console.log(braces.expand('a/{b,c}/d'));
***REMOVED*******REMOVED***//=>***REMOVED***['a/b/d',***REMOVED***'a/c/d'];
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`pattern`***REMOVED***Brace***REMOVED***pattern
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Array}***REMOVED***Returns***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***expanded***REMOVED***values.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

braces$1.expand***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***===***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***input***REMOVED***=***REMOVED***braces$1.parse(input,***REMOVED***options);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***expand(input,***REMOVED***options);

***REMOVED******REMOVED***//***REMOVED***filter***REMOVED***out***REMOVED***empty***REMOVED***strings***REMOVED***if***REMOVED***specified
***REMOVED******REMOVED***if***REMOVED***(options.noempty***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***result.filter(Boolean);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***filter***REMOVED***out***REMOVED***duplicates***REMOVED***if***REMOVED***specified
***REMOVED******REMOVED***if***REMOVED***(options.nodupes***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***[...new***REMOVED***Set(result)];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***result;
};

/**
***REMOVED*******REMOVED***Processes***REMOVED***a***REMOVED***brace***REMOVED***pattern***REMOVED***and***REMOVED***returns***REMOVED***either***REMOVED***an***REMOVED***expanded***REMOVED***array
***REMOVED*******REMOVED***(if***REMOVED***`options.expand`***REMOVED***is***REMOVED***true),***REMOVED***a***REMOVED***highly***REMOVED***optimized***REMOVED***regex-compatible***REMOVED***string.
***REMOVED*******REMOVED***This***REMOVED***method***REMOVED***is***REMOVED***called***REMOVED***by***REMOVED***the***REMOVED***main***REMOVED***[braces](#braces)***REMOVED***function.
***REMOVED****
***REMOVED*******REMOVED***```js
***REMOVED*******REMOVED***const***REMOVED***braces***REMOVED***=***REMOVED***require('braces');
***REMOVED*******REMOVED***console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
***REMOVED*******REMOVED***//=>***REMOVED***'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
***REMOVED*******REMOVED***```
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***`pattern`***REMOVED***Brace***REMOVED***pattern
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***`options`
***REMOVED*******REMOVED***@return***REMOVED***{Array}***REMOVED***Returns***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***expanded***REMOVED***values.
***REMOVED*******REMOVED***@api***REMOVED***public
***REMOVED****/

braces$1.create***REMOVED***=***REMOVED***(input,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(input***REMOVED***===***REMOVED***''***REMOVED***||***REMOVED***input.length***REMOVED***<***REMOVED***3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[input];
***REMOVED******REMOVED***}

***REMOVED***return***REMOVED***options.expand***REMOVED***!==***REMOVED***true
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***braces$1.compile(input,***REMOVED***options)
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***braces$1.expand(input,***REMOVED***options);
};

/**
***REMOVED*******REMOVED***Expose***REMOVED***"braces"
***REMOVED****/

var***REMOVED***braces_1***REMOVED***=***REMOVED***braces$1;

const***REMOVED***require$$0***REMOVED***=***REMOVED***[
	"3dm",
	"3ds",
	"3g2",
	"3gp",
	"7z",
	"a",
	"aac",
	"adp",
	"ai",
	"aif",
	"aiff",
	"alz",
	"ape",
	"apk",
	"appimage",
	"ar",
	"arj",
	"asf",
	"au",
	"avi",
	"bak",
	"baml",
	"bh",
	"bin",
	"bk",
	"bmp",
	"btif",
	"bz2",
	"bzip2",
	"cab",
	"caf",
	"cgm",
	"class",
	"cmx",
	"cpio",
	"cr2",
	"cur",
	"dat",
	"dcm",
	"deb",
	"dex",
	"djvu",
	"dll",
	"dmg",
	"dng",
	"doc",
	"docm",
	"docx",
	"dot",
	"dotm",
	"dra",
	"DS_Store",
	"dsk",
	"dts",
	"dtshd",
	"dvb",
	"dwg",
	"dxf",
	"ecelp4800",
	"ecelp7470",
	"ecelp9600",
	"egg",
	"eol",
	"eot",
	"epub",
	"exe",
	"f4v",
	"fbs",
	"fh",
	"fla",
	"flac",
	"flatpak",
	"fli",
	"flv",
	"fpx",
	"fst",
	"fvt",
	"g3",
	"gh",
	"gif",
	"graffle",
	"gz",
	"gzip",
	"h261",
	"h263",
	"h264",
	"icns",
	"ico",
	"ief",
	"img",
	"ipa",
	"iso",
	"jar",
	"jpeg",
	"jpg",
	"jpgv",
	"jpm",
	"jxr",
	"key",
	"ktx",
	"lha",
	"lib",
	"lvp",
	"lz",
	"lzh",
	"lzma",
	"lzo",
	"m3u",
	"m4a",
	"m4v",
	"mar",
	"mdi",
	"mht",
	"mid",
	"midi",
	"mj2",
	"mka",
	"mkv",
	"mmr",
	"mng",
	"mobi",
	"mov",
	"movie",
	"mp3",
	"mp4",
	"mp4a",
	"mpeg",
	"mpg",
	"mpga",
	"mxu",
	"nef",
	"npx",
	"numbers",
	"nupkg",
	"o",
	"odp",
	"ods",
	"odt",
	"oga",
	"ogg",
	"ogv",
	"otf",
	"ott",
	"pages",
	"pbm",
	"pcx",
	"pdb",
	"pdf",
	"pea",
	"pgm",
	"pic",
	"png",
	"pnm",
	"pot",
	"potm",
	"potx",
	"ppa",
	"ppam",
	"ppm",
	"pps",
	"ppsm",
	"ppsx",
	"ppt",
	"pptm",
	"pptx",
	"psd",
	"pya",
	"pyc",
	"pyo",
	"pyv",
	"qt",
	"rar",
	"ras",
	"raw",
	"resources",
	"rgb",
	"rip",
	"rlc",
	"rmf",
	"rmvb",
	"rpm",
	"rtf",
	"rz",
	"s3m",
	"s7z",
	"scpt",
	"sgi",
	"shar",
	"snap",
	"sil",
	"sketch",
	"slk",
	"smv",
	"snk",
	"so",
	"stl",
	"suo",
	"sub",
	"swf",
	"tar",
	"tbz",
	"tbz2",
	"tga",
	"tgz",
	"thmx",
	"tif",
	"tiff",
	"tlz",
	"ttc",
	"ttf",
	"txz",
	"udf",
	"uvh",
	"uvi",
	"uvm",
	"uvp",
	"uvs",
	"uvu",
	"viv",
	"vob",
	"war",
	"wav",
	"wax",
	"wbmp",
	"wdp",
	"weba",
	"webm",
	"webp",
	"whl",
	"wim",
	"wm",
	"wma",
	"wmv",
	"wmx",
	"woff",
	"woff2",
	"wrm",
	"wvx",
	"xbm",
	"xif",
	"xla",
	"xlam",
	"xls",
	"xlsb",
	"xlsm",
	"xlsx",
	"xlt",
	"xltm",
	"xltx",
	"xm",
	"xmind",
	"xpi",
	"xpm",
	"xwd",
	"xz",
	"z",
	"zip",
	"zipx"
];

var***REMOVED***binaryExtensions$1***REMOVED***=***REMOVED***require$$0;

const***REMOVED***path***REMOVED***=***REMOVED***require$$0$2;
const***REMOVED***binaryExtensions***REMOVED***=***REMOVED***binaryExtensions$1;

const***REMOVED***extensions***REMOVED***=***REMOVED***new***REMOVED***Set(binaryExtensions);

var***REMOVED***isBinaryPath$1***REMOVED***=***REMOVED***filePath***REMOVED***=>***REMOVED***extensions.has(path.extname(filePath).slice(1).toLowerCase());

var***REMOVED***constants***REMOVED***=***REMOVED***{};

(function***REMOVED***(exports)***REMOVED***{

	const***REMOVED***{sep}***REMOVED***=***REMOVED***require$$0$2;
	const***REMOVED***{platform}***REMOVED***=***REMOVED***process;
	const***REMOVED***os***REMOVED***=***REMOVED***require$$2$1;

	exports.EV_ALL***REMOVED***=***REMOVED***'all';
	exports.EV_READY***REMOVED***=***REMOVED***'ready';
	exports.EV_ADD***REMOVED***=***REMOVED***'add';
	exports.EV_CHANGE***REMOVED***=***REMOVED***'change';
	exports.EV_ADD_DIR***REMOVED***=***REMOVED***'addDir';
	exports.EV_UNLINK***REMOVED***=***REMOVED***'unlink';
	exports.EV_UNLINK_DIR***REMOVED***=***REMOVED***'unlinkDir';
	exports.EV_RAW***REMOVED***=***REMOVED***'raw';
	exports.EV_ERROR***REMOVED***=***REMOVED***'error';

	exports.STR_DATA***REMOVED***=***REMOVED***'data';
	exports.STR_END***REMOVED***=***REMOVED***'end';
	exports.STR_CLOSE***REMOVED***=***REMOVED***'close';

	exports.FSEVENT_CREATED***REMOVED***=***REMOVED***'created';
	exports.FSEVENT_MODIFIED***REMOVED***=***REMOVED***'modified';
	exports.FSEVENT_DELETED***REMOVED***=***REMOVED***'deleted';
	exports.FSEVENT_MOVED***REMOVED***=***REMOVED***'moved';
	exports.FSEVENT_CLONED***REMOVED***=***REMOVED***'cloned';
	exports.FSEVENT_UNKNOWN***REMOVED***=***REMOVED***'unknown';
	exports.FSEVENT_TYPE_FILE***REMOVED***=***REMOVED***'file';
	exports.FSEVENT_TYPE_DIRECTORY***REMOVED***=***REMOVED***'directory';
	exports.FSEVENT_TYPE_SYMLINK***REMOVED***=***REMOVED***'symlink';

	exports.KEY_LISTENERS***REMOVED***=***REMOVED***'listeners';
	exports.KEY_ERR***REMOVED***=***REMOVED***'errHandlers';
	exports.KEY_RAW***REMOVED***=***REMOVED***'rawEmitters';
	exports.HANDLER_KEYS***REMOVED***=***REMOVED***[exports.KEY_LISTENERS,***REMOVED***exports.KEY_ERR,***REMOVED***exports.KEY_RAW];

	exports.DOT_SLASH***REMOVED***=***REMOVED***`.${sep}`;

	exports.BACK_SLASH_RE***REMOVED***=***REMOVED***/\\/g;
	exports.DOUBLE_SLASH_RE***REMOVED***=***REMOVED***/\/\//;
	exports.SLASH_OR_BACK_SLASH_RE***REMOVED***=***REMOVED***/[/\\]/;
	exports.DOT_RE***REMOVED***=***REMOVED***/\..*\.(sw[px])$|~$|\.subl.*\.tmp/;
	exports.REPLACER_RE***REMOVED***=***REMOVED***/^\.[/\\]/;

	exports.SLASH***REMOVED***=***REMOVED***'/';
	exports.SLASH_SLASH***REMOVED***=***REMOVED***'//';
	exports.BRACE_START***REMOVED***=***REMOVED***'{';
	exports.BANG***REMOVED***=***REMOVED***'!';
	exports.ONE_DOT***REMOVED***=***REMOVED***'.';
	exports.TWO_DOTS***REMOVED***=***REMOVED***'..';
	exports.STAR***REMOVED***=***REMOVED***'*';
	exports.GLOBSTAR***REMOVED***=***REMOVED***'**';
	exports.ROOT_GLOBSTAR***REMOVED***=***REMOVED***'/**/*';
	exports.SLASH_GLOBSTAR***REMOVED***=***REMOVED***'/**';
	exports.DIR_SUFFIX***REMOVED***=***REMOVED***'Dir';
	exports.ANYMATCH_OPTS***REMOVED***=***REMOVED***{dot:***REMOVED***true};
	exports.STRING_TYPE***REMOVED***=***REMOVED***'string';
	exports.FUNCTION_TYPE***REMOVED***=***REMOVED***'function';
	exports.EMPTY_STR***REMOVED***=***REMOVED***'';
	exports.EMPTY_FN***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{};
	exports.IDENTITY_FN***REMOVED***=***REMOVED***val***REMOVED***=>***REMOVED***val;

	exports.isWindows***REMOVED***=***REMOVED***platform***REMOVED***===***REMOVED***'win32';
	exports.isMacos***REMOVED***=***REMOVED***platform***REMOVED***===***REMOVED***'darwin';
	exports.isLinux***REMOVED***=***REMOVED***platform***REMOVED***===***REMOVED***'linux';
	exports.isIBMi***REMOVED***=***REMOVED***os.type()***REMOVED***===***REMOVED***'OS400';***REMOVED***
}***REMOVED***(constants));

const***REMOVED***fs$2***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***sysPath$2***REMOVED***=***REMOVED***require$$0$2;
const***REMOVED***{***REMOVED***promisify:***REMOVED***promisify$2***REMOVED***}***REMOVED***=***REMOVED***require$$2;
const***REMOVED***isBinaryPath***REMOVED***=***REMOVED***isBinaryPath$1;
const***REMOVED***{
***REMOVED******REMOVED***isWindows:***REMOVED***isWindows$1,
***REMOVED******REMOVED***isLinux,
***REMOVED******REMOVED***EMPTY_FN:***REMOVED***EMPTY_FN$2,
***REMOVED******REMOVED***EMPTY_STR:***REMOVED***EMPTY_STR$1,
***REMOVED******REMOVED***KEY_LISTENERS,
***REMOVED******REMOVED***KEY_ERR,
***REMOVED******REMOVED***KEY_RAW,
***REMOVED******REMOVED***HANDLER_KEYS,
***REMOVED******REMOVED***EV_CHANGE:***REMOVED***EV_CHANGE$2,
***REMOVED******REMOVED***EV_ADD:***REMOVED***EV_ADD$2,
***REMOVED******REMOVED***EV_ADD_DIR:***REMOVED***EV_ADD_DIR$2,
***REMOVED******REMOVED***EV_ERROR:***REMOVED***EV_ERROR$2,
***REMOVED******REMOVED***STR_DATA:***REMOVED***STR_DATA$1,
***REMOVED******REMOVED***STR_END:***REMOVED***STR_END$2,
***REMOVED******REMOVED***BRACE_START:***REMOVED***BRACE_START$1,
***REMOVED******REMOVED***STAR
}***REMOVED***=***REMOVED***constants;

const***REMOVED***THROTTLE_MODE_WATCH***REMOVED***=***REMOVED***'watch';

const***REMOVED***open***REMOVED***=***REMOVED***promisify$2(fs$2.open);
const***REMOVED***stat$2***REMOVED***=***REMOVED***promisify$2(fs$2.stat);
const***REMOVED***lstat$1***REMOVED***=***REMOVED***promisify$2(fs$2.lstat);
const***REMOVED***close***REMOVED***=***REMOVED***promisify$2(fs$2.close);
const***REMOVED***fsrealpath***REMOVED***=***REMOVED***promisify$2(fs$2.realpath);

const***REMOVED***statMethods$1***REMOVED***=***REMOVED***{***REMOVED***lstat:***REMOVED***lstat$1,***REMOVED***stat:***REMOVED***stat$2***REMOVED***};

//***REMOVED***TODO:***REMOVED***emit***REMOVED***errors***REMOVED***properly.***REMOVED***Example:***REMOVED***EMFILE***REMOVED***on***REMOVED***Macos.
const***REMOVED***foreach***REMOVED***=***REMOVED***(val,***REMOVED***fn)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(val***REMOVED***instanceof***REMOVED***Set)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***val.forEach(fn);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fn(val);
***REMOVED******REMOVED***}
};

const***REMOVED***addAndConvert***REMOVED***=***REMOVED***(main,***REMOVED***prop,***REMOVED***item)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***container***REMOVED***=***REMOVED***main[prop];
***REMOVED******REMOVED***if***REMOVED***(!(container***REMOVED***instanceof***REMOVED***Set))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***main[prop]***REMOVED***=***REMOVED***container***REMOVED***=***REMOVED***new***REMOVED***Set([container]);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***container.add(item);
};

const***REMOVED***clearItem***REMOVED***=***REMOVED***cont***REMOVED***=>***REMOVED***key***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***set***REMOVED***=***REMOVED***cont[key];
***REMOVED******REMOVED***if***REMOVED***(set***REMOVED***instanceof***REMOVED***Set)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***set.clear();
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***cont[key];
***REMOVED******REMOVED***}
};

const***REMOVED***delFromSet***REMOVED***=***REMOVED***(main,***REMOVED***prop,***REMOVED***item)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***container***REMOVED***=***REMOVED***main[prop];
***REMOVED******REMOVED***if***REMOVED***(container***REMOVED***instanceof***REMOVED***Set)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***container.delete(item);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(container***REMOVED***===***REMOVED***item)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***main[prop];
***REMOVED******REMOVED***}
};

const***REMOVED***isEmptySet***REMOVED***=***REMOVED***(val)***REMOVED***=>***REMOVED***val***REMOVED***instanceof***REMOVED***Set***REMOVED***?***REMOVED***val.size***REMOVED***===***REMOVED***0***REMOVED***:***REMOVED***!val;

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{String}***REMOVED***Path
***REMOVED****/

//***REMOVED***fs_watch***REMOVED***helpers

//***REMOVED***object***REMOVED***to***REMOVED***hold***REMOVED***per-process***REMOVED***fs_watch***REMOVED***instances
//***REMOVED***(may***REMOVED***be***REMOVED***shared***REMOVED***across***REMOVED***chokidar***REMOVED***FSWatcher***REMOVED***instances)

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{Object}***REMOVED***FsWatchContainer
***REMOVED*******REMOVED***@property***REMOVED***{Set}***REMOVED***listeners
***REMOVED*******REMOVED***@property***REMOVED***{Set}***REMOVED***errHandlers
***REMOVED*******REMOVED***@property***REMOVED***{Set}***REMOVED***rawEmitters
***REMOVED*******REMOVED***@property***REMOVED***{fs.FSWatcher=}***REMOVED***watcher
***REMOVED*******REMOVED***@property***REMOVED***{Boolean=}***REMOVED***watcherUnusable
***REMOVED****/

/**
***REMOVED*******REMOVED***@type***REMOVED***{Map<String,FsWatchContainer>}
***REMOVED****/
const***REMOVED***FsWatchInstances***REMOVED***=***REMOVED***new***REMOVED***Map();

/**
***REMOVED*******REMOVED***Instantiates***REMOVED***the***REMOVED***fs_watch***REMOVED***interface
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path***REMOVED***to***REMOVED***be***REMOVED***watched
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***options***REMOVED***to***REMOVED***be***REMOVED***passed***REMOVED***to***REMOVED***fs_watch
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***listener***REMOVED***main***REMOVED***event***REMOVED***handler
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***errHandler***REMOVED***emits***REMOVED***info***REMOVED***about***REMOVED***errors
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***emitRaw***REMOVED***emits***REMOVED***raw***REMOVED***event***REMOVED***data
***REMOVED*******REMOVED***@returns***REMOVED***{fs.FSWatcher}***REMOVED***new***REMOVED***fsevents***REMOVED***instance
***REMOVED****/
function***REMOVED***createFsWatchInstance(path,***REMOVED***options,***REMOVED***listener,***REMOVED***errHandler,***REMOVED***emitRaw)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***handleEvent***REMOVED***=***REMOVED***(rawEvent,***REMOVED***evPath)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***listener(path);
***REMOVED******REMOVED******REMOVED******REMOVED***emitRaw(rawEvent,***REMOVED***evPath,***REMOVED***{watchedPath:***REMOVED***path});

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***emit***REMOVED***based***REMOVED***on***REMOVED***events***REMOVED***occurring***REMOVED***for***REMOVED***files***REMOVED***from***REMOVED***a***REMOVED***directory's***REMOVED***watcher***REMOVED***in
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***case***REMOVED***the***REMOVED***file's***REMOVED***watcher***REMOVED***misses***REMOVED***it***REMOVED***(and***REMOVED***rely***REMOVED***on***REMOVED***throttling***REMOVED***to***REMOVED***de-dupe)
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(evPath***REMOVED***&&***REMOVED***path***REMOVED***!==***REMOVED***evPath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fsWatchBroadcast(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sysPath$2.resolve(path,***REMOVED***evPath),***REMOVED***KEY_LISTENERS,***REMOVED***sysPath$2.join(path,***REMOVED***evPath)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fs$2.watch(path,***REMOVED***options,***REMOVED***handleEvent);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***errHandler(error);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Helper***REMOVED***for***REMOVED***passing***REMOVED***fs_watch***REMOVED***event***REMOVED***data***REMOVED***to***REMOVED***a***REMOVED***collection***REMOVED***of***REMOVED***listeners
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***fullPath***REMOVED***absolute***REMOVED***path***REMOVED***bound***REMOVED***to***REMOVED***fs_watch***REMOVED***instance
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***type***REMOVED***listener***REMOVED***type
***REMOVED*******REMOVED***@param***REMOVED***{*=}***REMOVED***val1***REMOVED***arguments***REMOVED***to***REMOVED***be***REMOVED***passed***REMOVED***to***REMOVED***listeners
***REMOVED*******REMOVED***@param***REMOVED***{*=}***REMOVED***val2
***REMOVED*******REMOVED***@param***REMOVED***{*=}***REMOVED***val3
***REMOVED****/
const***REMOVED***fsWatchBroadcast***REMOVED***=***REMOVED***(fullPath,***REMOVED***type,***REMOVED***val1,***REMOVED***val2,***REMOVED***val3)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***cont***REMOVED***=***REMOVED***FsWatchInstances.get(fullPath);
***REMOVED******REMOVED***if***REMOVED***(!cont)***REMOVED***return;
***REMOVED******REMOVED***foreach(cont[type],***REMOVED***(listener)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***listener(val1,***REMOVED***val2,***REMOVED***val3);
***REMOVED******REMOVED***});
};

/**
***REMOVED*******REMOVED***Instantiates***REMOVED***the***REMOVED***fs_watch***REMOVED***interface***REMOVED***or***REMOVED***binds***REMOVED***listeners
***REMOVED*******REMOVED***to***REMOVED***an***REMOVED***existing***REMOVED***one***REMOVED***covering***REMOVED***the***REMOVED***same***REMOVED***file***REMOVED***system***REMOVED***entry
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***fullPath***REMOVED***absolute***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***options***REMOVED***to***REMOVED***be***REMOVED***passed***REMOVED***to***REMOVED***fs_watch
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***handlers***REMOVED***container***REMOVED***for***REMOVED***event***REMOVED***listener***REMOVED***functions
***REMOVED****/
const***REMOVED***setFsWatchListener***REMOVED***=***REMOVED***(path,***REMOVED***fullPath,***REMOVED***options,***REMOVED***handlers)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{listener,***REMOVED***errHandler,***REMOVED***rawEmitter}***REMOVED***=***REMOVED***handlers;
***REMOVED******REMOVED***let***REMOVED***cont***REMOVED***=***REMOVED***FsWatchInstances.get(fullPath);

***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{fs.FSWatcher=}***REMOVED****/
***REMOVED******REMOVED***let***REMOVED***watcher;
***REMOVED******REMOVED***if***REMOVED***(!options.persistent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***watcher***REMOVED***=***REMOVED***createFsWatchInstance(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path,***REMOVED***options,***REMOVED***listener,***REMOVED***errHandler,***REMOVED***rawEmitter
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***watcher.close.bind(watcher);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(cont)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***addAndConvert(cont,***REMOVED***KEY_LISTENERS,***REMOVED***listener);
***REMOVED******REMOVED******REMOVED******REMOVED***addAndConvert(cont,***REMOVED***KEY_ERR,***REMOVED***errHandler);
***REMOVED******REMOVED******REMOVED******REMOVED***addAndConvert(cont,***REMOVED***KEY_RAW,***REMOVED***rawEmitter);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***watcher***REMOVED***=***REMOVED***createFsWatchInstance(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fsWatchBroadcast.bind(null,***REMOVED***fullPath,***REMOVED***KEY_LISTENERS),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errHandler,***REMOVED***//***REMOVED***no***REMOVED***need***REMOVED***to***REMOVED***use***REMOVED***broadcast***REMOVED***here
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fsWatchBroadcast.bind(null,***REMOVED***fullPath,***REMOVED***KEY_RAW)
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!watcher)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***watcher.on(EV_ERROR$2,***REMOVED***async***REMOVED***(error)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***broadcastErr***REMOVED***=***REMOVED***fsWatchBroadcast.bind(null,***REMOVED***fullPath,***REMOVED***KEY_ERR);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.watcherUnusable***REMOVED***=***REMOVED***true;***REMOVED***//***REMOVED***documented***REMOVED***since***REMOVED***Node***REMOVED***10.4.1
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Workaround***REMOVED***for***REMOVED***https://github.com/joyent/node/issues/4337
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isWindows$1***REMOVED***&&***REMOVED***error.code***REMOVED***===***REMOVED***'EPERM')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fd***REMOVED***=***REMOVED***await***REMOVED***open(path,***REMOVED***'r');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***close(fd);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***broadcastErr(error);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***broadcastErr(error);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***cont***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listeners:***REMOVED***listener,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errHandlers:***REMOVED***errHandler,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rawEmitters:***REMOVED***rawEmitter,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watcher
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***FsWatchInstances.set(fullPath,***REMOVED***cont);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***//***REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***cont.listeners.indexOf(listener);

***REMOVED******REMOVED***//***REMOVED***removes***REMOVED***this***REMOVED***instance's***REMOVED***listeners***REMOVED***and***REMOVED***closes***REMOVED***the***REMOVED***underlying***REMOVED***fs_watch
***REMOVED******REMOVED***//***REMOVED***instance***REMOVED***if***REMOVED***there***REMOVED***are***REMOVED***no***REMOVED***more***REMOVED***listeners***REMOVED***left
***REMOVED******REMOVED***return***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***delFromSet(cont,***REMOVED***KEY_LISTENERS,***REMOVED***listener);
***REMOVED******REMOVED******REMOVED******REMOVED***delFromSet(cont,***REMOVED***KEY_ERR,***REMOVED***errHandler);
***REMOVED******REMOVED******REMOVED******REMOVED***delFromSet(cont,***REMOVED***KEY_RAW,***REMOVED***rawEmitter);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isEmptySet(cont.listeners))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Check***REMOVED***to***REMOVED***protect***REMOVED***against***REMOVED***issue***REMOVED***gh-730.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***(cont.watcherUnusable)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.watcher.close();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***FsWatchInstances.delete(fullPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***HANDLER_KEYS.forEach(clearItem(cont));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.watcher***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.freeze(cont);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
};

//***REMOVED***fs_watchFile***REMOVED***helpers

//***REMOVED***object***REMOVED***to***REMOVED***hold***REMOVED***per-process***REMOVED***fs_watchFile***REMOVED***instances
//***REMOVED***(may***REMOVED***be***REMOVED***shared***REMOVED***across***REMOVED***chokidar***REMOVED***FSWatcher***REMOVED***instances)
const***REMOVED***FsWatchFileInstances***REMOVED***=***REMOVED***new***REMOVED***Map();

/**
***REMOVED*******REMOVED***Instantiates***REMOVED***the***REMOVED***fs_watchFile***REMOVED***interface***REMOVED***or***REMOVED***binds***REMOVED***listeners
***REMOVED*******REMOVED***to***REMOVED***an***REMOVED***existing***REMOVED***one***REMOVED***covering***REMOVED***the***REMOVED***same***REMOVED***file***REMOVED***system***REMOVED***entry
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path***REMOVED***to***REMOVED***be***REMOVED***watched
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***fullPath***REMOVED***absolute***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***options***REMOVED***options***REMOVED***to***REMOVED***be***REMOVED***passed***REMOVED***to***REMOVED***fs_watchFile
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***handlers***REMOVED***container***REMOVED***for***REMOVED***event***REMOVED***listener***REMOVED***functions
***REMOVED*******REMOVED***@returns***REMOVED***{Function}***REMOVED***closer
***REMOVED****/
const***REMOVED***setFsWatchFileListener***REMOVED***=***REMOVED***(path,***REMOVED***fullPath,***REMOVED***options,***REMOVED***handlers)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{listener,***REMOVED***rawEmitter}***REMOVED***=***REMOVED***handlers;
***REMOVED******REMOVED***let***REMOVED***cont***REMOVED***=***REMOVED***FsWatchFileInstances.get(fullPath);

***REMOVED******REMOVED***const***REMOVED***copts***REMOVED***=***REMOVED***cont***REMOVED***&&***REMOVED***cont.options;
***REMOVED******REMOVED***if***REMOVED***(copts***REMOVED***&&***REMOVED***(copts.persistent***REMOVED***<***REMOVED***options.persistent***REMOVED***||***REMOVED***copts.interval***REMOVED***>***REMOVED***options.interval))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fs$2.unwatchFile(fullPath);
***REMOVED******REMOVED******REMOVED******REMOVED***cont***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/****REMOVED***eslint-enable***REMOVED***no-unused-vars,***REMOVED***prefer-destructuring***REMOVED****/

***REMOVED******REMOVED***if***REMOVED***(cont)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***addAndConvert(cont,***REMOVED***KEY_LISTENERS,***REMOVED***listener);
***REMOVED******REMOVED******REMOVED******REMOVED***addAndConvert(cont,***REMOVED***KEY_RAW,***REMOVED***rawEmitter);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***TODO
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***listeners.add(listener);
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***rawEmitters.add(rawEmitter);
***REMOVED******REMOVED******REMOVED******REMOVED***cont***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listeners:***REMOVED***listener,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rawEmitters:***REMOVED***rawEmitter,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watcher:***REMOVED***fs$2.watchFile(fullPath,***REMOVED***options,***REMOVED***(curr,***REMOVED***prev)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***foreach(cont.rawEmitters,***REMOVED***(rawEmitter)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rawEmitter(EV_CHANGE$2,***REMOVED***fullPath,***REMOVED***{curr,***REMOVED***prev});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***currmtime***REMOVED***=***REMOVED***curr.mtimeMs;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(curr.size***REMOVED***!==***REMOVED***prev.size***REMOVED***||***REMOVED***currmtime***REMOVED***>***REMOVED***prev.mtimeMs***REMOVED***||***REMOVED***currmtime***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***foreach(cont.listeners,***REMOVED***(listener)***REMOVED***=>***REMOVED***listener(path,***REMOVED***curr));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***FsWatchFileInstances.set(fullPath,***REMOVED***cont);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***//***REMOVED***const***REMOVED***index***REMOVED***=***REMOVED***cont.listeners.indexOf(listener);

***REMOVED******REMOVED***//***REMOVED***Removes***REMOVED***this***REMOVED***instance's***REMOVED***listeners***REMOVED***and***REMOVED***closes***REMOVED***the***REMOVED***underlying***REMOVED***fs_watchFile
***REMOVED******REMOVED***//***REMOVED***instance***REMOVED***if***REMOVED***there***REMOVED***are***REMOVED***no***REMOVED***more***REMOVED***listeners***REMOVED***left.
***REMOVED******REMOVED***return***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***delFromSet(cont,***REMOVED***KEY_LISTENERS,***REMOVED***listener);
***REMOVED******REMOVED******REMOVED******REMOVED***delFromSet(cont,***REMOVED***KEY_RAW,***REMOVED***rawEmitter);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isEmptySet(cont.listeners))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***FsWatchFileInstances.delete(fullPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs$2.unwatchFile(fullPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.options***REMOVED***=***REMOVED***cont.watcher***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.freeze(cont);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
};

/**
***REMOVED*******REMOVED***@mixin
***REMOVED****/
let***REMOVED***NodeFsHandler$1***REMOVED***=***REMOVED***class***REMOVED***NodeFsHandler***REMOVED***{

/**
***REMOVED*******REMOVED***@param***REMOVED***{import("../index").FSWatcher}***REMOVED***fsW
***REMOVED****/
constructor(fsW)***REMOVED***{
***REMOVED******REMOVED***this.fsw***REMOVED***=***REMOVED***fsW;
***REMOVED******REMOVED***this._boundHandleError***REMOVED***=***REMOVED***(error)***REMOVED***=>***REMOVED***fsW._handleError(error);
}

/**
***REMOVED*******REMOVED***Watch***REMOVED***file***REMOVED***for***REMOVED***changes***REMOVED***with***REMOVED***fs_watchFile***REMOVED***or***REMOVED***fs_watch.
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path***REMOVED***to***REMOVED***file***REMOVED***or***REMOVED***dir
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***listener***REMOVED***on***REMOVED***fs***REMOVED***change
***REMOVED*******REMOVED***@returns***REMOVED***{Function}***REMOVED***closer***REMOVED***for***REMOVED***the***REMOVED***watcher***REMOVED***instance
***REMOVED****/
_watchWithNodeFs(path,***REMOVED***listener)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***this.fsw.options;
***REMOVED******REMOVED***const***REMOVED***directory***REMOVED***=***REMOVED***sysPath$2.dirname(path);
***REMOVED******REMOVED***const***REMOVED***basename***REMOVED***=***REMOVED***sysPath$2.basename(path);
***REMOVED******REMOVED***const***REMOVED***parent***REMOVED***=***REMOVED***this.fsw._getWatchedDir(directory);
***REMOVED******REMOVED***parent.add(basename);
***REMOVED******REMOVED***const***REMOVED***absolutePath***REMOVED***=***REMOVED***sysPath$2.resolve(path);
***REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{persistent:***REMOVED***opts.persistent};
***REMOVED******REMOVED***if***REMOVED***(!listener)***REMOVED***listener***REMOVED***=***REMOVED***EMPTY_FN$2;

***REMOVED******REMOVED***let***REMOVED***closer;
***REMOVED******REMOVED***if***REMOVED***(opts.usePolling)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***options.interval***REMOVED***=***REMOVED***opts.enableBinaryInterval***REMOVED***&&***REMOVED***isBinaryPath(basename)***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.binaryInterval***REMOVED***:***REMOVED***opts.interval;
***REMOVED******REMOVED******REMOVED******REMOVED***closer***REMOVED***=***REMOVED***setFsWatchFileListener(path,***REMOVED***absolutePath,***REMOVED***options,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listener,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rawEmitter:***REMOVED***this.fsw._emitRaw
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***closer***REMOVED***=***REMOVED***setFsWatchListener(path,***REMOVED***absolutePath,***REMOVED***options,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listener,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errHandler:***REMOVED***this._boundHandleError,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rawEmitter:***REMOVED***this.fsw._emitRaw
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***closer;
}

/**
***REMOVED*******REMOVED***Watch***REMOVED***a***REMOVED***file***REMOVED***and***REMOVED***emit***REMOVED***add***REMOVED***event***REMOVED***if***REMOVED***warranted.
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***file***REMOVED***Path
***REMOVED*******REMOVED***@param***REMOVED***{fs.Stats}***REMOVED***stats***REMOVED***result***REMOVED***of***REMOVED***fs_stat
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***initialAdd***REMOVED***was***REMOVED***the***REMOVED***file***REMOVED***added***REMOVED***at***REMOVED***watch***REMOVED***instantiation?
***REMOVED*******REMOVED***@returns***REMOVED***{Function}***REMOVED***closer***REMOVED***for***REMOVED***the***REMOVED***watcher***REMOVED***instance
***REMOVED****/
_handleFile(file,***REMOVED***stats,***REMOVED***initialAdd)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***dirname***REMOVED***=***REMOVED***sysPath$2.dirname(file);
***REMOVED******REMOVED***const***REMOVED***basename***REMOVED***=***REMOVED***sysPath$2.basename(file);
***REMOVED******REMOVED***const***REMOVED***parent***REMOVED***=***REMOVED***this.fsw._getWatchedDir(dirname);
***REMOVED******REMOVED***//***REMOVED***stats***REMOVED***is***REMOVED***always***REMOVED***present
***REMOVED******REMOVED***let***REMOVED***prevStats***REMOVED***=***REMOVED***stats;

***REMOVED******REMOVED***//***REMOVED***if***REMOVED***the***REMOVED***file***REMOVED***is***REMOVED***already***REMOVED***being***REMOVED***watched,***REMOVED***do***REMOVED***nothing
***REMOVED******REMOVED***if***REMOVED***(parent.has(basename))***REMOVED***return;

***REMOVED******REMOVED***const***REMOVED***listener***REMOVED***=***REMOVED***async***REMOVED***(path,***REMOVED***newStats)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.fsw._throttle(THROTTLE_MODE_WATCH,***REMOVED***file,***REMOVED***5))***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!newStats***REMOVED***||***REMOVED***newStats.mtimeMs***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***newStats***REMOVED***=***REMOVED***await***REMOVED***stat$2(file);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Check***REMOVED***that***REMOVED***change***REMOVED***event***REMOVED***was***REMOVED***not***REMOVED***fired***REMOVED***because***REMOVED***of***REMOVED***changed***REMOVED***only***REMOVED***accessTime.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***at***REMOVED***=***REMOVED***newStats.atimeMs;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mt***REMOVED***=***REMOVED***newStats.mtimeMs;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!at***REMOVED***||***REMOVED***at***REMOVED***<=***REMOVED***mt***REMOVED***||***REMOVED***mt***REMOVED***!==***REMOVED***prevStats.mtimeMs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(EV_CHANGE$2,***REMOVED***file,***REMOVED***newStats);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isLinux***REMOVED***&&***REMOVED***prevStats.ino***REMOVED***!==***REMOVED***newStats.ino)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._closeFile(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prevStats***REMOVED***=***REMOVED***newStats;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._addPathCloser(path,***REMOVED***this._watchWithNodeFs(file,***REMOVED***listener));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prevStats***REMOVED***=***REMOVED***newStats;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Fix***REMOVED***issues***REMOVED***where***REMOVED***mtime***REMOVED***is***REMOVED***null***REMOVED***but***REMOVED***file***REMOVED***is***REMOVED***still***REMOVED***present
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._remove(dirname,***REMOVED***basename);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***add***REMOVED***is***REMOVED***about***REMOVED***to***REMOVED***be***REMOVED***emitted***REMOVED***if***REMOVED***file***REMOVED***not***REMOVED***already***REMOVED***tracked***REMOVED***in***REMOVED***parent
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(parent.has(basename))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Check***REMOVED***that***REMOVED***change***REMOVED***event***REMOVED***was***REMOVED***not***REMOVED***fired***REMOVED***because***REMOVED***of***REMOVED***changed***REMOVED***only***REMOVED***accessTime.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***at***REMOVED***=***REMOVED***newStats.atimeMs;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***mt***REMOVED***=***REMOVED***newStats.mtimeMs;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!at***REMOVED***||***REMOVED***at***REMOVED***<=***REMOVED***mt***REMOVED***||***REMOVED***mt***REMOVED***!==***REMOVED***prevStats.mtimeMs)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(EV_CHANGE$2,***REMOVED***file,***REMOVED***newStats);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***prevStats***REMOVED***=***REMOVED***newStats;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***//***REMOVED***kick***REMOVED***off***REMOVED***the***REMOVED***watcher
***REMOVED******REMOVED***const***REMOVED***closer***REMOVED***=***REMOVED***this._watchWithNodeFs(file,***REMOVED***listener);

***REMOVED******REMOVED***//***REMOVED***emit***REMOVED***an***REMOVED***add***REMOVED***event***REMOVED***if***REMOVED***we're***REMOVED***supposed***REMOVED***to
***REMOVED******REMOVED***if***REMOVED***(!(initialAdd***REMOVED***&&***REMOVED***this.fsw.options.ignoreInitial)***REMOVED***&&***REMOVED***this.fsw._isntIgnored(file))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.fsw._throttle(EV_ADD$2,***REMOVED***file,***REMOVED***0))***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(EV_ADD$2,***REMOVED***file,***REMOVED***stats);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***closer;
}

/**
***REMOVED*******REMOVED***Handle***REMOVED***symlinks***REMOVED***encountered***REMOVED***while***REMOVED***reading***REMOVED***a***REMOVED***dir.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***entry***REMOVED***returned***REMOVED***by***REMOVED***readdirp
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***directory***REMOVED***path***REMOVED***of***REMOVED***dir***REMOVED***being***REMOVED***read
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path***REMOVED***of***REMOVED***this***REMOVED***item
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***item***REMOVED***basename***REMOVED***of***REMOVED***this***REMOVED***item
***REMOVED*******REMOVED***@returns***REMOVED***{Promise<Boolean>}***REMOVED***true***REMOVED***if***REMOVED***no***REMOVED***more***REMOVED***processing***REMOVED***is***REMOVED***needed***REMOVED***for***REMOVED***this***REMOVED***entry.
***REMOVED****/
async***REMOVED***_handleSymlink(entry,***REMOVED***directory,***REMOVED***path,***REMOVED***item)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***full***REMOVED***=***REMOVED***entry.fullPath;
***REMOVED******REMOVED***const***REMOVED***dir***REMOVED***=***REMOVED***this.fsw._getWatchedDir(directory);

***REMOVED******REMOVED***if***REMOVED***(!this.fsw.options.followSymlinks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***watch***REMOVED***symlink***REMOVED***directly***REMOVED***(don't***REMOVED***follow)***REMOVED***and***REMOVED***detect***REMOVED***changes
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._incrReadyCount();

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***linkPath;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***linkPath***REMOVED***=***REMOVED***await***REMOVED***fsrealpath(path);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(dir.has(item))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw._symlinkPaths.get(full)***REMOVED***!==***REMOVED***linkPath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._symlinkPaths.set(full,***REMOVED***linkPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(EV_CHANGE$2,***REMOVED***path,***REMOVED***entry.stats);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***dir.add(item);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._symlinkPaths.set(full,***REMOVED***linkPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(EV_ADD$2,***REMOVED***path,***REMOVED***entry.stats);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***don't***REMOVED***follow***REMOVED***the***REMOVED***same***REMOVED***symlink***REMOVED***more***REMOVED***than***REMOVED***once
***REMOVED******REMOVED***if***REMOVED***(this.fsw._symlinkPaths.has(full))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***this.fsw._symlinkPaths.set(full,***REMOVED***true);
}

_handleRead(directory,***REMOVED***initialAdd,***REMOVED***wh,***REMOVED***target,***REMOVED***dir,***REMOVED***depth,***REMOVED***throttler)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***Normalize***REMOVED***the***REMOVED***directory***REMOVED***name***REMOVED***on***REMOVED***Windows
***REMOVED******REMOVED***directory***REMOVED***=***REMOVED***sysPath$2.join(directory,***REMOVED***EMPTY_STR$1);

***REMOVED******REMOVED***if***REMOVED***(!wh.hasGlob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throttler***REMOVED***=***REMOVED***this.fsw._throttle('readdir',***REMOVED***directory,***REMOVED***1000);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!throttler)***REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***previous***REMOVED***=***REMOVED***this.fsw._getWatchedDir(wh.path);
***REMOVED******REMOVED***const***REMOVED***current***REMOVED***=***REMOVED***new***REMOVED***Set();

***REMOVED******REMOVED***let***REMOVED***stream***REMOVED***=***REMOVED***this.fsw._readdirp(directory,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fileFilter:***REMOVED***entry***REMOVED***=>***REMOVED***wh.filterPath(entry),
***REMOVED******REMOVED******REMOVED******REMOVED***directoryFilter:***REMOVED***entry***REMOVED***=>***REMOVED***wh.filterDir(entry),
***REMOVED******REMOVED******REMOVED******REMOVED***depth:***REMOVED***0
***REMOVED******REMOVED***}).on(STR_DATA$1,***REMOVED***async***REMOVED***(entry)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stream***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***item***REMOVED***=***REMOVED***entry.path;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***path***REMOVED***=***REMOVED***sysPath$2.join(directory,***REMOVED***item);
***REMOVED******REMOVED******REMOVED******REMOVED***current.add(item);

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(entry.stats.isSymbolicLink()***REMOVED***&&***REMOVED***await***REMOVED***this._handleSymlink(entry,***REMOVED***directory,***REMOVED***path,***REMOVED***item))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stream***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Files***REMOVED***that***REMOVED***present***REMOVED***in***REMOVED***current***REMOVED***directory***REMOVED***snapshot
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***but***REMOVED***absent***REMOVED***in***REMOVED***previous***REMOVED***are***REMOVED***added***REMOVED***to***REMOVED***watch***REMOVED***list***REMOVED***and
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***emit***REMOVED***`add`***REMOVED***event.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(item***REMOVED***===***REMOVED***target***REMOVED***||***REMOVED***!target***REMOVED***&&***REMOVED***!previous.has(item))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._incrReadyCount();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***ensure***REMOVED***relativeness***REMOVED***of***REMOVED***path***REMOVED***is***REMOVED***preserved***REMOVED***in***REMOVED***case***REMOVED***of***REMOVED***watcher***REMOVED***reuse
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***sysPath$2.join(dir,***REMOVED***sysPath$2.relative(dir,***REMOVED***path));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._addToNodeFs(path,***REMOVED***initialAdd,***REMOVED***wh,***REMOVED***depth***REMOVED***+***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}).on(EV_ERROR$2,***REMOVED***this._boundHandleError);

***REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise(resolve***REMOVED***=>
***REMOVED******REMOVED******REMOVED******REMOVED***stream.once(STR_END$2,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stream***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***wasThrottled***REMOVED***=***REMOVED***throttler***REMOVED***?***REMOVED***throttler.clear()***REMOVED***:***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Files***REMOVED***that***REMOVED***absent***REMOVED***in***REMOVED***current***REMOVED***directory***REMOVED***snapshot
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***but***REMOVED***present***REMOVED***in***REMOVED***previous***REMOVED***emit***REMOVED***`remove`***REMOVED***event
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***and***REMOVED***are***REMOVED***removed***REMOVED***from***REMOVED***@watched[directory].
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***previous.getChildren().filter((item)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***item***REMOVED***!==***REMOVED***directory***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!current.has(item)***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***in***REMOVED***case***REMOVED***of***REMOVED***intersecting***REMOVED***globs;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***a***REMOVED***path***REMOVED***may***REMOVED***have***REMOVED***been***REMOVED***filtered***REMOVED***out***REMOVED***of***REMOVED***this***REMOVED***readdir,***REMOVED***but
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***shouldn't***REMOVED***be***REMOVED***removed***REMOVED***because***REMOVED***it***REMOVED***matches***REMOVED***a***REMOVED***different***REMOVED***glob
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(!wh.hasGlob***REMOVED***||***REMOVED***wh.filterPath({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fullPath:***REMOVED***sysPath$2.resolve(directory,***REMOVED***item)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}).forEach((item)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._remove(directory,***REMOVED***item);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stream***REMOVED***=***REMOVED***undefined;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***one***REMOVED***more***REMOVED***time***REMOVED***for***REMOVED***any***REMOVED***missed***REMOVED***in***REMOVED***case***REMOVED***changes***REMOVED***came***REMOVED***in***REMOVED***extremely***REMOVED***quickly
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(wasThrottled)***REMOVED***this._handleRead(directory,***REMOVED***false,***REMOVED***wh,***REMOVED***target,***REMOVED***dir,***REMOVED***depth,***REMOVED***throttler);
***REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED***);
}

/**
***REMOVED*******REMOVED***Read***REMOVED***directory***REMOVED***to***REMOVED***add***REMOVED***/***REMOVED***remove***REMOVED***files***REMOVED***from***REMOVED***`@watched`***REMOVED***list***REMOVED***and***REMOVED***re-read***REMOVED***it***REMOVED***on***REMOVED***change.
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***dir***REMOVED***fs***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{fs.Stats}***REMOVED***stats
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***initialAdd
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***depth***REMOVED***relative***REMOVED***to***REMOVED***user-supplied***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***target***REMOVED***child***REMOVED***path***REMOVED***targeted***REMOVED***for***REMOVED***watch
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***wh***REMOVED***Common***REMOVED***watch***REMOVED***helpers***REMOVED***for***REMOVED***this***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***realpath
***REMOVED*******REMOVED***@returns***REMOVED***{Promise<Function>}***REMOVED***closer***REMOVED***for***REMOVED***the***REMOVED***watcher***REMOVED***instance.
***REMOVED****/
async***REMOVED***_handleDir(dir,***REMOVED***stats,***REMOVED***initialAdd,***REMOVED***depth,***REMOVED***target,***REMOVED***wh,***REMOVED***realpath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***parentDir***REMOVED***=***REMOVED***this.fsw._getWatchedDir(sysPath$2.dirname(dir));
***REMOVED******REMOVED***const***REMOVED***tracked***REMOVED***=***REMOVED***parentDir.has(sysPath$2.basename(dir));
***REMOVED******REMOVED***if***REMOVED***(!(initialAdd***REMOVED***&&***REMOVED***this.fsw.options.ignoreInitial)***REMOVED***&&***REMOVED***!target***REMOVED***&&***REMOVED***!tracked)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!wh.hasGlob***REMOVED***||***REMOVED***wh.globFilter(dir))***REMOVED***this.fsw._emit(EV_ADD_DIR$2,***REMOVED***dir,***REMOVED***stats);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***ensure***REMOVED***dir***REMOVED***is***REMOVED***tracked***REMOVED***(harmless***REMOVED***if***REMOVED***redundant)
***REMOVED******REMOVED***parentDir.add(sysPath$2.basename(dir));
***REMOVED******REMOVED***this.fsw._getWatchedDir(dir);
***REMOVED******REMOVED***let***REMOVED***throttler;
***REMOVED******REMOVED***let***REMOVED***closer;

***REMOVED******REMOVED***const***REMOVED***oDepth***REMOVED***=***REMOVED***this.fsw.options.depth;
***REMOVED******REMOVED***if***REMOVED***((oDepth***REMOVED***==***REMOVED***null***REMOVED***||***REMOVED***depth***REMOVED***<=***REMOVED***oDepth)***REMOVED***&&***REMOVED***!this.fsw._symlinkPaths.has(realpath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!target)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***this._handleRead(dir,***REMOVED***initialAdd,***REMOVED***wh,***REMOVED***target,***REMOVED***dir,***REMOVED***depth,***REMOVED***throttler);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***closer***REMOVED***=***REMOVED***this._watchWithNodeFs(dir,***REMOVED***(dirPath,***REMOVED***stats)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***current***REMOVED***directory***REMOVED***is***REMOVED***removed,***REMOVED***do***REMOVED***nothing
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats***REMOVED***&&***REMOVED***stats.mtimeMs***REMOVED***===***REMOVED***0)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._handleRead(dirPath,***REMOVED***false,***REMOVED***wh,***REMOVED***target,***REMOVED***dir,***REMOVED***depth,***REMOVED***throttler);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***closer;
}

/**
***REMOVED*******REMOVED***Handle***REMOVED***added***REMOVED***file,***REMOVED***directory,***REMOVED***or***REMOVED***glob***REMOVED***pattern.
***REMOVED*******REMOVED***Delegates***REMOVED***call***REMOVED***to***REMOVED***_handleFile***REMOVED***/***REMOVED***_handleDir***REMOVED***after***REMOVED***checks.
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path***REMOVED***to***REMOVED***file***REMOVED***or***REMOVED***ir
***REMOVED*******REMOVED***@param***REMOVED***{Boolean}***REMOVED***initialAdd***REMOVED***was***REMOVED***the***REMOVED***file***REMOVED***added***REMOVED***at***REMOVED***watch***REMOVED***instantiation?
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***priorWh***REMOVED***depth***REMOVED***relative***REMOVED***to***REMOVED***user-supplied***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***depth***REMOVED***Child***REMOVED***path***REMOVED***actually***REMOVED***targeted***REMOVED***for***REMOVED***watch
***REMOVED*******REMOVED***@param***REMOVED***{String=}***REMOVED***target***REMOVED***Child***REMOVED***path***REMOVED***actually***REMOVED***targeted***REMOVED***for***REMOVED***watch
***REMOVED*******REMOVED***@returns***REMOVED***{Promise}
***REMOVED****/
async***REMOVED***_addToNodeFs(path,***REMOVED***initialAdd,***REMOVED***priorWh,***REMOVED***depth,***REMOVED***target)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***ready***REMOVED***=***REMOVED***this.fsw._emitReady;
***REMOVED******REMOVED***if***REMOVED***(this.fsw._isIgnored(path)***REMOVED***||***REMOVED***this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ready();
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***wh***REMOVED***=***REMOVED***this.fsw._getWatchHelpers(path,***REMOVED***depth);
***REMOVED******REMOVED***if***REMOVED***(!wh.hasGlob***REMOVED***&&***REMOVED***priorWh)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***wh.hasGlob***REMOVED***=***REMOVED***priorWh.hasGlob;
***REMOVED******REMOVED******REMOVED******REMOVED***wh.globFilter***REMOVED***=***REMOVED***priorWh.globFilter;
***REMOVED******REMOVED******REMOVED******REMOVED***wh.filterPath***REMOVED***=***REMOVED***entry***REMOVED***=>***REMOVED***priorWh.filterPath(entry);
***REMOVED******REMOVED******REMOVED******REMOVED***wh.filterDir***REMOVED***=***REMOVED***entry***REMOVED***=>***REMOVED***priorWh.filterDir(entry);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***evaluate***REMOVED***what***REMOVED***is***REMOVED***at***REMOVED***the***REMOVED***path***REMOVED***we're***REMOVED***being***REMOVED***asked***REMOVED***to***REMOVED***watch
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stats***REMOVED***=***REMOVED***await***REMOVED***statMethods$1[wh.statMethod](wh.watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw._isIgnored(wh.watchPath,***REMOVED***stats))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ready();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***follow***REMOVED***=***REMOVED***this.fsw.options.followSymlinks***REMOVED***&&***REMOVED***!path.includes(STAR)***REMOVED***&&***REMOVED***!path.includes(BRACE_START$1);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***closer;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats.isDirectory())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***absPath***REMOVED***=***REMOVED***sysPath$2.resolve(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***targetPath***REMOVED***=***REMOVED***follow***REMOVED***?***REMOVED***await***REMOVED***fsrealpath(path)***REMOVED***:***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closer***REMOVED***=***REMOVED***await***REMOVED***this._handleDir(wh.watchPath,***REMOVED***stats,***REMOVED***initialAdd,***REMOVED***depth,***REMOVED***target,***REMOVED***wh,***REMOVED***targetPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***preserve***REMOVED***this***REMOVED***symlink's***REMOVED***target***REMOVED***path
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(absPath***REMOVED***!==***REMOVED***targetPath***REMOVED***&&***REMOVED***targetPath***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._symlinkPaths.set(absPath,***REMOVED***targetPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(stats.isSymbolicLink())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***targetPath***REMOVED***=***REMOVED***follow***REMOVED***?***REMOVED***await***REMOVED***fsrealpath(path)***REMOVED***:***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parent***REMOVED***=***REMOVED***sysPath$2.dirname(wh.watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._getWatchedDir(parent).add(wh.watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(EV_ADD$2,***REMOVED***wh.watchPath,***REMOVED***stats);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closer***REMOVED***=***REMOVED***await***REMOVED***this._handleDir(parent,***REMOVED***stats,***REMOVED***initialAdd,***REMOVED***depth,***REMOVED***path,***REMOVED***wh,***REMOVED***targetPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***preserve***REMOVED***this***REMOVED***symlink's***REMOVED***target***REMOVED***path
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(targetPath***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._symlinkPaths.set(sysPath$2.resolve(path),***REMOVED***targetPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closer***REMOVED***=***REMOVED***this._handleFile(wh.watchPath,***REMOVED***stats,***REMOVED***initialAdd);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***ready();

***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._addPathCloser(path,***REMOVED***closer);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;

***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw._handleError(error))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ready();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

};

var***REMOVED***nodefsHandler***REMOVED***=***REMOVED***NodeFsHandler$1;

var***REMOVED***fseventsHandler***REMOVED***=***REMOVED***{exports:***REMOVED***{}};

const***REMOVED***require$$3***REMOVED***=***REMOVED***/*@__PURE__*/rollup.getAugmentedNamespace(fseventsImporter.fseventsImporter);

const***REMOVED***fs$1***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***sysPath$1***REMOVED***=***REMOVED***require$$0$2;
const***REMOVED***{***REMOVED***promisify:***REMOVED***promisify$1***REMOVED***}***REMOVED***=***REMOVED***require$$2;

let***REMOVED***fsevents;
try***REMOVED***{
***REMOVED******REMOVED***fsevents***REMOVED***=***REMOVED***require$$3.getFsEvents();
}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR)***REMOVED***console.error(error);
}

if***REMOVED***(fsevents)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***TODO:***REMOVED***real***REMOVED***check
***REMOVED******REMOVED***const***REMOVED***mtch***REMOVED***=***REMOVED***process.version.match(/v(\d+)\.(\d+)/);
***REMOVED******REMOVED***if***REMOVED***(mtch***REMOVED***&&***REMOVED***mtch[1]***REMOVED***&&***REMOVED***mtch[2])***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***maj***REMOVED***=***REMOVED***Number.parseInt(mtch[1],***REMOVED***10);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***min***REMOVED***=***REMOVED***Number.parseInt(mtch[2],***REMOVED***10);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(maj***REMOVED***===***REMOVED***8***REMOVED***&&***REMOVED***min***REMOVED***<***REMOVED***16)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fsevents***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

const***REMOVED***{
***REMOVED******REMOVED***EV_ADD:***REMOVED***EV_ADD$1,
***REMOVED******REMOVED***EV_CHANGE:***REMOVED***EV_CHANGE$1,
***REMOVED******REMOVED***EV_ADD_DIR:***REMOVED***EV_ADD_DIR$1,
***REMOVED******REMOVED***EV_UNLINK:***REMOVED***EV_UNLINK$1,
***REMOVED******REMOVED***EV_ERROR:***REMOVED***EV_ERROR$1,
***REMOVED******REMOVED***STR_DATA,
***REMOVED******REMOVED***STR_END:***REMOVED***STR_END$1,
***REMOVED******REMOVED***FSEVENT_CREATED,
***REMOVED******REMOVED***FSEVENT_MODIFIED,
***REMOVED******REMOVED***FSEVENT_DELETED,
***REMOVED******REMOVED***FSEVENT_MOVED,
***REMOVED******REMOVED***//***REMOVED***FSEVENT_CLONED,
***REMOVED******REMOVED***FSEVENT_UNKNOWN,
***REMOVED******REMOVED***FSEVENT_TYPE_FILE,
***REMOVED******REMOVED***FSEVENT_TYPE_DIRECTORY,
***REMOVED******REMOVED***FSEVENT_TYPE_SYMLINK,

***REMOVED******REMOVED***ROOT_GLOBSTAR,
***REMOVED******REMOVED***DIR_SUFFIX,
***REMOVED******REMOVED***DOT_SLASH,
***REMOVED******REMOVED***FUNCTION_TYPE:***REMOVED***FUNCTION_TYPE$1,
***REMOVED******REMOVED***EMPTY_FN:***REMOVED***EMPTY_FN$1,
***REMOVED******REMOVED***IDENTITY_FN
}***REMOVED***=***REMOVED***constants;

const***REMOVED***Depth***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***isNaN(value)***REMOVED***?***REMOVED***{}***REMOVED***:***REMOVED***{depth:***REMOVED***value};

const***REMOVED***stat$1***REMOVED***=***REMOVED***promisify$1(fs$1.stat);
const***REMOVED***lstat***REMOVED***=***REMOVED***promisify$1(fs$1.lstat);
const***REMOVED***realpath***REMOVED***=***REMOVED***promisify$1(fs$1.realpath);

const***REMOVED***statMethods***REMOVED***=***REMOVED***{***REMOVED***stat:***REMOVED***stat$1,***REMOVED***lstat***REMOVED***};

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{String}***REMOVED***Path
***REMOVED****/

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{Object}***REMOVED***FsEventsWatchContainer
***REMOVED*******REMOVED***@property***REMOVED***{Set<Function>}***REMOVED***listeners
***REMOVED*******REMOVED***@property***REMOVED***{Function}***REMOVED***rawEmitter
***REMOVED*******REMOVED***@property***REMOVED***{{stop:***REMOVED***Function}}***REMOVED***watcher
***REMOVED****/

//***REMOVED***fsevents***REMOVED***instance***REMOVED***helper***REMOVED***functions
/**
***REMOVED*******REMOVED***Object***REMOVED***to***REMOVED***hold***REMOVED***per-process***REMOVED***fsevents***REMOVED***instances***REMOVED***(may***REMOVED***be***REMOVED***shared***REMOVED***across***REMOVED***chokidar***REMOVED***FSWatcher***REMOVED***instances)
***REMOVED*******REMOVED***@type***REMOVED***{Map<Path,FsEventsWatchContainer>}
***REMOVED****/
const***REMOVED***FSEventsWatchers***REMOVED***=***REMOVED***new***REMOVED***Map();

//***REMOVED***Threshold***REMOVED***of***REMOVED***duplicate***REMOVED***path***REMOVED***prefixes***REMOVED***at***REMOVED***which***REMOVED***to***REMOVED***start
//***REMOVED***consolidating***REMOVED***going***REMOVED***forward
const***REMOVED***consolidateThreshhold***REMOVED***=***REMOVED***10;

const***REMOVED***wrongEventFlags***REMOVED***=***REMOVED***new***REMOVED***Set([
***REMOVED******REMOVED***69888,***REMOVED***70400,***REMOVED***71424,***REMOVED***72704,***REMOVED***73472,***REMOVED***131328,***REMOVED***131840,***REMOVED***262912
]);

/**
***REMOVED*******REMOVED***Instantiates***REMOVED***the***REMOVED***fsevents***REMOVED***interface
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED***path***REMOVED***to***REMOVED***be***REMOVED***watched
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***callback***REMOVED***called***REMOVED***when***REMOVED***fsevents***REMOVED***is***REMOVED***bound***REMOVED***and***REMOVED***ready
***REMOVED*******REMOVED***@returns***REMOVED***{{stop:***REMOVED***Function}}***REMOVED***new***REMOVED***fsevents***REMOVED***instance
***REMOVED****/
const***REMOVED***createFSEventsInstance***REMOVED***=***REMOVED***(path,***REMOVED***callback)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***stop***REMOVED***=***REMOVED***fsevents.watch(path,***REMOVED***callback);
***REMOVED******REMOVED***return***REMOVED***{stop};
};

/**
***REMOVED*******REMOVED***Instantiates***REMOVED***the***REMOVED***fsevents***REMOVED***interface***REMOVED***or***REMOVED***binds***REMOVED***listeners***REMOVED***to***REMOVED***an***REMOVED***existing***REMOVED***one***REMOVED***covering
***REMOVED*******REMOVED***the***REMOVED***same***REMOVED***file***REMOVED***tree.
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***-***REMOVED***to***REMOVED***be***REMOVED***watched
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***realPath***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***-***REMOVED***real***REMOVED***path***REMOVED***for***REMOVED***symlinks
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***listener***REMOVED******REMOVED******REMOVED***-***REMOVED***called***REMOVED***when***REMOVED***fsevents***REMOVED***emits***REMOVED***events
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***rawEmitter***REMOVED***-***REMOVED***passes***REMOVED***data***REMOVED***to***REMOVED***listeners***REMOVED***of***REMOVED***the***REMOVED***'raw'***REMOVED***event
***REMOVED*******REMOVED***@returns***REMOVED***{Function}***REMOVED***closer
***REMOVED****/
function***REMOVED***setFSEventsListener(path,***REMOVED***realPath,***REMOVED***listener,***REMOVED***rawEmitter)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***watchPath***REMOVED***=***REMOVED***sysPath$1.extname(realPath)***REMOVED***?***REMOVED***sysPath$1.dirname(realPath)***REMOVED***:***REMOVED***realPath;

***REMOVED******REMOVED***const***REMOVED***parentPath***REMOVED***=***REMOVED***sysPath$1.dirname(watchPath);
***REMOVED******REMOVED***let***REMOVED***cont***REMOVED***=***REMOVED***FSEventsWatchers.get(watchPath);

***REMOVED******REMOVED***//***REMOVED***If***REMOVED***we've***REMOVED***accumulated***REMOVED***a***REMOVED***substantial***REMOVED***number***REMOVED***of***REMOVED***paths***REMOVED***that
***REMOVED******REMOVED***//***REMOVED***could***REMOVED***have***REMOVED***been***REMOVED***consolidated***REMOVED***by***REMOVED***watching***REMOVED***one***REMOVED***directory
***REMOVED******REMOVED***//***REMOVED***above***REMOVED***the***REMOVED***current***REMOVED***one,***REMOVED***create***REMOVED***a***REMOVED***watcher***REMOVED***on***REMOVED***the***REMOVED***parent
***REMOVED******REMOVED***//***REMOVED***path***REMOVED***instead,***REMOVED***so***REMOVED***that***REMOVED***we***REMOVED***do***REMOVED***consolidate***REMOVED***going***REMOVED***forward.
***REMOVED******REMOVED***if***REMOVED***(couldConsolidate(parentPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***watchPath***REMOVED***=***REMOVED***parentPath;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***resolvedPath***REMOVED***=***REMOVED***sysPath$1.resolve(path);
***REMOVED******REMOVED***const***REMOVED***hasSymlink***REMOVED***=***REMOVED***resolvedPath***REMOVED***!==***REMOVED***realPath;

***REMOVED******REMOVED***const***REMOVED***filteredListener***REMOVED***=***REMOVED***(fullPath,***REMOVED***flags,***REMOVED***info)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hasSymlink)***REMOVED***fullPath***REMOVED***=***REMOVED***fullPath.replace(realPath,***REMOVED***resolvedPath);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fullPath***REMOVED***===***REMOVED***resolvedPath***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!fullPath.indexOf(resolvedPath***REMOVED***+***REMOVED***sysPath$1.sep)
***REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***listener(fullPath,***REMOVED***flags,***REMOVED***info);
***REMOVED******REMOVED***};

***REMOVED******REMOVED***//***REMOVED***check***REMOVED***if***REMOVED***there***REMOVED***is***REMOVED***already***REMOVED***a***REMOVED***watcher***REMOVED***on***REMOVED***a***REMOVED***parent***REMOVED***path
***REMOVED******REMOVED***//***REMOVED***modifies***REMOVED***`watchPath`***REMOVED***to***REMOVED***the***REMOVED***parent***REMOVED***path***REMOVED***when***REMOVED***it***REMOVED***finds***REMOVED***a***REMOVED***match
***REMOVED******REMOVED***let***REMOVED***watchedParent***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***watchedPath***REMOVED***of***REMOVED***FSEventsWatchers.keys())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(realPath.indexOf(sysPath$1.resolve(watchedPath)***REMOVED***+***REMOVED***sysPath$1.sep)***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watchPath***REMOVED***=***REMOVED***watchedPath;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont***REMOVED***=***REMOVED***FSEventsWatchers.get(watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watchedParent***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(cont***REMOVED***||***REMOVED***watchedParent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***cont.listeners.add(filteredListener);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***cont***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listeners:***REMOVED***new***REMOVED***Set([filteredListener]),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rawEmitter,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watcher:***REMOVED***createFSEventsInstance(watchPath,***REMOVED***(fullPath,***REMOVED***flags)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!cont.listeners.size)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***info***REMOVED***=***REMOVED***fsevents.getInfo(fullPath,***REMOVED***flags);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.listeners.forEach(list***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***list(fullPath,***REMOVED***flags,***REMOVED***info);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.rawEmitter(info.event,***REMOVED***fullPath,***REMOVED***info);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***FSEventsWatchers.set(watchPath,***REMOVED***cont);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***removes***REMOVED***this***REMOVED***instance's***REMOVED***listeners***REMOVED***and***REMOVED***closes***REMOVED***the***REMOVED***underlying***REMOVED***fsevents
***REMOVED******REMOVED***//***REMOVED***instance***REMOVED***if***REMOVED***there***REMOVED***are***REMOVED***no***REMOVED***more***REMOVED***listeners***REMOVED***left
***REMOVED******REMOVED***return***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lst***REMOVED***=***REMOVED***cont.listeners;

***REMOVED******REMOVED******REMOVED******REMOVED***lst.delete(filteredListener);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!lst.size)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***FSEventsWatchers.delete(watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cont.watcher)***REMOVED***return***REMOVED***cont.watcher.stop().then(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cont.rawEmitter***REMOVED***=***REMOVED***cont.watcher***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Object.freeze(cont);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}

//***REMOVED***Decide***REMOVED***whether***REMOVED***or***REMOVED***not***REMOVED***we***REMOVED***should***REMOVED***start***REMOVED***a***REMOVED***new***REMOVED***higher-level
//***REMOVED***parent***REMOVED***watcher
const***REMOVED***couldConsolidate***REMOVED***=***REMOVED***(path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***count***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***watchPath***REMOVED***of***REMOVED***FSEventsWatchers.keys())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(watchPath.indexOf(path)***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***count++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(count***REMOVED***>=***REMOVED***consolidateThreshhold)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***false;
};

//***REMOVED***returns***REMOVED***boolean***REMOVED***indicating***REMOVED***whether***REMOVED***fsevents***REMOVED***can***REMOVED***be***REMOVED***used
const***REMOVED***canUse***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***fsevents***REMOVED***&&***REMOVED***FSEventsWatchers.size***REMOVED***<***REMOVED***128;

//***REMOVED***determines***REMOVED***subdirectory***REMOVED***traversal***REMOVED***levels***REMOVED***from***REMOVED***root***REMOVED***to***REMOVED***path
const***REMOVED***calcDepth***REMOVED***=***REMOVED***(path,***REMOVED***root)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***while***REMOVED***(!path.indexOf(root)***REMOVED***&&***REMOVED***(path***REMOVED***=***REMOVED***sysPath$1.dirname(path))***REMOVED***!==***REMOVED***root)***REMOVED***i++;
***REMOVED******REMOVED***return***REMOVED***i;
};

//***REMOVED***returns***REMOVED***boolean***REMOVED***indicating***REMOVED***whether***REMOVED***the***REMOVED***fsevents'***REMOVED***event***REMOVED***info***REMOVED***has***REMOVED***the***REMOVED***same***REMOVED***type
//***REMOVED***as***REMOVED***the***REMOVED***one***REMOVED***returned***REMOVED***by***REMOVED***fs.stat
const***REMOVED***sameTypes***REMOVED***=***REMOVED***(info,***REMOVED***stats)***REMOVED***=>***REMOVED***(
***REMOVED******REMOVED***info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_DIRECTORY***REMOVED***&&***REMOVED***stats.isDirectory()***REMOVED***||
***REMOVED******REMOVED***info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_SYMLINK***REMOVED***&&***REMOVED***stats.isSymbolicLink()***REMOVED***||
***REMOVED******REMOVED***info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_FILE***REMOVED***&&***REMOVED***stats.isFile()
);

/**
***REMOVED*******REMOVED***@mixin
***REMOVED****/
let***REMOVED***FsEventsHandler$1***REMOVED***=***REMOVED***class***REMOVED***FsEventsHandler***REMOVED***{

/**
***REMOVED*******REMOVED***@param***REMOVED***{import('../index').FSWatcher}***REMOVED***fsw
***REMOVED****/
constructor(fsw)***REMOVED***{
***REMOVED******REMOVED***this.fsw***REMOVED***=***REMOVED***fsw;
}
checkIgnored(path,***REMOVED***stats)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***ipaths***REMOVED***=***REMOVED***this.fsw._ignoredPaths;
***REMOVED******REMOVED***if***REMOVED***(this.fsw._isIgnored(path,***REMOVED***stats))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ipaths.add(path);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats***REMOVED***&&***REMOVED***stats.isDirectory())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ipaths.add(path***REMOVED***+***REMOVED***ROOT_GLOBSTAR);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***ipaths.delete(path);
***REMOVED******REMOVED***ipaths.delete(path***REMOVED***+***REMOVED***ROOT_GLOBSTAR);
}

addOrChange(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***event***REMOVED***=***REMOVED***watchedDir.has(item)***REMOVED***?***REMOVED***EV_CHANGE$1***REMOVED***:***REMOVED***EV_ADD$1;
***REMOVED******REMOVED***this.handleEvent(event,***REMOVED***path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
}

async***REMOVED***checkExists(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stats***REMOVED***=***REMOVED***await***REMOVED***stat$1(path);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sameTypes(info,***REMOVED***stats))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.addOrChange(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.handleEvent(EV_UNLINK$1,***REMOVED***path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error.code***REMOVED***===***REMOVED***'EACCES')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.addOrChange(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.handleEvent(EV_UNLINK$1,***REMOVED***path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

handleEvent(event,***REMOVED***path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed***REMOVED***||***REMOVED***this.checkIgnored(path))***REMOVED***return;

***REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***EV_UNLINK$1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isDirectory***REMOVED***=***REMOVED***info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_DIRECTORY;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***suppress***REMOVED***unlink***REMOVED***events***REMOVED***on***REMOVED***never***REMOVED***before***REMOVED***seen***REMOVED***files
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isDirectory***REMOVED***||***REMOVED***watchedDir.has(item))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._remove(parent,***REMOVED***item,***REMOVED***isDirectory);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***EV_ADD$1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***track***REMOVED***new***REMOVED***directories
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_DIRECTORY)***REMOVED***this.fsw._getWatchedDir(path);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_SYMLINK***REMOVED***&&***REMOVED***opts.followSymlinks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***push***REMOVED***symlinks***REMOVED***back***REMOVED***to***REMOVED***the***REMOVED***top***REMOVED***of***REMOVED***the***REMOVED***stack***REMOVED***to***REMOVED***get***REMOVED***handled
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***curDepth***REMOVED***=***REMOVED***opts.depth***REMOVED***===***REMOVED***undefined***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***undefined***REMOVED***:***REMOVED***calcDepth(fullPath,***REMOVED***realPath)***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this._addToFsEvents(path,***REMOVED***false,***REMOVED***true,***REMOVED***curDepth);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***track***REMOVED***new***REMOVED***paths
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***(other***REMOVED***than***REMOVED***symlinks***REMOVED***being***REMOVED***followed,***REMOVED***which***REMOVED***will***REMOVED***be***REMOVED***tracked***REMOVED***soon)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._getWatchedDir(parent).add(item);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED*******REMOVED***@type***REMOVED***{'add'|'addDir'|'unlink'|'unlinkDir'}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***eventName***REMOVED***=***REMOVED***info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_DIRECTORY***REMOVED***?***REMOVED***event***REMOVED***+***REMOVED***DIR_SUFFIX***REMOVED***:***REMOVED***event;
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(eventName,***REMOVED***path);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(eventName***REMOVED***===***REMOVED***EV_ADD_DIR$1)***REMOVED***this._addToFsEvents(path,***REMOVED***false,***REMOVED***true);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Handle***REMOVED***symlinks***REMOVED***encountered***REMOVED***during***REMOVED***directory***REMOVED***scan
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***watchPath***REMOVED******REMOVED***-***REMOVED***file/dir***REMOVED***path***REMOVED***to***REMOVED***be***REMOVED***watched***REMOVED***with***REMOVED***fsevents
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***realPath***REMOVED******REMOVED******REMOVED***-***REMOVED***real***REMOVED***path***REMOVED***(in***REMOVED***case***REMOVED***of***REMOVED***symlinks)
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***transform***REMOVED******REMOVED***-***REMOVED***path***REMOVED***transformer
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***globFilter***REMOVED***-***REMOVED***path***REMOVED***filter***REMOVED***in***REMOVED***case***REMOVED***a***REMOVED***glob***REMOVED***pattern***REMOVED***was***REMOVED***provided
***REMOVED*******REMOVED***@returns***REMOVED***{Function}***REMOVED***closer***REMOVED***for***REMOVED***the***REMOVED***watcher***REMOVED***instance
*/
_watchWithFsEvents(watchPath,***REMOVED***realPath,***REMOVED***transform,***REMOVED***globFilter)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed***REMOVED***||***REMOVED***this.fsw._isIgnored(watchPath))***REMOVED***return;
***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***this.fsw.options;
***REMOVED******REMOVED***const***REMOVED***watchCallback***REMOVED***=***REMOVED***async***REMOVED***(fullPath,***REMOVED***flags,***REMOVED***info)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.depth***REMOVED***!==***REMOVED***undefined***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***calcDepth(fullPath,***REMOVED***realPath)***REMOVED***>***REMOVED***opts.depth
***REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***transform(sysPath$1.join(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watchPath,***REMOVED***sysPath$1.relative(watchPath,***REMOVED***fullPath)
***REMOVED******REMOVED******REMOVED******REMOVED***));
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(globFilter***REMOVED***&&***REMOVED***!globFilter(path))***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***ensure***REMOVED***directories***REMOVED***are***REMOVED***tracked
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parent***REMOVED***=***REMOVED***sysPath$1.dirname(path);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***item***REMOVED***=***REMOVED***sysPath$1.basename(path);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***watchedDir***REMOVED***=***REMOVED***this.fsw._getWatchedDir(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***info.type***REMOVED***===***REMOVED***FSEVENT_TYPE_DIRECTORY***REMOVED***?***REMOVED***path***REMOVED***:***REMOVED***parent
***REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***correct***REMOVED***for***REMOVED***wrong***REMOVED***events***REMOVED***emitted
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(wrongEventFlags.has(flags)***REMOVED***||***REMOVED***info.event***REMOVED***===***REMOVED***FSEVENT_UNKNOWN)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***opts.ignored***REMOVED***===***REMOVED***FUNCTION_TYPE$1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***stats;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stats***REMOVED***=***REMOVED***await***REMOVED***stat$1(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.checkIgnored(path,***REMOVED***stats))***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sameTypes(info,***REMOVED***stats))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.addOrChange(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.handleEvent(EV_UNLINK$1,***REMOVED***path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.checkExists(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(info.event)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***FSEVENT_CREATED:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***FSEVENT_MODIFIED:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.addOrChange(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***FSEVENT_DELETED:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***FSEVENT_MOVED:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.checkExists(path,***REMOVED***fullPath,***REMOVED***realPath,***REMOVED***parent,***REMOVED***watchedDir,***REMOVED***item,***REMOVED***info,***REMOVED***opts);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};

***REMOVED******REMOVED***const***REMOVED***closer***REMOVED***=***REMOVED***setFSEventsListener(
***REMOVED******REMOVED******REMOVED******REMOVED***watchPath,
***REMOVED******REMOVED******REMOVED******REMOVED***realPath,
***REMOVED******REMOVED******REMOVED******REMOVED***watchCallback,
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitRaw
***REMOVED******REMOVED***);

***REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED***return***REMOVED***closer;
}

/**
***REMOVED*******REMOVED***Handle***REMOVED***symlinks***REMOVED***encountered***REMOVED***during***REMOVED***directory***REMOVED***scan
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***linkPath***REMOVED***path***REMOVED***to***REMOVED***symlink
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***fullPath***REMOVED***absolute***REMOVED***path***REMOVED***to***REMOVED***the***REMOVED***symlink
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***transform***REMOVED***pre-existing***REMOVED***path***REMOVED***transformer
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***curDepth***REMOVED***level***REMOVED***of***REMOVED***subdirectories***REMOVED***traversed***REMOVED***to***REMOVED***where***REMOVED***symlink***REMOVED***is
***REMOVED*******REMOVED***@returns***REMOVED***{Promise<void>}
***REMOVED****/
async***REMOVED***_handleFsEventsSymlink(linkPath,***REMOVED***fullPath,***REMOVED***transform,***REMOVED***curDepth)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***don't***REMOVED***follow***REMOVED***the***REMOVED***same***REMOVED***symlink***REMOVED***more***REMOVED***than***REMOVED***once
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed***REMOVED***||***REMOVED***this.fsw._symlinkPaths.has(fullPath))***REMOVED***return;

***REMOVED******REMOVED***this.fsw._symlinkPaths.set(fullPath,***REMOVED***true);
***REMOVED******REMOVED***this.fsw._incrReadyCount();

***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***linkTarget***REMOVED***=***REMOVED***await***REMOVED***realpath(linkPath);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw._isIgnored(linkTarget))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._incrReadyCount();

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***add***REMOVED***the***REMOVED***linkTarget***REMOVED***for***REMOVED***watching***REMOVED***with***REMOVED***a***REMOVED***wrapper***REMOVED***for***REMOVED***transform
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***that***REMOVED***causes***REMOVED***emitted***REMOVED***paths***REMOVED***to***REMOVED***incorporate***REMOVED***the***REMOVED***link's***REMOVED***path
***REMOVED******REMOVED******REMOVED******REMOVED***this._addToFsEvents(linkTarget***REMOVED***||***REMOVED***linkPath,***REMOVED***(path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***aliasedPath***REMOVED***=***REMOVED***linkPath;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(linkTarget***REMOVED***&&***REMOVED***linkTarget***REMOVED***!==***REMOVED***DOT_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***aliasedPath***REMOVED***=***REMOVED***path.replace(linkTarget,***REMOVED***linkPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(path***REMOVED***!==***REMOVED***DOT_SLASH)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***aliasedPath***REMOVED***=***REMOVED***sysPath$1.join(linkPath,***REMOVED***path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***transform(aliasedPath);
***REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***false,***REMOVED***curDepth);
***REMOVED******REMOVED***}***REMOVED***catch(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw._handleError(error))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

/**
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***newPath
***REMOVED*******REMOVED***@param***REMOVED***{fs.Stats}***REMOVED***stats
***REMOVED****/
emitAdd(newPath,***REMOVED***stats,***REMOVED***processPath,***REMOVED***opts,***REMOVED***forceAdd)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***pp***REMOVED***=***REMOVED***processPath(newPath);
***REMOVED******REMOVED***const***REMOVED***isDir***REMOVED***=***REMOVED***stats.isDirectory();
***REMOVED******REMOVED***const***REMOVED***dirObj***REMOVED***=***REMOVED***this.fsw._getWatchedDir(sysPath$1.dirname(pp));
***REMOVED******REMOVED***const***REMOVED***base***REMOVED***=***REMOVED***sysPath$1.basename(pp);

***REMOVED******REMOVED***//***REMOVED***ensure***REMOVED***empty***REMOVED***dirs***REMOVED***get***REMOVED***tracked
***REMOVED******REMOVED***if***REMOVED***(isDir)***REMOVED***this.fsw._getWatchedDir(pp);
***REMOVED******REMOVED***if***REMOVED***(dirObj.has(base))***REMOVED***return;
***REMOVED******REMOVED***dirObj.add(base);

***REMOVED******REMOVED***if***REMOVED***(!opts.ignoreInitial***REMOVED***||***REMOVED***forceAdd***REMOVED***===***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emit(isDir***REMOVED***?***REMOVED***EV_ADD_DIR$1***REMOVED***:***REMOVED***EV_ADD$1,***REMOVED***pp,***REMOVED***stats);
***REMOVED******REMOVED***}
}

initWatch(realPath,***REMOVED***path,***REMOVED***wh,***REMOVED***processPath)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED***const***REMOVED***closer***REMOVED***=***REMOVED***this._watchWithFsEvents(
***REMOVED******REMOVED******REMOVED******REMOVED***wh.watchPath,
***REMOVED******REMOVED******REMOVED******REMOVED***sysPath$1.resolve(realPath***REMOVED***||***REMOVED***wh.watchPath),
***REMOVED******REMOVED******REMOVED******REMOVED***processPath,
***REMOVED******REMOVED******REMOVED******REMOVED***wh.globFilter
***REMOVED******REMOVED***);
***REMOVED******REMOVED***this.fsw._addPathCloser(path,***REMOVED***closer);
}

/**
***REMOVED*******REMOVED***Handle***REMOVED***added***REMOVED***path***REMOVED***with***REMOVED***fsevents
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***path***REMOVED***file/dir***REMOVED***path***REMOVED***or***REMOVED***glob***REMOVED***pattern
***REMOVED*******REMOVED***@param***REMOVED***{Function|Boolean=}***REMOVED***transform***REMOVED***converts***REMOVED***working***REMOVED***path***REMOVED***to***REMOVED***what***REMOVED***the***REMOVED***user***REMOVED***expects
***REMOVED*******REMOVED***@param***REMOVED***{Boolean=}***REMOVED***forceAdd***REMOVED***ensure***REMOVED***add***REMOVED***is***REMOVED***emitted
***REMOVED*******REMOVED***@param***REMOVED***{Number=}***REMOVED***priorDepth***REMOVED***Level***REMOVED***of***REMOVED***subdirectories***REMOVED***already***REMOVED***traversed.
***REMOVED*******REMOVED***@returns***REMOVED***{Promise<void>}
***REMOVED****/
async***REMOVED***_addToFsEvents(path,***REMOVED***transform,***REMOVED***forceAdd,***REMOVED***priorDepth)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***this.fsw.options;
***REMOVED******REMOVED***const***REMOVED***processPath***REMOVED***=***REMOVED***typeof***REMOVED***transform***REMOVED***===***REMOVED***FUNCTION_TYPE$1***REMOVED***?***REMOVED***transform***REMOVED***:***REMOVED***IDENTITY_FN;

***REMOVED******REMOVED***const***REMOVED***wh***REMOVED***=***REMOVED***this.fsw._getWatchHelpers(path);

***REMOVED******REMOVED***//***REMOVED***evaluate***REMOVED***what***REMOVED***is***REMOVED***at***REMOVED***the***REMOVED***path***REMOVED***we're***REMOVED***being***REMOVED***asked***REMOVED***to***REMOVED***watch
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stats***REMOVED***=***REMOVED***await***REMOVED***statMethods[wh.statMethod](wh.watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw._isIgnored(wh.watchPath,***REMOVED***stats))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats.isDirectory())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***emit***REMOVED***addDir***REMOVED***unless***REMOVED***this***REMOVED***is***REMOVED***a***REMOVED***glob***REMOVED***parent
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!wh.globFilter)***REMOVED***this.emitAdd(processPath(path),***REMOVED***stats,***REMOVED***processPath,***REMOVED***opts,***REMOVED***forceAdd);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***don't***REMOVED***recurse***REMOVED***further***REMOVED***if***REMOVED***it***REMOVED***would***REMOVED***exceed***REMOVED***depth***REMOVED***setting
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(priorDepth***REMOVED***&&***REMOVED***priorDepth***REMOVED***>***REMOVED***opts.depth)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***scan***REMOVED***the***REMOVED***contents***REMOVED***of***REMOVED***the***REMOVED***dir
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._readdirp(wh.watchPath,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fileFilter:***REMOVED***entry***REMOVED***=>***REMOVED***wh.filterPath(entry),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***directoryFilter:***REMOVED***entry***REMOVED***=>***REMOVED***wh.filterDir(entry),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...Depth(opts.depth***REMOVED***-***REMOVED***(priorDepth***REMOVED***||***REMOVED***0))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}).on(STR_DATA,***REMOVED***(entry)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***need***REMOVED***to***REMOVED***check***REMOVED***filterPath***REMOVED***on***REMOVED***dirs***REMOVED***b/c***REMOVED***filterDir***REMOVED***is***REMOVED***less***REMOVED***restrictive
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.fsw.closed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(entry.stats.isDirectory()***REMOVED***&&***REMOVED***!wh.filterPath(entry))***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***joinedPath***REMOVED***=***REMOVED***sysPath$1.join(wh.watchPath,***REMOVED***entry.path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{fullPath}***REMOVED***=***REMOVED***entry;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(wh.followSymlinks***REMOVED***&&***REMOVED***entry.stats.isSymbolicLink())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***preserve***REMOVED***the***REMOVED***current***REMOVED***depth***REMOVED***here***REMOVED***since***REMOVED***it***REMOVED***can't***REMOVED***be***REMOVED***derived***REMOVED***from
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***real***REMOVED***paths***REMOVED***past***REMOVED***the***REMOVED***symlink
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***curDepth***REMOVED***=***REMOVED***opts.depth***REMOVED***===***REMOVED***undefined***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***undefined***REMOVED***:***REMOVED***calcDepth(joinedPath,***REMOVED***sysPath$1.resolve(wh.watchPath))***REMOVED***+***REMOVED***1;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._handleFsEventsSymlink(joinedPath,***REMOVED***fullPath,***REMOVED***processPath,***REMOVED***curDepth);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emitAdd(joinedPath,***REMOVED***entry.stats,***REMOVED***processPath,***REMOVED***opts,***REMOVED***forceAdd);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}).on(EV_ERROR$1,***REMOVED***EMPTY_FN$1).on(STR_END$1,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emitAdd(wh.watchPath,***REMOVED***stats,***REMOVED***processPath,***REMOVED***opts,***REMOVED***forceAdd);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(error)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!error***REMOVED***||***REMOVED***this.fsw._handleError(error))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***TODO:***REMOVED***Strange***REMOVED***thing:***REMOVED***"should***REMOVED***not***REMOVED***choke***REMOVED***on***REMOVED***an***REMOVED***ignored***REMOVED***watch***REMOVED***path"***REMOVED***will***REMOVED***be***REMOVED***failed***REMOVED***without***REMOVED***2***REMOVED***ready***REMOVED***calls***REMOVED***-__-
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.persistent***REMOVED***&&***REMOVED***forceAdd***REMOVED***!==***REMOVED***true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***transform***REMOVED***===***REMOVED***FUNCTION_TYPE$1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***realpath***REMOVED***has***REMOVED***already***REMOVED***been***REMOVED***resolved
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.initWatch(undefined,***REMOVED***path,***REMOVED***wh,***REMOVED***processPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***realPath;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***realPath***REMOVED***=***REMOVED***await***REMOVED***realpath(wh.watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.initWatch(realPath,***REMOVED***path,***REMOVED***wh,***REMOVED***processPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

};

fseventsHandler.exports***REMOVED***=***REMOVED***FsEventsHandler$1;
fseventsHandler.exports.canUse***REMOVED***=***REMOVED***canUse;

var***REMOVED***fseventsHandlerExports***REMOVED***=***REMOVED***fseventsHandler.exports;

const***REMOVED***{***REMOVED***EventEmitter***REMOVED***}***REMOVED***=***REMOVED***require$$0$3;
const***REMOVED***fs***REMOVED***=***REMOVED***require$$0$1;
const***REMOVED***sysPath***REMOVED***=***REMOVED***require$$0$2;
const***REMOVED***{***REMOVED***promisify***REMOVED***}***REMOVED***=***REMOVED***require$$2;
const***REMOVED***readdirp***REMOVED***=***REMOVED***readdirp_1;
const***REMOVED***anymatch***REMOVED***=***REMOVED***anymatchExports.default;
const***REMOVED***globParent***REMOVED***=***REMOVED***globParent$1;
const***REMOVED***isGlob***REMOVED***=***REMOVED***isGlob$2;
const***REMOVED***braces***REMOVED***=***REMOVED***braces_1;
const***REMOVED***normalizePath***REMOVED***=***REMOVED***normalizePath$2;

const***REMOVED***NodeFsHandler***REMOVED***=***REMOVED***nodefsHandler;
const***REMOVED***FsEventsHandler***REMOVED***=***REMOVED***fseventsHandlerExports;
const***REMOVED***{
***REMOVED******REMOVED***EV_ALL,
***REMOVED******REMOVED***EV_READY,
***REMOVED******REMOVED***EV_ADD,
***REMOVED******REMOVED***EV_CHANGE,
***REMOVED******REMOVED***EV_UNLINK,
***REMOVED******REMOVED***EV_ADD_DIR,
***REMOVED******REMOVED***EV_UNLINK_DIR,
***REMOVED******REMOVED***EV_RAW,
***REMOVED******REMOVED***EV_ERROR,

***REMOVED******REMOVED***STR_CLOSE,
***REMOVED******REMOVED***STR_END,

***REMOVED******REMOVED***BACK_SLASH_RE,
***REMOVED******REMOVED***DOUBLE_SLASH_RE,
***REMOVED******REMOVED***SLASH_OR_BACK_SLASH_RE,
***REMOVED******REMOVED***DOT_RE,
***REMOVED******REMOVED***REPLACER_RE,

***REMOVED******REMOVED***SLASH,
***REMOVED******REMOVED***SLASH_SLASH,
***REMOVED******REMOVED***BRACE_START,
***REMOVED******REMOVED***BANG,
***REMOVED******REMOVED***ONE_DOT,
***REMOVED******REMOVED***TWO_DOTS,
***REMOVED******REMOVED***GLOBSTAR,
***REMOVED******REMOVED***SLASH_GLOBSTAR,
***REMOVED******REMOVED***ANYMATCH_OPTS,
***REMOVED******REMOVED***STRING_TYPE,
***REMOVED******REMOVED***FUNCTION_TYPE,
***REMOVED******REMOVED***EMPTY_STR,
***REMOVED******REMOVED***EMPTY_FN,

***REMOVED******REMOVED***isWindows,
***REMOVED******REMOVED***isMacos,
***REMOVED******REMOVED***isIBMi
}***REMOVED***=***REMOVED***constants;

const***REMOVED***stat***REMOVED***=***REMOVED***promisify(fs.stat);
const***REMOVED***readdir***REMOVED***=***REMOVED***promisify(fs.readdir);

/**
***REMOVED*******REMOVED***@typedef***REMOVED***{String}***REMOVED***Path
***REMOVED*******REMOVED***@typedef***REMOVED***{'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'}***REMOVED***EventName
***REMOVED*******REMOVED***@typedef***REMOVED***{'readdir'|'watch'|'add'|'remove'|'change'}***REMOVED***ThrottleType
***REMOVED****/

/**
***REMOVED****
***REMOVED*******REMOVED***@typedef***REMOVED***{Object}***REMOVED***WatchHelpers
***REMOVED*******REMOVED***@property***REMOVED***{Boolean}***REMOVED***followSymlinks
***REMOVED*******REMOVED***@property***REMOVED***{'stat'|'lstat'}***REMOVED***statMethod
***REMOVED*******REMOVED***@property***REMOVED***{Path}***REMOVED***path
***REMOVED*******REMOVED***@property***REMOVED***{Path}***REMOVED***watchPath
***REMOVED*******REMOVED***@property***REMOVED***{Function}***REMOVED***entryPath
***REMOVED*******REMOVED***@property***REMOVED***{Boolean}***REMOVED***hasGlob
***REMOVED*******REMOVED***@property***REMOVED***{Object}***REMOVED***globFilter
***REMOVED*******REMOVED***@property***REMOVED***{Function}***REMOVED***filterPath
***REMOVED*******REMOVED***@property***REMOVED***{Function}***REMOVED***filterDir
***REMOVED****/

const***REMOVED***arrify***REMOVED***=***REMOVED***(value***REMOVED***=***REMOVED***[])***REMOVED***=>***REMOVED***Array.isArray(value)***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***[value];
const***REMOVED***flatten***REMOVED***=***REMOVED***(list,***REMOVED***result***REMOVED***=***REMOVED***[])***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***list.forEach(item***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Array.isArray(item))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flatten(item,***REMOVED***result);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.push(item);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});
***REMOVED******REMOVED***return***REMOVED***result;
};

const***REMOVED***unifyPaths***REMOVED***=***REMOVED***(paths_)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***@type***REMOVED***{Array<String>}
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***const***REMOVED***paths***REMOVED***=***REMOVED***flatten(arrify(paths_));
***REMOVED******REMOVED***if***REMOVED***(!paths.every(p***REMOVED***=>***REMOVED***typeof***REMOVED***p***REMOVED***===***REMOVED***STRING_TYPE))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***TypeError(`Non-string***REMOVED***provided***REMOVED***as***REMOVED***watch***REMOVED***path:***REMOVED***${paths}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***paths.map(normalizePathToUnix);
};

//***REMOVED***If***REMOVED***SLASH_SLASH***REMOVED***occurs***REMOVED***at***REMOVED***the***REMOVED***beginning***REMOVED***of***REMOVED***path,***REMOVED***it***REMOVED***is***REMOVED***not***REMOVED***replaced
//***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***because***REMOVED***"//StoragePC/DrivePool/Movies"***REMOVED***is***REMOVED***a***REMOVED***valid***REMOVED***network***REMOVED***path
const***REMOVED***toUnix***REMOVED***=***REMOVED***(string)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***str***REMOVED***=***REMOVED***string.replace(BACK_SLASH_RE,***REMOVED***SLASH);
***REMOVED******REMOVED***let***REMOVED***prepend***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(str.startsWith(SLASH_SLASH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***prepend***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***while***REMOVED***(str.match(DOUBLE_SLASH_RE))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***=***REMOVED***str.replace(DOUBLE_SLASH_RE,***REMOVED***SLASH);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(prepend)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***str***REMOVED***=***REMOVED***SLASH***REMOVED***+***REMOVED***str;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***str;
};

//***REMOVED***Our***REMOVED***version***REMOVED***of***REMOVED***upath.normalize
//***REMOVED***TODO:***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***equal***REMOVED***to***REMOVED***path-normalize***REMOVED***module***REMOVED***-***REMOVED***investigate***REMOVED***why
const***REMOVED***normalizePathToUnix***REMOVED***=***REMOVED***(path)***REMOVED***=>***REMOVED***toUnix(sysPath.normalize(toUnix(path)));

const***REMOVED***normalizeIgnored***REMOVED***=***REMOVED***(cwd***REMOVED***=***REMOVED***EMPTY_STR)***REMOVED***=>***REMOVED***(path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***path***REMOVED***!==***REMOVED***STRING_TYPE)***REMOVED***return***REMOVED***path;
***REMOVED******REMOVED***return***REMOVED***normalizePathToUnix(sysPath.isAbsolute(path)***REMOVED***?***REMOVED***path***REMOVED***:***REMOVED***sysPath.join(cwd,***REMOVED***path));
};

const***REMOVED***getAbsolutePath***REMOVED***=***REMOVED***(path,***REMOVED***cwd)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(sysPath.isAbsolute(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***path;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(path.startsWith(BANG))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***BANG***REMOVED***+***REMOVED***sysPath.join(cwd,***REMOVED***path.slice(1));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***sysPath.join(cwd,***REMOVED***path);
};

const***REMOVED***undef***REMOVED***=***REMOVED***(opts,***REMOVED***key)***REMOVED***=>***REMOVED***opts[key]***REMOVED***===***REMOVED***undefined;

/**
***REMOVED*******REMOVED***Directory***REMOVED***entry.
***REMOVED*******REMOVED***@property***REMOVED***{Path}***REMOVED***path
***REMOVED*******REMOVED***@property***REMOVED***{Set<Path>}***REMOVED***items
***REMOVED****/
class***REMOVED***DirEntry***REMOVED***{
***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***dir
***REMOVED******REMOVED******REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***removeWatcher
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***constructor(dir,***REMOVED***removeWatcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.path***REMOVED***=***REMOVED***dir;
***REMOVED******REMOVED******REMOVED******REMOVED***this._removeWatcher***REMOVED***=***REMOVED***removeWatcher;
***REMOVED******REMOVED******REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Set<Path>}***REMOVED****/
***REMOVED******REMOVED******REMOVED******REMOVED***this.items***REMOVED***=***REMOVED***new***REMOVED***Set();
***REMOVED******REMOVED***}

***REMOVED******REMOVED***add(item)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{items}***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!items)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(item***REMOVED***!==***REMOVED***ONE_DOT***REMOVED***&&***REMOVED***item***REMOVED***!==***REMOVED***TWO_DOTS)***REMOVED***items.add(item);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***async***REMOVED***remove(item)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{items}***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!items)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***items.delete(item);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(items.size***REMOVED***>***REMOVED***0)***REMOVED***return;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***dir***REMOVED***=***REMOVED***this.path;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***readdir(dir);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this._removeWatcher)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._removeWatcher(sysPath.dirname(dir),***REMOVED***sysPath.basename(dir));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***has(item)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{items}***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!items)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***items.has(item);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/**
***REMOVED******REMOVED******REMOVED*******REMOVED***@returns***REMOVED***{Array<String>}
***REMOVED******REMOVED******REMOVED****/
***REMOVED******REMOVED***getChildren()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{items}***REMOVED***=***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!items)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[...items.values()];
***REMOVED******REMOVED***}

***REMOVED******REMOVED***dispose()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.items.clear();
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***this.path;
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***this._removeWatcher;
***REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***this.items;
***REMOVED******REMOVED******REMOVED******REMOVED***Object.freeze(this);
***REMOVED******REMOVED***}
}

const***REMOVED***STAT_METHOD_F***REMOVED***=***REMOVED***'stat';
const***REMOVED***STAT_METHOD_L***REMOVED***=***REMOVED***'lstat';
class***REMOVED***WatchHelper***REMOVED***{
***REMOVED******REMOVED***constructor(path,***REMOVED***watchPath,***REMOVED***follow,***REMOVED***fsw)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.fsw***REMOVED***=***REMOVED***fsw;
***REMOVED******REMOVED******REMOVED******REMOVED***this.path***REMOVED***=***REMOVED***path***REMOVED***=***REMOVED***path.replace(REPLACER_RE,***REMOVED***EMPTY_STR);
***REMOVED******REMOVED******REMOVED******REMOVED***this.watchPath***REMOVED***=***REMOVED***watchPath;
***REMOVED******REMOVED******REMOVED******REMOVED***this.fullWatchPath***REMOVED***=***REMOVED***sysPath.resolve(watchPath);
***REMOVED******REMOVED******REMOVED******REMOVED***this.hasGlob***REMOVED***=***REMOVED***watchPath***REMOVED***!==***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{object|boolean}***REMOVED****/
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path***REMOVED***===***REMOVED***EMPTY_STR)***REMOVED***this.hasGlob***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.globSymlink***REMOVED***=***REMOVED***this.hasGlob***REMOVED***&&***REMOVED***follow***REMOVED***?***REMOVED***undefined***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.globFilter***REMOVED***=***REMOVED***this.hasGlob***REMOVED***?***REMOVED***anymatch(path,***REMOVED***undefined,***REMOVED***ANYMATCH_OPTS)***REMOVED***:***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***this.dirParts***REMOVED***=***REMOVED***this.getDirParts(path);
***REMOVED******REMOVED******REMOVED******REMOVED***this.dirParts.forEach((parts)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(parts.length***REMOVED***>***REMOVED***1)***REMOVED***parts.pop();
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***this.followSymlinks***REMOVED***=***REMOVED***follow;
***REMOVED******REMOVED******REMOVED******REMOVED***this.statMethod***REMOVED***=***REMOVED***follow***REMOVED***?***REMOVED***STAT_METHOD_F***REMOVED***:***REMOVED***STAT_METHOD_L;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***checkGlobSymlink(entry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***only***REMOVED***need***REMOVED***to***REMOVED***resolve***REMOVED***once
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***first***REMOVED***entry***REMOVED***should***REMOVED***always***REMOVED***have***REMOVED***entry.parentDir***REMOVED***===***REMOVED***EMPTY_STR
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.globSymlink***REMOVED***===***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.globSymlink***REMOVED***=***REMOVED***entry.fullParentDir***REMOVED***===***REMOVED***this.fullWatchPath***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***false***REMOVED***:***REMOVED***{realPath:***REMOVED***entry.fullParentDir,***REMOVED***linkPath:***REMOVED***this.fullWatchPath};
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.globSymlink)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry.fullPath.replace(this.globSymlink.realPath,***REMOVED***this.globSymlink.linkPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***entry.fullPath;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***entryPath(entry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***sysPath.join(this.watchPath,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sysPath.relative(this.watchPath,***REMOVED***this.checkGlobSymlink(entry))
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***filterPath(entry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{stats}***REMOVED***=***REMOVED***entry;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats***REMOVED***&&***REMOVED***stats.isSymbolicLink())***REMOVED***return***REMOVED***this.filterDir(entry);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***resolvedPath***REMOVED***=***REMOVED***this.entryPath(entry);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***matchesGlob***REMOVED***=***REMOVED***this.hasGlob***REMOVED***&&***REMOVED***typeof***REMOVED***this.globFilter***REMOVED***===***REMOVED***FUNCTION_TYPE***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.globFilter(resolvedPath)***REMOVED***:***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***matchesGlob***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._isntIgnored(resolvedPath,***REMOVED***stats)***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.fsw._hasReadPermissions(stats);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***getDirParts(path)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.hasGlob)***REMOVED***return***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***parts***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedPath***REMOVED***=***REMOVED***path.includes(BRACE_START)***REMOVED***?***REMOVED***braces.expand(path)***REMOVED***:***REMOVED***[path];
***REMOVED******REMOVED******REMOVED******REMOVED***expandedPath.forEach((path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***parts.push(sysPath.relative(this.watchPath,***REMOVED***path).split(SLASH_OR_BACK_SLASH_RE));
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parts;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***filterDir(entry)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.hasGlob)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***entryParts***REMOVED***=***REMOVED***this.getDirParts(this.checkGlobSymlink(entry));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***globstar***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.unmatchedGlob***REMOVED***=***REMOVED***!this.dirParts.some((parts)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***parts.every((part,***REMOVED***i)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(part***REMOVED***===***REMOVED***GLOBSTAR)***REMOVED***globstar***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***globstar***REMOVED***||***REMOVED***!entryParts[0][i]***REMOVED***||***REMOVED***anymatch(part,***REMOVED***entryParts[0][i],***REMOVED***ANYMATCH_OPTS);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!this.unmatchedGlob***REMOVED***&&***REMOVED***this.fsw._isntIgnored(this.entryPath(entry),***REMOVED***entry.stats);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Watches***REMOVED***files***REMOVED***&***REMOVED***directories***REMOVED***for***REMOVED***changes.***REMOVED***Emitted***REMOVED***events:
***REMOVED*******REMOVED***`add`,***REMOVED***`addDir`,***REMOVED***`change`,***REMOVED***`unlink`,***REMOVED***`unlinkDir`,***REMOVED***`all`,***REMOVED***`error`
***REMOVED****
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***new***REMOVED***FSWatcher()
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.add(directories)
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.on('add',***REMOVED***path***REMOVED***=>***REMOVED***log('File',***REMOVED***path,***REMOVED***'was***REMOVED***added'))
***REMOVED****/
class***REMOVED***FSWatcher***REMOVED***extends***REMOVED***EventEmitter***REMOVED***{
//***REMOVED***Not***REMOVED***indenting***REMOVED***methods***REMOVED***for***REMOVED***history***REMOVED***sake;***REMOVED***for***REMOVED***now.
constructor(_opts)***REMOVED***{
***REMOVED******REMOVED***super();

***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***if***REMOVED***(_opts)***REMOVED***Object.assign(opts,***REMOVED***_opts);***REMOVED***//***REMOVED***for***REMOVED***frozen***REMOVED***objects

***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Map<String,***REMOVED***DirEntry>}***REMOVED****/
***REMOVED******REMOVED***this._watched***REMOVED***=***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Map<String,***REMOVED***Array>}***REMOVED****/
***REMOVED******REMOVED***this._closers***REMOVED***=***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Set<String>}***REMOVED****/
***REMOVED******REMOVED***this._ignoredPaths***REMOVED***=***REMOVED***new***REMOVED***Set();

***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Map<ThrottleType,***REMOVED***Map>}***REMOVED****/
***REMOVED******REMOVED***this._throttled***REMOVED***=***REMOVED***new***REMOVED***Map();

***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Map<Path,***REMOVED***String|Boolean>}***REMOVED****/
***REMOVED******REMOVED***this._symlinkPaths***REMOVED***=***REMOVED***new***REMOVED***Map();

***REMOVED******REMOVED***this._streams***REMOVED***=***REMOVED***new***REMOVED***Set();
***REMOVED******REMOVED***this.closed***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED***//***REMOVED***Set***REMOVED***up***REMOVED***default***REMOVED***options.
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'persistent'))***REMOVED***opts.persistent***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'ignoreInitial'))***REMOVED***opts.ignoreInitial***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'ignorePermissionErrors'))***REMOVED***opts.ignorePermissionErrors***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'interval'))***REMOVED***opts.interval***REMOVED***=***REMOVED***100;
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'binaryInterval'))***REMOVED***opts.binaryInterval***REMOVED***=***REMOVED***300;
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'disableGlobbing'))***REMOVED***opts.disableGlobbing***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***opts.enableBinaryInterval***REMOVED***=***REMOVED***opts.binaryInterval***REMOVED***!==***REMOVED***opts.interval;

***REMOVED******REMOVED***//***REMOVED***Enable***REMOVED***fsevents***REMOVED***on***REMOVED***OS***REMOVED***X***REMOVED***when***REMOVED***polling***REMOVED***isn't***REMOVED***explicitly***REMOVED***enabled.
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'useFsEvents'))***REMOVED***opts.useFsEvents***REMOVED***=***REMOVED***!opts.usePolling;

***REMOVED******REMOVED***//***REMOVED***If***REMOVED***we***REMOVED***can't***REMOVED***use***REMOVED***fsevents,***REMOVED***ensure***REMOVED***the***REMOVED***options***REMOVED***reflect***REMOVED***it's***REMOVED***disabled.
***REMOVED******REMOVED***const***REMOVED***canUseFsEvents***REMOVED***=***REMOVED***FsEventsHandler.canUse();
***REMOVED******REMOVED***if***REMOVED***(!canUseFsEvents)***REMOVED***opts.useFsEvents***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED***//***REMOVED***Use***REMOVED***polling***REMOVED***on***REMOVED***Mac***REMOVED***if***REMOVED***not***REMOVED***using***REMOVED***fsevents.
***REMOVED******REMOVED***//***REMOVED***Other***REMOVED***platforms***REMOVED***use***REMOVED***non-polling***REMOVED***fs_watch.
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'usePolling')***REMOVED***&&***REMOVED***!opts.useFsEvents)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***opts.usePolling***REMOVED***=***REMOVED***isMacos;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Always***REMOVED***default***REMOVED***to***REMOVED***polling***REMOVED***on***REMOVED***IBM***REMOVED***i***REMOVED***because***REMOVED***fs.watch()***REMOVED***is***REMOVED***not***REMOVED***available***REMOVED***on***REMOVED***IBM***REMOVED***i.
***REMOVED******REMOVED***if(isIBMi)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***opts.usePolling***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Global***REMOVED***override***REMOVED***(useful***REMOVED***for***REMOVED***end-developers***REMOVED***that***REMOVED***need***REMOVED***to***REMOVED***force***REMOVED***polling***REMOVED***for***REMOVED***all
***REMOVED******REMOVED***//***REMOVED***instances***REMOVED***of***REMOVED***chokidar,***REMOVED***regardless***REMOVED***of***REMOVED***usage/dependency***REMOVED***depth)
***REMOVED******REMOVED***const***REMOVED***envPoll***REMOVED***=***REMOVED***process.env.CHOKIDAR_USEPOLLING;
***REMOVED******REMOVED***if***REMOVED***(envPoll***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***envLower***REMOVED***=***REMOVED***envPoll.toLowerCase();

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(envLower***REMOVED***===***REMOVED***'false'***REMOVED***||***REMOVED***envLower***REMOVED***===***REMOVED***'0')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.usePolling***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(envLower***REMOVED***===***REMOVED***'true'***REMOVED***||***REMOVED***envLower***REMOVED***===***REMOVED***'1')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.usePolling***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***opts.usePolling***REMOVED***=***REMOVED***!!envLower;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***envInterval***REMOVED***=***REMOVED***process.env.CHOKIDAR_INTERVAL;
***REMOVED******REMOVED***if***REMOVED***(envInterval)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***opts.interval***REMOVED***=***REMOVED***Number.parseInt(envInterval,***REMOVED***10);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Editor***REMOVED***atomic***REMOVED***write***REMOVED***normalization***REMOVED***enabled***REMOVED***by***REMOVED***default***REMOVED***with***REMOVED***fs.watch
***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'atomic'))***REMOVED***opts.atomic***REMOVED***=***REMOVED***!opts.usePolling***REMOVED***&&***REMOVED***!opts.useFsEvents;
***REMOVED******REMOVED***if***REMOVED***(opts.atomic)***REMOVED***this._pendingUnlinks***REMOVED***=***REMOVED***new***REMOVED***Map();

***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'followSymlinks'))***REMOVED***opts.followSymlinks***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED***if***REMOVED***(undef(opts,***REMOVED***'awaitWriteFinish'))***REMOVED***opts.awaitWriteFinish***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***if***REMOVED***(opts.awaitWriteFinish***REMOVED***===***REMOVED***true)***REMOVED***opts.awaitWriteFinish***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***awf***REMOVED***=***REMOVED***opts.awaitWriteFinish;
***REMOVED******REMOVED***if***REMOVED***(awf)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!awf.stabilityThreshold)***REMOVED***awf.stabilityThreshold***REMOVED***=***REMOVED***2000;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!awf.pollInterval)***REMOVED***awf.pollInterval***REMOVED***=***REMOVED***100;
***REMOVED******REMOVED******REMOVED******REMOVED***this._pendingWrites***REMOVED***=***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(opts.ignored)***REMOVED***opts.ignored***REMOVED***=***REMOVED***arrify(opts.ignored);

***REMOVED******REMOVED***let***REMOVED***readyCalls***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***this._emitReady***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***readyCalls++;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(readyCalls***REMOVED***>=***REMOVED***this._readyCount)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._emitReady***REMOVED***=***REMOVED***EMPTY_FN;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._readyEmitted***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***use***REMOVED***process.nextTick***REMOVED***to***REMOVED***allow***REMOVED***time***REMOVED***for***REMOVED***listener***REMOVED***to***REMOVED***be***REMOVED***bound
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***process.nextTick(()***REMOVED***=>***REMOVED***this.emit(EV_READY));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***this._emitRaw***REMOVED***=***REMOVED***(...args)***REMOVED***=>***REMOVED***this.emit(EV_RAW,***REMOVED***...args);
***REMOVED******REMOVED***this._readyEmitted***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***this.options***REMOVED***=***REMOVED***opts;

***REMOVED******REMOVED***//***REMOVED***Initialize***REMOVED***with***REMOVED***proper***REMOVED***watcher.
***REMOVED******REMOVED***if***REMOVED***(opts.useFsEvents)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this._fsEventsHandler***REMOVED***=***REMOVED***new***REMOVED***FsEventsHandler(this);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this._nodeFsHandler***REMOVED***=***REMOVED***new***REMOVED***NodeFsHandler(this);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***You’re***REMOVED***frozen***REMOVED***when***REMOVED***your***REMOVED***heart’s***REMOVED***not***REMOVED***open.
***REMOVED******REMOVED***Object.freeze(opts);
}

//***REMOVED***Public***REMOVED***methods

/**
***REMOVED*******REMOVED***Adds***REMOVED***paths***REMOVED***to***REMOVED***be***REMOVED***watched***REMOVED***on***REMOVED***an***REMOVED***existing***REMOVED***FSWatcher***REMOVED***instance
***REMOVED*******REMOVED***@param***REMOVED***{Path|Array<Path>}***REMOVED***paths_
***REMOVED*******REMOVED***@param***REMOVED***{String=}***REMOVED***_origAdd***REMOVED***private;***REMOVED***for***REMOVED***handling***REMOVED***non-existent***REMOVED***paths***REMOVED***to***REMOVED***be***REMOVED***watched
***REMOVED*******REMOVED***@param***REMOVED***{Boolean=}***REMOVED***_internal***REMOVED***private;***REMOVED***indicates***REMOVED***a***REMOVED***non-user***REMOVED***add
***REMOVED*******REMOVED***@returns***REMOVED***{FSWatcher}***REMOVED***for***REMOVED***chaining
***REMOVED****/
add(paths_,***REMOVED***_origAdd,***REMOVED***_internal)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{cwd,***REMOVED***disableGlobbing}***REMOVED***=***REMOVED***this.options;
***REMOVED******REMOVED***this.closed***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***paths***REMOVED***=***REMOVED***unifyPaths(paths_);
***REMOVED******REMOVED***if***REMOVED***(cwd)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***paths***REMOVED***=***REMOVED***paths.map((path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***absPath***REMOVED***=***REMOVED***getAbsolutePath(path,***REMOVED***cwd);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Check***REMOVED***`path`***REMOVED***instead***REMOVED***of***REMOVED***`absPath`***REMOVED***because***REMOVED***the***REMOVED***cwd***REMOVED***portion***REMOVED***can't***REMOVED***be***REMOVED***a***REMOVED***glob
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(disableGlobbing***REMOVED***||***REMOVED***!isGlob(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***absPath;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***normalizePath(absPath);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***set***REMOVED***aside***REMOVED***negated***REMOVED***glob***REMOVED***strings
***REMOVED******REMOVED***paths***REMOVED***=***REMOVED***paths.filter((path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path.startsWith(BANG))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._ignoredPaths.add(path.slice(1));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***a***REMOVED***path***REMOVED***is***REMOVED***being***REMOVED***added***REMOVED***that***REMOVED***was***REMOVED***previously***REMOVED***ignored,***REMOVED***stop***REMOVED***ignoring***REMOVED***it
***REMOVED******REMOVED******REMOVED******REMOVED***this._ignoredPaths.delete(path);
***REMOVED******REMOVED******REMOVED******REMOVED***this._ignoredPaths.delete(path***REMOVED***+***REMOVED***SLASH_GLOBSTAR);

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***reset***REMOVED***the***REMOVED***cached***REMOVED***userIgnored***REMOVED***anymatch***REMOVED***fn
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***to***REMOVED***make***REMOVED***ignoredPaths***REMOVED***changes***REMOVED***effective
***REMOVED******REMOVED******REMOVED******REMOVED***this._userIgnored***REMOVED***=***REMOVED***undefined;

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***});

***REMOVED******REMOVED***if***REMOVED***(this.options.useFsEvents***REMOVED***&&***REMOVED***this._fsEventsHandler)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this._readyCount)***REMOVED***this._readyCount***REMOVED***=***REMOVED***paths.length;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.options.persistent)***REMOVED***this._readyCount***REMOVED****=***REMOVED***2;
***REMOVED******REMOVED******REMOVED******REMOVED***paths.forEach((path)***REMOVED***=>***REMOVED***this._fsEventsHandler._addToFsEvents(path));
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this._readyCount)***REMOVED***this._readyCount***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***this._readyCount***REMOVED***+=***REMOVED***paths.length;
***REMOVED******REMOVED******REMOVED******REMOVED***Promise.all(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***paths.map(async***REMOVED***path***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***res***REMOVED***=***REMOVED***await***REMOVED***this._nodeFsHandler._addToNodeFs(path,***REMOVED***!_internal,***REMOVED***0,***REMOVED***0,***REMOVED***_origAdd);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(res)***REMOVED***this._emitReady();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***res;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***).then(results***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***results.filter(item***REMOVED***=>***REMOVED***item).forEach(item***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.add(sysPath.dirname(item),***REMOVED***sysPath.basename(_origAdd***REMOVED***||***REMOVED***item));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***this;
}

/**
***REMOVED*******REMOVED***Close***REMOVED***watchers***REMOVED***or***REMOVED***start***REMOVED***ignoring***REMOVED***events***REMOVED***from***REMOVED***specified***REMOVED***paths.
***REMOVED*******REMOVED***@param***REMOVED***{Path|Array<Path>}***REMOVED***paths_***REMOVED***-***REMOVED***string***REMOVED***or***REMOVED***array***REMOVED***of***REMOVED***strings,***REMOVED***file/directory***REMOVED***paths***REMOVED***and/or***REMOVED***globs
***REMOVED*******REMOVED***@returns***REMOVED***{FSWatcher}***REMOVED***for***REMOVED***chaining
*/
unwatch(paths_)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.closed)***REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***const***REMOVED***paths***REMOVED***=***REMOVED***unifyPaths(paths_);
***REMOVED******REMOVED***const***REMOVED***{cwd}***REMOVED***=***REMOVED***this.options;

***REMOVED******REMOVED***paths.forEach((path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***convert***REMOVED***to***REMOVED***absolute***REMOVED***path***REMOVED***unless***REMOVED***relative***REMOVED***path***REMOVED***already***REMOVED***matches
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!sysPath.isAbsolute(path)***REMOVED***&&***REMOVED***!this._closers.has(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cwd)***REMOVED***path***REMOVED***=***REMOVED***sysPath.join(cwd,***REMOVED***path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path***REMOVED***=***REMOVED***sysPath.resolve(path);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***this._closePath(path);

***REMOVED******REMOVED******REMOVED******REMOVED***this._ignoredPaths.add(path);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this._watched.has(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._ignoredPaths.add(path***REMOVED***+***REMOVED***SLASH_GLOBSTAR);
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***reset***REMOVED***the***REMOVED***cached***REMOVED***userIgnored***REMOVED***anymatch***REMOVED***fn
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***to***REMOVED***make***REMOVED***ignoredPaths***REMOVED***changes***REMOVED***effective
***REMOVED******REMOVED******REMOVED******REMOVED***this._userIgnored***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED***});

***REMOVED******REMOVED***return***REMOVED***this;
}

/**
***REMOVED*******REMOVED***Close***REMOVED***watchers***REMOVED***and***REMOVED***remove***REMOVED***all***REMOVED***listeners***REMOVED***from***REMOVED***watched***REMOVED***paths.
***REMOVED*******REMOVED***@returns***REMOVED***{Promise<void>}.
*/
close()***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.closed)***REMOVED***return***REMOVED***this._closePromise;
***REMOVED******REMOVED***this.closed***REMOVED***=***REMOVED***true;

***REMOVED******REMOVED***//***REMOVED***Memory***REMOVED***management.
***REMOVED******REMOVED***this.removeAllListeners();
***REMOVED******REMOVED***const***REMOVED***closers***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***this._closers.forEach(closerList***REMOVED***=>***REMOVED***closerList.forEach(closer***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***promise***REMOVED***=***REMOVED***closer();
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(promise***REMOVED***instanceof***REMOVED***Promise)***REMOVED***closers.push(promise);
***REMOVED******REMOVED***}));
***REMOVED******REMOVED***this._streams.forEach(stream***REMOVED***=>***REMOVED***stream.destroy());
***REMOVED******REMOVED***this._userIgnored***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED***this._readyCount***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***this._readyEmitted***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***this._watched.forEach(dirent***REMOVED***=>***REMOVED***dirent.dispose());
***REMOVED******REMOVED***['closers',***REMOVED***'watched',***REMOVED***'streams',***REMOVED***'symlinkPaths',***REMOVED***'throttled'].forEach(key***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this[`_${key}`].clear();
***REMOVED******REMOVED***});

***REMOVED******REMOVED***this._closePromise***REMOVED***=***REMOVED***closers.length***REMOVED***?***REMOVED***Promise.all(closers).then(()***REMOVED***=>***REMOVED***undefined)***REMOVED***:***REMOVED***Promise.resolve();
***REMOVED******REMOVED***return***REMOVED***this._closePromise;
}

/**
***REMOVED*******REMOVED***Expose***REMOVED***list***REMOVED***of***REMOVED***watched***REMOVED***paths
***REMOVED*******REMOVED***@returns***REMOVED***{Object}***REMOVED***for***REMOVED***chaining
*/
getWatched()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***watchList***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***this._watched.forEach((entry,***REMOVED***dir)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***this.options.cwd***REMOVED***?***REMOVED***sysPath.relative(this.options.cwd,***REMOVED***dir)***REMOVED***:***REMOVED***dir;
***REMOVED******REMOVED******REMOVED******REMOVED***watchList[key***REMOVED***||***REMOVED***ONE_DOT]***REMOVED***=***REMOVED***entry.getChildren().sort();
***REMOVED******REMOVED***});
***REMOVED******REMOVED***return***REMOVED***watchList;
}

emitWithAll(event,***REMOVED***args)***REMOVED***{
***REMOVED******REMOVED***this.emit(...args);
***REMOVED******REMOVED***if***REMOVED***(event***REMOVED***!==***REMOVED***EV_ERROR)***REMOVED***this.emit(EV_ALL,***REMOVED***...args);
}

//***REMOVED***Common***REMOVED***helpers
//***REMOVED***--------------

/**
***REMOVED*******REMOVED***Normalize***REMOVED***and***REMOVED***emit***REMOVED***events.
***REMOVED*******REMOVED***Calling***REMOVED***_emit***REMOVED***DOES***REMOVED***NOT***REMOVED***MEAN***REMOVED***emit()***REMOVED***would***REMOVED***be***REMOVED***called!
***REMOVED*******REMOVED***@param***REMOVED***{EventName}***REMOVED***event***REMOVED***Type***REMOVED***of***REMOVED***event
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED***File***REMOVED***or***REMOVED***directory***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{*=}***REMOVED***val1***REMOVED***arguments***REMOVED***to***REMOVED***be***REMOVED***passed***REMOVED***with***REMOVED***event
***REMOVED*******REMOVED***@param***REMOVED***{*=}***REMOVED***val2
***REMOVED*******REMOVED***@param***REMOVED***{*=}***REMOVED***val3
***REMOVED*******REMOVED***@returns***REMOVED***the***REMOVED***error***REMOVED***if***REMOVED***defined,***REMOVED***otherwise***REMOVED***the***REMOVED***value***REMOVED***of***REMOVED***the***REMOVED***FSWatcher***REMOVED***instance's***REMOVED***`closed`***REMOVED***flag
***REMOVED****/
async***REMOVED***_emit(event,***REMOVED***path,***REMOVED***val1,***REMOVED***val2,***REMOVED***val3)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.closed)***REMOVED***return;

***REMOVED******REMOVED***const***REMOVED***opts***REMOVED***=***REMOVED***this.options;
***REMOVED******REMOVED***if***REMOVED***(isWindows)***REMOVED***path***REMOVED***=***REMOVED***sysPath.normalize(path);
***REMOVED******REMOVED***if***REMOVED***(opts.cwd)***REMOVED***path***REMOVED***=***REMOVED***sysPath.relative(opts.cwd,***REMOVED***path);
***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***Array<any>***REMOVED****/
***REMOVED******REMOVED***const***REMOVED***args***REMOVED***=***REMOVED***[event,***REMOVED***path];
***REMOVED******REMOVED***if***REMOVED***(val3***REMOVED***!==***REMOVED***undefined)***REMOVED***args.push(val1,***REMOVED***val2,***REMOVED***val3);
***REMOVED******REMOVED***else***REMOVED***if***REMOVED***(val2***REMOVED***!==***REMOVED***undefined)***REMOVED***args.push(val1,***REMOVED***val2);
***REMOVED******REMOVED***else***REMOVED***if***REMOVED***(val1***REMOVED***!==***REMOVED***undefined)***REMOVED***args.push(val1);

***REMOVED******REMOVED***const***REMOVED***awf***REMOVED***=***REMOVED***opts.awaitWriteFinish;
***REMOVED******REMOVED***let***REMOVED***pw;
***REMOVED******REMOVED***if***REMOVED***(awf***REMOVED***&&***REMOVED***(pw***REMOVED***=***REMOVED***this._pendingWrites.get(path)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pw.lastChange***REMOVED***=***REMOVED***new***REMOVED***Date();
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.atomic)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***EV_UNLINK)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingUnlinks.set(path,***REMOVED***args);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setTimeout(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingUnlinks.forEach((entry,***REMOVED***path)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emit(...entry);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emit(EV_ALL,***REMOVED***...entry);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingUnlinks.delete(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},***REMOVED***typeof***REMOVED***opts.atomic***REMOVED***===***REMOVED***'number'***REMOVED***?***REMOVED***opts.atomic***REMOVED***:***REMOVED***100);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***EV_ADD***REMOVED***&&***REMOVED***this._pendingUnlinks.has(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***event***REMOVED***=***REMOVED***args[0]***REMOVED***=***REMOVED***EV_CHANGE;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingUnlinks.delete(path);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(awf***REMOVED***&&***REMOVED***(event***REMOVED***===***REMOVED***EV_ADD***REMOVED***||***REMOVED***event***REMOVED***===***REMOVED***EV_CHANGE)***REMOVED***&&***REMOVED***this._readyEmitted)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***awfEmit***REMOVED***=***REMOVED***(err,***REMOVED***stats)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***event***REMOVED***=***REMOVED***args[0]***REMOVED***=***REMOVED***EV_ERROR;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args[1]***REMOVED***=***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emitWithAll(event,***REMOVED***args);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(stats)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***if***REMOVED***stats***REMOVED***doesn't***REMOVED***exist***REMOVED***the***REMOVED***file***REMOVED***must***REMOVED***have***REMOVED***been***REMOVED***deleted
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(args.length***REMOVED***>***REMOVED***2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args[2]***REMOVED***=***REMOVED***stats;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***args.push(stats);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.emitWithAll(event,***REMOVED***args);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***this._awaitWriteFinish(path,***REMOVED***awf.stabilityThreshold,***REMOVED***event,***REMOVED***awfEmit);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***EV_CHANGE)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isThrottled***REMOVED***=***REMOVED***!this._throttle(EV_CHANGE,***REMOVED***path,***REMOVED***50);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isThrottled)***REMOVED***return***REMOVED***this;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***if***REMOVED***(opts.alwaysStat***REMOVED***&&***REMOVED***val1***REMOVED***===***REMOVED***undefined***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***(event***REMOVED***===***REMOVED***EV_ADD***REMOVED***||***REMOVED***event***REMOVED***===***REMOVED***EV_ADD_DIR***REMOVED***||***REMOVED***event***REMOVED***===***REMOVED***EV_CHANGE)
***REMOVED******REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fullPath***REMOVED***=***REMOVED***opts.cwd***REMOVED***?***REMOVED***sysPath.join(opts.cwd,***REMOVED***path)***REMOVED***:***REMOVED***path;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***stats;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stats***REMOVED***=***REMOVED***await***REMOVED***stat(fullPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Suppress***REMOVED***event***REMOVED***when***REMOVED***fs_stat***REMOVED***fails,***REMOVED***to***REMOVED***avoid***REMOVED***sending***REMOVED***undefined***REMOVED***'stat'
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!stats***REMOVED***||***REMOVED***this.closed)***REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***args.push(stats);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***this.emitWithAll(event,***REMOVED***args);

***REMOVED******REMOVED***return***REMOVED***this;
}

/**
***REMOVED*******REMOVED***Common***REMOVED***handler***REMOVED***for***REMOVED***errors
***REMOVED*******REMOVED***@param***REMOVED***{Error}***REMOVED***error
***REMOVED*******REMOVED***@returns***REMOVED***{Error|Boolean}***REMOVED***The***REMOVED***error***REMOVED***if***REMOVED***defined,***REMOVED***otherwise***REMOVED***the***REMOVED***value***REMOVED***of***REMOVED***the***REMOVED***FSWatcher***REMOVED***instance's***REMOVED***`closed`***REMOVED***flag
***REMOVED****/
_handleError(error)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***code***REMOVED***=***REMOVED***error***REMOVED***&&***REMOVED***error.code;
***REMOVED******REMOVED***if***REMOVED***(error***REMOVED***&&***REMOVED***code***REMOVED***!==***REMOVED***'ENOENT'***REMOVED***&&***REMOVED***code***REMOVED***!==***REMOVED***'ENOTDIR'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***(!this.options.ignorePermissionErrors***REMOVED***||***REMOVED***(code***REMOVED***!==***REMOVED***'EPERM'***REMOVED***&&***REMOVED***code***REMOVED***!==***REMOVED***'EACCES'))
***REMOVED******REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.emit(EV_ERROR,***REMOVED***error);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***error***REMOVED***||***REMOVED***this.closed;
}

/**
***REMOVED*******REMOVED***Helper***REMOVED***utility***REMOVED***for***REMOVED***throttling
***REMOVED*******REMOVED***@param***REMOVED***{ThrottleType}***REMOVED***actionType***REMOVED***type***REMOVED***being***REMOVED***throttled
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED***being***REMOVED***acted***REMOVED***upon
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***timeout***REMOVED***duration***REMOVED***of***REMOVED***time***REMOVED***to***REMOVED***suppress***REMOVED***duplicate***REMOVED***actions
***REMOVED*******REMOVED***@returns***REMOVED***{Object|false}***REMOVED***tracking***REMOVED***object***REMOVED***or***REMOVED***false***REMOVED***if***REMOVED***action***REMOVED***should***REMOVED***be***REMOVED***suppressed
***REMOVED****/
_throttle(actionType,***REMOVED***path,***REMOVED***timeout)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!this._throttled.has(actionType))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this._throttled.set(actionType,***REMOVED***new***REMOVED***Map());
***REMOVED******REMOVED***}

***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Map<Path,***REMOVED***Object>}***REMOVED****/
***REMOVED******REMOVED***const***REMOVED***action***REMOVED***=***REMOVED***this._throttled.get(actionType);
***REMOVED******REMOVED***/*****REMOVED***@type***REMOVED***{Object}***REMOVED****/
***REMOVED******REMOVED***const***REMOVED***actionPath***REMOVED***=***REMOVED***action.get(path);

***REMOVED******REMOVED***if***REMOVED***(actionPath)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***actionPath.count++;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***let***REMOVED***timeoutObject;
***REMOVED******REMOVED***const***REMOVED***clear***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***item***REMOVED***=***REMOVED***action.get(path);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***count***REMOVED***=***REMOVED***item***REMOVED***?***REMOVED***item.count***REMOVED***:***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***action.delete(path);
***REMOVED******REMOVED******REMOVED******REMOVED***clearTimeout(timeoutObject);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(item)***REMOVED***clearTimeout(item.timeoutObject);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***count;
***REMOVED******REMOVED***};
***REMOVED******REMOVED***timeoutObject***REMOVED***=***REMOVED***setTimeout(clear,***REMOVED***timeout);
***REMOVED******REMOVED***const***REMOVED***thr***REMOVED***=***REMOVED***{timeoutObject,***REMOVED***clear,***REMOVED***count:***REMOVED***0};
***REMOVED******REMOVED***action.set(path,***REMOVED***thr);
***REMOVED******REMOVED***return***REMOVED***thr;
}

_incrReadyCount()***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***this._readyCount++;
}

/**
***REMOVED*******REMOVED***Awaits***REMOVED***write***REMOVED***operation***REMOVED***to***REMOVED***finish.
***REMOVED*******REMOVED***Polls***REMOVED***a***REMOVED***newly***REMOVED***created***REMOVED***file***REMOVED***for***REMOVED***size***REMOVED***variations.***REMOVED***When***REMOVED***files***REMOVED***size***REMOVED***does***REMOVED***not***REMOVED***change***REMOVED***for***REMOVED***'threshold'***REMOVED***milliseconds***REMOVED***calls***REMOVED***callback.
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED***being***REMOVED***acted***REMOVED***upon
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***threshold***REMOVED***Time***REMOVED***in***REMOVED***milliseconds***REMOVED***a***REMOVED***file***REMOVED***size***REMOVED***must***REMOVED***be***REMOVED***fixed***REMOVED***before***REMOVED***acknowledging***REMOVED***write***REMOVED***OP***REMOVED***is***REMOVED***finished
***REMOVED*******REMOVED***@param***REMOVED***{EventName}***REMOVED***event
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***awfEmit***REMOVED***Callback***REMOVED***to***REMOVED***be***REMOVED***called***REMOVED***when***REMOVED***ready***REMOVED***for***REMOVED***event***REMOVED***to***REMOVED***be***REMOVED***emitted.
***REMOVED****/
_awaitWriteFinish(path,***REMOVED***threshold,***REMOVED***event,***REMOVED***awfEmit)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***timeoutHandler;

***REMOVED******REMOVED***let***REMOVED***fullPath***REMOVED***=***REMOVED***path;
***REMOVED******REMOVED***if***REMOVED***(this.options.cwd***REMOVED***&&***REMOVED***!sysPath.isAbsolute(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fullPath***REMOVED***=***REMOVED***sysPath.join(this.options.cwd,***REMOVED***path);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***now***REMOVED***=***REMOVED***new***REMOVED***Date();

***REMOVED******REMOVED***const***REMOVED***awaitWriteFinish***REMOVED***=***REMOVED***(prevStat)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fs.stat(fullPath,***REMOVED***(err,***REMOVED***curStat)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***||***REMOVED***!this._pendingWrites.has(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***&&***REMOVED***err.code***REMOVED***!==***REMOVED***'ENOENT')***REMOVED***awfEmit(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***now***REMOVED***=***REMOVED***Number(new***REMOVED***Date());

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(prevStat***REMOVED***&&***REMOVED***curStat.size***REMOVED***!==***REMOVED***prevStat.size)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingWrites.get(path).lastChange***REMOVED***=***REMOVED***now;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pw***REMOVED***=***REMOVED***this._pendingWrites.get(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***df***REMOVED***=***REMOVED***now***REMOVED***-***REMOVED***pw.lastChange;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(df***REMOVED***>=***REMOVED***threshold)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingWrites.delete(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***awfEmit(undefined,***REMOVED***curStat);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeoutHandler***REMOVED***=***REMOVED***setTimeout(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***awaitWriteFinish,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.options.awaitWriteFinish.pollInterval,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***curStat
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***};

***REMOVED******REMOVED***if***REMOVED***(!this._pendingWrites.has(path))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this._pendingWrites.set(path,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastChange:***REMOVED***now,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancelWait:***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._pendingWrites.delete(path);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clearTimeout(timeoutHandler);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***event;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***timeoutHandler***REMOVED***=***REMOVED***setTimeout(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***awaitWriteFinish,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.options.awaitWriteFinish.pollInterval
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
}

_getGlobIgnored()***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***[...this._ignoredPaths.values()];
}

/**
***REMOVED*******REMOVED***Determines***REMOVED***whether***REMOVED***user***REMOVED***has***REMOVED***asked***REMOVED***to***REMOVED***ignore***REMOVED***this***REMOVED***path.
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED***filepath***REMOVED***or***REMOVED***dir
***REMOVED*******REMOVED***@param***REMOVED***{fs.Stats=}***REMOVED***stats***REMOVED***result***REMOVED***of***REMOVED***fs.stat
***REMOVED*******REMOVED***@returns***REMOVED***{Boolean}
***REMOVED****/
_isIgnored(path,***REMOVED***stats)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.options.atomic***REMOVED***&&***REMOVED***DOT_RE.test(path))***REMOVED***return***REMOVED***true;
***REMOVED******REMOVED***if***REMOVED***(!this._userIgnored)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{cwd}***REMOVED***=***REMOVED***this.options;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ign***REMOVED***=***REMOVED***this.options.ignored;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***ignored***REMOVED***=***REMOVED***ign***REMOVED***&&***REMOVED***ign.map(normalizeIgnored(cwd));
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***paths***REMOVED***=***REMOVED***arrify(ignored)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.filter((path)***REMOVED***=>***REMOVED***typeof***REMOVED***path***REMOVED***===***REMOVED***STRING_TYPE***REMOVED***&&***REMOVED***!isGlob(path))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***.map((path)***REMOVED***=>***REMOVED***path***REMOVED***+***REMOVED***SLASH_GLOBSTAR);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***list***REMOVED***=***REMOVED***this._getGlobIgnored().map(normalizeIgnored(cwd)).concat(ignored,***REMOVED***paths);
***REMOVED******REMOVED******REMOVED******REMOVED***this._userIgnored***REMOVED***=***REMOVED***anymatch(list,***REMOVED***undefined,***REMOVED***ANYMATCH_OPTS);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***this._userIgnored([path,***REMOVED***stats]);
}

_isntIgnored(path,***REMOVED***stat)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***!this._isIgnored(path,***REMOVED***stat);
}

/**
***REMOVED*******REMOVED***Provides***REMOVED***a***REMOVED***set***REMOVED***of***REMOVED***common***REMOVED***helpers***REMOVED***and***REMOVED***properties***REMOVED***relating***REMOVED***to***REMOVED***symlink***REMOVED***and***REMOVED***glob***REMOVED***handling.
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path***REMOVED***file,***REMOVED***directory,***REMOVED***or***REMOVED***glob***REMOVED***pattern***REMOVED***being***REMOVED***watched
***REMOVED*******REMOVED***@param***REMOVED***{Number=}***REMOVED***depth***REMOVED***at***REMOVED***any***REMOVED***depth***REMOVED***>***REMOVED***0,***REMOVED***this***REMOVED***isn't***REMOVED***a***REMOVED***glob
***REMOVED*******REMOVED***@returns***REMOVED***{WatchHelper}***REMOVED***object***REMOVED***containing***REMOVED***helpers***REMOVED***for***REMOVED***this***REMOVED***path
***REMOVED****/
_getWatchHelpers(path,***REMOVED***depth)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***watchPath***REMOVED***=***REMOVED***depth***REMOVED***||***REMOVED***this.options.disableGlobbing***REMOVED***||***REMOVED***!isGlob(path)***REMOVED***?***REMOVED***path***REMOVED***:***REMOVED***globParent(path);
***REMOVED******REMOVED***const***REMOVED***follow***REMOVED***=***REMOVED***this.options.followSymlinks;

***REMOVED******REMOVED***return***REMOVED***new***REMOVED***WatchHelper(path,***REMOVED***watchPath,***REMOVED***follow,***REMOVED***this);
}

//***REMOVED***Directory***REMOVED***helpers
//***REMOVED***-----------------

/**
***REMOVED*******REMOVED***Provides***REMOVED***directory***REMOVED***tracking***REMOVED***objects
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***directory***REMOVED***path***REMOVED***of***REMOVED***the***REMOVED***directory
***REMOVED*******REMOVED***@returns***REMOVED***{DirEntry}***REMOVED***the***REMOVED***directory's***REMOVED***tracking***REMOVED***object
***REMOVED****/
_getWatchedDir(directory)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!this._boundRemove)***REMOVED***this._boundRemove***REMOVED***=***REMOVED***this._remove.bind(this);
***REMOVED******REMOVED***const***REMOVED***dir***REMOVED***=***REMOVED***sysPath.resolve(directory);
***REMOVED******REMOVED***if***REMOVED***(!this._watched.has(dir))***REMOVED***this._watched.set(dir,***REMOVED***new***REMOVED***DirEntry(dir,***REMOVED***this._boundRemove));
***REMOVED******REMOVED***return***REMOVED***this._watched.get(dir);
}

//***REMOVED***File***REMOVED***helpers
//***REMOVED***------------

/**
***REMOVED*******REMOVED***Check***REMOVED***for***REMOVED***read***REMOVED***permissions.
***REMOVED*******REMOVED***Based***REMOVED***on***REMOVED***this***REMOVED***answer***REMOVED***on***REMOVED***SO:***REMOVED***https://stackoverflow.com/a/11781404/1358405
***REMOVED*******REMOVED***@param***REMOVED***{fs.Stats}***REMOVED***stats***REMOVED***-***REMOVED***object,***REMOVED***result***REMOVED***of***REMOVED***fs_stat
***REMOVED*******REMOVED***@returns***REMOVED***{Boolean}***REMOVED***indicates***REMOVED***whether***REMOVED***the***REMOVED***file***REMOVED***can***REMOVED***be***REMOVED***read
*/
_hasReadPermissions(stats)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.options.ignorePermissionErrors)***REMOVED***return***REMOVED***true;

***REMOVED******REMOVED***//***REMOVED***stats.mode***REMOVED***may***REMOVED***be***REMOVED***bigint
***REMOVED******REMOVED***const***REMOVED***md***REMOVED***=***REMOVED***stats***REMOVED***&&***REMOVED***Number.parseInt(stats.mode,***REMOVED***10);
***REMOVED******REMOVED***const***REMOVED***st***REMOVED***=***REMOVED***md***REMOVED***&***REMOVED***0o777;
***REMOVED******REMOVED***const***REMOVED***it***REMOVED***=***REMOVED***Number.parseInt(st.toString(8)[0],***REMOVED***10);
***REMOVED******REMOVED***return***REMOVED***Boolean(4***REMOVED***&***REMOVED***it);
}

/**
***REMOVED*******REMOVED***Handles***REMOVED***emitting***REMOVED***unlink***REMOVED***events***REMOVED***for
***REMOVED*******REMOVED***files***REMOVED***and***REMOVED***directories,***REMOVED***and***REMOVED***via***REMOVED***recursion,***REMOVED***for
***REMOVED*******REMOVED***files***REMOVED***and***REMOVED***directories***REMOVED***within***REMOVED***directories***REMOVED***that***REMOVED***are***REMOVED***unlinked
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***directory***REMOVED***within***REMOVED***which***REMOVED***the***REMOVED***following***REMOVED***item***REMOVED***is***REMOVED***located
***REMOVED*******REMOVED***@param***REMOVED***{String}***REMOVED***item***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***base***REMOVED***path***REMOVED***of***REMOVED***item/directory
***REMOVED*******REMOVED***@returns***REMOVED***{void}
*/
_remove(directory,***REMOVED***item,***REMOVED***isDirectory)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***if***REMOVED***what***REMOVED***is***REMOVED***being***REMOVED***deleted***REMOVED***is***REMOVED***a***REMOVED***directory,***REMOVED***get***REMOVED***that***REMOVED***directory's***REMOVED***paths
***REMOVED******REMOVED***//***REMOVED***for***REMOVED***recursive***REMOVED***deleting***REMOVED***and***REMOVED***cleaning***REMOVED***of***REMOVED***watched***REMOVED***object
***REMOVED******REMOVED***//***REMOVED***if***REMOVED***it***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***directory,***REMOVED***nestedDirectoryChildren***REMOVED***will***REMOVED***be***REMOVED***empty***REMOVED***array
***REMOVED******REMOVED***const***REMOVED***path***REMOVED***=***REMOVED***sysPath.join(directory,***REMOVED***item);
***REMOVED******REMOVED***const***REMOVED***fullPath***REMOVED***=***REMOVED***sysPath.resolve(path);
***REMOVED******REMOVED***isDirectory***REMOVED***=***REMOVED***isDirectory***REMOVED***!=***REMOVED***null
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***isDirectory
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***this._watched.has(path)***REMOVED***||***REMOVED***this._watched.has(fullPath);

***REMOVED******REMOVED***//***REMOVED***prevent***REMOVED***duplicate***REMOVED***handling***REMOVED***in***REMOVED***case***REMOVED***of***REMOVED***arriving***REMOVED***here***REMOVED***nearly***REMOVED***simultaneously
***REMOVED******REMOVED***//***REMOVED***via***REMOVED***multiple***REMOVED***paths***REMOVED***(such***REMOVED***as***REMOVED***_handleFile***REMOVED***and***REMOVED***_handleDir)
***REMOVED******REMOVED***if***REMOVED***(!this._throttle('remove',***REMOVED***path,***REMOVED***100))***REMOVED***return;

***REMOVED******REMOVED***//***REMOVED***if***REMOVED***the***REMOVED***only***REMOVED***watched***REMOVED***file***REMOVED***is***REMOVED***removed,***REMOVED***watch***REMOVED***for***REMOVED***its***REMOVED***return
***REMOVED******REMOVED***if***REMOVED***(!isDirectory***REMOVED***&&***REMOVED***!this.options.useFsEvents***REMOVED***&&***REMOVED***this._watched.size***REMOVED***===***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.add(directory,***REMOVED***item,***REMOVED***true);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***This***REMOVED***will***REMOVED***create***REMOVED***a***REMOVED***new***REMOVED***entry***REMOVED***in***REMOVED***the***REMOVED***watched***REMOVED***object***REMOVED***in***REMOVED***either***REMOVED***case
***REMOVED******REMOVED***//***REMOVED***so***REMOVED***we***REMOVED***got***REMOVED***to***REMOVED***do***REMOVED***the***REMOVED***directory***REMOVED***check***REMOVED***beforehand
***REMOVED******REMOVED***const***REMOVED***wp***REMOVED***=***REMOVED***this._getWatchedDir(path);
***REMOVED******REMOVED***const***REMOVED***nestedDirectoryChildren***REMOVED***=***REMOVED***wp.getChildren();

***REMOVED******REMOVED***//***REMOVED***Recursively***REMOVED***remove***REMOVED***children***REMOVED***directories***REMOVED***/***REMOVED***files.
***REMOVED******REMOVED***nestedDirectoryChildren.forEach(nested***REMOVED***=>***REMOVED***this._remove(path,***REMOVED***nested));

***REMOVED******REMOVED***//***REMOVED***Check***REMOVED***if***REMOVED***item***REMOVED***was***REMOVED***on***REMOVED***the***REMOVED***watched***REMOVED***list***REMOVED***and***REMOVED***remove***REMOVED***it
***REMOVED******REMOVED***const***REMOVED***parent***REMOVED***=***REMOVED***this._getWatchedDir(directory);
***REMOVED******REMOVED***const***REMOVED***wasTracked***REMOVED***=***REMOVED***parent.has(item);
***REMOVED******REMOVED***parent.remove(item);

***REMOVED******REMOVED***//***REMOVED***Fixes***REMOVED***issue***REMOVED***#1042***REMOVED***->***REMOVED***Relative***REMOVED***paths***REMOVED***were***REMOVED***detected***REMOVED***and***REMOVED***added***REMOVED***as***REMOVED***symlinks
***REMOVED******REMOVED***//***REMOVED***(https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),
***REMOVED******REMOVED***//***REMOVED***but***REMOVED***never***REMOVED***removed***REMOVED***from***REMOVED***the***REMOVED***map***REMOVED***in***REMOVED***case***REMOVED***the***REMOVED***path***REMOVED***was***REMOVED***deleted.
***REMOVED******REMOVED***//***REMOVED***This***REMOVED***leads***REMOVED***to***REMOVED***an***REMOVED***incorrect***REMOVED***state***REMOVED***if***REMOVED***the***REMOVED***path***REMOVED***was***REMOVED***recreated:
***REMOVED******REMOVED***//***REMOVED***https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553
***REMOVED******REMOVED***if***REMOVED***(this._symlinkPaths.has(fullPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this._symlinkPaths.delete(fullPath);
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***If***REMOVED***we***REMOVED***wait***REMOVED***for***REMOVED***this***REMOVED***file***REMOVED***to***REMOVED***be***REMOVED***fully***REMOVED***written,***REMOVED***cancel***REMOVED***the***REMOVED***wait.
***REMOVED******REMOVED***let***REMOVED***relPath***REMOVED***=***REMOVED***path;
***REMOVED******REMOVED***if***REMOVED***(this.options.cwd)***REMOVED***relPath***REMOVED***=***REMOVED***sysPath.relative(this.options.cwd,***REMOVED***path);
***REMOVED******REMOVED***if***REMOVED***(this.options.awaitWriteFinish***REMOVED***&&***REMOVED***this._pendingWrites.has(relPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***event***REMOVED***=***REMOVED***this._pendingWrites.get(relPath).cancelWait();
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(event***REMOVED***===***REMOVED***EV_ADD)***REMOVED***return;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***The***REMOVED***Entry***REMOVED***will***REMOVED***either***REMOVED***be***REMOVED***a***REMOVED***directory***REMOVED***that***REMOVED***just***REMOVED***got***REMOVED***removed
***REMOVED******REMOVED***//***REMOVED***or***REMOVED***a***REMOVED***bogus***REMOVED***entry***REMOVED***to***REMOVED***a***REMOVED***file,***REMOVED***in***REMOVED***either***REMOVED***case***REMOVED***we***REMOVED***have***REMOVED***to***REMOVED***remove***REMOVED***it
***REMOVED******REMOVED***this._watched.delete(path);
***REMOVED******REMOVED***this._watched.delete(fullPath);
***REMOVED******REMOVED***const***REMOVED***eventName***REMOVED***=***REMOVED***isDirectory***REMOVED***?***REMOVED***EV_UNLINK_DIR***REMOVED***:***REMOVED***EV_UNLINK;
***REMOVED******REMOVED***if***REMOVED***(wasTracked***REMOVED***&&***REMOVED***!this._isIgnored(path))***REMOVED***this._emit(eventName,***REMOVED***path);

***REMOVED******REMOVED***//***REMOVED***Avoid***REMOVED***conflicts***REMOVED***if***REMOVED***we***REMOVED***later***REMOVED***create***REMOVED***another***REMOVED***file***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***name
***REMOVED******REMOVED***if***REMOVED***(!this.options.useFsEvents)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this._closePath(path);
***REMOVED******REMOVED***}
}

/**
***REMOVED*******REMOVED***Closes***REMOVED***all***REMOVED***watchers***REMOVED***for***REMOVED***a***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path
***REMOVED****/
_closePath(path)***REMOVED***{
***REMOVED******REMOVED***this._closeFile(path);
***REMOVED******REMOVED***const***REMOVED***dir***REMOVED***=***REMOVED***sysPath.dirname(path);
***REMOVED******REMOVED***this._getWatchedDir(dir).remove(sysPath.basename(path));
}

/**
***REMOVED*******REMOVED***Closes***REMOVED***only***REMOVED***file-specific***REMOVED***watchers
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path
***REMOVED****/
_closeFile(path)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***closers***REMOVED***=***REMOVED***this._closers.get(path);
***REMOVED******REMOVED***if***REMOVED***(!closers)***REMOVED***return;
***REMOVED******REMOVED***closers.forEach(closer***REMOVED***=>***REMOVED***closer());
***REMOVED******REMOVED***this._closers.delete(path);
}

/**
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Path}***REMOVED***path
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***closer
***REMOVED****/
_addPathCloser(path,***REMOVED***closer)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!closer)***REMOVED***return;
***REMOVED******REMOVED***let***REMOVED***list***REMOVED***=***REMOVED***this._closers.get(path);
***REMOVED******REMOVED***if***REMOVED***(!list)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***list***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***this._closers.set(path,***REMOVED***list);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***list.push(closer);
}

_readdirp(root,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(this.closed)***REMOVED***return;
***REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{type:***REMOVED***EV_ALL,***REMOVED***alwaysStat:***REMOVED***true,***REMOVED***lstat:***REMOVED***true,***REMOVED***...opts};
***REMOVED******REMOVED***let***REMOVED***stream***REMOVED***=***REMOVED***readdirp(root,***REMOVED***options);
***REMOVED******REMOVED***this._streams.add(stream);
***REMOVED******REMOVED***stream.once(STR_CLOSE,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stream***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***stream.once(STR_END,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stream)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this._streams.delete(stream);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stream***REMOVED***=***REMOVED***undefined;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***});
***REMOVED******REMOVED***return***REMOVED***stream;
}

}

//***REMOVED***Export***REMOVED***FSWatcher***REMOVED***class
chokidar.FSWatcher***REMOVED***=***REMOVED***FSWatcher;

/**
***REMOVED*******REMOVED***Instantiates***REMOVED***watcher***REMOVED***with***REMOVED***paths***REMOVED***to***REMOVED***be***REMOVED***tracked.
***REMOVED*******REMOVED***@param***REMOVED***{String|Array<String>}***REMOVED***paths***REMOVED***file/directory***REMOVED***paths***REMOVED***and/or***REMOVED***globs
***REMOVED*******REMOVED***@param***REMOVED***{Object=}***REMOVED***options***REMOVED***chokidar***REMOVED***opts
***REMOVED*******REMOVED***@returns***REMOVED***an***REMOVED***instance***REMOVED***of***REMOVED***FSWatcher***REMOVED***for***REMOVED***chaining.
***REMOVED****/
const***REMOVED***watch***REMOVED***=***REMOVED***(paths,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***watcher***REMOVED***=***REMOVED***new***REMOVED***FSWatcher(options);
***REMOVED******REMOVED***watcher.add(paths);
***REMOVED******REMOVED***return***REMOVED***watcher;
};

chokidar.watch***REMOVED***=***REMOVED***watch;

exports.chokidar***REMOVED***=***REMOVED***chokidar;
//#***REMOVED***sourceMappingURL=index.js.map
