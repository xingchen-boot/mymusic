import***REMOVED***areInputsEqual***REMOVED***from***REMOVED***'./are-inputs-equal';

export***REMOVED***type***REMOVED***EqualityFn<TFunc***REMOVED***extends***REMOVED***(...args:***REMOVED***any[])***REMOVED***=>***REMOVED***any>***REMOVED***=***REMOVED***(
***REMOVED******REMOVED***newArgs:***REMOVED***Parameters<TFunc>,
***REMOVED******REMOVED***lastArgs:***REMOVED***Parameters<TFunc>,
)***REMOVED***=>***REMOVED***boolean;

export***REMOVED***type***REMOVED***MemoizedFn<TFunc***REMOVED***extends***REMOVED***(this:***REMOVED***any,***REMOVED***...args:***REMOVED***any[])***REMOVED***=>***REMOVED***any>***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***clear:***REMOVED***()***REMOVED***=>***REMOVED***void;
***REMOVED******REMOVED***(this:***REMOVED***ThisParameterType<TFunc>,***REMOVED***...args:***REMOVED***Parameters<TFunc>):***REMOVED***ReturnType<TFunc>;
};

//***REMOVED***internal***REMOVED***type
type***REMOVED***Cache<TFunc***REMOVED***extends***REMOVED***(this:***REMOVED***any,***REMOVED***...args:***REMOVED***any[])***REMOVED***=>***REMOVED***any>***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***lastThis:***REMOVED***ThisParameterType<TFunc>;
***REMOVED******REMOVED***lastArgs:***REMOVED***Parameters<TFunc>;
***REMOVED******REMOVED***lastResult:***REMOVED***ReturnType<TFunc>;
};

function***REMOVED***memoizeOne<TFunc***REMOVED***extends***REMOVED***(this:***REMOVED***any,***REMOVED***...newArgs:***REMOVED***any[])***REMOVED***=>***REMOVED***any>(
***REMOVED******REMOVED***resultFn:***REMOVED***TFunc,
***REMOVED******REMOVED***isEqual:***REMOVED***EqualityFn<TFunc>***REMOVED***=***REMOVED***areInputsEqual,
):***REMOVED***MemoizedFn<TFunc>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***cache:***REMOVED***Cache<TFunc>***REMOVED***|***REMOVED***null***REMOVED***=***REMOVED***null;

***REMOVED******REMOVED***//***REMOVED***breaking***REMOVED***cache***REMOVED***when***REMOVED***context***REMOVED***(this)***REMOVED***or***REMOVED***arguments***REMOVED***change
***REMOVED******REMOVED***function***REMOVED***memoized(
***REMOVED******REMOVED******REMOVED******REMOVED***this:***REMOVED***ThisParameterType<TFunc>,
***REMOVED******REMOVED******REMOVED******REMOVED***...newArgs:***REMOVED***Parameters<TFunc>
***REMOVED******REMOVED***):***REMOVED***ReturnType<TFunc>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(cache***REMOVED***&&***REMOVED***cache.lastThis***REMOVED***===***REMOVED***this***REMOVED***&&***REMOVED***isEqual(newArgs,***REMOVED***cache.lastArgs))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***cache.lastResult;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Throwing***REMOVED***during***REMOVED***an***REMOVED***assignment***REMOVED***aborts***REMOVED***the***REMOVED***assignment:***REMOVED***https://codepen.io/alexreardon/pen/RYKoaz
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Doing***REMOVED***the***REMOVED***lastResult***REMOVED***assignment***REMOVED***first***REMOVED***so***REMOVED***that***REMOVED***if***REMOVED***it***REMOVED***throws
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***the***REMOVED***cache***REMOVED***will***REMOVED***not***REMOVED***be***REMOVED***overwritten
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***lastResult***REMOVED***=***REMOVED***resultFn.apply(this,***REMOVED***newArgs);
***REMOVED******REMOVED******REMOVED******REMOVED***cache***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastResult,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastArgs:***REMOVED***newArgs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastThis:***REMOVED***this,
***REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***lastResult;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***//***REMOVED***Adding***REMOVED***the***REMOVED***ability***REMOVED***to***REMOVED***clear***REMOVED***the***REMOVED***cache***REMOVED***of***REMOVED***a***REMOVED***memoized***REMOVED***function
***REMOVED******REMOVED***memoized.clear***REMOVED***=***REMOVED***function***REMOVED***clear()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***cache***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***};

***REMOVED******REMOVED***return***REMOVED***memoized;
}

export***REMOVED***default***REMOVED***memoizeOne;
