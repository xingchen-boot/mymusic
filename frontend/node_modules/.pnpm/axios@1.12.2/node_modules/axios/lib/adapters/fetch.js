import***REMOVED***platform***REMOVED***from***REMOVED***"../platform/index.js";
import***REMOVED***utils***REMOVED***from***REMOVED***"../utils.js";
import***REMOVED***AxiosError***REMOVED***from***REMOVED***"../core/AxiosError.js";
import***REMOVED***composeSignals***REMOVED***from***REMOVED***"../helpers/composeSignals.js";
import***REMOVED***{trackStream}***REMOVED***from***REMOVED***"../helpers/trackStream.js";
import***REMOVED***AxiosHeaders***REMOVED***from***REMOVED***"../core/AxiosHeaders.js";
import***REMOVED***{progressEventReducer,***REMOVED***progressEventDecorator,***REMOVED***asyncDecorator}***REMOVED***from***REMOVED***"../helpers/progressEventReducer.js";
import***REMOVED***resolveConfig***REMOVED***from***REMOVED***"../helpers/resolveConfig.js";
import***REMOVED***settle***REMOVED***from***REMOVED***"../core/settle.js";

const***REMOVED***DEFAULT_CHUNK_SIZE***REMOVED***=***REMOVED***64***REMOVED*******REMOVED***1024;

const***REMOVED***{isFunction}***REMOVED***=***REMOVED***utils;

const***REMOVED***globalFetchAPI***REMOVED***=***REMOVED***(({Request,***REMOVED***Response})***REMOVED***=>***REMOVED***({
***REMOVED******REMOVED***Request,***REMOVED***Response
}))(utils.global);

const***REMOVED***{
***REMOVED******REMOVED***ReadableStream,***REMOVED***TextEncoder
}***REMOVED***=***REMOVED***utils.global;


const***REMOVED***test***REMOVED***=***REMOVED***(fn,***REMOVED***...args)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!fn(...args);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false
***REMOVED******REMOVED***}
}

const***REMOVED***factory***REMOVED***=***REMOVED***(env)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***env***REMOVED***=***REMOVED***utils.merge.call({
***REMOVED******REMOVED******REMOVED******REMOVED***skipUndefined:***REMOVED***true
***REMOVED******REMOVED***},***REMOVED***globalFetchAPI,***REMOVED***env);

***REMOVED******REMOVED***const***REMOVED***{fetch:***REMOVED***envFetch,***REMOVED***Request,***REMOVED***Response}***REMOVED***=***REMOVED***env;
***REMOVED******REMOVED***const***REMOVED***isFetchSupported***REMOVED***=***REMOVED***envFetch***REMOVED***?***REMOVED***isFunction(envFetch)***REMOVED***:***REMOVED***typeof***REMOVED***fetch***REMOVED***===***REMOVED***'function';
***REMOVED******REMOVED***const***REMOVED***isRequestSupported***REMOVED***=***REMOVED***isFunction(Request);
***REMOVED******REMOVED***const***REMOVED***isResponseSupported***REMOVED***=***REMOVED***isFunction(Response);

***REMOVED******REMOVED***if***REMOVED***(!isFetchSupported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***isReadableStreamSupported***REMOVED***=***REMOVED***isFetchSupported***REMOVED***&&***REMOVED***isFunction(ReadableStream);

***REMOVED******REMOVED***const***REMOVED***encodeText***REMOVED***=***REMOVED***isFetchSupported***REMOVED***&&***REMOVED***(typeof***REMOVED***TextEncoder***REMOVED***===***REMOVED***'function'***REMOVED***?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***((encoder)***REMOVED***=>***REMOVED***(str)***REMOVED***=>***REMOVED***encoder.encode(str))(new***REMOVED***TextEncoder())***REMOVED***:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***async***REMOVED***(str)***REMOVED***=>***REMOVED***new***REMOVED***Uint8Array(await***REMOVED***new***REMOVED***Request(str).arrayBuffer())
***REMOVED******REMOVED***);

***REMOVED******REMOVED***const***REMOVED***supportsRequestStream***REMOVED***=***REMOVED***isRequestSupported***REMOVED***&&***REMOVED***isReadableStreamSupported***REMOVED***&&***REMOVED***test(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***duplexAccessed***REMOVED***=***REMOVED***false;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***hasContentType***REMOVED***=***REMOVED***new***REMOVED***Request(platform.origin,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body:***REMOVED***new***REMOVED***ReadableStream(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***'POST',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***get***REMOVED***duplex()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***duplexAccessed***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***'half';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***}).headers.has('Content-Type');

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***duplexAccessed***REMOVED***&&***REMOVED***!hasContentType;
***REMOVED******REMOVED***});

***REMOVED******REMOVED***const***REMOVED***supportsResponseStream***REMOVED***=***REMOVED***isResponseSupported***REMOVED***&&***REMOVED***isReadableStreamSupported***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED***test(()***REMOVED***=>***REMOVED***utils.isReadableStream(new***REMOVED***Response('').body));

***REMOVED******REMOVED***const***REMOVED***resolvers***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stream:***REMOVED***supportsResponseStream***REMOVED***&&***REMOVED***((res)***REMOVED***=>***REMOVED***res.body)
***REMOVED******REMOVED***};

***REMOVED******REMOVED***isFetchSupported***REMOVED***&&***REMOVED***((()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***['text',***REMOVED***'arrayBuffer',***REMOVED***'blob',***REMOVED***'formData',***REMOVED***'stream'].forEach(type***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!resolvers[type]***REMOVED***&&***REMOVED***(resolvers[type]***REMOVED***=***REMOVED***(res,***REMOVED***config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***method***REMOVED***=***REMOVED***res***REMOVED***&&***REMOVED***res[type];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(method)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***method.call(res);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***AxiosError(`Response***REMOVED***type***REMOVED***'${type}'***REMOVED***is***REMOVED***not***REMOVED***supported`,***REMOVED***AxiosError.ERR_NOT_SUPPORT,***REMOVED***config);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***})());

***REMOVED******REMOVED***const***REMOVED***getBodyLength***REMOVED***=***REMOVED***async***REMOVED***(body)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(body***REMOVED***==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isBlob(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***body.size;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isSpecCompliantForm(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***_request***REMOVED***=***REMOVED***new***REMOVED***Request(platform.origin,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***'POST',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(await***REMOVED***_request.arrayBuffer()).byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isArrayBufferView(body)***REMOVED***||***REMOVED***utils.isArrayBuffer(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***body.byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isURLSearchParams(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body***REMOVED***=***REMOVED***body***REMOVED***+***REMOVED***'';
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isString(body))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(await***REMOVED***encodeText(body)).byteLength;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}

***REMOVED******REMOVED***const***REMOVED***resolveBodyLength***REMOVED***=***REMOVED***async***REMOVED***(headers,***REMOVED***body)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***length***REMOVED***=***REMOVED***utils.toFiniteNumber(headers.getContentLength());

***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***length***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***getBodyLength(body)***REMOVED***:***REMOVED***length;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***async***REMOVED***(config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***url,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signal,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancelToken,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***timeout,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDownloadProgress,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseType,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***withCredentials***REMOVED***=***REMOVED***'same-origin',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fetchOptions
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***=***REMOVED***resolveConfig(config);

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***_fetch***REMOVED***=***REMOVED***envFetch***REMOVED***||***REMOVED***fetch;

***REMOVED******REMOVED******REMOVED******REMOVED***responseType***REMOVED***=***REMOVED***responseType***REMOVED***?***REMOVED***(responseType***REMOVED***+***REMOVED***'').toLowerCase()***REMOVED***:***REMOVED***'text';

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***composedSignal***REMOVED***=***REMOVED***composeSignals([signal,***REMOVED***cancelToken***REMOVED***&&***REMOVED***cancelToken.toAbortSignal()],***REMOVED***timeout);

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***request***REMOVED***=***REMOVED***null;

***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***unsubscribe***REMOVED***=***REMOVED***composedSignal***REMOVED***&&***REMOVED***composedSignal.unsubscribe***REMOVED***&&***REMOVED***(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***composedSignal.unsubscribe();
***REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***requestContentLength;

***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onUploadProgress***REMOVED***&&***REMOVED***supportsRequestStream***REMOVED***&&***REMOVED***method***REMOVED***!==***REMOVED***'get'***REMOVED***&&***REMOVED***method***REMOVED***!==***REMOVED***'head'***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(requestContentLength***REMOVED***=***REMOVED***await***REMOVED***resolveBodyLength(headers,***REMOVED***data))***REMOVED***!==***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***_request***REMOVED***=***REMOVED***new***REMOVED***Request(url,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***'POST',
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body:***REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***duplex:***REMOVED***"half"
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contentTypeHeader;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(utils.isFormData(data)***REMOVED***&&***REMOVED***(contentTypeHeader***REMOVED***=***REMOVED***_request.headers.get('content-type')))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers.setContentType(contentTypeHeader)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(_request.body)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***[onProgress,***REMOVED***flush]***REMOVED***=***REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestContentLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onUploadProgress))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data***REMOVED***=***REMOVED***trackStream(_request.body,***REMOVED***DEFAULT_CHUNK_SIZE,***REMOVED***onProgress,***REMOVED***flush);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!utils.isString(withCredentials))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***withCredentials***REMOVED***=***REMOVED***withCredentials***REMOVED***?***REMOVED***'include'***REMOVED***:***REMOVED***'omit';
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Cloudflare***REMOVED***Workers***REMOVED***throws***REMOVED***when***REMOVED***credentials***REMOVED***are***REMOVED***defined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***see***REMOVED***https://github.com/cloudflare/workerd/issues/902
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isCredentialsSupported***REMOVED***=***REMOVED***isRequestSupported***REMOVED***&&***REMOVED***"credentials"***REMOVED***in***REMOVED***Request.prototype;

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***resolvedOptions***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***...fetchOptions,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***signal:***REMOVED***composedSignal,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***method:***REMOVED***method.toUpperCase(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***headers.normalize().toJSON(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***body:***REMOVED***data,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***duplex:***REMOVED***"half",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***credentials:***REMOVED***isCredentialsSupported***REMOVED***?***REMOVED***withCredentials***REMOVED***:***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request***REMOVED***=***REMOVED***isRequestSupported***REMOVED***&&***REMOVED***new***REMOVED***Request(url,***REMOVED***resolvedOptions);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***response***REMOVED***=***REMOVED***await***REMOVED***(isRequestSupported***REMOVED***?***REMOVED***_fetch(request,***REMOVED***fetchOptions)***REMOVED***:***REMOVED***_fetch(url,***REMOVED***resolvedOptions));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***isStreamResponse***REMOVED***=***REMOVED***supportsResponseStream***REMOVED***&&***REMOVED***(responseType***REMOVED***===***REMOVED***'stream'***REMOVED***||***REMOVED***responseType***REMOVED***===***REMOVED***'response');

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(supportsResponseStream***REMOVED***&&***REMOVED***(onDownloadProgress***REMOVED***||***REMOVED***(isStreamResponse***REMOVED***&&***REMOVED***unsubscribe)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***options***REMOVED***=***REMOVED***{};

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***['status',***REMOVED***'statusText',***REMOVED***'headers'].forEach(prop***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options[prop]***REMOVED***=***REMOVED***response[prop];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***responseContentLength***REMOVED***=***REMOVED***utils.toFiniteNumber(response.headers.get('content-length'));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***[onProgress,***REMOVED***flush]***REMOVED***=***REMOVED***onDownloadProgress***REMOVED***&&***REMOVED***progressEventDecorator(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseContentLength,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***progressEventReducer(asyncDecorator(onDownloadProgress),***REMOVED***true)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)***REMOVED***||***REMOVED***[];

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response***REMOVED***=***REMOVED***new***REMOVED***Response(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***trackStream(response.body,***REMOVED***DEFAULT_CHUNK_SIZE,***REMOVED***onProgress,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flush***REMOVED***&&***REMOVED***flush();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***unsubscribe***REMOVED***&&***REMOVED***unsubscribe();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseType***REMOVED***=***REMOVED***responseType***REMOVED***||***REMOVED***'text';

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***responseData***REMOVED***=***REMOVED***await***REMOVED***resolvers[utils.findKey(resolvers,***REMOVED***responseType)***REMOVED***||***REMOVED***'text'](response,***REMOVED***config);

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!isStreamResponse***REMOVED***&&***REMOVED***unsubscribe***REMOVED***&&***REMOVED***unsubscribe();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***await***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settle(resolve,***REMOVED***reject,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***responseData,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***headers:***REMOVED***AxiosHeaders.from(response.headers),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***status:***REMOVED***response.status,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***statusText:***REMOVED***response.statusText,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***config,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***unsubscribe***REMOVED***&&***REMOVED***unsubscribe();

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***&&***REMOVED***err.name***REMOVED***===***REMOVED***'TypeError'***REMOVED***&&***REMOVED***/Load***REMOVED***failed|fetch/i.test(err.message))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***Object.assign(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***new***REMOVED***AxiosError('Network***REMOVED***Error',***REMOVED***AxiosError.ERR_NETWORK,***REMOVED***config,***REMOVED***request),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cause:***REMOVED***err.cause***REMOVED***||***REMOVED***err
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***AxiosError.from(err,***REMOVED***err***REMOVED***&&***REMOVED***err.code,***REMOVED***config,***REMOVED***request);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}

const***REMOVED***seedCache***REMOVED***=***REMOVED***new***REMOVED***Map();

export***REMOVED***const***REMOVED***getFetch***REMOVED***=***REMOVED***(config)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***env***REMOVED***=***REMOVED***config***REMOVED***?***REMOVED***config.env***REMOVED***:***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***{fetch,***REMOVED***Request,***REMOVED***Response}***REMOVED***=***REMOVED***env;
***REMOVED******REMOVED***const***REMOVED***seeds***REMOVED***=***REMOVED***[
***REMOVED******REMOVED******REMOVED******REMOVED***Request,***REMOVED***Response,***REMOVED***fetch
***REMOVED******REMOVED***];

***REMOVED******REMOVED***let***REMOVED***len***REMOVED***=***REMOVED***seeds.length,***REMOVED***i***REMOVED***=***REMOVED***len,
***REMOVED******REMOVED******REMOVED******REMOVED***seed,***REMOVED***target,***REMOVED***map***REMOVED***=***REMOVED***seedCache;

***REMOVED******REMOVED***while***REMOVED***(i--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***seed***REMOVED***=***REMOVED***seeds[i];
***REMOVED******REMOVED******REMOVED******REMOVED***target***REMOVED***=***REMOVED***map.get(seed);

***REMOVED******REMOVED******REMOVED******REMOVED***target***REMOVED***===***REMOVED***undefined***REMOVED***&&***REMOVED***map.set(seed,***REMOVED***target***REMOVED***=***REMOVED***(i***REMOVED***?***REMOVED***new***REMOVED***Map()***REMOVED***:***REMOVED***factory(env)))

***REMOVED******REMOVED******REMOVED******REMOVED***map***REMOVED***=***REMOVED***target;
***REMOVED******REMOVED***}

***REMOVED******REMOVED***return***REMOVED***target;
};

const***REMOVED***adapter***REMOVED***=***REMOVED***getFetch();

export***REMOVED***default***REMOVED***adapter;
