/****REMOVED***-*-***REMOVED***Mode:***REMOVED***js;***REMOVED***js-indent-level:***REMOVED***2;***REMOVED***-*-***REMOVED****/
/*
***REMOVED*******REMOVED***Copyright***REMOVED***2011***REMOVED***Mozilla***REMOVED***Foundation***REMOVED***and***REMOVED***contributors
***REMOVED*******REMOVED***Licensed***REMOVED***under***REMOVED***the***REMOVED***New***REMOVED***BSD***REMOVED***license.***REMOVED***See***REMOVED***LICENSE***REMOVED***or:
***REMOVED*******REMOVED***http://opensource.org/licenses/BSD-3-Clause
***REMOVED****/

//***REMOVED***It***REMOVED***turns***REMOVED***out***REMOVED***that***REMOVED***some***REMOVED***(most?)***REMOVED***JavaScript***REMOVED***engines***REMOVED***don't***REMOVED***self-host
//***REMOVED***`Array.prototype.sort`.***REMOVED***This***REMOVED***makes***REMOVED***sense***REMOVED***because***REMOVED***C++***REMOVED***will***REMOVED***likely***REMOVED***remain
//***REMOVED***faster***REMOVED***than***REMOVED***JS***REMOVED***when***REMOVED***doing***REMOVED***raw***REMOVED***CPU-intensive***REMOVED***sorting.***REMOVED***However,***REMOVED***when***REMOVED***using***REMOVED***a
//***REMOVED***custom***REMOVED***comparator***REMOVED***function,***REMOVED***calling***REMOVED***back***REMOVED***and***REMOVED***forth***REMOVED***between***REMOVED***the***REMOVED***VM's***REMOVED***C++***REMOVED***and
//***REMOVED***JIT'd***REMOVED***JS***REMOVED***is***REMOVED***rather***REMOVED***slow***REMOVED****and****REMOVED***loses***REMOVED***JIT***REMOVED***type***REMOVED***information,***REMOVED***resulting***REMOVED***in
//***REMOVED***worse***REMOVED***generated***REMOVED***code***REMOVED***for***REMOVED***the***REMOVED***comparator***REMOVED***function***REMOVED***than***REMOVED***would***REMOVED***be***REMOVED***optimal.***REMOVED***In
//***REMOVED***fact,***REMOVED***when***REMOVED***sorting***REMOVED***with***REMOVED***a***REMOVED***comparator,***REMOVED***these***REMOVED***costs***REMOVED***outweigh***REMOVED***the***REMOVED***benefits***REMOVED***of
//***REMOVED***sorting***REMOVED***in***REMOVED***C++.***REMOVED***By***REMOVED***using***REMOVED***our***REMOVED***own***REMOVED***JS-implemented***REMOVED***Quick***REMOVED***Sort***REMOVED***(below),***REMOVED***we***REMOVED***get
//***REMOVED***a***REMOVED***~3500ms***REMOVED***mean***REMOVED***speed-up***REMOVED***in***REMOVED***`bench/bench.html`.

function***REMOVED***SortTemplate(comparator)***REMOVED***{

/**
***REMOVED*******REMOVED***Swap***REMOVED***the***REMOVED***elements***REMOVED***indexed***REMOVED***by***REMOVED***`x`***REMOVED***and***REMOVED***`y`***REMOVED***in***REMOVED***the***REMOVED***array***REMOVED***`ary`.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Array}***REMOVED***ary
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***The***REMOVED***array.
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***x
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***The***REMOVED***index***REMOVED***of***REMOVED***the***REMOVED***first***REMOVED***item.
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***y
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***The***REMOVED***index***REMOVED***of***REMOVED***the***REMOVED***second***REMOVED***item.
***REMOVED****/
function***REMOVED***swap(ary,***REMOVED***x,***REMOVED***y)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***temp***REMOVED***=***REMOVED***ary[x];
***REMOVED******REMOVED***ary[x]***REMOVED***=***REMOVED***ary[y];
***REMOVED******REMOVED***ary[y]***REMOVED***=***REMOVED***temp;
}

/**
***REMOVED*******REMOVED***Returns***REMOVED***a***REMOVED***random***REMOVED***integer***REMOVED***within***REMOVED***the***REMOVED***range***REMOVED***`low***REMOVED***..***REMOVED***high`***REMOVED***inclusive.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***low
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***The***REMOVED***lower***REMOVED***bound***REMOVED***on***REMOVED***the***REMOVED***range.
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***high
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***The***REMOVED***upper***REMOVED***bound***REMOVED***on***REMOVED***the***REMOVED***range.
***REMOVED****/
function***REMOVED***randomIntInRange(low,***REMOVED***high)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***Math.round(low***REMOVED***+***REMOVED***(Math.random()***REMOVED*******REMOVED***(high***REMOVED***-***REMOVED***low)));
}

/**
***REMOVED*******REMOVED***The***REMOVED***Quick***REMOVED***Sort***REMOVED***algorithm.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Array}***REMOVED***ary
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***An***REMOVED***array***REMOVED***to***REMOVED***sort.
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***comparator
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Function***REMOVED***to***REMOVED***use***REMOVED***to***REMOVED***compare***REMOVED***two***REMOVED***items.
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***p
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Start***REMOVED***index***REMOVED***of***REMOVED***the***REMOVED***array
***REMOVED*******REMOVED***@param***REMOVED***{Number}***REMOVED***r
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***End***REMOVED***index***REMOVED***of***REMOVED***the***REMOVED***array
***REMOVED****/
function***REMOVED***doQuickSort(ary,***REMOVED***comparator,***REMOVED***p,***REMOVED***r)***REMOVED***{
***REMOVED******REMOVED***//***REMOVED***If***REMOVED***our***REMOVED***lower***REMOVED***bound***REMOVED***is***REMOVED***less***REMOVED***than***REMOVED***our***REMOVED***upper***REMOVED***bound,***REMOVED***we***REMOVED***(1)***REMOVED***partition***REMOVED***the
***REMOVED******REMOVED***//***REMOVED***array***REMOVED***into***REMOVED***two***REMOVED***pieces***REMOVED***and***REMOVED***(2)***REMOVED***recurse***REMOVED***on***REMOVED***each***REMOVED***half.***REMOVED***If***REMOVED***it***REMOVED***is***REMOVED***not,***REMOVED***this***REMOVED***is
***REMOVED******REMOVED***//***REMOVED***the***REMOVED***empty***REMOVED***array***REMOVED***and***REMOVED***our***REMOVED***base***REMOVED***case.

***REMOVED******REMOVED***if***REMOVED***(p***REMOVED***<***REMOVED***r)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***(1)***REMOVED***Partitioning.
***REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***The***REMOVED***partitioning***REMOVED***chooses***REMOVED***a***REMOVED***pivot***REMOVED***between***REMOVED***`p`***REMOVED***and***REMOVED***`r`***REMOVED***and***REMOVED***moves***REMOVED***all
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***elements***REMOVED***that***REMOVED***are***REMOVED***less***REMOVED***than***REMOVED***or***REMOVED***equal***REMOVED***to***REMOVED***the***REMOVED***pivot***REMOVED***to***REMOVED***the***REMOVED***before***REMOVED***it,***REMOVED***and
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***all***REMOVED***the***REMOVED***elements***REMOVED***that***REMOVED***are***REMOVED***greater***REMOVED***than***REMOVED***it***REMOVED***after***REMOVED***it.***REMOVED***The***REMOVED***effect***REMOVED***is***REMOVED***that
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***once***REMOVED***partition***REMOVED***is***REMOVED***done,***REMOVED***the***REMOVED***pivot***REMOVED***is***REMOVED***in***REMOVED***the***REMOVED***exact***REMOVED***place***REMOVED***it***REMOVED***will***REMOVED***be***REMOVED***when
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***the***REMOVED***array***REMOVED***is***REMOVED***put***REMOVED***in***REMOVED***sorted***REMOVED***order,***REMOVED***and***REMOVED***it***REMOVED***will***REMOVED***not***REMOVED***need***REMOVED***to***REMOVED***be***REMOVED***moved
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***again.***REMOVED***This***REMOVED***runs***REMOVED***in***REMOVED***O(n)***REMOVED***time.

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Always***REMOVED***choose***REMOVED***a***REMOVED***random***REMOVED***pivot***REMOVED***so***REMOVED***that***REMOVED***an***REMOVED***input***REMOVED***array***REMOVED***which***REMOVED***is***REMOVED***reverse
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***sorted***REMOVED***does***REMOVED***not***REMOVED***cause***REMOVED***O(n^2)***REMOVED***running***REMOVED***time.
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***pivotIndex***REMOVED***=***REMOVED***randomIntInRange(p,***REMOVED***r);
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***i***REMOVED***=***REMOVED***p***REMOVED***-***REMOVED***1;

***REMOVED******REMOVED******REMOVED******REMOVED***swap(ary,***REMOVED***pivotIndex,***REMOVED***r);
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***pivot***REMOVED***=***REMOVED***ary[r];

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Immediately***REMOVED***after***REMOVED***`j`***REMOVED***is***REMOVED***incremented***REMOVED***in***REMOVED***this***REMOVED***loop,***REMOVED***the***REMOVED***following***REMOVED***hold
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***true:
***REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED*******REMOVED***Every***REMOVED***element***REMOVED***in***REMOVED***`ary[p***REMOVED***..***REMOVED***i]`***REMOVED***is***REMOVED***less***REMOVED***than***REMOVED***or***REMOVED***equal***REMOVED***to***REMOVED***the***REMOVED***pivot.
***REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED*******REMOVED***Every***REMOVED***element***REMOVED***in***REMOVED***`ary[i+1***REMOVED***..***REMOVED***j-1]`***REMOVED***is***REMOVED***greater***REMOVED***than***REMOVED***the***REMOVED***pivot.
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(var***REMOVED***j***REMOVED***=***REMOVED***p;***REMOVED***j***REMOVED***<***REMOVED***r;***REMOVED***j++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(comparator(ary[j],***REMOVED***pivot,***REMOVED***false)***REMOVED***<=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i***REMOVED***+=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***swap(ary,***REMOVED***i,***REMOVED***j);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}

***REMOVED******REMOVED******REMOVED******REMOVED***swap(ary,***REMOVED***i***REMOVED***+***REMOVED***1,***REMOVED***j);
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***q***REMOVED***=***REMOVED***i***REMOVED***+***REMOVED***1;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***(2)***REMOVED***Recurse***REMOVED***on***REMOVED***each***REMOVED***half.

***REMOVED******REMOVED******REMOVED******REMOVED***doQuickSort(ary,***REMOVED***comparator,***REMOVED***p,***REMOVED***q***REMOVED***-***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED***doQuickSort(ary,***REMOVED***comparator,***REMOVED***q***REMOVED***+***REMOVED***1,***REMOVED***r);
***REMOVED******REMOVED***}
}

***REMOVED******REMOVED***return***REMOVED***doQuickSort;
}

function***REMOVED***cloneSort(comparator)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***template***REMOVED***=***REMOVED***SortTemplate.toString();
***REMOVED******REMOVED***let***REMOVED***templateFn***REMOVED***=***REMOVED***new***REMOVED***Function(`return***REMOVED***${template}`)();
***REMOVED******REMOVED***return***REMOVED***templateFn(comparator);
}

/**
***REMOVED*******REMOVED***Sort***REMOVED***the***REMOVED***given***REMOVED***array***REMOVED***in-place***REMOVED***with***REMOVED***the***REMOVED***given***REMOVED***comparator***REMOVED***function.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***{Array}***REMOVED***ary
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***An***REMOVED***array***REMOVED***to***REMOVED***sort.
***REMOVED*******REMOVED***@param***REMOVED***{function}***REMOVED***comparator
***REMOVED*******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Function***REMOVED***to***REMOVED***use***REMOVED***to***REMOVED***compare***REMOVED***two***REMOVED***items.
***REMOVED****/

let***REMOVED***sortCache***REMOVED***=***REMOVED***new***REMOVED***WeakMap();
exports.quickSort***REMOVED***=***REMOVED***function***REMOVED***(ary,***REMOVED***comparator,***REMOVED***start***REMOVED***=***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***doQuickSort***REMOVED***=***REMOVED***sortCache.get(comparator);
***REMOVED******REMOVED***if***REMOVED***(doQuickSort***REMOVED***===***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***doQuickSort***REMOVED***=***REMOVED***cloneSort(comparator);
***REMOVED******REMOVED******REMOVED******REMOVED***sortCache.set(comparator,***REMOVED***doQuickSort);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***doQuickSort(ary,***REMOVED***comparator,***REMOVED***start,***REMOVED***ary.length***REMOVED***-***REMOVED***1);
};
