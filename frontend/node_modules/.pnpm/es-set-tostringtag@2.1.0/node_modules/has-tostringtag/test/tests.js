'use***REMOVED***strict';

//***REMOVED***eslint-disable-next-line***REMOVED***consistent-return
module.exports***REMOVED***=***REMOVED***/*****REMOVED***@type***REMOVED***{(t:***REMOVED***import('tape').Test)***REMOVED***=>***REMOVED***void***REMOVED***|***REMOVED***false}***REMOVED****/***REMOVED***function***REMOVED***runSymbolTests(t)***REMOVED***{
	t.equal(typeof***REMOVED***Symbol,***REMOVED***'function',***REMOVED***'global***REMOVED***Symbol***REMOVED***is***REMOVED***a***REMOVED***function');
	t.ok(Symbol.toStringTag,***REMOVED***'Symbol.toStringTag***REMOVED***exists');

	if***REMOVED***(typeof***REMOVED***Symbol***REMOVED***!==***REMOVED***'function'***REMOVED***||***REMOVED***!Symbol.toStringTag)***REMOVED***{***REMOVED***return***REMOVED***false;***REMOVED***}

	/*****REMOVED***@type***REMOVED***{{***REMOVED***[Symbol.toStringTag]?:***REMOVED***'test'}}***REMOVED****/
	var***REMOVED***obj***REMOVED***=***REMOVED***{};
	obj[Symbol.toStringTag]***REMOVED***=***REMOVED***'test';

	t.equal(Object.prototype.toString.call(obj),***REMOVED***'[object***REMOVED***test]');
};
