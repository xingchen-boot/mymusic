import***REMOVED***SetCache***REMOVED***from***REMOVED***'./_SetCache.js';
import***REMOVED***arraySome***REMOVED***from***REMOVED***'./_arraySome.js';
import***REMOVED***cacheHas***REMOVED***from***REMOVED***'./_cacheHas.js';

/*****REMOVED***Used***REMOVED***to***REMOVED***compose***REMOVED***bitmasks***REMOVED***for***REMOVED***value***REMOVED***comparisons.***REMOVED****/
var***REMOVED***COMPARE_PARTIAL_FLAG***REMOVED***=***REMOVED***1,
***REMOVED******REMOVED******REMOVED******REMOVED***COMPARE_UNORDERED_FLAG***REMOVED***=***REMOVED***2;

/**
***REMOVED*******REMOVED***A***REMOVED***specialized***REMOVED***version***REMOVED***of***REMOVED***`baseIsEqualDeep`***REMOVED***for***REMOVED***arrays***REMOVED***with***REMOVED***support***REMOVED***for
***REMOVED*******REMOVED***partial***REMOVED***deep***REMOVED***comparisons.
***REMOVED****
***REMOVED*******REMOVED***@private
***REMOVED*******REMOVED***@param***REMOVED***{Array}***REMOVED***array***REMOVED***The***REMOVED***array***REMOVED***to***REMOVED***compare.
***REMOVED*******REMOVED***@param***REMOVED***{Array}***REMOVED***other***REMOVED***The***REMOVED***other***REMOVED***array***REMOVED***to***REMOVED***compare.
***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***bitmask***REMOVED***The***REMOVED***bitmask***REMOVED***flags.***REMOVED***See***REMOVED***`baseIsEqual`***REMOVED***for***REMOVED***more***REMOVED***details.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***customizer***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***customize***REMOVED***comparisons.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***equalFunc***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***determine***REMOVED***equivalents***REMOVED***of***REMOVED***values.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***stack***REMOVED***Tracks***REMOVED***traversed***REMOVED***`array`***REMOVED***and***REMOVED***`other`***REMOVED***objects.
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***Returns***REMOVED***`true`***REMOVED***if***REMOVED***the***REMOVED***arrays***REMOVED***are***REMOVED***equivalent,***REMOVED***else***REMOVED***`false`.
***REMOVED****/
function***REMOVED***equalArrays(array,***REMOVED***other,***REMOVED***bitmask,***REMOVED***customizer,***REMOVED***equalFunc,***REMOVED***stack)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***isPartial***REMOVED***=***REMOVED***bitmask***REMOVED***&***REMOVED***COMPARE_PARTIAL_FLAG,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***arrLength***REMOVED***=***REMOVED***array.length,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***othLength***REMOVED***=***REMOVED***other.length;

***REMOVED******REMOVED***if***REMOVED***(arrLength***REMOVED***!=***REMOVED***othLength***REMOVED***&&***REMOVED***!(isPartial***REMOVED***&&***REMOVED***othLength***REMOVED***>***REMOVED***arrLength))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***//***REMOVED***Check***REMOVED***that***REMOVED***cyclic***REMOVED***values***REMOVED***are***REMOVED***equal.
***REMOVED******REMOVED***var***REMOVED***arrStacked***REMOVED***=***REMOVED***stack.get(array);
***REMOVED******REMOVED***var***REMOVED***othStacked***REMOVED***=***REMOVED***stack.get(other);
***REMOVED******REMOVED***if***REMOVED***(arrStacked***REMOVED***&&***REMOVED***othStacked)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***arrStacked***REMOVED***==***REMOVED***other***REMOVED***&&***REMOVED***othStacked***REMOVED***==***REMOVED***array;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***-1,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***seen***REMOVED***=***REMOVED***(bitmask***REMOVED***&***REMOVED***COMPARE_UNORDERED_FLAG)***REMOVED***?***REMOVED***new***REMOVED***SetCache***REMOVED***:***REMOVED***undefined;

***REMOVED******REMOVED***stack.set(array,***REMOVED***other);
***REMOVED******REMOVED***stack.set(other,***REMOVED***array);

***REMOVED******REMOVED***//***REMOVED***Ignore***REMOVED***non-index***REMOVED***properties.
***REMOVED******REMOVED***while***REMOVED***(++index***REMOVED***<***REMOVED***arrLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***arrValue***REMOVED***=***REMOVED***array[index],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***othValue***REMOVED***=***REMOVED***other[index];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(customizer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***compared***REMOVED***=***REMOVED***isPartial
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***customizer(othValue,***REMOVED***arrValue,***REMOVED***index,***REMOVED***other,***REMOVED***array,***REMOVED***stack)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***customizer(arrValue,***REMOVED***othValue,***REMOVED***index,***REMOVED***array,***REMOVED***other,***REMOVED***stack);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(compared***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(compared)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Recursively***REMOVED***compare***REMOVED***arrays***REMOVED***(susceptible***REMOVED***to***REMOVED***call***REMOVED***stack***REMOVED***limits).
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(seen)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!arraySome(other,***REMOVED***function(othValue,***REMOVED***othIndex)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!cacheHas(seen,***REMOVED***othIndex)***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(arrValue***REMOVED***===***REMOVED***othValue***REMOVED***||***REMOVED***equalFunc(arrValue,***REMOVED***othValue,***REMOVED***bitmask,***REMOVED***customizer,***REMOVED***stack)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***seen.push(othIndex);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(!(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***arrValue***REMOVED***===***REMOVED***othValue***REMOVED***||
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***equalFunc(arrValue,***REMOVED***othValue,***REMOVED***bitmask,***REMOVED***customizer,***REMOVED***stack)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***stack['delete'](array);
***REMOVED******REMOVED***stack['delete'](other);
***REMOVED******REMOVED***return***REMOVED***result;
}

export***REMOVED***default***REMOVED***equalArrays;
