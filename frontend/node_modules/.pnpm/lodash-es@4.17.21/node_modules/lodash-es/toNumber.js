import***REMOVED***baseTrim***REMOVED***from***REMOVED***'./_baseTrim.js';
import***REMOVED***isObject***REMOVED***from***REMOVED***'./isObject.js';
import***REMOVED***isSymbol***REMOVED***from***REMOVED***'./isSymbol.js';

/*****REMOVED***Used***REMOVED***as***REMOVED***references***REMOVED***for***REMOVED***various***REMOVED***`Number`***REMOVED***constants.***REMOVED****/
var***REMOVED***NAN***REMOVED***=***REMOVED***0***REMOVED***/***REMOVED***0;

/*****REMOVED***Used***REMOVED***to***REMOVED***detect***REMOVED***bad***REMOVED***signed***REMOVED***hexadecimal***REMOVED***string***REMOVED***values.***REMOVED****/
var***REMOVED***reIsBadHex***REMOVED***=***REMOVED***/^[-+]0x[0-9a-f]+$/i;

/*****REMOVED***Used***REMOVED***to***REMOVED***detect***REMOVED***binary***REMOVED***string***REMOVED***values.***REMOVED****/
var***REMOVED***reIsBinary***REMOVED***=***REMOVED***/^0b[01]+$/i;

/*****REMOVED***Used***REMOVED***to***REMOVED***detect***REMOVED***octal***REMOVED***string***REMOVED***values.***REMOVED****/
var***REMOVED***reIsOctal***REMOVED***=***REMOVED***/^0o[0-7]+$/i;

/*****REMOVED***Built-in***REMOVED***method***REMOVED***references***REMOVED***without***REMOVED***a***REMOVED***dependency***REMOVED***on***REMOVED***`root`.***REMOVED****/
var***REMOVED***freeParseInt***REMOVED***=***REMOVED***parseInt;

/**
***REMOVED*******REMOVED***Converts***REMOVED***`value`***REMOVED***to***REMOVED***a***REMOVED***number.
***REMOVED****
***REMOVED*******REMOVED***@static
***REMOVED*******REMOVED***@memberOf***REMOVED***_
***REMOVED*******REMOVED***@since***REMOVED***4.0.0
***REMOVED*******REMOVED***@category***REMOVED***Lang
***REMOVED*******REMOVED***@param***REMOVED***{*}***REMOVED***value***REMOVED***The***REMOVED***value***REMOVED***to***REMOVED***process.
***REMOVED*******REMOVED***@returns***REMOVED***{number}***REMOVED***Returns***REMOVED***the***REMOVED***number.
***REMOVED*******REMOVED***@example
***REMOVED****
***REMOVED*******REMOVED***_.toNumber(3.2);
***REMOVED*******REMOVED***//***REMOVED***=>***REMOVED***3.2
***REMOVED****
***REMOVED*******REMOVED***_.toNumber(Number.MIN_VALUE);
***REMOVED*******REMOVED***//***REMOVED***=>***REMOVED***5e-324
***REMOVED****
***REMOVED*******REMOVED***_.toNumber(Infinity);
***REMOVED*******REMOVED***//***REMOVED***=>***REMOVED***Infinity
***REMOVED****
***REMOVED*******REMOVED***_.toNumber('3.2');
***REMOVED*******REMOVED***//***REMOVED***=>***REMOVED***3.2
***REMOVED****/
function***REMOVED***toNumber(value)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***==***REMOVED***'number')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isSymbol(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***NAN;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(isObject(value))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***other***REMOVED***=***REMOVED***typeof***REMOVED***value.valueOf***REMOVED***==***REMOVED***'function'***REMOVED***?***REMOVED***value.valueOf()***REMOVED***:***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***isObject(other)***REMOVED***?***REMOVED***(other***REMOVED***+***REMOVED***'')***REMOVED***:***REMOVED***other;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***!=***REMOVED***'string')***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value***REMOVED***===***REMOVED***0***REMOVED***?***REMOVED***value***REMOVED***:***REMOVED***+value;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***value***REMOVED***=***REMOVED***baseTrim(value);
***REMOVED******REMOVED***var***REMOVED***isBinary***REMOVED***=***REMOVED***reIsBinary.test(value);
***REMOVED******REMOVED***return***REMOVED***(isBinary***REMOVED***||***REMOVED***reIsOctal.test(value))
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***freeParseInt(value.slice(2),***REMOVED***isBinary***REMOVED***?***REMOVED***2***REMOVED***:***REMOVED***8)
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***(reIsBadHex.test(value)***REMOVED***?***REMOVED***NAN***REMOVED***:***REMOVED***+value);
}

export***REMOVED***default***REMOVED***toNumber;
