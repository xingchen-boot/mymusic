import***REMOVED***root***REMOVED***from***REMOVED***'./_root.js';
import***REMOVED***toInteger***REMOVED***from***REMOVED***'./toInteger.js';
import***REMOVED***toNumber***REMOVED***from***REMOVED***'./toNumber.js';
import***REMOVED***toString***REMOVED***from***REMOVED***'./toString.js';

/****REMOVED***Built-in***REMOVED***method***REMOVED***references***REMOVED***for***REMOVED***those***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***name***REMOVED***as***REMOVED***other***REMOVED***`lodash`***REMOVED***methods.***REMOVED****/
var***REMOVED***nativeIsFinite***REMOVED***=***REMOVED***root.isFinite,
***REMOVED******REMOVED******REMOVED******REMOVED***nativeMin***REMOVED***=***REMOVED***Math.min;

/**
***REMOVED*******REMOVED***Creates***REMOVED***a***REMOVED***function***REMOVED***like***REMOVED***`_.round`.
***REMOVED****
***REMOVED*******REMOVED***@private
***REMOVED*******REMOVED***@param***REMOVED***{string}***REMOVED***methodName***REMOVED***The***REMOVED***name***REMOVED***of***REMOVED***the***REMOVED***`Math`***REMOVED***method***REMOVED***to***REMOVED***use***REMOVED***when***REMOVED***rounding.
***REMOVED*******REMOVED***@returns***REMOVED***{Function}***REMOVED***Returns***REMOVED***the***REMOVED***new***REMOVED***round***REMOVED***function.
***REMOVED****/
function***REMOVED***createRound(methodName)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***func***REMOVED***=***REMOVED***Math[methodName];
***REMOVED******REMOVED***return***REMOVED***function(number,***REMOVED***precision)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***number***REMOVED***=***REMOVED***toNumber(number);
***REMOVED******REMOVED******REMOVED******REMOVED***precision***REMOVED***=***REMOVED***precision***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***0***REMOVED***:***REMOVED***nativeMin(toInteger(precision),***REMOVED***292);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(precision***REMOVED***&&***REMOVED***nativeIsFinite(number))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Shift***REMOVED***with***REMOVED***exponential***REMOVED***notation***REMOVED***to***REMOVED***avoid***REMOVED***floating-point***REMOVED***issues.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***See***REMOVED***[MDN](https://mdn.io/round#Examples)***REMOVED***for***REMOVED***more***REMOVED***details.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***pair***REMOVED***=***REMOVED***(toString(number)***REMOVED***+***REMOVED***'e').split('e'),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***=***REMOVED***func(pair[0]***REMOVED***+***REMOVED***'e'***REMOVED***+***REMOVED***(+pair[1]***REMOVED***+***REMOVED***precision));

***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pair***REMOVED***=***REMOVED***(toString(value)***REMOVED***+***REMOVED***'e').split('e');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***+(pair[0]***REMOVED***+***REMOVED***'e'***REMOVED***+***REMOVED***(+pair[1]***REMOVED***-***REMOVED***precision));
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***func(number);
***REMOVED******REMOVED***};
}

export***REMOVED***default***REMOVED***createRound;
