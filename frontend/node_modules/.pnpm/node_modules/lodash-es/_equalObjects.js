import***REMOVED***getAllKeys***REMOVED***from***REMOVED***'./_getAllKeys.js';

/*****REMOVED***Used***REMOVED***to***REMOVED***compose***REMOVED***bitmasks***REMOVED***for***REMOVED***value***REMOVED***comparisons.***REMOVED****/
var***REMOVED***COMPARE_PARTIAL_FLAG***REMOVED***=***REMOVED***1;

/*****REMOVED***Used***REMOVED***for***REMOVED***built-in***REMOVED***method***REMOVED***references.***REMOVED****/
var***REMOVED***objectProto***REMOVED***=***REMOVED***Object.prototype;

/*****REMOVED***Used***REMOVED***to***REMOVED***check***REMOVED***objects***REMOVED***for***REMOVED***own***REMOVED***properties.***REMOVED****/
var***REMOVED***hasOwnProperty***REMOVED***=***REMOVED***objectProto.hasOwnProperty;

/**
***REMOVED*******REMOVED***A***REMOVED***specialized***REMOVED***version***REMOVED***of***REMOVED***`baseIsEqualDeep`***REMOVED***for***REMOVED***objects***REMOVED***with***REMOVED***support***REMOVED***for
***REMOVED*******REMOVED***partial***REMOVED***deep***REMOVED***comparisons.
***REMOVED****
***REMOVED*******REMOVED***@private
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***object***REMOVED***The***REMOVED***object***REMOVED***to***REMOVED***compare.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***other***REMOVED***The***REMOVED***other***REMOVED***object***REMOVED***to***REMOVED***compare.
***REMOVED*******REMOVED***@param***REMOVED***{number}***REMOVED***bitmask***REMOVED***The***REMOVED***bitmask***REMOVED***flags.***REMOVED***See***REMOVED***`baseIsEqual`***REMOVED***for***REMOVED***more***REMOVED***details.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***customizer***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***customize***REMOVED***comparisons.
***REMOVED*******REMOVED***@param***REMOVED***{Function}***REMOVED***equalFunc***REMOVED***The***REMOVED***function***REMOVED***to***REMOVED***determine***REMOVED***equivalents***REMOVED***of***REMOVED***values.
***REMOVED*******REMOVED***@param***REMOVED***{Object}***REMOVED***stack***REMOVED***Tracks***REMOVED***traversed***REMOVED***`object`***REMOVED***and***REMOVED***`other`***REMOVED***objects.
***REMOVED*******REMOVED***@returns***REMOVED***{boolean}***REMOVED***Returns***REMOVED***`true`***REMOVED***if***REMOVED***the***REMOVED***objects***REMOVED***are***REMOVED***equivalent,***REMOVED***else***REMOVED***`false`.
***REMOVED****/
function***REMOVED***equalObjects(object,***REMOVED***other,***REMOVED***bitmask,***REMOVED***customizer,***REMOVED***equalFunc,***REMOVED***stack)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***isPartial***REMOVED***=***REMOVED***bitmask***REMOVED***&***REMOVED***COMPARE_PARTIAL_FLAG,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***objProps***REMOVED***=***REMOVED***getAllKeys(object),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***objLength***REMOVED***=***REMOVED***objProps.length,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***othProps***REMOVED***=***REMOVED***getAllKeys(other),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***othLength***REMOVED***=***REMOVED***othProps.length;

***REMOVED******REMOVED***if***REMOVED***(objLength***REMOVED***!=***REMOVED***othLength***REMOVED***&&***REMOVED***!isPartial)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***index***REMOVED***=***REMOVED***objLength;
***REMOVED******REMOVED***while***REMOVED***(index--)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***key***REMOVED***=***REMOVED***objProps[index];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!(isPartial***REMOVED***?***REMOVED***key***REMOVED***in***REMOVED***other***REMOVED***:***REMOVED***hasOwnProperty.call(other,***REMOVED***key)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***//***REMOVED***Check***REMOVED***that***REMOVED***cyclic***REMOVED***values***REMOVED***are***REMOVED***equal.
***REMOVED******REMOVED***var***REMOVED***objStacked***REMOVED***=***REMOVED***stack.get(object);
***REMOVED******REMOVED***var***REMOVED***othStacked***REMOVED***=***REMOVED***stack.get(other);
***REMOVED******REMOVED***if***REMOVED***(objStacked***REMOVED***&&***REMOVED***othStacked)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***objStacked***REMOVED***==***REMOVED***other***REMOVED***&&***REMOVED***othStacked***REMOVED***==***REMOVED***object;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***stack.set(object,***REMOVED***other);
***REMOVED******REMOVED***stack.set(other,***REMOVED***object);

***REMOVED******REMOVED***var***REMOVED***skipCtor***REMOVED***=***REMOVED***isPartial;
***REMOVED******REMOVED***while***REMOVED***(++index***REMOVED***<***REMOVED***objLength)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***key***REMOVED***=***REMOVED***objProps[index];
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***objValue***REMOVED***=***REMOVED***object[key],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***othValue***REMOVED***=***REMOVED***other[key];

***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(customizer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***compared***REMOVED***=***REMOVED***isPartial
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***customizer(othValue,***REMOVED***objValue,***REMOVED***key,***REMOVED***other,***REMOVED***object,***REMOVED***stack)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***customizer(objValue,***REMOVED***othValue,***REMOVED***key,***REMOVED***object,***REMOVED***other,***REMOVED***stack);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Recursively***REMOVED***compare***REMOVED***objects***REMOVED***(susceptible***REMOVED***to***REMOVED***call***REMOVED***stack***REMOVED***limits).
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!(compared***REMOVED***===***REMOVED***undefined
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***(objValue***REMOVED***===***REMOVED***othValue***REMOVED***||***REMOVED***equalFunc(objValue,***REMOVED***othValue,***REMOVED***bitmask,***REMOVED***customizer,***REMOVED***stack))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***compared
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***skipCtor***REMOVED***||***REMOVED***(skipCtor***REMOVED***=***REMOVED***key***REMOVED***==***REMOVED***'constructor');
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(result***REMOVED***&&***REMOVED***!skipCtor)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***objCtor***REMOVED***=***REMOVED***object.constructor,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***othCtor***REMOVED***=***REMOVED***other.constructor;

***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Non***REMOVED***`Object`***REMOVED***object***REMOVED***instances***REMOVED***with***REMOVED***different***REMOVED***constructors***REMOVED***are***REMOVED***not***REMOVED***equal.
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(objCtor***REMOVED***!=***REMOVED***othCtor***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***('constructor'***REMOVED***in***REMOVED***object***REMOVED***&&***REMOVED***'constructor'***REMOVED***in***REMOVED***other)***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***!(typeof***REMOVED***objCtor***REMOVED***==***REMOVED***'function'***REMOVED***&&***REMOVED***objCtor***REMOVED***instanceof***REMOVED***objCtor***REMOVED***&&
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typeof***REMOVED***othCtor***REMOVED***==***REMOVED***'function'***REMOVED***&&***REMOVED***othCtor***REMOVED***instanceof***REMOVED***othCtor))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***stack['delete'](object);
***REMOVED******REMOVED***stack['delete'](other);
***REMOVED******REMOVED***return***REMOVED***result;
}

export***REMOVED***default***REMOVED***equalObjects;
