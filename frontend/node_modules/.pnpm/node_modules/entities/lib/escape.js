"use***REMOVED***strict";
Object.defineProperty(exports,***REMOVED***"__esModule",***REMOVED***{***REMOVED***value:***REMOVED***true***REMOVED***});
exports.escapeText***REMOVED***=***REMOVED***exports.escapeAttribute***REMOVED***=***REMOVED***exports.escapeUTF8***REMOVED***=***REMOVED***exports.escape***REMOVED***=***REMOVED***exports.encodeXML***REMOVED***=***REMOVED***exports.getCodePoint***REMOVED***=***REMOVED***exports.xmlReplacer***REMOVED***=***REMOVED***void***REMOVED***0;
exports.xmlReplacer***REMOVED***=***REMOVED***/["&'<>$\x80-\uFFFF]/g;
var***REMOVED***xmlCodeMap***REMOVED***=***REMOVED***new***REMOVED***Map([
***REMOVED******REMOVED******REMOVED******REMOVED***[34,***REMOVED***"&quot;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[38,***REMOVED***"&amp;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[39,***REMOVED***"&apos;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[60,***REMOVED***"&lt;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[62,***REMOVED***"&gt;"],
]);
//***REMOVED***For***REMOVED***compatibility***REMOVED***with***REMOVED***node***REMOVED***<***REMOVED***4,***REMOVED***we***REMOVED***wrap***REMOVED***`codePointAt`
exports.getCodePoint***REMOVED***=***REMOVED***
//***REMOVED***eslint-disable-next-line***REMOVED***@typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt***REMOVED***!=***REMOVED***null
***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***function***REMOVED***(str,***REMOVED***index)***REMOVED***{***REMOVED***return***REMOVED***str.codePointAt(index);***REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***//***REMOVED***http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***(c,***REMOVED***index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(c.charCodeAt(index)***REMOVED***&***REMOVED***0xfc00)***REMOVED***===***REMOVED***0xd800
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***(c.charCodeAt(index)***REMOVED***-***REMOVED***0xd800)***REMOVED*******REMOVED***0x400***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***c.charCodeAt(index***REMOVED***+***REMOVED***1)***REMOVED***-
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***0xdc00***REMOVED***+
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***0x10000
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***c.charCodeAt(index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
/**
***REMOVED*******REMOVED***Encodes***REMOVED***all***REMOVED***non-ASCII***REMOVED***characters,***REMOVED***as***REMOVED***well***REMOVED***as***REMOVED***characters***REMOVED***not***REMOVED***valid***REMOVED***in***REMOVED***XML
***REMOVED*******REMOVED***documents***REMOVED***using***REMOVED***XML***REMOVED***entities.
***REMOVED****
***REMOVED*******REMOVED***If***REMOVED***a***REMOVED***character***REMOVED***has***REMOVED***no***REMOVED***equivalent***REMOVED***entity,***REMOVED***a
***REMOVED*******REMOVED***numeric***REMOVED***hexadecimal***REMOVED***reference***REMOVED***(eg.***REMOVED***`&#xfc;`)***REMOVED***will***REMOVED***be***REMOVED***used.
***REMOVED****/
function***REMOVED***encodeXML(str)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***ret***REMOVED***=***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***lastIdx***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***match;
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***((match***REMOVED***=***REMOVED***exports.xmlReplacer.exec(str))***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***i***REMOVED***=***REMOVED***match.index;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***char***REMOVED***=***REMOVED***str.charCodeAt(i);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***next***REMOVED***=***REMOVED***xmlCodeMap.get(char);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(next***REMOVED***!==***REMOVED***undefined)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ret***REMOVED***+=***REMOVED***str.substring(lastIdx,***REMOVED***i)***REMOVED***+***REMOVED***next;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastIdx***REMOVED***=***REMOVED***i***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ret***REMOVED***+=***REMOVED***"".concat(str.substring(lastIdx,***REMOVED***i),***REMOVED***"&#x").concat((0,***REMOVED***exports.getCodePoint)(str,***REMOVED***i).toString(16),***REMOVED***";");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Increase***REMOVED***by***REMOVED***1***REMOVED***if***REMOVED***we***REMOVED***have***REMOVED***a***REMOVED***surrogate***REMOVED***pair
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastIdx***REMOVED***=***REMOVED***exports.xmlReplacer.lastIndex***REMOVED***+=***REMOVED***Number((char***REMOVED***&***REMOVED***0xfc00)***REMOVED***===***REMOVED***0xd800);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***ret***REMOVED***+***REMOVED***str.substr(lastIdx);
}
exports.encodeXML***REMOVED***=***REMOVED***encodeXML;
/**
***REMOVED*******REMOVED***Encodes***REMOVED***all***REMOVED***non-ASCII***REMOVED***characters,***REMOVED***as***REMOVED***well***REMOVED***as***REMOVED***characters***REMOVED***not***REMOVED***valid***REMOVED***in***REMOVED***XML
***REMOVED*******REMOVED***documents***REMOVED***using***REMOVED***numeric***REMOVED***hexadecimal***REMOVED***reference***REMOVED***(eg.***REMOVED***`&#xfc;`).
***REMOVED****
***REMOVED*******REMOVED***Have***REMOVED***a***REMOVED***look***REMOVED***at***REMOVED***`escapeUTF8`***REMOVED***if***REMOVED***you***REMOVED***want***REMOVED***a***REMOVED***more***REMOVED***concise***REMOVED***output***REMOVED***at***REMOVED***the***REMOVED***expense
***REMOVED*******REMOVED***of***REMOVED***reduced***REMOVED***transportability.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***data***REMOVED***String***REMOVED***to***REMOVED***escape.
***REMOVED****/
exports.escape***REMOVED***=***REMOVED***encodeXML;
/**
***REMOVED*******REMOVED***Creates***REMOVED***a***REMOVED***function***REMOVED***that***REMOVED***escapes***REMOVED***all***REMOVED***characters***REMOVED***matched***REMOVED***by***REMOVED***the***REMOVED***given***REMOVED***regular
***REMOVED*******REMOVED***expression***REMOVED***using***REMOVED***the***REMOVED***given***REMOVED***map***REMOVED***of***REMOVED***characters***REMOVED***to***REMOVED***escape***REMOVED***to***REMOVED***their***REMOVED***entities.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***regex***REMOVED***Regular***REMOVED***expression***REMOVED***to***REMOVED***match***REMOVED***characters***REMOVED***to***REMOVED***escape.
***REMOVED*******REMOVED***@param***REMOVED***map***REMOVED***Map***REMOVED***of***REMOVED***characters***REMOVED***to***REMOVED***escape***REMOVED***to***REMOVED***their***REMOVED***entities.
***REMOVED****
***REMOVED*******REMOVED***@returns***REMOVED***Function***REMOVED***that***REMOVED***escapes***REMOVED***all***REMOVED***characters***REMOVED***matched***REMOVED***by***REMOVED***the***REMOVED***given***REMOVED***regular
***REMOVED*******REMOVED***expression***REMOVED***using***REMOVED***the***REMOVED***given***REMOVED***map***REMOVED***of***REMOVED***characters***REMOVED***to***REMOVED***escape***REMOVED***to***REMOVED***their***REMOVED***entities.
***REMOVED****/
function***REMOVED***getEscaper(regex,***REMOVED***map)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***function***REMOVED***escape(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***match;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***lastIdx***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***result***REMOVED***=***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***((match***REMOVED***=***REMOVED***regex.exec(data)))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(lastIdx***REMOVED***!==***REMOVED***match.index)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***+=***REMOVED***data.substring(lastIdx,***REMOVED***match.index);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***We***REMOVED***know***REMOVED***that***REMOVED***this***REMOVED***character***REMOVED***will***REMOVED***be***REMOVED***in***REMOVED***the***REMOVED***map.
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***+=***REMOVED***map.get(match[0].charCodeAt(0));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Every***REMOVED***match***REMOVED***will***REMOVED***be***REMOVED***of***REMOVED***length***REMOVED***1
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lastIdx***REMOVED***=***REMOVED***match.index***REMOVED***+***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result***REMOVED***+***REMOVED***data.substring(lastIdx);
***REMOVED******REMOVED******REMOVED******REMOVED***};
}
/**
***REMOVED*******REMOVED***Encodes***REMOVED***all***REMOVED***characters***REMOVED***not***REMOVED***valid***REMOVED***in***REMOVED***XML***REMOVED***documents***REMOVED***using***REMOVED***XML***REMOVED***entities.
***REMOVED****
***REMOVED*******REMOVED***Note***REMOVED***that***REMOVED***the***REMOVED***output***REMOVED***will***REMOVED***be***REMOVED***character-set***REMOVED***dependent.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***data***REMOVED***String***REMOVED***to***REMOVED***escape.
***REMOVED****/
exports.escapeUTF8***REMOVED***=***REMOVED***getEscaper(/[&<>'"]/g,***REMOVED***xmlCodeMap);
/**
***REMOVED*******REMOVED***Encodes***REMOVED***all***REMOVED***characters***REMOVED***that***REMOVED***have***REMOVED***to***REMOVED***be***REMOVED***escaped***REMOVED***in***REMOVED***HTML***REMOVED***attributes,
***REMOVED*******REMOVED***following***REMOVED***{@link***REMOVED***https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***data***REMOVED***String***REMOVED***to***REMOVED***escape.
***REMOVED****/
exports.escapeAttribute***REMOVED***=***REMOVED***getEscaper(/["&\u00A0]/g,***REMOVED***new***REMOVED***Map([
***REMOVED******REMOVED******REMOVED******REMOVED***[34,***REMOVED***"&quot;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[38,***REMOVED***"&amp;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[160,***REMOVED***"&nbsp;"],
]));
/**
***REMOVED*******REMOVED***Encodes***REMOVED***all***REMOVED***characters***REMOVED***that***REMOVED***have***REMOVED***to***REMOVED***be***REMOVED***escaped***REMOVED***in***REMOVED***HTML***REMOVED***text,
***REMOVED*******REMOVED***following***REMOVED***{@link***REMOVED***https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
***REMOVED****
***REMOVED*******REMOVED***@param***REMOVED***data***REMOVED***String***REMOVED***to***REMOVED***escape.
***REMOVED****/
exports.escapeText***REMOVED***=***REMOVED***getEscaper(/[&<>\u00A0]/g,***REMOVED***new***REMOVED***Map([
***REMOVED******REMOVED******REMOVED******REMOVED***[38,***REMOVED***"&amp;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[60,***REMOVED***"&lt;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[62,***REMOVED***"&gt;"],
***REMOVED******REMOVED******REMOVED******REMOVED***[160,***REMOVED***"&nbsp;"],
]));
//#***REMOVED***sourceMappingURL=escape.js.map