'use***REMOVED***strict'

let***REMOVED***Container***REMOVED***=***REMOVED***require('./container')
let***REMOVED***list***REMOVED***=***REMOVED***require('./list')

class***REMOVED***Rule***REMOVED***extends***REMOVED***Container***REMOVED***{
***REMOVED******REMOVED***get***REMOVED***selectors()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***list.comma(this.selector)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***set***REMOVED***selectors(values)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***match***REMOVED***=***REMOVED***this.selector***REMOVED***?***REMOVED***this.selector.match(/,\s*/)***REMOVED***:***REMOVED***null
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sep***REMOVED***=***REMOVED***match***REMOVED***?***REMOVED***match[0]***REMOVED***:***REMOVED***','***REMOVED***+***REMOVED***this.raw('between',***REMOVED***'beforeOpen')
***REMOVED******REMOVED******REMOVED******REMOVED***this.selector***REMOVED***=***REMOVED***values.join(sep)
***REMOVED******REMOVED***}

***REMOVED******REMOVED***constructor(defaults)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***super(defaults)
***REMOVED******REMOVED******REMOVED******REMOVED***this.type***REMOVED***=***REMOVED***'rule'
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!this.nodes)***REMOVED***this.nodes***REMOVED***=***REMOVED***[]
***REMOVED******REMOVED***}
}

module.exports***REMOVED***=***REMOVED***Rule
Rule.default***REMOVED***=***REMOVED***Rule

Container.registerRule(Rule)
