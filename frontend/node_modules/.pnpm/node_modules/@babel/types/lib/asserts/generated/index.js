"use***REMOVED***strict";

Object.defineProperty(exports,***REMOVED***"__esModule",***REMOVED***{
***REMOVED******REMOVED***value:***REMOVED***true
});
exports.assertAccessor***REMOVED***=***REMOVED***assertAccessor;
exports.assertAnyTypeAnnotation***REMOVED***=***REMOVED***assertAnyTypeAnnotation;
exports.assertArgumentPlaceholder***REMOVED***=***REMOVED***assertArgumentPlaceholder;
exports.assertArrayExpression***REMOVED***=***REMOVED***assertArrayExpression;
exports.assertArrayPattern***REMOVED***=***REMOVED***assertArrayPattern;
exports.assertArrayTypeAnnotation***REMOVED***=***REMOVED***assertArrayTypeAnnotation;
exports.assertArrowFunctionExpression***REMOVED***=***REMOVED***assertArrowFunctionExpression;
exports.assertAssignmentExpression***REMOVED***=***REMOVED***assertAssignmentExpression;
exports.assertAssignmentPattern***REMOVED***=***REMOVED***assertAssignmentPattern;
exports.assertAwaitExpression***REMOVED***=***REMOVED***assertAwaitExpression;
exports.assertBigIntLiteral***REMOVED***=***REMOVED***assertBigIntLiteral;
exports.assertBinary***REMOVED***=***REMOVED***assertBinary;
exports.assertBinaryExpression***REMOVED***=***REMOVED***assertBinaryExpression;
exports.assertBindExpression***REMOVED***=***REMOVED***assertBindExpression;
exports.assertBlock***REMOVED***=***REMOVED***assertBlock;
exports.assertBlockParent***REMOVED***=***REMOVED***assertBlockParent;
exports.assertBlockStatement***REMOVED***=***REMOVED***assertBlockStatement;
exports.assertBooleanLiteral***REMOVED***=***REMOVED***assertBooleanLiteral;
exports.assertBooleanLiteralTypeAnnotation***REMOVED***=***REMOVED***assertBooleanLiteralTypeAnnotation;
exports.assertBooleanTypeAnnotation***REMOVED***=***REMOVED***assertBooleanTypeAnnotation;
exports.assertBreakStatement***REMOVED***=***REMOVED***assertBreakStatement;
exports.assertCallExpression***REMOVED***=***REMOVED***assertCallExpression;
exports.assertCatchClause***REMOVED***=***REMOVED***assertCatchClause;
exports.assertClass***REMOVED***=***REMOVED***assertClass;
exports.assertClassAccessorProperty***REMOVED***=***REMOVED***assertClassAccessorProperty;
exports.assertClassBody***REMOVED***=***REMOVED***assertClassBody;
exports.assertClassDeclaration***REMOVED***=***REMOVED***assertClassDeclaration;
exports.assertClassExpression***REMOVED***=***REMOVED***assertClassExpression;
exports.assertClassImplements***REMOVED***=***REMOVED***assertClassImplements;
exports.assertClassMethod***REMOVED***=***REMOVED***assertClassMethod;
exports.assertClassPrivateMethod***REMOVED***=***REMOVED***assertClassPrivateMethod;
exports.assertClassPrivateProperty***REMOVED***=***REMOVED***assertClassPrivateProperty;
exports.assertClassProperty***REMOVED***=***REMOVED***assertClassProperty;
exports.assertCompletionStatement***REMOVED***=***REMOVED***assertCompletionStatement;
exports.assertConditional***REMOVED***=***REMOVED***assertConditional;
exports.assertConditionalExpression***REMOVED***=***REMOVED***assertConditionalExpression;
exports.assertContinueStatement***REMOVED***=***REMOVED***assertContinueStatement;
exports.assertDebuggerStatement***REMOVED***=***REMOVED***assertDebuggerStatement;
exports.assertDecimalLiteral***REMOVED***=***REMOVED***assertDecimalLiteral;
exports.assertDeclaration***REMOVED***=***REMOVED***assertDeclaration;
exports.assertDeclareClass***REMOVED***=***REMOVED***assertDeclareClass;
exports.assertDeclareExportAllDeclaration***REMOVED***=***REMOVED***assertDeclareExportAllDeclaration;
exports.assertDeclareExportDeclaration***REMOVED***=***REMOVED***assertDeclareExportDeclaration;
exports.assertDeclareFunction***REMOVED***=***REMOVED***assertDeclareFunction;
exports.assertDeclareInterface***REMOVED***=***REMOVED***assertDeclareInterface;
exports.assertDeclareModule***REMOVED***=***REMOVED***assertDeclareModule;
exports.assertDeclareModuleExports***REMOVED***=***REMOVED***assertDeclareModuleExports;
exports.assertDeclareOpaqueType***REMOVED***=***REMOVED***assertDeclareOpaqueType;
exports.assertDeclareTypeAlias***REMOVED***=***REMOVED***assertDeclareTypeAlias;
exports.assertDeclareVariable***REMOVED***=***REMOVED***assertDeclareVariable;
exports.assertDeclaredPredicate***REMOVED***=***REMOVED***assertDeclaredPredicate;
exports.assertDecorator***REMOVED***=***REMOVED***assertDecorator;
exports.assertDirective***REMOVED***=***REMOVED***assertDirective;
exports.assertDirectiveLiteral***REMOVED***=***REMOVED***assertDirectiveLiteral;
exports.assertDoExpression***REMOVED***=***REMOVED***assertDoExpression;
exports.assertDoWhileStatement***REMOVED***=***REMOVED***assertDoWhileStatement;
exports.assertEmptyStatement***REMOVED***=***REMOVED***assertEmptyStatement;
exports.assertEmptyTypeAnnotation***REMOVED***=***REMOVED***assertEmptyTypeAnnotation;
exports.assertEnumBody***REMOVED***=***REMOVED***assertEnumBody;
exports.assertEnumBooleanBody***REMOVED***=***REMOVED***assertEnumBooleanBody;
exports.assertEnumBooleanMember***REMOVED***=***REMOVED***assertEnumBooleanMember;
exports.assertEnumDeclaration***REMOVED***=***REMOVED***assertEnumDeclaration;
exports.assertEnumDefaultedMember***REMOVED***=***REMOVED***assertEnumDefaultedMember;
exports.assertEnumMember***REMOVED***=***REMOVED***assertEnumMember;
exports.assertEnumNumberBody***REMOVED***=***REMOVED***assertEnumNumberBody;
exports.assertEnumNumberMember***REMOVED***=***REMOVED***assertEnumNumberMember;
exports.assertEnumStringBody***REMOVED***=***REMOVED***assertEnumStringBody;
exports.assertEnumStringMember***REMOVED***=***REMOVED***assertEnumStringMember;
exports.assertEnumSymbolBody***REMOVED***=***REMOVED***assertEnumSymbolBody;
exports.assertExistsTypeAnnotation***REMOVED***=***REMOVED***assertExistsTypeAnnotation;
exports.assertExportAllDeclaration***REMOVED***=***REMOVED***assertExportAllDeclaration;
exports.assertExportDeclaration***REMOVED***=***REMOVED***assertExportDeclaration;
exports.assertExportDefaultDeclaration***REMOVED***=***REMOVED***assertExportDefaultDeclaration;
exports.assertExportDefaultSpecifier***REMOVED***=***REMOVED***assertExportDefaultSpecifier;
exports.assertExportNamedDeclaration***REMOVED***=***REMOVED***assertExportNamedDeclaration;
exports.assertExportNamespaceSpecifier***REMOVED***=***REMOVED***assertExportNamespaceSpecifier;
exports.assertExportSpecifier***REMOVED***=***REMOVED***assertExportSpecifier;
exports.assertExpression***REMOVED***=***REMOVED***assertExpression;
exports.assertExpressionStatement***REMOVED***=***REMOVED***assertExpressionStatement;
exports.assertExpressionWrapper***REMOVED***=***REMOVED***assertExpressionWrapper;
exports.assertFile***REMOVED***=***REMOVED***assertFile;
exports.assertFlow***REMOVED***=***REMOVED***assertFlow;
exports.assertFlowBaseAnnotation***REMOVED***=***REMOVED***assertFlowBaseAnnotation;
exports.assertFlowDeclaration***REMOVED***=***REMOVED***assertFlowDeclaration;
exports.assertFlowPredicate***REMOVED***=***REMOVED***assertFlowPredicate;
exports.assertFlowType***REMOVED***=***REMOVED***assertFlowType;
exports.assertFor***REMOVED***=***REMOVED***assertFor;
exports.assertForInStatement***REMOVED***=***REMOVED***assertForInStatement;
exports.assertForOfStatement***REMOVED***=***REMOVED***assertForOfStatement;
exports.assertForStatement***REMOVED***=***REMOVED***assertForStatement;
exports.assertForXStatement***REMOVED***=***REMOVED***assertForXStatement;
exports.assertFunction***REMOVED***=***REMOVED***assertFunction;
exports.assertFunctionDeclaration***REMOVED***=***REMOVED***assertFunctionDeclaration;
exports.assertFunctionExpression***REMOVED***=***REMOVED***assertFunctionExpression;
exports.assertFunctionParameter***REMOVED***=***REMOVED***assertFunctionParameter;
exports.assertFunctionParent***REMOVED***=***REMOVED***assertFunctionParent;
exports.assertFunctionTypeAnnotation***REMOVED***=***REMOVED***assertFunctionTypeAnnotation;
exports.assertFunctionTypeParam***REMOVED***=***REMOVED***assertFunctionTypeParam;
exports.assertGenericTypeAnnotation***REMOVED***=***REMOVED***assertGenericTypeAnnotation;
exports.assertIdentifier***REMOVED***=***REMOVED***assertIdentifier;
exports.assertIfStatement***REMOVED***=***REMOVED***assertIfStatement;
exports.assertImmutable***REMOVED***=***REMOVED***assertImmutable;
exports.assertImport***REMOVED***=***REMOVED***assertImport;
exports.assertImportAttribute***REMOVED***=***REMOVED***assertImportAttribute;
exports.assertImportDeclaration***REMOVED***=***REMOVED***assertImportDeclaration;
exports.assertImportDefaultSpecifier***REMOVED***=***REMOVED***assertImportDefaultSpecifier;
exports.assertImportExpression***REMOVED***=***REMOVED***assertImportExpression;
exports.assertImportNamespaceSpecifier***REMOVED***=***REMOVED***assertImportNamespaceSpecifier;
exports.assertImportOrExportDeclaration***REMOVED***=***REMOVED***assertImportOrExportDeclaration;
exports.assertImportSpecifier***REMOVED***=***REMOVED***assertImportSpecifier;
exports.assertIndexedAccessType***REMOVED***=***REMOVED***assertIndexedAccessType;
exports.assertInferredPredicate***REMOVED***=***REMOVED***assertInferredPredicate;
exports.assertInterfaceDeclaration***REMOVED***=***REMOVED***assertInterfaceDeclaration;
exports.assertInterfaceExtends***REMOVED***=***REMOVED***assertInterfaceExtends;
exports.assertInterfaceTypeAnnotation***REMOVED***=***REMOVED***assertInterfaceTypeAnnotation;
exports.assertInterpreterDirective***REMOVED***=***REMOVED***assertInterpreterDirective;
exports.assertIntersectionTypeAnnotation***REMOVED***=***REMOVED***assertIntersectionTypeAnnotation;
exports.assertJSX***REMOVED***=***REMOVED***assertJSX;
exports.assertJSXAttribute***REMOVED***=***REMOVED***assertJSXAttribute;
exports.assertJSXClosingElement***REMOVED***=***REMOVED***assertJSXClosingElement;
exports.assertJSXClosingFragment***REMOVED***=***REMOVED***assertJSXClosingFragment;
exports.assertJSXElement***REMOVED***=***REMOVED***assertJSXElement;
exports.assertJSXEmptyExpression***REMOVED***=***REMOVED***assertJSXEmptyExpression;
exports.assertJSXExpressionContainer***REMOVED***=***REMOVED***assertJSXExpressionContainer;
exports.assertJSXFragment***REMOVED***=***REMOVED***assertJSXFragment;
exports.assertJSXIdentifier***REMOVED***=***REMOVED***assertJSXIdentifier;
exports.assertJSXMemberExpression***REMOVED***=***REMOVED***assertJSXMemberExpression;
exports.assertJSXNamespacedName***REMOVED***=***REMOVED***assertJSXNamespacedName;
exports.assertJSXOpeningElement***REMOVED***=***REMOVED***assertJSXOpeningElement;
exports.assertJSXOpeningFragment***REMOVED***=***REMOVED***assertJSXOpeningFragment;
exports.assertJSXSpreadAttribute***REMOVED***=***REMOVED***assertJSXSpreadAttribute;
exports.assertJSXSpreadChild***REMOVED***=***REMOVED***assertJSXSpreadChild;
exports.assertJSXText***REMOVED***=***REMOVED***assertJSXText;
exports.assertLVal***REMOVED***=***REMOVED***assertLVal;
exports.assertLabeledStatement***REMOVED***=***REMOVED***assertLabeledStatement;
exports.assertLiteral***REMOVED***=***REMOVED***assertLiteral;
exports.assertLogicalExpression***REMOVED***=***REMOVED***assertLogicalExpression;
exports.assertLoop***REMOVED***=***REMOVED***assertLoop;
exports.assertMemberExpression***REMOVED***=***REMOVED***assertMemberExpression;
exports.assertMetaProperty***REMOVED***=***REMOVED***assertMetaProperty;
exports.assertMethod***REMOVED***=***REMOVED***assertMethod;
exports.assertMiscellaneous***REMOVED***=***REMOVED***assertMiscellaneous;
exports.assertMixedTypeAnnotation***REMOVED***=***REMOVED***assertMixedTypeAnnotation;
exports.assertModuleDeclaration***REMOVED***=***REMOVED***assertModuleDeclaration;
exports.assertModuleExpression***REMOVED***=***REMOVED***assertModuleExpression;
exports.assertModuleSpecifier***REMOVED***=***REMOVED***assertModuleSpecifier;
exports.assertNewExpression***REMOVED***=***REMOVED***assertNewExpression;
exports.assertNoop***REMOVED***=***REMOVED***assertNoop;
exports.assertNullLiteral***REMOVED***=***REMOVED***assertNullLiteral;
exports.assertNullLiteralTypeAnnotation***REMOVED***=***REMOVED***assertNullLiteralTypeAnnotation;
exports.assertNullableTypeAnnotation***REMOVED***=***REMOVED***assertNullableTypeAnnotation;
exports.assertNumberLiteral***REMOVED***=***REMOVED***assertNumberLiteral;
exports.assertNumberLiteralTypeAnnotation***REMOVED***=***REMOVED***assertNumberLiteralTypeAnnotation;
exports.assertNumberTypeAnnotation***REMOVED***=***REMOVED***assertNumberTypeAnnotation;
exports.assertNumericLiteral***REMOVED***=***REMOVED***assertNumericLiteral;
exports.assertObjectExpression***REMOVED***=***REMOVED***assertObjectExpression;
exports.assertObjectMember***REMOVED***=***REMOVED***assertObjectMember;
exports.assertObjectMethod***REMOVED***=***REMOVED***assertObjectMethod;
exports.assertObjectPattern***REMOVED***=***REMOVED***assertObjectPattern;
exports.assertObjectProperty***REMOVED***=***REMOVED***assertObjectProperty;
exports.assertObjectTypeAnnotation***REMOVED***=***REMOVED***assertObjectTypeAnnotation;
exports.assertObjectTypeCallProperty***REMOVED***=***REMOVED***assertObjectTypeCallProperty;
exports.assertObjectTypeIndexer***REMOVED***=***REMOVED***assertObjectTypeIndexer;
exports.assertObjectTypeInternalSlot***REMOVED***=***REMOVED***assertObjectTypeInternalSlot;
exports.assertObjectTypeProperty***REMOVED***=***REMOVED***assertObjectTypeProperty;
exports.assertObjectTypeSpreadProperty***REMOVED***=***REMOVED***assertObjectTypeSpreadProperty;
exports.assertOpaqueType***REMOVED***=***REMOVED***assertOpaqueType;
exports.assertOptionalCallExpression***REMOVED***=***REMOVED***assertOptionalCallExpression;
exports.assertOptionalIndexedAccessType***REMOVED***=***REMOVED***assertOptionalIndexedAccessType;
exports.assertOptionalMemberExpression***REMOVED***=***REMOVED***assertOptionalMemberExpression;
exports.assertParenthesizedExpression***REMOVED***=***REMOVED***assertParenthesizedExpression;
exports.assertPattern***REMOVED***=***REMOVED***assertPattern;
exports.assertPatternLike***REMOVED***=***REMOVED***assertPatternLike;
exports.assertPipelineBareFunction***REMOVED***=***REMOVED***assertPipelineBareFunction;
exports.assertPipelinePrimaryTopicReference***REMOVED***=***REMOVED***assertPipelinePrimaryTopicReference;
exports.assertPipelineTopicExpression***REMOVED***=***REMOVED***assertPipelineTopicExpression;
exports.assertPlaceholder***REMOVED***=***REMOVED***assertPlaceholder;
exports.assertPrivate***REMOVED***=***REMOVED***assertPrivate;
exports.assertPrivateName***REMOVED***=***REMOVED***assertPrivateName;
exports.assertProgram***REMOVED***=***REMOVED***assertProgram;
exports.assertProperty***REMOVED***=***REMOVED***assertProperty;
exports.assertPureish***REMOVED***=***REMOVED***assertPureish;
exports.assertQualifiedTypeIdentifier***REMOVED***=***REMOVED***assertQualifiedTypeIdentifier;
exports.assertRecordExpression***REMOVED***=***REMOVED***assertRecordExpression;
exports.assertRegExpLiteral***REMOVED***=***REMOVED***assertRegExpLiteral;
exports.assertRegexLiteral***REMOVED***=***REMOVED***assertRegexLiteral;
exports.assertRestElement***REMOVED***=***REMOVED***assertRestElement;
exports.assertRestProperty***REMOVED***=***REMOVED***assertRestProperty;
exports.assertReturnStatement***REMOVED***=***REMOVED***assertReturnStatement;
exports.assertScopable***REMOVED***=***REMOVED***assertScopable;
exports.assertSequenceExpression***REMOVED***=***REMOVED***assertSequenceExpression;
exports.assertSpreadElement***REMOVED***=***REMOVED***assertSpreadElement;
exports.assertSpreadProperty***REMOVED***=***REMOVED***assertSpreadProperty;
exports.assertStandardized***REMOVED***=***REMOVED***assertStandardized;
exports.assertStatement***REMOVED***=***REMOVED***assertStatement;
exports.assertStaticBlock***REMOVED***=***REMOVED***assertStaticBlock;
exports.assertStringLiteral***REMOVED***=***REMOVED***assertStringLiteral;
exports.assertStringLiteralTypeAnnotation***REMOVED***=***REMOVED***assertStringLiteralTypeAnnotation;
exports.assertStringTypeAnnotation***REMOVED***=***REMOVED***assertStringTypeAnnotation;
exports.assertSuper***REMOVED***=***REMOVED***assertSuper;
exports.assertSwitchCase***REMOVED***=***REMOVED***assertSwitchCase;
exports.assertSwitchStatement***REMOVED***=***REMOVED***assertSwitchStatement;
exports.assertSymbolTypeAnnotation***REMOVED***=***REMOVED***assertSymbolTypeAnnotation;
exports.assertTSAnyKeyword***REMOVED***=***REMOVED***assertTSAnyKeyword;
exports.assertTSArrayType***REMOVED***=***REMOVED***assertTSArrayType;
exports.assertTSAsExpression***REMOVED***=***REMOVED***assertTSAsExpression;
exports.assertTSBaseType***REMOVED***=***REMOVED***assertTSBaseType;
exports.assertTSBigIntKeyword***REMOVED***=***REMOVED***assertTSBigIntKeyword;
exports.assertTSBooleanKeyword***REMOVED***=***REMOVED***assertTSBooleanKeyword;
exports.assertTSCallSignatureDeclaration***REMOVED***=***REMOVED***assertTSCallSignatureDeclaration;
exports.assertTSConditionalType***REMOVED***=***REMOVED***assertTSConditionalType;
exports.assertTSConstructSignatureDeclaration***REMOVED***=***REMOVED***assertTSConstructSignatureDeclaration;
exports.assertTSConstructorType***REMOVED***=***REMOVED***assertTSConstructorType;
exports.assertTSDeclareFunction***REMOVED***=***REMOVED***assertTSDeclareFunction;
exports.assertTSDeclareMethod***REMOVED***=***REMOVED***assertTSDeclareMethod;
exports.assertTSEntityName***REMOVED***=***REMOVED***assertTSEntityName;
exports.assertTSEnumBody***REMOVED***=***REMOVED***assertTSEnumBody;
exports.assertTSEnumDeclaration***REMOVED***=***REMOVED***assertTSEnumDeclaration;
exports.assertTSEnumMember***REMOVED***=***REMOVED***assertTSEnumMember;
exports.assertTSExportAssignment***REMOVED***=***REMOVED***assertTSExportAssignment;
exports.assertTSExpressionWithTypeArguments***REMOVED***=***REMOVED***assertTSExpressionWithTypeArguments;
exports.assertTSExternalModuleReference***REMOVED***=***REMOVED***assertTSExternalModuleReference;
exports.assertTSFunctionType***REMOVED***=***REMOVED***assertTSFunctionType;
exports.assertTSImportEqualsDeclaration***REMOVED***=***REMOVED***assertTSImportEqualsDeclaration;
exports.assertTSImportType***REMOVED***=***REMOVED***assertTSImportType;
exports.assertTSIndexSignature***REMOVED***=***REMOVED***assertTSIndexSignature;
exports.assertTSIndexedAccessType***REMOVED***=***REMOVED***assertTSIndexedAccessType;
exports.assertTSInferType***REMOVED***=***REMOVED***assertTSInferType;
exports.assertTSInstantiationExpression***REMOVED***=***REMOVED***assertTSInstantiationExpression;
exports.assertTSInterfaceBody***REMOVED***=***REMOVED***assertTSInterfaceBody;
exports.assertTSInterfaceDeclaration***REMOVED***=***REMOVED***assertTSInterfaceDeclaration;
exports.assertTSIntersectionType***REMOVED***=***REMOVED***assertTSIntersectionType;
exports.assertTSIntrinsicKeyword***REMOVED***=***REMOVED***assertTSIntrinsicKeyword;
exports.assertTSLiteralType***REMOVED***=***REMOVED***assertTSLiteralType;
exports.assertTSMappedType***REMOVED***=***REMOVED***assertTSMappedType;
exports.assertTSMethodSignature***REMOVED***=***REMOVED***assertTSMethodSignature;
exports.assertTSModuleBlock***REMOVED***=***REMOVED***assertTSModuleBlock;
exports.assertTSModuleDeclaration***REMOVED***=***REMOVED***assertTSModuleDeclaration;
exports.assertTSNamedTupleMember***REMOVED***=***REMOVED***assertTSNamedTupleMember;
exports.assertTSNamespaceExportDeclaration***REMOVED***=***REMOVED***assertTSNamespaceExportDeclaration;
exports.assertTSNeverKeyword***REMOVED***=***REMOVED***assertTSNeverKeyword;
exports.assertTSNonNullExpression***REMOVED***=***REMOVED***assertTSNonNullExpression;
exports.assertTSNullKeyword***REMOVED***=***REMOVED***assertTSNullKeyword;
exports.assertTSNumberKeyword***REMOVED***=***REMOVED***assertTSNumberKeyword;
exports.assertTSObjectKeyword***REMOVED***=***REMOVED***assertTSObjectKeyword;
exports.assertTSOptionalType***REMOVED***=***REMOVED***assertTSOptionalType;
exports.assertTSParameterProperty***REMOVED***=***REMOVED***assertTSParameterProperty;
exports.assertTSParenthesizedType***REMOVED***=***REMOVED***assertTSParenthesizedType;
exports.assertTSPropertySignature***REMOVED***=***REMOVED***assertTSPropertySignature;
exports.assertTSQualifiedName***REMOVED***=***REMOVED***assertTSQualifiedName;
exports.assertTSRestType***REMOVED***=***REMOVED***assertTSRestType;
exports.assertTSSatisfiesExpression***REMOVED***=***REMOVED***assertTSSatisfiesExpression;
exports.assertTSStringKeyword***REMOVED***=***REMOVED***assertTSStringKeyword;
exports.assertTSSymbolKeyword***REMOVED***=***REMOVED***assertTSSymbolKeyword;
exports.assertTSTemplateLiteralType***REMOVED***=***REMOVED***assertTSTemplateLiteralType;
exports.assertTSThisType***REMOVED***=***REMOVED***assertTSThisType;
exports.assertTSTupleType***REMOVED***=***REMOVED***assertTSTupleType;
exports.assertTSType***REMOVED***=***REMOVED***assertTSType;
exports.assertTSTypeAliasDeclaration***REMOVED***=***REMOVED***assertTSTypeAliasDeclaration;
exports.assertTSTypeAnnotation***REMOVED***=***REMOVED***assertTSTypeAnnotation;
exports.assertTSTypeAssertion***REMOVED***=***REMOVED***assertTSTypeAssertion;
exports.assertTSTypeElement***REMOVED***=***REMOVED***assertTSTypeElement;
exports.assertTSTypeLiteral***REMOVED***=***REMOVED***assertTSTypeLiteral;
exports.assertTSTypeOperator***REMOVED***=***REMOVED***assertTSTypeOperator;
exports.assertTSTypeParameter***REMOVED***=***REMOVED***assertTSTypeParameter;
exports.assertTSTypeParameterDeclaration***REMOVED***=***REMOVED***assertTSTypeParameterDeclaration;
exports.assertTSTypeParameterInstantiation***REMOVED***=***REMOVED***assertTSTypeParameterInstantiation;
exports.assertTSTypePredicate***REMOVED***=***REMOVED***assertTSTypePredicate;
exports.assertTSTypeQuery***REMOVED***=***REMOVED***assertTSTypeQuery;
exports.assertTSTypeReference***REMOVED***=***REMOVED***assertTSTypeReference;
exports.assertTSUndefinedKeyword***REMOVED***=***REMOVED***assertTSUndefinedKeyword;
exports.assertTSUnionType***REMOVED***=***REMOVED***assertTSUnionType;
exports.assertTSUnknownKeyword***REMOVED***=***REMOVED***assertTSUnknownKeyword;
exports.assertTSVoidKeyword***REMOVED***=***REMOVED***assertTSVoidKeyword;
exports.assertTaggedTemplateExpression***REMOVED***=***REMOVED***assertTaggedTemplateExpression;
exports.assertTemplateElement***REMOVED***=***REMOVED***assertTemplateElement;
exports.assertTemplateLiteral***REMOVED***=***REMOVED***assertTemplateLiteral;
exports.assertTerminatorless***REMOVED***=***REMOVED***assertTerminatorless;
exports.assertThisExpression***REMOVED***=***REMOVED***assertThisExpression;
exports.assertThisTypeAnnotation***REMOVED***=***REMOVED***assertThisTypeAnnotation;
exports.assertThrowStatement***REMOVED***=***REMOVED***assertThrowStatement;
exports.assertTopicReference***REMOVED***=***REMOVED***assertTopicReference;
exports.assertTryStatement***REMOVED***=***REMOVED***assertTryStatement;
exports.assertTupleExpression***REMOVED***=***REMOVED***assertTupleExpression;
exports.assertTupleTypeAnnotation***REMOVED***=***REMOVED***assertTupleTypeAnnotation;
exports.assertTypeAlias***REMOVED***=***REMOVED***assertTypeAlias;
exports.assertTypeAnnotation***REMOVED***=***REMOVED***assertTypeAnnotation;
exports.assertTypeCastExpression***REMOVED***=***REMOVED***assertTypeCastExpression;
exports.assertTypeParameter***REMOVED***=***REMOVED***assertTypeParameter;
exports.assertTypeParameterDeclaration***REMOVED***=***REMOVED***assertTypeParameterDeclaration;
exports.assertTypeParameterInstantiation***REMOVED***=***REMOVED***assertTypeParameterInstantiation;
exports.assertTypeScript***REMOVED***=***REMOVED***assertTypeScript;
exports.assertTypeofTypeAnnotation***REMOVED***=***REMOVED***assertTypeofTypeAnnotation;
exports.assertUnaryExpression***REMOVED***=***REMOVED***assertUnaryExpression;
exports.assertUnaryLike***REMOVED***=***REMOVED***assertUnaryLike;
exports.assertUnionTypeAnnotation***REMOVED***=***REMOVED***assertUnionTypeAnnotation;
exports.assertUpdateExpression***REMOVED***=***REMOVED***assertUpdateExpression;
exports.assertUserWhitespacable***REMOVED***=***REMOVED***assertUserWhitespacable;
exports.assertV8IntrinsicIdentifier***REMOVED***=***REMOVED***assertV8IntrinsicIdentifier;
exports.assertVariableDeclaration***REMOVED***=***REMOVED***assertVariableDeclaration;
exports.assertVariableDeclarator***REMOVED***=***REMOVED***assertVariableDeclarator;
exports.assertVariance***REMOVED***=***REMOVED***assertVariance;
exports.assertVoidPattern***REMOVED***=***REMOVED***assertVoidPattern;
exports.assertVoidTypeAnnotation***REMOVED***=***REMOVED***assertVoidTypeAnnotation;
exports.assertWhile***REMOVED***=***REMOVED***assertWhile;
exports.assertWhileStatement***REMOVED***=***REMOVED***assertWhileStatement;
exports.assertWithStatement***REMOVED***=***REMOVED***assertWithStatement;
exports.assertYieldExpression***REMOVED***=***REMOVED***assertYieldExpression;
var***REMOVED***_is***REMOVED***=***REMOVED***require("../../validators/is.js");
var***REMOVED***_deprecationWarning***REMOVED***=***REMOVED***require("../../utils/deprecationWarning.js");
function***REMOVED***assert(type,***REMOVED***node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(!(0,***REMOVED***_is.default)(type,***REMOVED***node,***REMOVED***opts))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***type***REMOVED***"${type}"***REMOVED***with***REMOVED***option***REMOVED***${JSON.stringify(opts)},***REMOVED***`***REMOVED***+***REMOVED***`but***REMOVED***instead***REMOVED***got***REMOVED***"${node.type}".`);
***REMOVED******REMOVED***}
}
function***REMOVED***assertArrayExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ArrayExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertAssignmentExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("AssignmentExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBinaryExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BinaryExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertInterpreterDirective(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("InterpreterDirective",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDirective(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Directive",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDirectiveLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DirectiveLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBlockStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BlockStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBreakStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BreakStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertCallExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("CallExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertCatchClause(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("CatchClause",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertConditionalExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ConditionalExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertContinueStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ContinueStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDebuggerStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DebuggerStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDoWhileStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DoWhileStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEmptyStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EmptyStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExpressionStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExpressionStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFile(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("File",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertForInStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ForInStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertForStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ForStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunctionDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FunctionDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunctionExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FunctionExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertIdentifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Identifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertIfStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("IfStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertLabeledStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("LabeledStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertStringLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("StringLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNumericLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NumericLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNullLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NullLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBooleanLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BooleanLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertRegExpLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("RegExpLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertLogicalExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("LogicalExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertMemberExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("MemberExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNewExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NewExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertProgram(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Program",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectMethod(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectMethod",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertRestElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("RestElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertReturnStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ReturnStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSequenceExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("SequenceExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertParenthesizedExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ParenthesizedExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSwitchCase(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("SwitchCase",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSwitchStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("SwitchStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertThisExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ThisExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertThrowStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ThrowStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTryStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TryStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertUnaryExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("UnaryExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertUpdateExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("UpdateExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertVariableDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("VariableDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertVariableDeclarator(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("VariableDeclarator",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertWhileStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("WhileStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertWithStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("WithStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertAssignmentPattern(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("AssignmentPattern",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertArrayPattern(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ArrayPattern",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertArrowFunctionExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ArrowFunctionExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportAllDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportAllDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportDefaultDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportDefaultDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportNamedDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportNamedDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertForOfStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ForOfStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportDefaultSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportDefaultSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportNamespaceSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportNamespaceSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertMetaProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("MetaProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassMethod(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassMethod",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectPattern(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectPattern",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSpreadElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("SpreadElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSuper(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Super",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTaggedTemplateExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TaggedTemplateExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTemplateElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TemplateElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTemplateLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TemplateLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertYieldExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("YieldExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertAwaitExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("AwaitExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImport(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Import",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBigIntLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BigIntLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportNamespaceSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportNamespaceSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertOptionalMemberExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("OptionalMemberExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertOptionalCallExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("OptionalCallExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassAccessorProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassAccessorProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassPrivateProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassPrivateProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassPrivateMethod(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassPrivateMethod",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPrivateName(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("PrivateName",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertStaticBlock(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("StaticBlock",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportAttribute(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportAttribute",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertAnyTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("AnyTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertArrayTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ArrayTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBooleanTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BooleanTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBooleanLiteralTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BooleanLiteralTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNullLiteralTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NullLiteralTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClassImplements(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ClassImplements",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareClass(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareClass",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareFunction(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareFunction",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareInterface(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareInterface",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareModule(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareModule",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareModuleExports(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareModuleExports",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareTypeAlias(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareTypeAlias",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareOpaqueType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareOpaqueType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareVariable(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareVariable",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareExportDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareExportDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclareExportAllDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclareExportAllDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclaredPredicate(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DeclaredPredicate",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExistsTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExistsTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunctionTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FunctionTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunctionTypeParam(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FunctionTypeParam",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertGenericTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("GenericTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertInferredPredicate(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("InferredPredicate",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertInterfaceExtends(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("InterfaceExtends",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertInterfaceDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("InterfaceDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertInterfaceTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("InterfaceTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertIntersectionTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("IntersectionTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertMixedTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("MixedTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEmptyTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EmptyTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNullableTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NullableTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNumberLiteralTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NumberLiteralTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNumberTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("NumberTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectTypeInternalSlot(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectTypeInternalSlot",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectTypeCallProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectTypeCallProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectTypeIndexer(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectTypeIndexer",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectTypeProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectTypeProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectTypeSpreadProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectTypeSpreadProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertOpaqueType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("OpaqueType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertQualifiedTypeIdentifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("QualifiedTypeIdentifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertStringLiteralTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("StringLiteralTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertStringTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("StringTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSymbolTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("SymbolTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertThisTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ThisTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTupleTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TupleTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeofTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeofTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeAlias(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeAlias",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeCastExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeCastExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeParameter(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeParameter",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeParameterDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeParameterDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeParameterInstantiation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeParameterInstantiation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertUnionTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("UnionTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertVariance(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Variance",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertVoidTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("VoidTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumBooleanBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumBooleanBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumNumberBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumNumberBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumStringBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumStringBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumSymbolBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumSymbolBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumBooleanMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumBooleanMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumNumberMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumNumberMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumStringMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumStringMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumDefaultedMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumDefaultedMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertIndexedAccessType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("IndexedAccessType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertOptionalIndexedAccessType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("OptionalIndexedAccessType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXAttribute(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXAttribute",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXClosingElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXClosingElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXEmptyExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXEmptyExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXExpressionContainer(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXExpressionContainer",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXSpreadChild(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXSpreadChild",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXIdentifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXIdentifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXMemberExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXMemberExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXNamespacedName(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXNamespacedName",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXOpeningElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXOpeningElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXSpreadAttribute(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXSpreadAttribute",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXText(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXText",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXFragment(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXFragment",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXOpeningFragment(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXOpeningFragment",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSXClosingFragment(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSXClosingFragment",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNoop(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Noop",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPlaceholder(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Placeholder",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertV8IntrinsicIdentifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("V8IntrinsicIdentifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertArgumentPlaceholder(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ArgumentPlaceholder",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBindExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BindExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDecorator(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Decorator",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDoExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DoExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportDefaultSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportDefaultSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertRecordExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("RecordExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTupleExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TupleExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDecimalLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("DecimalLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertModuleExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ModuleExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTopicReference(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TopicReference",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPipelineTopicExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("PipelineTopicExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPipelineBareFunction(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("PipelineBareFunction",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPipelinePrimaryTopicReference(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("PipelinePrimaryTopicReference",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertVoidPattern(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("VoidPattern",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSParameterProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSParameterProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSDeclareFunction(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSDeclareFunction",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSDeclareMethod(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSDeclareMethod",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSQualifiedName(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSQualifiedName",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSCallSignatureDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSCallSignatureDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSConstructSignatureDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSConstructSignatureDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSPropertySignature(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSPropertySignature",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSMethodSignature(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSMethodSignature",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSIndexSignature(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSIndexSignature",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSAnyKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSAnyKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSBooleanKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSBooleanKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSBigIntKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSBigIntKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSIntrinsicKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSIntrinsicKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSNeverKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSNeverKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSNullKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSNullKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSNumberKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSNumberKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSObjectKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSObjectKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSStringKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSStringKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSSymbolKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSSymbolKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSUndefinedKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSUndefinedKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSUnknownKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSUnknownKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSVoidKeyword(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSVoidKeyword",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSThisType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSThisType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSFunctionType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSFunctionType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSConstructorType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSConstructorType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeReference(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeReference",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypePredicate(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypePredicate",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeQuery(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeQuery",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSArrayType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSArrayType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTupleType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTupleType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSOptionalType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSOptionalType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSRestType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSRestType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSNamedTupleMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSNamedTupleMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSUnionType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSUnionType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSIntersectionType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSIntersectionType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSConditionalType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSConditionalType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSInferType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSInferType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSParenthesizedType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSParenthesizedType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeOperator(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeOperator",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSIndexedAccessType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSIndexedAccessType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSMappedType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSMappedType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTemplateLiteralType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTemplateLiteralType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSLiteralType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSLiteralType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSExpressionWithTypeArguments(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSExpressionWithTypeArguments",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSInterfaceDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSInterfaceDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSInterfaceBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSInterfaceBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeAliasDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeAliasDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSInstantiationExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSInstantiationExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSAsExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSAsExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSSatisfiesExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSSatisfiesExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeAssertion(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeAssertion",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSEnumBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSEnumBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSEnumDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSEnumDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSEnumMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSEnumMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSModuleDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSModuleDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSModuleBlock(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSModuleBlock",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSImportType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSImportType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSImportEqualsDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSImportEqualsDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSExternalModuleReference(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSExternalModuleReference",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSNonNullExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSNonNullExpression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSExportAssignment(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSExportAssignment",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSNamespaceExportDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSNamespaceExportDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeParameterInstantiation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeParameterInstantiation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeParameterDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeParameterDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeParameter(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeParameter",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertStandardized(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Standardized",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExpression(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Expression",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBinary(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Binary",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertScopable(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Scopable",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBlockParent(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("BlockParent",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertBlock(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Block",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Statement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTerminatorless(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Terminatorless",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertCompletionStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("CompletionStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertConditional(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Conditional",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertLoop(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Loop",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertWhile(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("While",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExpressionWrapper(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExpressionWrapper",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFor(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("For",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertForXStatement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ForXStatement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunction(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Function",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunctionParent(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FunctionParent",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPureish(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Pureish",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Declaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFunctionParameter(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FunctionParameter",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPatternLike(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("PatternLike",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertLVal(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("LVal",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSEntityName(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSEntityName",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Literal",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImmutable(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Immutable",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertUserWhitespacable(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("UserWhitespacable",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertMethod(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Method",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertObjectMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ObjectMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Property",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertUnaryLike(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("UnaryLike",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPattern(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Pattern",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertClass(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Class",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertImportOrExportDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ImportOrExportDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertExportDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ExportDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertModuleSpecifier(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("ModuleSpecifier",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertAccessor(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Accessor",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertPrivate(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Private",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFlow(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Flow",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFlowType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FlowType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFlowBaseAnnotation(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FlowBaseAnnotation",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFlowDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FlowDeclaration",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertFlowPredicate(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("FlowPredicate",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumBody(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumBody",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertEnumMember(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("EnumMember",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertJSX(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("JSX",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertMiscellaneous(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("Miscellaneous",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTypeScript(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TypeScript",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSTypeElement(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSTypeElement",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertTSBaseType(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***assert("TSBaseType",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertNumberLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***(0,***REMOVED***_deprecationWarning.default)("assertNumberLiteral",***REMOVED***"assertNumericLiteral");
***REMOVED******REMOVED***assert("NumberLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertRegexLiteral(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***(0,***REMOVED***_deprecationWarning.default)("assertRegexLiteral",***REMOVED***"assertRegExpLiteral");
***REMOVED******REMOVED***assert("RegexLiteral",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertRestProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***(0,***REMOVED***_deprecationWarning.default)("assertRestProperty",***REMOVED***"assertRestElement");
***REMOVED******REMOVED***assert("RestProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertSpreadProperty(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***(0,***REMOVED***_deprecationWarning.default)("assertSpreadProperty",***REMOVED***"assertSpreadElement");
***REMOVED******REMOVED***assert("SpreadProperty",***REMOVED***node,***REMOVED***opts);
}
function***REMOVED***assertModuleDeclaration(node,***REMOVED***opts)***REMOVED***{
***REMOVED******REMOVED***(0,***REMOVED***_deprecationWarning.default)("assertModuleDeclaration",***REMOVED***"assertImportOrExportDeclaration");
***REMOVED******REMOVED***assert("ModuleDeclaration",***REMOVED***node,***REMOVED***opts);
}

//#***REMOVED***sourceMappingURL=index.js.map
