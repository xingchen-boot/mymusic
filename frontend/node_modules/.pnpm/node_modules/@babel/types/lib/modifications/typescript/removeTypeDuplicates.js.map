{"version":3,"names":["_index","require","getQualifiedName","node","isIdentifier","name","isThisExpression","right","left","removeTypeDuplicates","nodesIn","nodes","Array","from","generics","Map","bases","typeGroups","Set","types","i","length","includes","isTSAnyKeyword","isTSBaseType","set","type","isTSUnionType","has","push","add","typeArgumentsKey","isTSTypeReference","typeArguments","typeName","existing","get","existingTypeArguments","params","baseType","genericName"],"sources":["../../../src/modifications/typescript/removeTypeDuplicates.ts"],"sourcesContent":["import***REMOVED***{\n***REMOVED******REMOVED***isIdentifier,\n***REMOVED******REMOVED***isThisExpression,\n***REMOVED******REMOVED***isTSAnyKeyword,\n***REMOVED******REMOVED***isTSTypeReference,\n***REMOVED******REMOVED***isTSUnionType,\n***REMOVED******REMOVED***isTSBaseType,\n}***REMOVED***from***REMOVED***\"../../validators/generated/index.ts\";\nimport***REMOVED***type***REMOVED*******REMOVED***as***REMOVED***t***REMOVED***from***REMOVED***\"../../index.ts\";\n\nfunction***REMOVED***getQualifiedName(node:***REMOVED***t.TSTypeReference[\"typeName\"]):***REMOVED***string***REMOVED***{\n***REMOVED******REMOVED***return***REMOVED***isIdentifier(node)\n***REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***node.name\n***REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***isThisExpression(node)\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***\"this\"\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***`${node.right.name}.${getQualifiedName(node.left)}`;\n}\n\n/**\n***REMOVED*******REMOVED***Dedupe***REMOVED***type***REMOVED***annotations.\n***REMOVED****/\nexport***REMOVED***default***REMOVED***function***REMOVED***removeTypeDuplicates(\n***REMOVED******REMOVED***nodesIn:***REMOVED***ReadonlyArray<t.TSType>,\n):***REMOVED***Array<t.TSType>***REMOVED***{\n***REMOVED******REMOVED***const***REMOVED***nodes***REMOVED***=***REMOVED***Array.from(nodesIn);\n\n***REMOVED******REMOVED***const***REMOVED***generics***REMOVED***=***REMOVED***new***REMOVED***Map<string,***REMOVED***t.TSTypeReference>();\n***REMOVED******REMOVED***const***REMOVED***bases***REMOVED***=***REMOVED***new***REMOVED***Map<t.TSBaseType[\"type\"],***REMOVED***t.TSBaseType>();\n\n***REMOVED******REMOVED***//***REMOVED***store***REMOVED***union***REMOVED***type***REMOVED***groups***REMOVED***to***REMOVED***circular***REMOVED***references\n***REMOVED******REMOVED***const***REMOVED***typeGroups***REMOVED***=***REMOVED***new***REMOVED***Set<t.TSType[]>();\n\n***REMOVED******REMOVED***const***REMOVED***types:***REMOVED***t.TSType[]***REMOVED***=***REMOVED***[];\n\n***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***nodes.length;***REMOVED***i++)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***nodes[i];\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node)***REMOVED***continue;\n\n***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***detect***REMOVED***duplicates\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(types.includes(node))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***this***REMOVED***type***REMOVED***matches***REMOVED***anything\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isTSAnyKeyword(node))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[node];\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Analogue***REMOVED***of***REMOVED***FlowBaseAnnotation\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isTSBaseType(node))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bases.set(node.type,***REMOVED***node);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isTSUnionType(node))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!typeGroups.has(node.types))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodes.push(...node.types);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***typeGroups.add(node.types);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***todo:***REMOVED***support***REMOVED***merging***REMOVED***tuples:***REMOVED***number[]\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***typeArgumentsKey***REMOVED***=***REMOVED***process.env.BABEL_8_BREAKING\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***?***REMOVED***\"typeArguments\"\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***:***REMOVED***\"typeParameters\";\n***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-ignore(Babel***REMOVED***7***REMOVED***vs***REMOVED***Babel***REMOVED***8)***REMOVED***Babel***REMOVED***8***REMOVED***AST\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isTSTypeReference(node)***REMOVED***&&***REMOVED***node[typeArgumentsKey])***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-ignore(Babel***REMOVED***7***REMOVED***vs***REMOVED***Babel***REMOVED***8)***REMOVED***Babel***REMOVED***8***REMOVED***AST\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***typeArguments***REMOVED***=***REMOVED***node[typeArgumentsKey];\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***name***REMOVED***=***REMOVED***getQualifiedName(node.typeName);\n\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(generics.has(name))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***existing:***REMOVED***t.TypeScript***REMOVED***=***REMOVED***generics.get(name);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-ignore(Babel***REMOVED***7***REMOVED***vs***REMOVED***Babel***REMOVED***8)***REMOVED***Babel***REMOVED***8***REMOVED***AST\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***existingTypeArguments***REMOVED***=***REMOVED***existing[typeArgumentsKey];\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(existingTypeArguments)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***existingTypeArguments.params.push(...typeArguments.params);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***existingTypeArguments.params***REMOVED***=***REMOVED***removeTypeDuplicates(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***existingTypeArguments.params,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***existing***REMOVED***=***REMOVED***typeArguments;\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***generics.set(name,***REMOVED***node);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***types.push(node);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***add***REMOVED***back***REMOVED***in***REMOVED***bases\n***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***[,***REMOVED***baseType]***REMOVED***of***REMOVED***bases)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***types.push(baseType);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***add***REMOVED***back***REMOVED***in***REMOVED***generics\n***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***[,***REMOVED***genericName]***REMOVED***of***REMOVED***generics)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***types.push(genericName);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***return***REMOVED***types;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAUA,SAASC,gBAAgBA,CAACC,IAAmC,EAAU;EACrE,OAAO,IAAAC,mBAAY,EAACD,IAAI,CAAC,GACrBA,IAAI,CAACE,IAAI,GACT,IAAAC,uBAAgB,EAACH,IAAI,CAAC,GACpB,MAAM,GACN,GAAGA,IAAI,CAACI,KAAK,CAACF,IAAI,IAAIH,gBAAgB,CAACC,IAAI,CAACK,IAAI,CAAC,EAAE;AAC3D;AAKe,SAASC,oBAAoBA,CAC1CC,OAAgC,EACf;EACjB,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,OAAO,CAAC;EAEjC,MAAMI,QAAQ,GAAG,IAAIC,GAAG,CAA4B,CAAC;EACrD,MAAMC,KAAK,GAAG,IAAID,GAAG,CAAqC,CAAC;EAG3D,MAAME,UAAU,GAAG,IAAIC,GAAG,CAAa,CAAC;EAExC,MAAMC,KAAiB,GAAG,EAAE;EAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,KAAK,CAACU,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,MAAMjB,IAAI,GAAGQ,KAAK,CAACS,CAAC,CAAC;IACrB,IAAI,CAACjB,IAAI,EAAE;IAGX,IAAIgB,KAAK,CAACG,QAAQ,CAACnB,IAAI,CAAC,EAAE;MACxB;IACF;IAGA,IAAI,IAAAoB,qBAAc,EAACpB,IAAI,CAAC,EAAE;MACxB,OAAO,CAACA,IAAI,CAAC;IACf;IAGA,IAAI,IAAAqB,mBAAY,EAACrB,IAAI,CAAC,EAAE;MACtBa,KAAK,CAACS,GAAG,CAACtB,IAAI,CAACuB,IAAI,EAAEvB,IAAI,CAAC;MAC1B;IACF;IAEA,IAAI,IAAAwB,oBAAa,EAACxB,IAAI,CAAC,EAAE;MACvB,IAAI,CAACc,UAAU,CAACW,GAAG,CAACzB,IAAI,CAACgB,KAAK,CAAC,EAAE;QAC/BR,KAAK,CAACkB,IAAI,CAAC,GAAG1B,IAAI,CAACgB,KAAK,CAAC;QACzBF,UAAU,CAACa,GAAG,CAAC3B,IAAI,CAACgB,KAAK,CAAC;MAC5B;MACA;IACF;IAGA,MAAMY,gBAAgB,GAElB,gBAAgB;IAEpB,IAAI,IAAAC,wBAAiB,EAAC7B,IAAI,CAAC,IAAIA,IAAI,CAAC4B,gBAAgB,CAAC,EAAE;MAErD,MAAME,aAAa,GAAG9B,IAAI,CAAC4B,gBAAgB,CAAC;MAC5C,MAAM1B,IAAI,GAAGH,gBAAgB,CAACC,IAAI,CAAC+B,QAAQ,CAAC;MAE5C,IAAIpB,QAAQ,CAACc,GAAG,CAACvB,IAAI,CAAC,EAAE;QACtB,IAAI8B,QAAsB,GAAGrB,QAAQ,CAACsB,GAAG,CAAC/B,IAAI,CAAC;QAE/C,MAAMgC,qBAAqB,GAAGF,QAAQ,CAACJ,gBAAgB,CAAC;QACxD,IAAIM,qBAAqB,EAAE;UACzBA,qBAAqB,CAACC,MAAM,CAACT,IAAI,CAAC,GAAGI,aAAa,CAACK,MAAM,CAAC;UAC1DD,qBAAqB,CAACC,MAAM,GAAG7B,oBAAoB,CACjD4B,qBAAqB,CAACC,MACxB,CAAC;QACH,CAAC,MAAM;UACLH,QAAQ,GAAGF,aAAa;QAC1B;MACF,CAAC,MAAM;QACLnB,QAAQ,CAACW,GAAG,CAACpB,IAAI,EAAEF,IAAI,CAAC;MAC1B;MAEA;IACF;IAEAgB,KAAK,CAACU,IAAI,CAAC1B,IAAI,CAAC;EAClB;EAGA,KAAK,MAAM,GAAGoC,QAAQ,CAAC,IAAIvB,KAAK,EAAE;IAChCG,KAAK,CAACU,IAAI,CAACU,QAAQ,CAAC;EACtB;EAGA,KAAK,MAAM,GAAGC,WAAW,CAAC,IAAI1B,QAAQ,EAAE;IACtCK,KAAK,CAACU,IAAI,CAACW,WAAW,CAAC;EACzB;EAEA,OAAOrB,KAAK;AACd","ignoreList":[]}