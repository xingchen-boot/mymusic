{"version":3,"names":["_isValidIdentifier","require","_index","_default","exports","default","valueToNode","objectToString","Function","call","bind","Object","prototype","toString","isRegExp","value","isPlainObject","proto","getPrototypeOf","undefined","identifier","booleanLiteral","nullLiteral","stringLiteral","result","Number","isFinite","numericLiteral","Math","abs","numerator","isNaN","binaryExpression","is","unaryExpression","bigIntLiteral","pattern","source","flags","exec","regExpLiteral","Array","isArray","arrayExpression","map","props","key","keys","nodeKey","computed","isValidIdentifier","push","objectProperty","objectExpression","Error"],"sources":["../../src/converters/valueToNode.ts"],"sourcesContent":["import***REMOVED***isValidIdentifier***REMOVED***from***REMOVED***\"../validators/isValidIdentifier.ts\";\nimport***REMOVED***{\n***REMOVED******REMOVED***identifier,\n***REMOVED******REMOVED***booleanLiteral,\n***REMOVED******REMOVED***nullLiteral,\n***REMOVED******REMOVED***stringLiteral,\n***REMOVED******REMOVED***numericLiteral,\n***REMOVED******REMOVED***bigIntLiteral,\n***REMOVED******REMOVED***regExpLiteral,\n***REMOVED******REMOVED***arrayExpression,\n***REMOVED******REMOVED***objectProperty,\n***REMOVED******REMOVED***objectExpression,\n***REMOVED******REMOVED***unaryExpression,\n***REMOVED******REMOVED***binaryExpression,\n}***REMOVED***from***REMOVED***\"../builders/generated/index.ts\";\nimport***REMOVED***type***REMOVED*******REMOVED***as***REMOVED***t***REMOVED***from***REMOVED***\"../index.ts\";\n\nexport***REMOVED***default***REMOVED***valueToNode***REMOVED***as***REMOVED***{\n***REMOVED******REMOVED***(value:***REMOVED***undefined):***REMOVED***t.Identifier;***REMOVED***//***REMOVED***TODO:***REMOVED***This***REMOVED***should***REMOVED***return***REMOVED***\"void***REMOVED***0\"\n***REMOVED******REMOVED***(value:***REMOVED***boolean):***REMOVED***t.BooleanLiteral;\n***REMOVED******REMOVED***(value:***REMOVED***null):***REMOVED***t.NullLiteral;\n***REMOVED******REMOVED***(value:***REMOVED***string):***REMOVED***t.StringLiteral;\n***REMOVED******REMOVED***//***REMOVED***Infinities***REMOVED***and***REMOVED***NaN***REMOVED***need***REMOVED***to***REMOVED***use***REMOVED***a***REMOVED***BinaryExpression;***REMOVED***negative***REMOVED***values***REMOVED***must***REMOVED***be***REMOVED***wrapped***REMOVED***in***REMOVED***UnaryExpression\n***REMOVED******REMOVED***(value:***REMOVED***number):***REMOVED***t.NumericLiteral***REMOVED***|***REMOVED***t.BinaryExpression***REMOVED***|***REMOVED***t.UnaryExpression;\n***REMOVED******REMOVED***(value:***REMOVED***bigint):***REMOVED***t.BigIntLiteral;\n***REMOVED******REMOVED***(value:***REMOVED***RegExp):***REMOVED***t.RegExpLiteral;\n***REMOVED******REMOVED***(value:***REMOVED***ReadonlyArray<unknown>):***REMOVED***t.ArrayExpression;\n\n***REMOVED******REMOVED***//***REMOVED***this***REMOVED***throws***REMOVED***with***REMOVED***objects***REMOVED***that***REMOVED***are***REMOVED***not***REMOVED***plain***REMOVED***objects,\n***REMOVED******REMOVED***//***REMOVED***or***REMOVED***if***REMOVED***there***REMOVED***are***REMOVED***non-valueToNode-able***REMOVED***values\n***REMOVED******REMOVED***(value:***REMOVED***object):***REMOVED***t.ObjectExpression;\n\n***REMOVED******REMOVED***(value:***REMOVED***unknown):***REMOVED***t.Expression;\n};\n\n//***REMOVED***@ts-expect-error:***REMOVED***Object.prototype.toString***REMOVED***must***REMOVED***return***REMOVED***a***REMOVED***string\nconst***REMOVED***objectToString:***REMOVED***(value:***REMOVED***unknown)***REMOVED***=>***REMOVED***string***REMOVED***=***REMOVED***Function.call.bind(\n***REMOVED******REMOVED***Object.prototype.toString,\n);\n\nfunction***REMOVED***isRegExp(value:***REMOVED***unknown):***REMOVED***value***REMOVED***is***REMOVED***RegExp***REMOVED***{\n***REMOVED******REMOVED***return***REMOVED***objectToString(value)***REMOVED***===***REMOVED***\"[object***REMOVED***RegExp]\";\n}\n\nfunction***REMOVED***isPlainObject(value:***REMOVED***unknown):***REMOVED***value***REMOVED***is***REMOVED***object***REMOVED***{\n***REMOVED******REMOVED***if***REMOVED***(\n***REMOVED******REMOVED******REMOVED******REMOVED***typeof***REMOVED***value***REMOVED***!==***REMOVED***\"object\"***REMOVED***||\n***REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***===***REMOVED***null***REMOVED***||\n***REMOVED******REMOVED******REMOVED******REMOVED***Object.prototype.toString.call(value)***REMOVED***!==***REMOVED***\"[object***REMOVED***Object]\"\n***REMOVED******REMOVED***)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***false;\n***REMOVED******REMOVED***}\n***REMOVED******REMOVED***const***REMOVED***proto***REMOVED***=***REMOVED***Object.getPrototypeOf(value);\n***REMOVED******REMOVED***//***REMOVED***Object.prototype's***REMOVED***__proto__***REMOVED***is***REMOVED***null.***REMOVED***Every***REMOVED***other***REMOVED***class's***REMOVED***__proto__.__proto__***REMOVED***is\n***REMOVED******REMOVED***//***REMOVED***not***REMOVED***null***REMOVED***by***REMOVED***default.***REMOVED***We***REMOVED***cannot***REMOVED***check***REMOVED***if***REMOVED***proto***REMOVED***===***REMOVED***Object.prototype***REMOVED***because***REMOVED***it\n***REMOVED******REMOVED***//***REMOVED***could***REMOVED***come***REMOVED***from***REMOVED***another***REMOVED***realm.\n***REMOVED******REMOVED***return***REMOVED***proto***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***Object.getPrototypeOf(proto)***REMOVED***===***REMOVED***null;\n}\n\nfunction***REMOVED***valueToNode(value:***REMOVED***unknown):***REMOVED***t.Expression***REMOVED***{\n***REMOVED******REMOVED***//***REMOVED***undefined\n***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***undefined)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***identifier(\"undefined\");\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***boolean\n***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***true***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***false)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***booleanLiteral(value);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***null\n***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***null)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***nullLiteral();\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***strings\n***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***\"string\")***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***stringLiteral(value);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***numbers\n***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***\"number\")***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result;\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Number.isFinite(value))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***numericLiteral(Math.abs(value));\n***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***numerator;\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Number.isNaN(value))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***NaN\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***numerator***REMOVED***=***REMOVED***numericLiteral(0);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Infinity***REMOVED***/***REMOVED***-Infinity\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***numerator***REMOVED***=***REMOVED***numericLiteral(1);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***binaryExpression(\"/\",***REMOVED***numerator,***REMOVED***numericLiteral(0));\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***<***REMOVED***0***REMOVED***||***REMOVED***Object.is(value,***REMOVED***-0))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***unaryExpression(\"-\",***REMOVED***result);\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***result;\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***bigints\n***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***\"bigint\")***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***<***REMOVED***0)***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***unaryExpression(\"-\",***REMOVED***bigIntLiteral(-value));\n***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***bigIntLiteral(value);\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***regexes\n***REMOVED******REMOVED***if***REMOVED***(isRegExp(value))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pattern***REMOVED***=***REMOVED***value.source;\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***flags***REMOVED***=***REMOVED***/\\/([a-z]*)$/.exec(value.toString())[1];\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***regExpLiteral(pattern,***REMOVED***flags);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***array\n***REMOVED******REMOVED***if***REMOVED***(Array.isArray(value))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***arrayExpression(value.map(valueToNode));\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***//***REMOVED***object\n***REMOVED******REMOVED***if***REMOVED***(isPlainObject(value))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***props***REMOVED***=***REMOVED***[];\n***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***key***REMOVED***of***REMOVED***Object.keys(value))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***nodeKey,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***computed***REMOVED***=***REMOVED***false;\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isValidIdentifier(key))***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key***REMOVED***===***REMOVED***\"__proto__\")***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***computed***REMOVED***=***REMOVED***true;\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodeKey***REMOVED***=***REMOVED***stringLiteral(key);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodeKey***REMOVED***=***REMOVED***identifier(key);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodeKey***REMOVED***=***REMOVED***stringLiteral(key);\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***props.push(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***objectProperty(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodeKey,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***valueToNode(\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***@ts-expect-error***REMOVED***key***REMOVED***must***REMOVED***present***REMOVED***in***REMOVED***value\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value[key],\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***),\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***computed,\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***),\n***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);\n***REMOVED******REMOVED******REMOVED******REMOVED***}\n***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***objectExpression(props);\n***REMOVED******REMOVED***}\n\n***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(\"don't***REMOVED***know***REMOVED***how***REMOVED***to***REMOVED***turn***REMOVED***this***REMOVED***value***REMOVED***into***REMOVED***a***REMOVED***node\");\n}\n"],"mappings":"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","ignoreList":[]}