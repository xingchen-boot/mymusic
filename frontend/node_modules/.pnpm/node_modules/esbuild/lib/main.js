"use***REMOVED***strict";
var***REMOVED***__create***REMOVED***=***REMOVED***Object.create;
var***REMOVED***__defProp***REMOVED***=***REMOVED***Object.defineProperty;
var***REMOVED***__getOwnPropDesc***REMOVED***=***REMOVED***Object.getOwnPropertyDescriptor;
var***REMOVED***__getOwnPropNames***REMOVED***=***REMOVED***Object.getOwnPropertyNames;
var***REMOVED***__getProtoOf***REMOVED***=***REMOVED***Object.getPrototypeOf;
var***REMOVED***__hasOwnProp***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty;
var***REMOVED***__export***REMOVED***=***REMOVED***(target,***REMOVED***all)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***(var***REMOVED***name***REMOVED***in***REMOVED***all)
***REMOVED******REMOVED******REMOVED******REMOVED***__defProp(target,***REMOVED***name,***REMOVED***{***REMOVED***get:***REMOVED***all[name],***REMOVED***enumerable:***REMOVED***true***REMOVED***});
};
var***REMOVED***__copyProps***REMOVED***=***REMOVED***(to,***REMOVED***from,***REMOVED***except,***REMOVED***desc)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(from***REMOVED***&&***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"object"***REMOVED***||***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"function")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***of***REMOVED***__getOwnPropNames(from))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!__hasOwnProp.call(to,***REMOVED***key)***REMOVED***&&***REMOVED***key***REMOVED***!==***REMOVED***except)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__defProp(to,***REMOVED***key,***REMOVED***{***REMOVED***get:***REMOVED***()***REMOVED***=>***REMOVED***from[key],***REMOVED***enumerable:***REMOVED***!(desc***REMOVED***=***REMOVED***__getOwnPropDesc(from,***REMOVED***key))***REMOVED***||***REMOVED***desc.enumerable***REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***to;
};
var***REMOVED***__toESM***REMOVED***=***REMOVED***(mod,***REMOVED***isNodeMode,***REMOVED***target)***REMOVED***=>***REMOVED***(target***REMOVED***=***REMOVED***mod***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***__create(__getProtoOf(mod))***REMOVED***:***REMOVED***{},***REMOVED***__copyProps(
***REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***importer***REMOVED***is***REMOVED***in***REMOVED***node***REMOVED***compatibility***REMOVED***mode***REMOVED***or***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***an***REMOVED***ESM
***REMOVED******REMOVED***//***REMOVED***file***REMOVED***that***REMOVED***has***REMOVED***been***REMOVED***converted***REMOVED***to***REMOVED***a***REMOVED***CommonJS***REMOVED***file***REMOVED***using***REMOVED***a***REMOVED***Babel-
***REMOVED******REMOVED***//***REMOVED***compatible***REMOVED***transform***REMOVED***(i.e.***REMOVED***"__esModule"***REMOVED***has***REMOVED***not***REMOVED***been***REMOVED***set),***REMOVED***then***REMOVED***set
***REMOVED******REMOVED***//***REMOVED***"default"***REMOVED***to***REMOVED***the***REMOVED***CommonJS***REMOVED***"module.exports"***REMOVED***for***REMOVED***node***REMOVED***compatibility.
***REMOVED******REMOVED***isNodeMode***REMOVED***||***REMOVED***!mod***REMOVED***||***REMOVED***!mod.__esModule***REMOVED***?***REMOVED***__defProp(target,***REMOVED***"default",***REMOVED***{***REMOVED***value:***REMOVED***mod,***REMOVED***enumerable:***REMOVED***true***REMOVED***})***REMOVED***:***REMOVED***target,
***REMOVED******REMOVED***mod
));
var***REMOVED***__toCommonJS***REMOVED***=***REMOVED***(mod)***REMOVED***=>***REMOVED***__copyProps(__defProp({},***REMOVED***"__esModule",***REMOVED***{***REMOVED***value:***REMOVED***true***REMOVED***}),***REMOVED***mod);

//***REMOVED***lib/npm/node.ts
var***REMOVED***node_exports***REMOVED***=***REMOVED***{};
__export(node_exports,***REMOVED***{
***REMOVED******REMOVED***analyzeMetafile:***REMOVED***()***REMOVED***=>***REMOVED***analyzeMetafile,
***REMOVED******REMOVED***analyzeMetafileSync:***REMOVED***()***REMOVED***=>***REMOVED***analyzeMetafileSync,
***REMOVED******REMOVED***build:***REMOVED***()***REMOVED***=>***REMOVED***build,
***REMOVED******REMOVED***buildSync:***REMOVED***()***REMOVED***=>***REMOVED***buildSync,
***REMOVED******REMOVED***context:***REMOVED***()***REMOVED***=>***REMOVED***context,
***REMOVED******REMOVED***default:***REMOVED***()***REMOVED***=>***REMOVED***node_default,
***REMOVED******REMOVED***formatMessages:***REMOVED***()***REMOVED***=>***REMOVED***formatMessages,
***REMOVED******REMOVED***formatMessagesSync:***REMOVED***()***REMOVED***=>***REMOVED***formatMessagesSync,
***REMOVED******REMOVED***initialize:***REMOVED***()***REMOVED***=>***REMOVED***initialize,
***REMOVED******REMOVED***transform:***REMOVED***()***REMOVED***=>***REMOVED***transform,
***REMOVED******REMOVED***transformSync:***REMOVED***()***REMOVED***=>***REMOVED***transformSync,
***REMOVED******REMOVED***version:***REMOVED***()***REMOVED***=>***REMOVED***version
});
module.exports***REMOVED***=***REMOVED***__toCommonJS(node_exports);

//***REMOVED***lib/shared/stdio_protocol.ts
function***REMOVED***encodePacket(packet)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***visit***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(0);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***"boolean")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(+value);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***"number")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write32(value***REMOVED***|***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***"string")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(3);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write(encodeUTF8(value));
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(value***REMOVED***instanceof***REMOVED***Uint8Array)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(4);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(value***REMOVED***instanceof***REMOVED***Array)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(5);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write32(value.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***item***REMOVED***of***REMOVED***value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***visit(item);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***Object.keys(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write8(6);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write32(keys.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***of***REMOVED***keys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***bb.write(encodeUTF8(key));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***visit(value[key]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***bb***REMOVED***=***REMOVED***new***REMOVED***ByteBuffer();
***REMOVED******REMOVED***bb.write32(0);
***REMOVED******REMOVED***bb.write32(packet.id***REMOVED***<<***REMOVED***1***REMOVED***|***REMOVED***+!packet.isRequest);
***REMOVED******REMOVED***visit(packet.value);
***REMOVED******REMOVED***writeUInt32LE(bb.buf,***REMOVED***bb.len***REMOVED***-***REMOVED***4,***REMOVED***0);
***REMOVED******REMOVED***return***REMOVED***bb.buf.subarray(0,***REMOVED***bb.len);
}
function***REMOVED***decodePacket(bytes)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***visit***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(bb.read8())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***0:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***1:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!bb.read8();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***2:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***bb.read32();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***3:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***decodeUTF8(bb.read());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***4:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***bb.read();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***5:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***count***REMOVED***=***REMOVED***bb.read32();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***value2***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***count;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value2.push(visit());
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***6:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***count***REMOVED***=***REMOVED***bb.read32();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***value2***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0;***REMOVED***i***REMOVED***<***REMOVED***count;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value2[decodeUTF8(bb.read())]***REMOVED***=***REMOVED***visit();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***value2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***default:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Invalid***REMOVED***packet");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***bb***REMOVED***=***REMOVED***new***REMOVED***ByteBuffer(bytes);
***REMOVED******REMOVED***let***REMOVED***id***REMOVED***=***REMOVED***bb.read32();
***REMOVED******REMOVED***let***REMOVED***isRequest***REMOVED***=***REMOVED***(id***REMOVED***&***REMOVED***1)***REMOVED***===***REMOVED***0;
***REMOVED******REMOVED***id***REMOVED***>>>=***REMOVED***1;
***REMOVED******REMOVED***let***REMOVED***value***REMOVED***=***REMOVED***visit();
***REMOVED******REMOVED***if***REMOVED***(bb.ptr***REMOVED***!==***REMOVED***bytes.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Invalid***REMOVED***packet");
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***id,***REMOVED***isRequest,***REMOVED***value***REMOVED***};
}
var***REMOVED***ByteBuffer***REMOVED***=***REMOVED***class***REMOVED***{
***REMOVED******REMOVED***constructor(buf***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(1024))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***this.buf***REMOVED***=***REMOVED***buf;
***REMOVED******REMOVED******REMOVED******REMOVED***this.len***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***this.ptr***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***_write(delta)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.len***REMOVED***+***REMOVED***delta***REMOVED***>***REMOVED***this.buf.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***clone***REMOVED***=***REMOVED***new***REMOVED***Uint8Array((this.len***REMOVED***+***REMOVED***delta)***REMOVED*******REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***clone.set(this.buf);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***this.buf***REMOVED***=***REMOVED***clone;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***this.len***REMOVED***+=***REMOVED***delta;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.len***REMOVED***-***REMOVED***delta;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***write8(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***offset***REMOVED***=***REMOVED***this._write(1);
***REMOVED******REMOVED******REMOVED******REMOVED***this.buf[offset]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***write32(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***offset***REMOVED***=***REMOVED***this._write(4);
***REMOVED******REMOVED******REMOVED******REMOVED***writeUInt32LE(this.buf,***REMOVED***value,***REMOVED***offset);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***write(bytes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***offset***REMOVED***=***REMOVED***this._write(4***REMOVED***+***REMOVED***bytes.length);
***REMOVED******REMOVED******REMOVED******REMOVED***writeUInt32LE(this.buf,***REMOVED***bytes.length,***REMOVED***offset);
***REMOVED******REMOVED******REMOVED******REMOVED***this.buf.set(bytes,***REMOVED***offset***REMOVED***+***REMOVED***4);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***_read(delta)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(this.ptr***REMOVED***+***REMOVED***delta***REMOVED***>***REMOVED***this.buf.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Invalid***REMOVED***packet");
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***this.ptr***REMOVED***+=***REMOVED***delta;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.ptr***REMOVED***-***REMOVED***delta;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***read8()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***this.buf[this._read(1)];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***read32()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***readUInt32LE(this.buf,***REMOVED***this._read(4));
***REMOVED******REMOVED***}
***REMOVED******REMOVED***read()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***length***REMOVED***=***REMOVED***this.read32();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***bytes***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(length);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***ptr***REMOVED***=***REMOVED***this._read(bytes.length);
***REMOVED******REMOVED******REMOVED******REMOVED***bytes.set(this.buf.subarray(ptr,***REMOVED***ptr***REMOVED***+***REMOVED***length));
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***bytes;
***REMOVED******REMOVED***}
};
var***REMOVED***encodeUTF8;
var***REMOVED***decodeUTF8;
var***REMOVED***encodeInvariant;
if***REMOVED***(typeof***REMOVED***TextEncoder***REMOVED***!==***REMOVED***"undefined"***REMOVED***&&***REMOVED***typeof***REMOVED***TextDecoder***REMOVED***!==***REMOVED***"undefined")***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***encoder***REMOVED***=***REMOVED***new***REMOVED***TextEncoder();
***REMOVED******REMOVED***let***REMOVED***decoder***REMOVED***=***REMOVED***new***REMOVED***TextDecoder();
***REMOVED******REMOVED***encodeUTF8***REMOVED***=***REMOVED***(text)***REMOVED***=>***REMOVED***encoder.encode(text);
***REMOVED******REMOVED***decodeUTF8***REMOVED***=***REMOVED***(bytes)***REMOVED***=>***REMOVED***decoder.decode(bytes);
***REMOVED******REMOVED***encodeInvariant***REMOVED***=***REMOVED***'new***REMOVED***TextEncoder().encode("")';
}***REMOVED***else***REMOVED***if***REMOVED***(typeof***REMOVED***Buffer***REMOVED***!==***REMOVED***"undefined")***REMOVED***{
***REMOVED******REMOVED***encodeUTF8***REMOVED***=***REMOVED***(text)***REMOVED***=>***REMOVED***Buffer.from(text);
***REMOVED******REMOVED***decodeUTF8***REMOVED***=***REMOVED***(bytes)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{***REMOVED***buffer,***REMOVED***byteOffset,***REMOVED***byteLength***REMOVED***}***REMOVED***=***REMOVED***bytes;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***Buffer.from(buffer,***REMOVED***byteOffset,***REMOVED***byteLength).toString();
***REMOVED******REMOVED***};
***REMOVED******REMOVED***encodeInvariant***REMOVED***=***REMOVED***'Buffer.from("")';
}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("No***REMOVED***UTF-8***REMOVED***codec***REMOVED***found");
}
if***REMOVED***(!(encodeUTF8("")***REMOVED***instanceof***REMOVED***Uint8Array))
***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invariant***REMOVED***violation:***REMOVED***"${encodeInvariant}***REMOVED***instanceof***REMOVED***Uint8Array"***REMOVED***is***REMOVED***incorrectly***REMOVED***false

This***REMOVED***indicates***REMOVED***that***REMOVED***your***REMOVED***JavaScript***REMOVED***environment***REMOVED***is***REMOVED***broken.***REMOVED***You***REMOVED***cannot***REMOVED***use
esbuild***REMOVED***in***REMOVED***this***REMOVED***environment***REMOVED***because***REMOVED***esbuild***REMOVED***relies***REMOVED***on***REMOVED***this***REMOVED***invariant.***REMOVED***This
is***REMOVED***not***REMOVED***a***REMOVED***problem***REMOVED***with***REMOVED***esbuild.***REMOVED***You***REMOVED***need***REMOVED***to***REMOVED***fix***REMOVED***your***REMOVED***environment***REMOVED***instead.
`);
function***REMOVED***readUInt32LE(buffer,***REMOVED***offset)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***buffer[offset++]***REMOVED***|***REMOVED***buffer[offset++]***REMOVED***<<***REMOVED***8***REMOVED***|***REMOVED***buffer[offset++]***REMOVED***<<***REMOVED***16***REMOVED***|***REMOVED***buffer[offset++]***REMOVED***<<***REMOVED***24;
}
function***REMOVED***writeUInt32LE(buffer,***REMOVED***value,***REMOVED***offset)***REMOVED***{
***REMOVED******REMOVED***buffer[offset++]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED***buffer[offset++]***REMOVED***=***REMOVED***value***REMOVED***>>***REMOVED***8;
***REMOVED******REMOVED***buffer[offset++]***REMOVED***=***REMOVED***value***REMOVED***>>***REMOVED***16;
***REMOVED******REMOVED***buffer[offset++]***REMOVED***=***REMOVED***value***REMOVED***>>***REMOVED***24;
}

//***REMOVED***lib/shared/common.ts
var***REMOVED***quote***REMOVED***=***REMOVED***JSON.stringify;
var***REMOVED***buildLogLevelDefault***REMOVED***=***REMOVED***"warning";
var***REMOVED***transformLogLevelDefault***REMOVED***=***REMOVED***"silent";
function***REMOVED***validateTarget(target)***REMOVED***{
***REMOVED******REMOVED***validateStringValue(target,***REMOVED***"target");
***REMOVED******REMOVED***if***REMOVED***(target.indexOf(",")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***target:***REMOVED***${target}`);
***REMOVED******REMOVED***return***REMOVED***target;
}
var***REMOVED***canBeAnything***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***null;
var***REMOVED***mustBeBoolean***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"boolean"***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***boolean";
var***REMOVED***mustBeString***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***string";
var***REMOVED***mustBeRegExp***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***value***REMOVED***instanceof***REMOVED***RegExp***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***RegExp***REMOVED***object";
var***REMOVED***mustBeInteger***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"number"***REMOVED***&&***REMOVED***value***REMOVED***===***REMOVED***(value***REMOVED***|***REMOVED***0)***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"an***REMOVED***integer";
var***REMOVED***mustBeFunction***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"function"***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***function";
var***REMOVED***mustBeArray***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***Array.isArray(value)***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"an***REMOVED***array";
var***REMOVED***mustBeObject***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"object"***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***!Array.isArray(value)***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"an***REMOVED***object";
var***REMOVED***mustBeEntryPoints***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"object"***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***null***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"an***REMOVED***array***REMOVED***or***REMOVED***an***REMOVED***object";
var***REMOVED***mustBeWebAssemblyModule***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***value***REMOVED***instanceof***REMOVED***WebAssembly.Module***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***WebAssembly.Module";
var***REMOVED***mustBeObjectOrNull***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"object"***REMOVED***&&***REMOVED***!Array.isArray(value)***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"an***REMOVED***object***REMOVED***or***REMOVED***null";
var***REMOVED***mustBeStringOrBoolean***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"boolean"***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***boolean";
var***REMOVED***mustBeStringOrObject***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"object"***REMOVED***&&***REMOVED***value***REMOVED***!==***REMOVED***null***REMOVED***&&***REMOVED***!Array.isArray(value)***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***string***REMOVED***or***REMOVED***an***REMOVED***object";
var***REMOVED***mustBeStringOrArray***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***Array.isArray(value)***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***string***REMOVED***or***REMOVED***an***REMOVED***array";
var***REMOVED***mustBeStringOrUint8Array***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***value***REMOVED***instanceof***REMOVED***Uint8Array***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***Uint8Array";
var***REMOVED***mustBeStringOrURL***REMOVED***=***REMOVED***(value)***REMOVED***=>***REMOVED***typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***value***REMOVED***instanceof***REMOVED***URL***REMOVED***?***REMOVED***null***REMOVED***:***REMOVED***"a***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***URL";
function***REMOVED***getFlag(object,***REMOVED***keys,***REMOVED***key,***REMOVED***mustBeFn)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***value***REMOVED***=***REMOVED***object[key];
***REMOVED******REMOVED***keys[key***REMOVED***+***REMOVED***""]***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***mustBe***REMOVED***=***REMOVED***mustBeFn(value);
***REMOVED******REMOVED***if***REMOVED***(mustBe***REMOVED***!==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`${quote(key)}***REMOVED***must***REMOVED***be***REMOVED***${mustBe}`);
***REMOVED******REMOVED***return***REMOVED***value;
}
function***REMOVED***checkForInvalidFlags(object,***REMOVED***keys,***REMOVED***where)***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***object)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!(key***REMOVED***in***REMOVED***keys))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***option***REMOVED***${where}:***REMOVED***${quote(key)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}
function***REMOVED***validateInitializeOptions(options)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED***let***REMOVED***wasmURL***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"wasmURL",***REMOVED***mustBeStringOrURL);
***REMOVED******REMOVED***let***REMOVED***wasmModule***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"wasmModule",***REMOVED***mustBeWebAssemblyModule);
***REMOVED******REMOVED***let***REMOVED***worker***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"worker",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys,***REMOVED***"in***REMOVED***initialize()***REMOVED***call");
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***wasmURL,
***REMOVED******REMOVED******REMOVED******REMOVED***wasmModule,
***REMOVED******REMOVED******REMOVED******REMOVED***worker
***REMOVED******REMOVED***};
}
function***REMOVED***validateMangleCache(mangleCache)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***validated;
***REMOVED******REMOVED***if***REMOVED***(mangleCache***REMOVED***!==***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***validated***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***mangleCache)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***value***REMOVED***=***REMOVED***mangleCache[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***value***REMOVED***===***REMOVED***false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validated[key]***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***${quote(key)}***REMOVED***in***REMOVED***mangle***REMOVED***cache***REMOVED***to***REMOVED***map***REMOVED***to***REMOVED***either***REMOVED***a***REMOVED***string***REMOVED***or***REMOVED***false`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***validated;
}
function***REMOVED***pushLogFlags(flags,***REMOVED***options,***REMOVED***keys,***REMOVED***isTTY2,***REMOVED***logLevelDefault)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***color***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"color",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***logLevel***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"logLevel",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***logLimit***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"logLimit",***REMOVED***mustBeInteger);
***REMOVED******REMOVED***if***REMOVED***(color***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--color=${color}`);
***REMOVED******REMOVED***else***REMOVED***if***REMOVED***(isTTY2)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--color=true`);
***REMOVED******REMOVED***flags.push(`--log-level=${logLevel***REMOVED***||***REMOVED***logLevelDefault}`);
***REMOVED******REMOVED***flags.push(`--log-limit=${logLimit***REMOVED***||***REMOVED***0}`);
}
function***REMOVED***validateStringValue(value,***REMOVED***what,***REMOVED***key)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***!==***REMOVED***"string")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***value***REMOVED***for***REMOVED***${what}${key***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***?***REMOVED***"***REMOVED***"***REMOVED***+***REMOVED***quote(key)***REMOVED***:***REMOVED***""}***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***string,***REMOVED***got***REMOVED***${typeof***REMOVED***value}***REMOVED***instead`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***value;
}
function***REMOVED***pushCommonFlags(flags,***REMOVED***options,***REMOVED***keys)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***legalComments***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"legalComments",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***sourceRoot***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"sourceRoot",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***sourcesContent***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"sourcesContent",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***target***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"target",***REMOVED***mustBeStringOrArray);
***REMOVED******REMOVED***let***REMOVED***format***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"format",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***globalName***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"globalName",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***mangleProps***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"mangleProps",***REMOVED***mustBeRegExp);
***REMOVED******REMOVED***let***REMOVED***reserveProps***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"reserveProps",***REMOVED***mustBeRegExp);
***REMOVED******REMOVED***let***REMOVED***mangleQuoted***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"mangleQuoted",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***minify***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"minify",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***minifySyntax***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"minifySyntax",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***minifyWhitespace***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"minifyWhitespace",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***minifyIdentifiers***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"minifyIdentifiers",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***lineLimit***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"lineLimit",***REMOVED***mustBeInteger);
***REMOVED******REMOVED***let***REMOVED***drop***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"drop",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***dropLabels***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"dropLabels",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***charset***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"charset",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***treeShaking***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"treeShaking",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***ignoreAnnotations***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"ignoreAnnotations",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***jsx***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"jsx",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***jsxFactory***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"jsxFactory",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***jsxFragment***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"jsxFragment",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***jsxImportSource***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"jsxImportSource",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***jsxDev***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"jsxDev",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***jsxSideEffects***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"jsxSideEffects",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***define***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"define",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***logOverride***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"logOverride",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***supported***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"supported",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***pure***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"pure",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***keepNames***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"keepNames",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***platform***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"platform",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***tsconfigRaw***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"tsconfigRaw",***REMOVED***mustBeStringOrObject);
***REMOVED******REMOVED***if***REMOVED***(legalComments)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--legal-comments=${legalComments}`);
***REMOVED******REMOVED***if***REMOVED***(sourceRoot***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--source-root=${sourceRoot}`);
***REMOVED******REMOVED***if***REMOVED***(sourcesContent***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--sources-content=${sourcesContent}`);
***REMOVED******REMOVED***if***REMOVED***(target)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Array.isArray(target))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--target=${Array.from(target).map(validateTarget).join(",")}`);
***REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--target=${validateTarget(target)}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(format)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--format=${format}`);
***REMOVED******REMOVED***if***REMOVED***(globalName)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--global-name=${globalName}`);
***REMOVED******REMOVED***if***REMOVED***(platform)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--platform=${platform}`);
***REMOVED******REMOVED***if***REMOVED***(tsconfigRaw)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--tsconfig-raw=${typeof***REMOVED***tsconfigRaw***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***tsconfigRaw***REMOVED***:***REMOVED***JSON.stringify(tsconfigRaw)}`);
***REMOVED******REMOVED***if***REMOVED***(minify)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--minify");
***REMOVED******REMOVED***if***REMOVED***(minifySyntax)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--minify-syntax");
***REMOVED******REMOVED***if***REMOVED***(minifyWhitespace)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--minify-whitespace");
***REMOVED******REMOVED***if***REMOVED***(minifyIdentifiers)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--minify-identifiers");
***REMOVED******REMOVED***if***REMOVED***(lineLimit)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--line-limit=${lineLimit}`);
***REMOVED******REMOVED***if***REMOVED***(charset)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--charset=${charset}`);
***REMOVED******REMOVED***if***REMOVED***(treeShaking***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--tree-shaking=${treeShaking}`);
***REMOVED******REMOVED***if***REMOVED***(ignoreAnnotations)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--ignore-annotations`);
***REMOVED******REMOVED***if***REMOVED***(drop)
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***what***REMOVED***of***REMOVED***drop)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--drop:${validateStringValue(what,***REMOVED***"drop")}`);
***REMOVED******REMOVED***if***REMOVED***(dropLabels)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--drop-labels=${Array.from(dropLabels).map((what)***REMOVED***=>***REMOVED***validateStringValue(what,***REMOVED***"dropLabels")).join(",")}`);
***REMOVED******REMOVED***if***REMOVED***(mangleProps)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--mangle-props=${mangleProps.source}`);
***REMOVED******REMOVED***if***REMOVED***(reserveProps)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--reserve-props=${reserveProps.source}`);
***REMOVED******REMOVED***if***REMOVED***(mangleQuoted***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--mangle-quoted=${mangleQuoted}`);
***REMOVED******REMOVED***if***REMOVED***(jsx)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--jsx=${jsx}`);
***REMOVED******REMOVED***if***REMOVED***(jsxFactory)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--jsx-factory=${jsxFactory}`);
***REMOVED******REMOVED***if***REMOVED***(jsxFragment)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--jsx-fragment=${jsxFragment}`);
***REMOVED******REMOVED***if***REMOVED***(jsxImportSource)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--jsx-import-source=${jsxImportSource}`);
***REMOVED******REMOVED***if***REMOVED***(jsxDev)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--jsx-dev`);
***REMOVED******REMOVED***if***REMOVED***(jsxSideEffects)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--jsx-side-effects`);
***REMOVED******REMOVED***if***REMOVED***(define)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***define)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***define:***REMOVED***${key}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--define:${key}=${validateStringValue(define[key],***REMOVED***"define",***REMOVED***key)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(logOverride)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***logOverride)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***log***REMOVED***override:***REMOVED***${key}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--log-override:${key}=${validateStringValue(logOverride[key],***REMOVED***"log***REMOVED***override",***REMOVED***key)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(supported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***supported)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(key.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***supported:***REMOVED***${key}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***supported[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***!==***REMOVED***"boolean")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***value***REMOVED***for***REMOVED***supported***REMOVED***${quote(key)}***REMOVED***to***REMOVED***be***REMOVED***a***REMOVED***boolean,***REMOVED***got***REMOVED***${typeof***REMOVED***value}***REMOVED***instead`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--supported:${key}=${value}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(pure)
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***fn***REMOVED***of***REMOVED***pure)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--pure:${validateStringValue(fn,***REMOVED***"pure")}`);
***REMOVED******REMOVED***if***REMOVED***(keepNames)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--keep-names`);
}
function***REMOVED***flagsForBuildOptions(callName,***REMOVED***options,***REMOVED***isTTY2,***REMOVED***logLevelDefault,***REMOVED***writeDefault)***REMOVED***{
***REMOVED******REMOVED***var***REMOVED***_a2;
***REMOVED******REMOVED***let***REMOVED***flags***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***entries***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED***let***REMOVED***stdinContents***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***let***REMOVED***stdinResolveDir***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***pushLogFlags(flags,***REMOVED***options,***REMOVED***keys,***REMOVED***isTTY2,***REMOVED***logLevelDefault);
***REMOVED******REMOVED***pushCommonFlags(flags,***REMOVED***options,***REMOVED***keys);
***REMOVED******REMOVED***let***REMOVED***sourcemap***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"sourcemap",***REMOVED***mustBeStringOrBoolean);
***REMOVED******REMOVED***let***REMOVED***bundle***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"bundle",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***splitting***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"splitting",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***preserveSymlinks***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"preserveSymlinks",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***metafile***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"metafile",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***outfile***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"outfile",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***outdir***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"outdir",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***outbase***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"outbase",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***tsconfig***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"tsconfig",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***resolveExtensions***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"resolveExtensions",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***nodePathsInput***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"nodePaths",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***mainFields***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"mainFields",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***conditions***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"conditions",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***external***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"external",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***packages***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"packages",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***alias***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"alias",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***loader***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"loader",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***outExtension***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"outExtension",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***publicPath***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"publicPath",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***entryNames***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"entryNames",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***chunkNames***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"chunkNames",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***assetNames***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"assetNames",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***inject***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"inject",***REMOVED***mustBeArray);
***REMOVED******REMOVED***let***REMOVED***banner***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"banner",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***footer***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"footer",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***entryPoints***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"entryPoints",***REMOVED***mustBeEntryPoints);
***REMOVED******REMOVED***let***REMOVED***absWorkingDir***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"absWorkingDir",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***stdin***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"stdin",***REMOVED***mustBeObject);
***REMOVED******REMOVED***let***REMOVED***write***REMOVED***=***REMOVED***(_a2***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"write",***REMOVED***mustBeBoolean))***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***_a2***REMOVED***:***REMOVED***writeDefault;
***REMOVED******REMOVED***let***REMOVED***allowOverwrite***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"allowOverwrite",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED***let***REMOVED***mangleCache***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"mangleCache",***REMOVED***mustBeObject);
***REMOVED******REMOVED***keys.plugins***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys,***REMOVED***`in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED***if***REMOVED***(sourcemap)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--sourcemap${sourcemap***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***""***REMOVED***:***REMOVED***`=${sourcemap}`}`);
***REMOVED******REMOVED***if***REMOVED***(bundle)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--bundle");
***REMOVED******REMOVED***if***REMOVED***(allowOverwrite)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--allow-overwrite");
***REMOVED******REMOVED***if***REMOVED***(splitting)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--splitting");
***REMOVED******REMOVED***if***REMOVED***(preserveSymlinks)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push("--preserve-symlinks");
***REMOVED******REMOVED***if***REMOVED***(metafile)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--metafile`);
***REMOVED******REMOVED***if***REMOVED***(outfile)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--outfile=${outfile}`);
***REMOVED******REMOVED***if***REMOVED***(outdir)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--outdir=${outdir}`);
***REMOVED******REMOVED***if***REMOVED***(outbase)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--outbase=${outbase}`);
***REMOVED******REMOVED***if***REMOVED***(tsconfig)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--tsconfig=${tsconfig}`);
***REMOVED******REMOVED***if***REMOVED***(packages)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--packages=${packages}`);
***REMOVED******REMOVED***if***REMOVED***(resolveExtensions)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***values***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***value***REMOVED***of***REMOVED***resolveExtensions)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validateStringValue(value,***REMOVED***"resolve***REMOVED***extension");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value.indexOf(",")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***resolve***REMOVED***extension:***REMOVED***${value}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***values.push(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--resolve-extensions=${values.join(",")}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(publicPath)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--public-path=${publicPath}`);
***REMOVED******REMOVED***if***REMOVED***(entryNames)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--entry-names=${entryNames}`);
***REMOVED******REMOVED***if***REMOVED***(chunkNames)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--chunk-names=${chunkNames}`);
***REMOVED******REMOVED***if***REMOVED***(assetNames)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--asset-names=${assetNames}`);
***REMOVED******REMOVED***if***REMOVED***(mainFields)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***values***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***value***REMOVED***of***REMOVED***mainFields)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validateStringValue(value,***REMOVED***"main***REMOVED***field");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value.indexOf(",")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***main***REMOVED***field:***REMOVED***${value}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***values.push(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--main-fields=${values.join(",")}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(conditions)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***values***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***value***REMOVED***of***REMOVED***conditions)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validateStringValue(value,***REMOVED***"condition");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value.indexOf(",")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***condition:***REMOVED***${value}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***values.push(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--conditions=${values.join(",")}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(external)
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***name***REMOVED***of***REMOVED***external)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--external:${validateStringValue(name,***REMOVED***"external")}`);
***REMOVED******REMOVED***if***REMOVED***(alias)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***old***REMOVED***in***REMOVED***alias)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(old.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***package***REMOVED***name***REMOVED***in***REMOVED***alias:***REMOVED***${old}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--alias:${old}=${validateStringValue(alias[old],***REMOVED***"alias",***REMOVED***old)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(banner)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***type***REMOVED***in***REMOVED***banner)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(type.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***banner***REMOVED***file***REMOVED***type:***REMOVED***${type}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--banner:${type}=${validateStringValue(banner[type],***REMOVED***"banner",***REMOVED***type)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(footer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***type***REMOVED***in***REMOVED***footer)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(type.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***footer***REMOVED***file***REMOVED***type:***REMOVED***${type}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--footer:${type}=${validateStringValue(footer[type],***REMOVED***"footer",***REMOVED***type)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(inject)
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***path3***REMOVED***of***REMOVED***inject)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--inject:${validateStringValue(path3,***REMOVED***"inject")}`);
***REMOVED******REMOVED***if***REMOVED***(loader)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***ext***REMOVED***in***REMOVED***loader)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(ext.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***loader***REMOVED***extension:***REMOVED***${ext}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--loader:${ext}=${validateStringValue(loader[ext],***REMOVED***"loader",***REMOVED***ext)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(outExtension)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***ext***REMOVED***in***REMOVED***outExtension)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(ext.indexOf("=")***REMOVED***>=***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***out***REMOVED***extension:***REMOVED***${ext}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--out-extension:${ext}=${validateStringValue(outExtension[ext],***REMOVED***"out***REMOVED***extension",***REMOVED***ext)}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(entryPoints)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(Array.isArray(entryPoints))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***0,***REMOVED***n***REMOVED***=***REMOVED***entryPoints.length;***REMOVED***i***REMOVED***<***REMOVED***n;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***entryPoint***REMOVED***=***REMOVED***entryPoints[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***entryPoint***REMOVED***===***REMOVED***"object"***REMOVED***&&***REMOVED***entryPoint***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***entryPointKeys***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***input***REMOVED***=***REMOVED***getFlag(entryPoint,***REMOVED***entryPointKeys,***REMOVED***"in",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***output***REMOVED***=***REMOVED***getFlag(entryPoint,***REMOVED***entryPointKeys,***REMOVED***"out",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(entryPoint,***REMOVED***entryPointKeys,***REMOVED***"in***REMOVED***entry***REMOVED***point***REMOVED***at***REMOVED***index***REMOVED***"***REMOVED***+***REMOVED***i);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(input***REMOVED***===***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('Missing***REMOVED***property***REMOVED***"in"***REMOVED***for***REMOVED***entry***REMOVED***point***REMOVED***at***REMOVED***index***REMOVED***'***REMOVED***+***REMOVED***i);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(output***REMOVED***===***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('Missing***REMOVED***property***REMOVED***"out"***REMOVED***for***REMOVED***entry***REMOVED***point***REMOVED***at***REMOVED***index***REMOVED***'***REMOVED***+***REMOVED***i);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entries.push([output,***REMOVED***input]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entries.push(["",***REMOVED***validateStringValue(entryPoint,***REMOVED***"entry***REMOVED***point***REMOVED***at***REMOVED***index***REMOVED***"***REMOVED***+***REMOVED***i)]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***entryPoints)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entries.push([key,***REMOVED***validateStringValue(entryPoints[key],***REMOVED***"entry***REMOVED***point",***REMOVED***key)]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(stdin)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***stdinKeys***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contents***REMOVED***=***REMOVED***getFlag(stdin,***REMOVED***stdinKeys,***REMOVED***"contents",***REMOVED***mustBeStringOrUint8Array);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***resolveDir***REMOVED***=***REMOVED***getFlag(stdin,***REMOVED***stdinKeys,***REMOVED***"resolveDir",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sourcefile***REMOVED***=***REMOVED***getFlag(stdin,***REMOVED***stdinKeys,***REMOVED***"sourcefile",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***loader2***REMOVED***=***REMOVED***getFlag(stdin,***REMOVED***stdinKeys,***REMOVED***"loader",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(stdin,***REMOVED***stdinKeys,***REMOVED***'in***REMOVED***"stdin"***REMOVED***object');
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sourcefile)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--sourcefile=${sourcefile}`);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(loader2)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--loader=${loader2}`);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(resolveDir)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinResolveDir***REMOVED***=***REMOVED***resolveDir;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***contents***REMOVED***===***REMOVED***"string")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinContents***REMOVED***=***REMOVED***encodeUTF8(contents);
***REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***if***REMOVED***(contents***REMOVED***instanceof***REMOVED***Uint8Array)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinContents***REMOVED***=***REMOVED***contents;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***nodePaths***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***if***REMOVED***(nodePathsInput)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***value***REMOVED***of***REMOVED***nodePathsInput)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***value***REMOVED***+=***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodePaths.push(value);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***entries,
***REMOVED******REMOVED******REMOVED******REMOVED***flags,
***REMOVED******REMOVED******REMOVED******REMOVED***write,
***REMOVED******REMOVED******REMOVED******REMOVED***stdinContents,
***REMOVED******REMOVED******REMOVED******REMOVED***stdinResolveDir,
***REMOVED******REMOVED******REMOVED******REMOVED***absWorkingDir,
***REMOVED******REMOVED******REMOVED******REMOVED***nodePaths,
***REMOVED******REMOVED******REMOVED******REMOVED***mangleCache:***REMOVED***validateMangleCache(mangleCache)
***REMOVED******REMOVED***};
}
function***REMOVED***flagsForTransformOptions(callName,***REMOVED***options,***REMOVED***isTTY2,***REMOVED***logLevelDefault)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***flags***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED***pushLogFlags(flags,***REMOVED***options,***REMOVED***keys,***REMOVED***isTTY2,***REMOVED***logLevelDefault);
***REMOVED******REMOVED***pushCommonFlags(flags,***REMOVED***options,***REMOVED***keys);
***REMOVED******REMOVED***let***REMOVED***sourcemap***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"sourcemap",***REMOVED***mustBeStringOrBoolean);
***REMOVED******REMOVED***let***REMOVED***sourcefile***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"sourcefile",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***loader***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"loader",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***banner***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"banner",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***footer***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"footer",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***mangleCache***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"mangleCache",***REMOVED***mustBeObject);
***REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys,***REMOVED***`in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED***if***REMOVED***(sourcemap)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--sourcemap=${sourcemap***REMOVED***===***REMOVED***true***REMOVED***?***REMOVED***"external"***REMOVED***:***REMOVED***sourcemap}`);
***REMOVED******REMOVED***if***REMOVED***(sourcefile)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--sourcefile=${sourcefile}`);
***REMOVED******REMOVED***if***REMOVED***(loader)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--loader=${loader}`);
***REMOVED******REMOVED***if***REMOVED***(banner)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--banner=${banner}`);
***REMOVED******REMOVED***if***REMOVED***(footer)
***REMOVED******REMOVED******REMOVED******REMOVED***flags.push(`--footer=${footer}`);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***flags,
***REMOVED******REMOVED******REMOVED******REMOVED***mangleCache:***REMOVED***validateMangleCache(mangleCache)
***REMOVED******REMOVED***};
}
function***REMOVED***createChannel(streamIn)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***requestCallbacksByKey***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***const***REMOVED***closeData***REMOVED***=***REMOVED***{***REMOVED***didClose:***REMOVED***false,***REMOVED***reason:***REMOVED***""***REMOVED***};
***REMOVED******REMOVED***let***REMOVED***responseCallbacks***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***let***REMOVED***nextRequestID***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***nextBuildKey***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***stdout***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(16***REMOVED*******REMOVED***1024);
***REMOVED******REMOVED***let***REMOVED***stdoutUsed***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***readFromStdout***REMOVED***=***REMOVED***(chunk)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***limit***REMOVED***=***REMOVED***stdoutUsed***REMOVED***+***REMOVED***chunk.length;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(limit***REMOVED***>***REMOVED***stdout.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***swap***REMOVED***=***REMOVED***new***REMOVED***Uint8Array(limit***REMOVED*******REMOVED***2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***swap.set(stdout);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdout***REMOVED***=***REMOVED***swap;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***stdout.set(chunk,***REMOVED***stdoutUsed);
***REMOVED******REMOVED******REMOVED******REMOVED***stdoutUsed***REMOVED***+=***REMOVED***chunk.length;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***offset***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(offset***REMOVED***+***REMOVED***4***REMOVED***<=***REMOVED***stdoutUsed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***length***REMOVED***=***REMOVED***readUInt32LE(stdout,***REMOVED***offset);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(offset***REMOVED***+***REMOVED***4***REMOVED***+***REMOVED***length***REMOVED***>***REMOVED***stdoutUsed)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offset***REMOVED***+=***REMOVED***4;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***handleIncomingPacket(stdout.subarray(offset,***REMOVED***offset***REMOVED***+***REMOVED***length));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offset***REMOVED***+=***REMOVED***length;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(offset***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdout.copyWithin(0,***REMOVED***offset,***REMOVED***stdoutUsed);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdoutUsed***REMOVED***-=***REMOVED***offset;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***afterClose***REMOVED***=***REMOVED***(error)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***closeData.didClose***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***closeData.reason***REMOVED***=***REMOVED***":***REMOVED***"***REMOVED***+***REMOVED***(error.message***REMOVED***||***REMOVED***error);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***text***REMOVED***=***REMOVED***"The***REMOVED***service***REMOVED***was***REMOVED***stopped"***REMOVED***+***REMOVED***closeData.reason;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***id***REMOVED***in***REMOVED***responseCallbacks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***responseCallbacks[id](text,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***responseCallbacks***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***sendRequest***REMOVED***=***REMOVED***(refs,***REMOVED***value,***REMOVED***callback)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeData.didClose)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback("The***REMOVED***service***REMOVED***is***REMOVED***no***REMOVED***longer***REMOVED***running"***REMOVED***+***REMOVED***closeData.reason,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***id***REMOVED***=***REMOVED***nextRequestID++;
***REMOVED******REMOVED******REMOVED******REMOVED***responseCallbacks[id]***REMOVED***=***REMOVED***(error,***REMOVED***response)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(error,***REMOVED***response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***finally***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(refs)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs.unref();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(refs)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs.ref();
***REMOVED******REMOVED******REMOVED******REMOVED***streamIn.writeToStdin(encodePacket({***REMOVED***id,***REMOVED***isRequest:***REMOVED***true,***REMOVED***value***REMOVED***}));
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***sendResponse***REMOVED***=***REMOVED***(id,***REMOVED***value)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(closeData.didClose)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("The***REMOVED***service***REMOVED***is***REMOVED***no***REMOVED***longer***REMOVED***running"***REMOVED***+***REMOVED***closeData.reason);
***REMOVED******REMOVED******REMOVED******REMOVED***streamIn.writeToStdin(encodePacket({***REMOVED***id,***REMOVED***isRequest:***REMOVED***false,***REMOVED***value***REMOVED***}));
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***handleRequest***REMOVED***=***REMOVED***async***REMOVED***(id,***REMOVED***request)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(request.command***REMOVED***===***REMOVED***"ping")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***{});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***request.key***REMOVED***===***REMOVED***"number")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***requestCallbacks***REMOVED***=***REMOVED***requestCallbacksByKey[request.key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(requestCallbacks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***callback***REMOVED***=***REMOVED***requestCallbacks[request.command];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***callback(id,***REMOVED***request);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***command:***REMOVED***`***REMOVED***+***REMOVED***request.command);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***errors***REMOVED***=***REMOVED***[extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***null,***REMOVED***void***REMOVED***0,***REMOVED***"")];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***{***REMOVED***errors***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***isFirstPacket***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***let***REMOVED***handleIncomingPacket***REMOVED***=***REMOVED***(bytes)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isFirstPacket)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isFirstPacket***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***binaryVersion***REMOVED***=***REMOVED***String.fromCharCode(...bytes);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(binaryVersion***REMOVED***!==***REMOVED***"0.18.20")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Cannot***REMOVED***start***REMOVED***service:***REMOVED***Host***REMOVED***version***REMOVED***"${"0.18.20"}"***REMOVED***does***REMOVED***not***REMOVED***match***REMOVED***binary***REMOVED***version***REMOVED***${quote(binaryVersion)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***packet***REMOVED***=***REMOVED***decodePacket(bytes);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(packet.isRequest)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***handleRequest(packet.id,***REMOVED***packet.value);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***callback***REMOVED***=***REMOVED***responseCallbacks[packet.id];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***responseCallbacks[packet.id];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(packet.value.error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(packet.value.error,***REMOVED***{});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null,***REMOVED***packet.value);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***buildOrContext***REMOVED***=***REMOVED***({***REMOVED***callName,***REMOVED***refs,***REMOVED***options,***REMOVED***isTTY:***REMOVED***isTTY2,***REMOVED***defaultWD:***REMOVED***defaultWD2,***REMOVED***callback***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***refCount***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***buildKey***REMOVED***=***REMOVED***nextBuildKey++;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***requestCallbacks***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***buildRefs***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***ref()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(++refCount***REMOVED***===***REMOVED***1)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(refs)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs.ref();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***unref()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(--refCount***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***delete***REMOVED***requestCallbacksByKey[buildKey];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(refs)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs.unref();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***requestCallbacksByKey[buildKey]***REMOVED***=***REMOVED***requestCallbacks;
***REMOVED******REMOVED******REMOVED******REMOVED***buildRefs.ref();
***REMOVED******REMOVED******REMOVED******REMOVED***buildOrContextImpl(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callName,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildKey,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendResponse,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildRefs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streamIn,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestCallbacks,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isTTY2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***defaultWD2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(err,***REMOVED***res);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***finally***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildRefs.unref();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***transform2***REMOVED***=***REMOVED***({***REMOVED***callName,***REMOVED***refs,***REMOVED***input,***REMOVED***options,***REMOVED***isTTY:***REMOVED***isTTY2,***REMOVED***fs:***REMOVED***fs3,***REMOVED***callback***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***details***REMOVED***=***REMOVED***createObjectStash();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***start***REMOVED***=***REMOVED***(inputPath)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***input***REMOVED***!==***REMOVED***"string"***REMOVED***&&***REMOVED***!(input***REMOVED***instanceof***REMOVED***Uint8Array))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('The***REMOVED***input***REMOVED***to***REMOVED***"transform"***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string***REMOVED***or***REMOVED***a***REMOVED***Uint8Array');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mangleCache
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***=***REMOVED***flagsForTransformOptions(callName,***REMOVED***options,***REMOVED***isTTY2,***REMOVED***transformLogLevelDefault);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***request***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"transform",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***inputFS:***REMOVED***inputPath***REMOVED***!==***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***input:***REMOVED***inputPath***REMOVED***!==***REMOVED***null***REMOVED***?***REMOVED***encodeUTF8(inputPath)***REMOVED***:***REMOVED***typeof***REMOVED***input***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***encodeUTF8(input)***REMOVED***:***REMOVED***input
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mangleCache)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.mangleCache***REMOVED***=***REMOVED***mangleCache;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request,***REMOVED***(error,***REMOVED***response)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(new***REMOVED***Error(error),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errors***REMOVED***=***REMOVED***replaceDetailsInMessages(response.errors,***REMOVED***details);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***warnings***REMOVED***=***REMOVED***replaceDetailsInMessages(response.warnings,***REMOVED***details);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***outstanding***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***next***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(--outstanding***REMOVED***===***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warnings,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***code:***REMOVED***response.code,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map:***REMOVED***response.map,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mangleCache:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***legalComments:***REMOVED***void***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***("legalComments"***REMOVED***in***REMOVED***response)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.legalComments***REMOVED***=***REMOVED***response***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***response.legalComments;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.mangleCache)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.mangleCache***REMOVED***=***REMOVED***response***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***response.mangleCache;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null,***REMOVED***result);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(errors.length***REMOVED***>***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(failureErrorWithLog("Transform***REMOVED***failed",***REMOVED***errors,***REMOVED***warnings),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.codeFS)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***outstanding++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs3.readFile(response.code,***REMOVED***(err,***REMOVED***contents)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(err,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.code***REMOVED***=***REMOVED***contents;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***next();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.mapFS)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***outstanding++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs3.readFile(response.map,***REMOVED***(err,***REMOVED***contents)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err***REMOVED***!==***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(err,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.map***REMOVED***=***REMOVED***contents;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***next();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***next();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***flags***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pushLogFlags(flags,***REMOVED***options,***REMOVED***{},***REMOVED***isTTY2,***REMOVED***transformLogLevelDefault);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***error***REMOVED***=***REMOVED***extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***details,***REMOVED***void***REMOVED***0,***REMOVED***"");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***{***REMOVED***command:***REMOVED***"error",***REMOVED***flags,***REMOVED***error***REMOVED***},***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***error.detail***REMOVED***=***REMOVED***details.load(error.detail);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(failureErrorWithLog("Transform***REMOVED***failed",***REMOVED***[error],***REMOVED***[]),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((typeof***REMOVED***input***REMOVED***===***REMOVED***"string"***REMOVED***||***REMOVED***input***REMOVED***instanceof***REMOVED***Uint8Array)***REMOVED***&&***REMOVED***input.length***REMOVED***>***REMOVED***1024***REMOVED*******REMOVED***1024)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***next***REMOVED***=***REMOVED***start;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***start***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***fs3.writeFile(input,***REMOVED***next);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***start(null);
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***formatMessages2***REMOVED***=***REMOVED***({***REMOVED***callName,***REMOVED***refs,***REMOVED***messages,***REMOVED***options,***REMOVED***callback***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***sanitizeMessages(messages,***REMOVED***"messages",***REMOVED***null,***REMOVED***"");
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!options)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Missing***REMOVED***second***REMOVED***argument***REMOVED***in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***kind***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"kind",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***color***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"color",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***terminalWidth***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"terminalWidth",***REMOVED***mustBeInteger);
***REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys,***REMOVED***`in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(kind***REMOVED***===***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Missing***REMOVED***"kind"***REMOVED***in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(kind***REMOVED***!==***REMOVED***"error"***REMOVED***&&***REMOVED***kind***REMOVED***!==***REMOVED***"warning")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***"kind"***REMOVED***to***REMOVED***be***REMOVED***"error"***REMOVED***or***REMOVED***"warning"***REMOVED***in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***request***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"format-msgs",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***messages:***REMOVED***result,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isWarning:***REMOVED***kind***REMOVED***===***REMOVED***"warning"
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(color***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.color***REMOVED***=***REMOVED***color;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(terminalWidth***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.terminalWidth***REMOVED***=***REMOVED***terminalWidth;
***REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request,***REMOVED***(error,***REMOVED***response)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(new***REMOVED***Error(error),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null,***REMOVED***response.messages);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***analyzeMetafile2***REMOVED***=***REMOVED***({***REMOVED***callName,***REMOVED***refs,***REMOVED***metafile,***REMOVED***options,***REMOVED***callback***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(options***REMOVED***===***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***color***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"color",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***verbose***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys,***REMOVED***"verbose",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys,***REMOVED***`in***REMOVED***${callName}()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***request***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"analyze-metafile",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***metafile
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(color***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.color***REMOVED***=***REMOVED***color;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(verbose***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.verbose***REMOVED***=***REMOVED***verbose;
***REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request,***REMOVED***(error,***REMOVED***response)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(new***REMOVED***Error(error),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null,***REMOVED***response.result);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***};
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***readFromStdout,
***REMOVED******REMOVED******REMOVED******REMOVED***afterClose,
***REMOVED******REMOVED******REMOVED******REMOVED***service:***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildOrContext,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***transform:***REMOVED***transform2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***formatMessages:***REMOVED***formatMessages2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***analyzeMetafile:***REMOVED***analyzeMetafile2
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}
function***REMOVED***buildOrContextImpl(callName,***REMOVED***buildKey,***REMOVED***sendRequest,***REMOVED***sendResponse,***REMOVED***refs,***REMOVED***streamIn,***REMOVED***requestCallbacks,***REMOVED***options,***REMOVED***isTTY2,***REMOVED***defaultWD2,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***details***REMOVED***=***REMOVED***createObjectStash();
***REMOVED******REMOVED***const***REMOVED***isContext***REMOVED***=***REMOVED***callName***REMOVED***===***REMOVED***"context";
***REMOVED******REMOVED***const***REMOVED***handleError***REMOVED***=***REMOVED***(e,***REMOVED***pluginName)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***flags***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pushLogFlags(flags,***REMOVED***options,***REMOVED***{},***REMOVED***isTTY2,***REMOVED***buildLogLevelDefault);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***message***REMOVED***=***REMOVED***extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***details,***REMOVED***void***REMOVED***0,***REMOVED***pluginName);
***REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***{***REMOVED***command:***REMOVED***"error",***REMOVED***flags,***REMOVED***error:***REMOVED***message***REMOVED***},***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***message.detail***REMOVED***=***REMOVED***details.load(message.detail);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(failureErrorWithLog(isContext***REMOVED***?***REMOVED***"Context***REMOVED***failed"***REMOVED***:***REMOVED***"Build***REMOVED***failed",***REMOVED***[message],***REMOVED***[]),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***plugins;
***REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***options***REMOVED***===***REMOVED***"object")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***options.plugins;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***!==***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!Array.isArray(value))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***handleError(new***REMOVED***Error(`"plugins"***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***array`),***REMOVED***"");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***plugins***REMOVED***=***REMOVED***value;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(plugins***REMOVED***&&***REMOVED***plugins.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(streamIn.isSync)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***handleError(new***REMOVED***Error("Cannot***REMOVED***use***REMOVED***plugins***REMOVED***in***REMOVED***synchronous***REMOVED***API***REMOVED***calls"),***REMOVED***"");
***REMOVED******REMOVED******REMOVED******REMOVED***handlePlugins(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildKey,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendResponse,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***streamIn,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestCallbacks,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***plugins,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***details
***REMOVED******REMOVED******REMOVED******REMOVED***).then(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(result)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!result.ok)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***handleError(result.error,***REMOVED***result.pluginName);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildOrContextContinue(result.requestPlugins,***REMOVED***result.runOnEndCallbacks,***REMOVED***result.scheduleOnDisposeCallbacks);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***handleError(e,***REMOVED***"");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(e)***REMOVED***=>***REMOVED***handleError(e,***REMOVED***"")
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***buildOrContextContinue(null,***REMOVED***(result,***REMOVED***done)***REMOVED***=>***REMOVED***done([],***REMOVED***[]),***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***handleError(e,***REMOVED***"");
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***buildOrContextContinue(requestPlugins,***REMOVED***runOnEndCallbacks,***REMOVED***scheduleOnDisposeCallbacks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***writeDefault***REMOVED***=***REMOVED***streamIn.hasFS;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entries,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***write,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinContents,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinResolveDir,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***absWorkingDir,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodePaths,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mangleCache
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***=***REMOVED***flagsForBuildOptions(callName,***REMOVED***options,***REMOVED***isTTY2,***REMOVED***buildLogLevelDefault,***REMOVED***writeDefault);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(write***REMOVED***&&***REMOVED***!streamIn.hasFS)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***"write"***REMOVED***option***REMOVED***is***REMOVED***unavailable***REMOVED***in***REMOVED***this***REMOVED***environment`);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"build",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***entries,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flags,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***write,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinContents,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdinResolveDir,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***absWorkingDir:***REMOVED***absWorkingDir***REMOVED***||***REMOVED***defaultWD2,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***nodePaths,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***context:***REMOVED***isContext
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(requestPlugins)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.plugins***REMOVED***=***REMOVED***requestPlugins;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(mangleCache)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.mangleCache***REMOVED***=***REMOVED***mangleCache;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***buildResponseToResult***REMOVED***=***REMOVED***(response,***REMOVED***callback2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errors:***REMOVED***replaceDetailsInMessages(response.errors,***REMOVED***details),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warnings:***REMOVED***replaceDetailsInMessages(response.warnings,***REMOVED***details),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***outputFiles:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***metafile:***REMOVED***void***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***mangleCache:***REMOVED***void***REMOVED***0
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***originalErrors***REMOVED***=***REMOVED***result.errors.slice();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***originalWarnings***REMOVED***=***REMOVED***result.warnings.slice();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.outputFiles)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.outputFiles***REMOVED***=***REMOVED***response.outputFiles.map(convertOutputFiles);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.metafile)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.metafile***REMOVED***=***REMOVED***JSON.parse(response.metafile);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.mangleCache)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.mangleCache***REMOVED***=***REMOVED***response.mangleCache;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.writeToStdout***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.log(decodeUTF8(response.writeToStdout).replace(/\n$/,***REMOVED***""));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***runOnEndCallbacks(result,***REMOVED***(onEndErrors,***REMOVED***onEndWarnings)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(originalErrors.length***REMOVED***>***REMOVED***0***REMOVED***||***REMOVED***onEndErrors.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***error***REMOVED***=***REMOVED***failureErrorWithLog("Build***REMOVED***failed",***REMOVED***originalErrors.concat(onEndErrors),***REMOVED***originalWarnings.concat(onEndWarnings));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback2(error,***REMOVED***null,***REMOVED***onEndErrors,***REMOVED***onEndWarnings);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback2(null,***REMOVED***result,***REMOVED***onEndErrors,***REMOVED***onEndWarnings);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***latestResultPromise;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***provideLatestResult;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isContext)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestCallbacks["on-end"]***REMOVED***=***REMOVED***(id,***REMOVED***request2)***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***buildResponseToResult(request2,***REMOVED***(err,***REMOVED***result,***REMOVED***onEndErrors,***REMOVED***onEndWarnings)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***response***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errors:***REMOVED***onEndErrors,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warnings:***REMOVED***onEndWarnings
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(provideLatestResult)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***provideLatestResult(err,***REMOVED***result);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***latestResultPromise***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***provideLatestResult***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***response);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request,***REMOVED***(error,***REMOVED***response)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(new***REMOVED***Error(error),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isContext)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***buildResponseToResult(response,***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scheduleOnDisposeCallbacks();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(err,***REMOVED***res);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(response.errors.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***callback(failureErrorWithLog("Context***REMOVED***failed",***REMOVED***response.errors,***REMOVED***response.warnings),***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***didDispose***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***rebuild:***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!latestResultPromise)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***latestResultPromise***REMOVED***=***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***settlePromise;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***provideLatestResult***REMOVED***=***REMOVED***(err,***REMOVED***result2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!settlePromise)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settlePromise***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***err***REMOVED***?***REMOVED***reject(err)***REMOVED***:***REMOVED***resolve(result2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***triggerAnotherBuild***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request2***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"rebuild",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request2,***REMOVED***(error2,***REMOVED***response2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***Error(error2));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(settlePromise)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***settlePromise();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***triggerAnotherBuild();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***triggerAnotherBuild();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***latestResultPromise;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***watch:***REMOVED***(options2***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!streamIn.hasFS)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Cannot***REMOVED***use***REMOVED***the***REMOVED***"watch"***REMOVED***API***REMOVED***in***REMOVED***this***REMOVED***environment`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options2,***REMOVED***keys,***REMOVED***`in***REMOVED***watch()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request2***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"watch",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request2,***REMOVED***(error2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error2)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***Error(error2));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve(void***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***serve:***REMOVED***(options2***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!streamIn.hasFS)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Cannot***REMOVED***use***REMOVED***the***REMOVED***"serve"***REMOVED***API***REMOVED***in***REMOVED***this***REMOVED***environment`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***port***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"port",***REMOVED***mustBeInteger);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***host***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"host",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***servedir***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"servedir",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keyfile***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"keyfile",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***certfile***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"certfile",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***fallback***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"fallback",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onRequest***REMOVED***=***REMOVED***getFlag(options2,***REMOVED***keys,***REMOVED***"onRequest",***REMOVED***mustBeFunction);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options2,***REMOVED***keys,***REMOVED***`in***REMOVED***serve()***REMOVED***call`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request2***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"serve",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onRequest:***REMOVED***!!onRequest
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(port***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request2.port***REMOVED***=***REMOVED***port;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(host***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request2.host***REMOVED***=***REMOVED***host;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(servedir***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request2.servedir***REMOVED***=***REMOVED***servedir;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(keyfile***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request2.keyfile***REMOVED***=***REMOVED***keyfile;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(certfile***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request2.certfile***REMOVED***=***REMOVED***certfile;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(fallback***REMOVED***!==***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request2.fallback***REMOVED***=***REMOVED***fallback;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request2,***REMOVED***(error2,***REMOVED***response2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error2)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***Error(error2));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(onRequest)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestCallbacks["serve-request"]***REMOVED***=***REMOVED***(id,***REMOVED***request3)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onRequest(request3.args);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***{});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve(response2);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***cancel:***REMOVED***()***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(didDispose)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***resolve();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request2***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"cancel",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request2,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***dispose:***REMOVED***()***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(didDispose)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***resolve();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***didDispose***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request2***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"dispose",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request2,***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***scheduleOnDisposeCallbacks();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs.unref();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs.ref();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null,***REMOVED***result);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
}
var***REMOVED***handlePlugins***REMOVED***=***REMOVED***async***REMOVED***(buildKey,***REMOVED***sendRequest,***REMOVED***sendResponse,***REMOVED***refs,***REMOVED***streamIn,***REMOVED***requestCallbacks,***REMOVED***initialOptions,***REMOVED***plugins,***REMOVED***details)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***onStartCallbacks***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***onEndCallbacks***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***onResolveCallbacks***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***let***REMOVED***onLoadCallbacks***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***let***REMOVED***onDisposeCallbacks***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***nextCallbackID***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***i***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***requestPlugins***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***isSetupDone***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***plugins***REMOVED***=***REMOVED***[...plugins];
***REMOVED******REMOVED***for***REMOVED***(let***REMOVED***item***REMOVED***of***REMOVED***plugins)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***item***REMOVED***!==***REMOVED***"object")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Plugin***REMOVED***at***REMOVED***index***REMOVED***${i}***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***object`);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***name***REMOVED***=***REMOVED***getFlag(item,***REMOVED***keys,***REMOVED***"name",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***name***REMOVED***!==***REMOVED***"string"***REMOVED***||***REMOVED***name***REMOVED***===***REMOVED***"")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Plugin***REMOVED***at***REMOVED***index***REMOVED***${i}***REMOVED***is***REMOVED***missing***REMOVED***a***REMOVED***name`);
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***setup***REMOVED***=***REMOVED***getFlag(item,***REMOVED***keys,***REMOVED***"setup",***REMOVED***mustBeFunction);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***setup***REMOVED***!==***REMOVED***"function")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Plugin***REMOVED***is***REMOVED***missing***REMOVED***a***REMOVED***setup***REMOVED***function`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(item,***REMOVED***keys,***REMOVED***`on***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***plugin***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***name,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onStart:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onEnd:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onResolve:***REMOVED***[],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onLoad:***REMOVED***[]
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***i++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***resolve***REMOVED***=***REMOVED***(path3,***REMOVED***options***REMOVED***=***REMOVED***{})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isSetupDone)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('Cannot***REMOVED***call***REMOVED***"resolve"***REMOVED***before***REMOVED***plugin***REMOVED***setup***REMOVED***has***REMOVED***completed');
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***path3***REMOVED***!==***REMOVED***"string")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***path***REMOVED***to***REMOVED***resolve***REMOVED***must***REMOVED***be***REMOVED***a***REMOVED***string`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys2***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***Object.create(null);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginName***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"pluginName",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***importer***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"importer",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***namespace***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"namespace",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***resolveDir***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"resolveDir",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***kind***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"kind",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginData***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"pluginData",***REMOVED***canBeAnything);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys2,***REMOVED***"in***REMOVED***resolve()***REMOVED***call");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise((resolve2,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***request***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***command:***REMOVED***"resolve",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path:***REMOVED***path3,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***buildKey,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginName:***REMOVED***name
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pluginName***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.pluginName***REMOVED***=***REMOVED***pluginName;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(importer***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.importer***REMOVED***=***REMOVED***importer;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(namespace***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.namespace***REMOVED***=***REMOVED***namespace;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(resolveDir***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.resolveDir***REMOVED***=***REMOVED***resolveDir;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(kind***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.kind***REMOVED***=***REMOVED***kind;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Must***REMOVED***specify***REMOVED***"kind"***REMOVED***when***REMOVED***calling***REMOVED***"resolve"`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pluginData***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***request.pluginData***REMOVED***=***REMOVED***details.store(pluginData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sendRequest(refs,***REMOVED***request,***REMOVED***(error,***REMOVED***response)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(error***REMOVED***!==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***reject(new***REMOVED***Error(error));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve2({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***errors:***REMOVED***replaceDetailsInMessages(response.errors,***REMOVED***details),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***warnings:***REMOVED***replaceDetailsInMessages(response.warnings,***REMOVED***details),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path:***REMOVED***response.path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***external:***REMOVED***response.external,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***sideEffects:***REMOVED***response.sideEffects,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***namespace:***REMOVED***response.namespace,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***suffix:***REMOVED***response.suffix,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginData:***REMOVED***details.load(response.pluginData)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***promise***REMOVED***=***REMOVED***setup({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***initialOptions,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolve,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onStart(callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredText***REMOVED***=***REMOVED***`This***REMOVED***error***REMOVED***came***REMOVED***from***REMOVED***the***REMOVED***"onStart"***REMOVED***callback***REMOVED***registered***REMOVED***here:`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredNote***REMOVED***=***REMOVED***extractCallerV8(new***REMOVED***Error(registeredText),***REMOVED***streamIn,***REMOVED***"onStart");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onStartCallbacks.push({***REMOVED***name,***REMOVED***callback,***REMOVED***note:***REMOVED***registeredNote***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***plugin.onStart***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onEnd(callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredText***REMOVED***=***REMOVED***`This***REMOVED***error***REMOVED***came***REMOVED***from***REMOVED***the***REMOVED***"onEnd"***REMOVED***callback***REMOVED***registered***REMOVED***here:`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredNote***REMOVED***=***REMOVED***extractCallerV8(new***REMOVED***Error(registeredText),***REMOVED***streamIn,***REMOVED***"onEnd");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onEndCallbacks.push({***REMOVED***name,***REMOVED***callback,***REMOVED***note:***REMOVED***registeredNote***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***plugin.onEnd***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onResolve(options,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredText***REMOVED***=***REMOVED***`This***REMOVED***error***REMOVED***came***REMOVED***from***REMOVED***the***REMOVED***"onResolve"***REMOVED***callback***REMOVED***registered***REMOVED***here:`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredNote***REMOVED***=***REMOVED***extractCallerV8(new***REMOVED***Error(registeredText),***REMOVED***streamIn,***REMOVED***"onResolve");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys2***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***filter***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"filter",***REMOVED***mustBeRegExp);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***namespace***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"namespace",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys2,***REMOVED***`in***REMOVED***onResolve()***REMOVED***call***REMOVED***for***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(filter***REMOVED***==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`onResolve()***REMOVED***call***REMOVED***is***REMOVED***missing***REMOVED***a***REMOVED***filter`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***id***REMOVED***=***REMOVED***nextCallbackID++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onResolveCallbacks[id]***REMOVED***=***REMOVED***{***REMOVED***name,***REMOVED***callback,***REMOVED***note:***REMOVED***registeredNote***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***plugin.onResolve.push({***REMOVED***id,***REMOVED***filter:***REMOVED***filter.source,***REMOVED***namespace:***REMOVED***namespace***REMOVED***||***REMOVED***""***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onLoad(options,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredText***REMOVED***=***REMOVED***`This***REMOVED***error***REMOVED***came***REMOVED***from***REMOVED***the***REMOVED***"onLoad"***REMOVED***callback***REMOVED***registered***REMOVED***here:`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***registeredNote***REMOVED***=***REMOVED***extractCallerV8(new***REMOVED***Error(registeredText),***REMOVED***streamIn,***REMOVED***"onLoad");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys2***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***filter***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"filter",***REMOVED***mustBeRegExp);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***namespace***REMOVED***=***REMOVED***getFlag(options,***REMOVED***keys2,***REMOVED***"namespace",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(options,***REMOVED***keys2,***REMOVED***`in***REMOVED***onLoad()***REMOVED***call***REMOVED***for***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(filter***REMOVED***==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`onLoad()***REMOVED***call***REMOVED***is***REMOVED***missing***REMOVED***a***REMOVED***filter`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***id***REMOVED***=***REMOVED***nextCallbackID++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onLoadCallbacks[id]***REMOVED***=***REMOVED***{***REMOVED***name,***REMOVED***callback,***REMOVED***note:***REMOVED***registeredNote***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***plugin.onLoad.push({***REMOVED***id,***REMOVED***filter:***REMOVED***filter.source,***REMOVED***namespace:***REMOVED***namespace***REMOVED***||***REMOVED***""***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDispose(callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onDisposeCallbacks.push(callback);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***esbuild:***REMOVED***streamIn.esbuild
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(promise)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***promise;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***requestPlugins.push(plugin);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***ok:***REMOVED***false,***REMOVED***error:***REMOVED***e,***REMOVED***pluginName:***REMOVED***name***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***requestCallbacks["on-start"]***REMOVED***=***REMOVED***async***REMOVED***(id,***REMOVED***request)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***response***REMOVED***=***REMOVED***{***REMOVED***errors:***REMOVED***[],***REMOVED***warnings:***REMOVED***[]***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***Promise.all(onStartCallbacks.map(async***REMOVED***({***REMOVED***name,***REMOVED***callback,***REMOVED***note***REMOVED***})***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***await***REMOVED***callback();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(result***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***result***REMOVED***!==***REMOVED***"object")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***onStart()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}***REMOVED***to***REMOVED***return***REMOVED***an***REMOVED***object`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errors***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"errors",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***warnings***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"warnings",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(result,***REMOVED***keys,***REMOVED***`from***REMOVED***onStart()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(errors***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.errors.push(...sanitizeMessages(errors,***REMOVED***"errors",***REMOVED***details,***REMOVED***name));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(warnings***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.warnings.push(...sanitizeMessages(warnings,***REMOVED***"warnings",***REMOVED***details,***REMOVED***name));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.errors.push(extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***details,***REMOVED***note***REMOVED***&&***REMOVED***note(),***REMOVED***name));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}));
***REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***response);
***REMOVED******REMOVED***};
***REMOVED******REMOVED***requestCallbacks["on-resolve"]***REMOVED***=***REMOVED***async***REMOVED***(id,***REMOVED***request)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***response***REMOVED***=***REMOVED***{},***REMOVED***name***REMOVED***=***REMOVED***"",***REMOVED***callback,***REMOVED***note;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***id2***REMOVED***of***REMOVED***request.ids)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***({***REMOVED***name,***REMOVED***callback,***REMOVED***note***REMOVED***}***REMOVED***=***REMOVED***onResolveCallbacks[id2]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***await***REMOVED***callback({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path:***REMOVED***request.path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***importer:***REMOVED***request.importer,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***namespace:***REMOVED***request.namespace,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***resolveDir:***REMOVED***request.resolveDir,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***kind:***REMOVED***request.kind,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginData:***REMOVED***details.load(request.pluginData)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(result***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***result***REMOVED***!==***REMOVED***"object")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***onResolve()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}***REMOVED***to***REMOVED***return***REMOVED***an***REMOVED***object`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginName***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"pluginName",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***path3***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"path",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***namespace***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"namespace",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***suffix***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"suffix",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***external***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"external",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sideEffects***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"sideEffects",***REMOVED***mustBeBoolean);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginData***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"pluginData",***REMOVED***canBeAnything);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errors***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"errors",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***warnings***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"warnings",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***watchFiles***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"watchFiles",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***watchDirs***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"watchDirs",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(result,***REMOVED***keys,***REMOVED***`from***REMOVED***onResolve()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.id***REMOVED***=***REMOVED***id2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pluginName***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.pluginName***REMOVED***=***REMOVED***pluginName;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(path3***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.path***REMOVED***=***REMOVED***path3;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(namespace***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.namespace***REMOVED***=***REMOVED***namespace;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(suffix***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.suffix***REMOVED***=***REMOVED***suffix;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(external***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.external***REMOVED***=***REMOVED***external;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(sideEffects***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.sideEffects***REMOVED***=***REMOVED***sideEffects;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pluginData***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.pluginData***REMOVED***=***REMOVED***details.store(pluginData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(errors***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.errors***REMOVED***=***REMOVED***sanitizeMessages(errors,***REMOVED***"errors",***REMOVED***details,***REMOVED***name);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(warnings***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.warnings***REMOVED***=***REMOVED***sanitizeMessages(warnings,***REMOVED***"warnings",***REMOVED***details,***REMOVED***name);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(watchFiles***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.watchFiles***REMOVED***=***REMOVED***sanitizeStringArray(watchFiles,***REMOVED***"watchFiles");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(watchDirs***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.watchDirs***REMOVED***=***REMOVED***sanitizeStringArray(watchDirs,***REMOVED***"watchDirs");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response***REMOVED***=***REMOVED***{***REMOVED***id:***REMOVED***id2,***REMOVED***errors:***REMOVED***[extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***details,***REMOVED***note***REMOVED***&&***REMOVED***note(),***REMOVED***name)]***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***response);
***REMOVED******REMOVED***};
***REMOVED******REMOVED***requestCallbacks["on-load"]***REMOVED***=***REMOVED***async***REMOVED***(id,***REMOVED***request)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***response***REMOVED***=***REMOVED***{},***REMOVED***name***REMOVED***=***REMOVED***"",***REMOVED***callback,***REMOVED***note;
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***id2***REMOVED***of***REMOVED***request.ids)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***({***REMOVED***name,***REMOVED***callback,***REMOVED***note***REMOVED***}***REMOVED***=***REMOVED***onLoadCallbacks[id2]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***result***REMOVED***=***REMOVED***await***REMOVED***callback({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***path:***REMOVED***request.path,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***namespace:***REMOVED***request.namespace,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***suffix:***REMOVED***request.suffix,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginData:***REMOVED***details.load(request.pluginData)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(result***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***result***REMOVED***!==***REMOVED***"object")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***onLoad()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}***REMOVED***to***REMOVED***return***REMOVED***an***REMOVED***object`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginName***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"pluginName",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contents***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"contents",***REMOVED***mustBeStringOrUint8Array);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***resolveDir***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"resolveDir",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginData***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"pluginData",***REMOVED***canBeAnything);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***loader***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"loader",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errors***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"errors",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***warnings***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"warnings",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***watchFiles***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"watchFiles",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***watchDirs***REMOVED***=***REMOVED***getFlag(result,***REMOVED***keys,***REMOVED***"watchDirs",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(result,***REMOVED***keys,***REMOVED***`from***REMOVED***onLoad()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.id***REMOVED***=***REMOVED***id2;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pluginName***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.pluginName***REMOVED***=***REMOVED***pluginName;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(contents***REMOVED***instanceof***REMOVED***Uint8Array)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.contents***REMOVED***=***REMOVED***contents;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***else***REMOVED***if***REMOVED***(contents***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.contents***REMOVED***=***REMOVED***encodeUTF8(contents);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(resolveDir***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.resolveDir***REMOVED***=***REMOVED***resolveDir;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pluginData***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.pluginData***REMOVED***=***REMOVED***details.store(pluginData);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(loader***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.loader***REMOVED***=***REMOVED***loader;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(errors***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.errors***REMOVED***=***REMOVED***sanitizeMessages(errors,***REMOVED***"errors",***REMOVED***details,***REMOVED***name);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(warnings***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.warnings***REMOVED***=***REMOVED***sanitizeMessages(warnings,***REMOVED***"warnings",***REMOVED***details,***REMOVED***name);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(watchFiles***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.watchFiles***REMOVED***=***REMOVED***sanitizeStringArray(watchFiles,***REMOVED***"watchFiles");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(watchDirs***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response.watchDirs***REMOVED***=***REMOVED***sanitizeStringArray(watchDirs,***REMOVED***"watchDirs");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***response***REMOVED***=***REMOVED***{***REMOVED***id:***REMOVED***id2,***REMOVED***errors:***REMOVED***[extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***details,***REMOVED***note***REMOVED***&&***REMOVED***note(),***REMOVED***name)]***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***sendResponse(id,***REMOVED***response);
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***runOnEndCallbacks***REMOVED***=***REMOVED***(result,***REMOVED***done)***REMOVED***=>***REMOVED***done([],***REMOVED***[]);
***REMOVED******REMOVED***if***REMOVED***(onEndCallbacks.length***REMOVED***>***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***runOnEndCallbacks***REMOVED***=***REMOVED***(result,***REMOVED***done)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(async***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onEndErrors***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***onEndWarnings***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***{***REMOVED***name,***REMOVED***callback,***REMOVED***note***REMOVED***}***REMOVED***of***REMOVED***onEndCallbacks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***newErrors;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***newWarnings;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***await***REMOVED***callback(result);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***!=***REMOVED***null)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***!==***REMOVED***"object")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***onEnd()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}***REMOVED***to***REMOVED***return***REMOVED***an***REMOVED***object`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errors***REMOVED***=***REMOVED***getFlag(value,***REMOVED***keys,***REMOVED***"errors",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***warnings***REMOVED***=***REMOVED***getFlag(value,***REMOVED***keys,***REMOVED***"warnings",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(value,***REMOVED***keys,***REMOVED***`from***REMOVED***onEnd()***REMOVED***callback***REMOVED***in***REMOVED***plugin***REMOVED***${quote(name)}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(errors***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newErrors***REMOVED***=***REMOVED***sanitizeMessages(errors,***REMOVED***"errors",***REMOVED***details,***REMOVED***name);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(warnings***REMOVED***!=***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newWarnings***REMOVED***=***REMOVED***sanitizeMessages(warnings,***REMOVED***"warnings",***REMOVED***details,***REMOVED***name);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***newErrors***REMOVED***=***REMOVED***[extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***details,***REMOVED***note***REMOVED***&&***REMOVED***note(),***REMOVED***name)];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(newErrors)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onEndErrors.push(...newErrors);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.errors.push(...newErrors);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(newWarnings)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***onEndWarnings.push(...newWarnings);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result.warnings.push(...newWarnings);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***done(onEndErrors,***REMOVED***onEndWarnings);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})();
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***scheduleOnDisposeCallbacks***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***cb***REMOVED***of***REMOVED***onDisposeCallbacks)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***setTimeout(()***REMOVED***=>***REMOVED***cb(),***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***isSetupDone***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ok:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***requestPlugins,
***REMOVED******REMOVED******REMOVED******REMOVED***runOnEndCallbacks,
***REMOVED******REMOVED******REMOVED******REMOVED***scheduleOnDisposeCallbacks
***REMOVED******REMOVED***};
};
function***REMOVED***createObjectStash()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***map***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED***let***REMOVED***nextID***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***load(id)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***map.get(id);
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***store(value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(value***REMOVED***===***REMOVED***void***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***-1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***id***REMOVED***=***REMOVED***nextID++;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***map.set(id,***REMOVED***value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***id;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}
function***REMOVED***extractCallerV8(e,***REMOVED***streamIn,***REMOVED***ident)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***note;
***REMOVED******REMOVED***let***REMOVED***tried***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***return***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(tried)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***note;
***REMOVED******REMOVED******REMOVED******REMOVED***tried***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***lines***REMOVED***=***REMOVED***(e.stack***REMOVED***+***REMOVED***"").split("\n");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lines.splice(1,***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***location***REMOVED***=***REMOVED***parseStackLinesV8(streamIn,***REMOVED***lines,***REMOVED***ident);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(location)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***note***REMOVED***=***REMOVED***{***REMOVED***text:***REMOVED***e.message,***REMOVED***location***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***note;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}
function***REMOVED***extractErrorMessageV8(e,***REMOVED***streamIn,***REMOVED***stash,***REMOVED***note,***REMOVED***pluginName)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***text***REMOVED***=***REMOVED***"Internal***REMOVED***error";
***REMOVED******REMOVED***let***REMOVED***location***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***text***REMOVED***=***REMOVED***(e***REMOVED***&&***REMOVED***e.message***REMOVED***||***REMOVED***e)***REMOVED***+***REMOVED***"";
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED***}
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***location***REMOVED***=***REMOVED***parseStackLinesV8(streamIn,***REMOVED***(e.stack***REMOVED***+***REMOVED***"").split("\n"),***REMOVED***"");
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***id:***REMOVED***"",***REMOVED***pluginName,***REMOVED***text,***REMOVED***location,***REMOVED***notes:***REMOVED***note***REMOVED***?***REMOVED***[note]***REMOVED***:***REMOVED***[],***REMOVED***detail:***REMOVED***stash***REMOVED***?***REMOVED***stash.store(e)***REMOVED***:***REMOVED***-1***REMOVED***};
}
function***REMOVED***parseStackLinesV8(streamIn,***REMOVED***lines,***REMOVED***ident)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***at***REMOVED***=***REMOVED***"***REMOVED******REMOVED******REMOVED******REMOVED***at***REMOVED***";
***REMOVED******REMOVED***if***REMOVED***(streamIn.readFileSync***REMOVED***&&***REMOVED***!lines[0].startsWith(at)***REMOVED***&&***REMOVED***lines[1].startsWith(at))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***1;***REMOVED***i***REMOVED***<***REMOVED***lines.length;***REMOVED***i++)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***line***REMOVED***=***REMOVED***lines[i];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!line.startsWith(at))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line***REMOVED***=***REMOVED***line.slice(at.length);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(true)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***match***REMOVED***=***REMOVED***/^(?:new***REMOVED***|async***REMOVED***)?\S+***REMOVED***\((.*)\)$/.exec(line);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line***REMOVED***=***REMOVED***match[1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***match***REMOVED***=***REMOVED***/^eval***REMOVED***at***REMOVED***\S+***REMOVED***\((.*)\)(?:,***REMOVED***\S+:\d+:\d+)?$/.exec(line);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line***REMOVED***=***REMOVED***match[1];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***match***REMOVED***=***REMOVED***/^(\S+):(\d+):(\d+)$/.exec(line);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(match)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contents;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***contents***REMOVED***=***REMOVED***streamIn.readFileSync(match[1],***REMOVED***"utf8");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***lineText***REMOVED***=***REMOVED***contents.split(/\r\n|\r|\n|\u2028|\u2029/)[+match[2]***REMOVED***-***REMOVED***1]***REMOVED***||***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***column***REMOVED***=***REMOVED***+match[3]***REMOVED***-***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***length***REMOVED***=***REMOVED***lineText.slice(column,***REMOVED***column***REMOVED***+***REMOVED***ident.length)***REMOVED***===***REMOVED***ident***REMOVED***?***REMOVED***ident.length***REMOVED***:***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***file:***REMOVED***match[1],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***namespace:***REMOVED***"file",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***line:***REMOVED***+match[2],
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***column:***REMOVED***encodeUTF8(lineText.slice(0,***REMOVED***column)).length,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***length:***REMOVED***encodeUTF8(lineText.slice(column,***REMOVED***column***REMOVED***+***REMOVED***length)).length,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***lineText:***REMOVED***lineText***REMOVED***+***REMOVED***"\n"***REMOVED***+***REMOVED***lines.slice(1).join("\n"),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***suggestion:***REMOVED***""
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***null;
}
function***REMOVED***failureErrorWithLog(text,***REMOVED***errors,***REMOVED***warnings)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***limit***REMOVED***=***REMOVED***5;
***REMOVED******REMOVED***let***REMOVED***summary***REMOVED***=***REMOVED***errors.length***REMOVED***<***REMOVED***1***REMOVED***?***REMOVED***""***REMOVED***:***REMOVED***`***REMOVED***with***REMOVED***${errors.length}***REMOVED***error${errors.length***REMOVED***<***REMOVED***2***REMOVED***?***REMOVED***""***REMOVED***:***REMOVED***"s"}:`***REMOVED***+***REMOVED***errors.slice(0,***REMOVED***limit***REMOVED***+***REMOVED***1).map((e,***REMOVED***i)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(i***REMOVED***===***REMOVED***limit)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***"\n...";
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!e.location)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`
error:***REMOVED***${e.text}`;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{***REMOVED***file,***REMOVED***line,***REMOVED***column***REMOVED***}***REMOVED***=***REMOVED***e.location;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginText***REMOVED***=***REMOVED***e.pluginName***REMOVED***?***REMOVED***`[plugin:***REMOVED***${e.pluginName}]***REMOVED***`***REMOVED***:***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***`
${file}:${line}:${column}:***REMOVED***ERROR:***REMOVED***${pluginText}${e.text}`;
***REMOVED******REMOVED***}).join("");
***REMOVED******REMOVED***let***REMOVED***error***REMOVED***=***REMOVED***new***REMOVED***Error(`${text}${summary}`);
***REMOVED******REMOVED***error.errors***REMOVED***=***REMOVED***errors;
***REMOVED******REMOVED***error.warnings***REMOVED***=***REMOVED***warnings;
***REMOVED******REMOVED***return***REMOVED***error;
}
function***REMOVED***replaceDetailsInMessages(messages,***REMOVED***stash)***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***message***REMOVED***of***REMOVED***messages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***message.detail***REMOVED***=***REMOVED***stash.load(message.detail);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***messages;
}
function***REMOVED***sanitizeLocation(location,***REMOVED***where)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(location***REMOVED***==***REMOVED***null)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***null;
***REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED***let***REMOVED***file***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"file",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***namespace***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"namespace",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***line***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"line",***REMOVED***mustBeInteger);
***REMOVED******REMOVED***let***REMOVED***column***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"column",***REMOVED***mustBeInteger);
***REMOVED******REMOVED***let***REMOVED***length***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"length",***REMOVED***mustBeInteger);
***REMOVED******REMOVED***let***REMOVED***lineText***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"lineText",***REMOVED***mustBeString);
***REMOVED******REMOVED***let***REMOVED***suggestion***REMOVED***=***REMOVED***getFlag(location,***REMOVED***keys,***REMOVED***"suggestion",***REMOVED***mustBeString);
***REMOVED******REMOVED***checkForInvalidFlags(location,***REMOVED***keys,***REMOVED***where);
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***file:***REMOVED***file***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED***namespace:***REMOVED***namespace***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED***line:***REMOVED***line***REMOVED***||***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***column:***REMOVED***column***REMOVED***||***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***length:***REMOVED***length***REMOVED***||***REMOVED***0,
***REMOVED******REMOVED******REMOVED******REMOVED***lineText:***REMOVED***lineText***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED***suggestion:***REMOVED***suggestion***REMOVED***||***REMOVED***""
***REMOVED******REMOVED***};
}
function***REMOVED***sanitizeMessages(messages,***REMOVED***property,***REMOVED***stash,***REMOVED***fallbackPluginName)***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***messagesClone***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***let***REMOVED***index***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***message***REMOVED***of***REMOVED***messages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***keys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***id***REMOVED***=***REMOVED***getFlag(message,***REMOVED***keys,***REMOVED***"id",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pluginName***REMOVED***=***REMOVED***getFlag(message,***REMOVED***keys,***REMOVED***"pluginName",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***text***REMOVED***=***REMOVED***getFlag(message,***REMOVED***keys,***REMOVED***"text",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***location***REMOVED***=***REMOVED***getFlag(message,***REMOVED***keys,***REMOVED***"location",***REMOVED***mustBeObjectOrNull);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***notes***REMOVED***=***REMOVED***getFlag(message,***REMOVED***keys,***REMOVED***"notes",***REMOVED***mustBeArray);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***detail***REMOVED***=***REMOVED***getFlag(message,***REMOVED***keys,***REMOVED***"detail",***REMOVED***canBeAnything);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***where***REMOVED***=***REMOVED***`in***REMOVED***element***REMOVED***${index}***REMOVED***of***REMOVED***"${property}"`;
***REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(message,***REMOVED***keys,***REMOVED***where);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***notesClone***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(notes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***note***REMOVED***of***REMOVED***notes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***noteKeys***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***noteText***REMOVED***=***REMOVED***getFlag(note,***REMOVED***noteKeys,***REMOVED***"text",***REMOVED***mustBeString);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***noteLocation***REMOVED***=***REMOVED***getFlag(note,***REMOVED***noteKeys,***REMOVED***"location",***REMOVED***mustBeObjectOrNull);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***checkForInvalidFlags(note,***REMOVED***noteKeys,***REMOVED***where);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***notesClone.push({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***text:***REMOVED***noteText***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***location:***REMOVED***sanitizeLocation(noteLocation,***REMOVED***where)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***messagesClone.push({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***id:***REMOVED***id***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pluginName:***REMOVED***pluginName***REMOVED***||***REMOVED***fallbackPluginName,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***text:***REMOVED***text***REMOVED***||***REMOVED***"",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***location:***REMOVED***sanitizeLocation(location,***REMOVED***where),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***notes:***REMOVED***notesClone,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***detail:***REMOVED***stash***REMOVED***?***REMOVED***stash.store(detail)***REMOVED***:***REMOVED***-1
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***index++;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***messagesClone;
}
function***REMOVED***sanitizeStringArray(values,***REMOVED***property)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***result***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***value***REMOVED***of***REMOVED***values)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(typeof***REMOVED***value***REMOVED***!==***REMOVED***"string")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`${quote(property)}***REMOVED***must***REMOVED***be***REMOVED***an***REMOVED***array***REMOVED***of***REMOVED***strings`);
***REMOVED******REMOVED******REMOVED******REMOVED***result.push(value);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***result;
}
function***REMOVED***convertOutputFiles({***REMOVED***path:***REMOVED***path3,***REMOVED***contents,***REMOVED***hash***REMOVED***})***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***text***REMOVED***=***REMOVED***null;
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***path:***REMOVED***path3,
***REMOVED******REMOVED******REMOVED******REMOVED***contents,
***REMOVED******REMOVED******REMOVED******REMOVED***hash,
***REMOVED******REMOVED******REMOVED******REMOVED***get***REMOVED***text()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***binary***REMOVED***=***REMOVED***this.contents;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(text***REMOVED***===***REMOVED***null***REMOVED***||***REMOVED***binary***REMOVED***!==***REMOVED***contents)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***contents***REMOVED***=***REMOVED***binary;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***text***REMOVED***=***REMOVED***decodeUTF8(binary);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***text;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
}

//***REMOVED***lib/npm/node-platform.ts
var***REMOVED***fs***REMOVED***=***REMOVED***require("fs");
var***REMOVED***os***REMOVED***=***REMOVED***require("os");
var***REMOVED***path***REMOVED***=***REMOVED***require("path");
var***REMOVED***ESBUILD_BINARY_PATH***REMOVED***=***REMOVED***process.env.ESBUILD_BINARY_PATH***REMOVED***||***REMOVED***ESBUILD_BINARY_PATH;
var***REMOVED***isValidBinaryPath***REMOVED***=***REMOVED***(x)***REMOVED***=>***REMOVED***!!x***REMOVED***&&***REMOVED***x***REMOVED***!==***REMOVED***"/usr/bin/esbuild";
var***REMOVED***packageDarwin_arm64***REMOVED***=***REMOVED***"@esbuild/darwin-arm64";
var***REMOVED***packageDarwin_x64***REMOVED***=***REMOVED***"@esbuild/darwin-x64";
var***REMOVED***knownWindowsPackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"win32***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/win32-arm64",
***REMOVED******REMOVED***"win32***REMOVED***ia32***REMOVED***LE":***REMOVED***"@esbuild/win32-ia32",
***REMOVED******REMOVED***"win32***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/win32-x64"
};
var***REMOVED***knownUnixlikePackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"android***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/android-arm64",
***REMOVED******REMOVED***"darwin***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/darwin-arm64",
***REMOVED******REMOVED***"darwin***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/darwin-x64",
***REMOVED******REMOVED***"freebsd***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/freebsd-arm64",
***REMOVED******REMOVED***"freebsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/freebsd-x64",
***REMOVED******REMOVED***"linux***REMOVED***arm***REMOVED***LE":***REMOVED***"@esbuild/linux-arm",
***REMOVED******REMOVED***"linux***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/linux-arm64",
***REMOVED******REMOVED***"linux***REMOVED***ia32***REMOVED***LE":***REMOVED***"@esbuild/linux-ia32",
***REMOVED******REMOVED***"linux***REMOVED***mips64el***REMOVED***LE":***REMOVED***"@esbuild/linux-mips64el",
***REMOVED******REMOVED***"linux***REMOVED***ppc64***REMOVED***LE":***REMOVED***"@esbuild/linux-ppc64",
***REMOVED******REMOVED***"linux***REMOVED***riscv64***REMOVED***LE":***REMOVED***"@esbuild/linux-riscv64",
***REMOVED******REMOVED***"linux***REMOVED***s390x***REMOVED***BE":***REMOVED***"@esbuild/linux-s390x",
***REMOVED******REMOVED***"linux***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/linux-x64",
***REMOVED******REMOVED***"linux***REMOVED***loong64***REMOVED***LE":***REMOVED***"@esbuild/linux-loong64",
***REMOVED******REMOVED***"netbsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/netbsd-x64",
***REMOVED******REMOVED***"openbsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/openbsd-x64",
***REMOVED******REMOVED***"sunos***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/sunos-x64"
};
var***REMOVED***knownWebAssemblyFallbackPackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"android***REMOVED***arm***REMOVED***LE":***REMOVED***"@esbuild/android-arm",
***REMOVED******REMOVED***"android***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/android-x64"
};
function***REMOVED***pkgAndSubpathForCurrentPlatform()***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***pkg;
***REMOVED******REMOVED***let***REMOVED***subpath;
***REMOVED******REMOVED***let***REMOVED***isWASM***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***platformKey***REMOVED***=***REMOVED***`${process.platform}***REMOVED***${os.arch()}***REMOVED***${os.endianness()}`;
***REMOVED******REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownWindowsPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownWindowsPackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"esbuild.exe";
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownUnixlikePackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownUnixlikePackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"bin/esbuild";
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownWebAssemblyFallbackPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownWebAssemblyFallbackPackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"bin/esbuild";
***REMOVED******REMOVED******REMOVED******REMOVED***isWASM***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Unsupported***REMOVED***platform:***REMOVED***${platformKey}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***pkg,***REMOVED***subpath,***REMOVED***isWASM***REMOVED***};
}
function***REMOVED***pkgForSomeOtherPlatform()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***libMainJS***REMOVED***=***REMOVED***require.resolve("esbuild");
***REMOVED******REMOVED***const***REMOVED***nodeModulesDirectory***REMOVED***=***REMOVED***path.dirname(path.dirname(path.dirname(libMainJS)));
***REMOVED******REMOVED***if***REMOVED***(path.basename(nodeModulesDirectory)***REMOVED***===***REMOVED***"node_modules")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***unixKey***REMOVED***in***REMOVED***knownUnixlikePackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pkg***REMOVED***=***REMOVED***knownUnixlikePackages[unixKey];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(fs.existsSync(path.join(nodeModulesDirectory,***REMOVED***pkg)))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***pkg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***windowsKey***REMOVED***in***REMOVED***knownWindowsPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***pkg***REMOVED***=***REMOVED***knownWindowsPackages[windowsKey];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(fs.existsSync(path.join(nodeModulesDirectory,***REMOVED***pkg)))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***pkg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***null;
}
function***REMOVED***downloadedBinPath(pkg,***REMOVED***subpath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***esbuildLibDir***REMOVED***=***REMOVED***path.dirname(require.resolve("esbuild"));
***REMOVED******REMOVED***return***REMOVED***path.join(esbuildLibDir,***REMOVED***`downloaded-${pkg.replace("/",***REMOVED***"-")}-${path.basename(subpath)}`);
}
function***REMOVED***generateBinPath()***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isValidBinaryPath(ESBUILD_BINARY_PATH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(ESBUILD_BINARY_PATH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.warn(`[esbuild]***REMOVED***Ignoring***REMOVED***bad***REMOVED***configuration:***REMOVED***ESBUILD_BINARY_PATH=${ESBUILD_BINARY_PATH}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***binPath:***REMOVED***ESBUILD_BINARY_PATH,***REMOVED***isWASM:***REMOVED***false***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***pkg,***REMOVED***subpath,***REMOVED***isWASM***REMOVED***}***REMOVED***=***REMOVED***pkgAndSubpathForCurrentPlatform();
***REMOVED******REMOVED***let***REMOVED***binPath;
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***binPath***REMOVED***=***REMOVED***require.resolve(`${pkg}/${subpath}`);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***binPath***REMOVED***=***REMOVED***downloadedBinPath(pkg,***REMOVED***subpath);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(binPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***require.resolve(pkg);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***otherPkg***REMOVED***=***REMOVED***pkgForSomeOtherPlatform();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(otherPkg)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***suggestions***REMOVED***=***REMOVED***`
Specifically***REMOVED***the***REMOVED***"${otherPkg}"***REMOVED***package***REMOVED***is***REMOVED***present***REMOVED***but***REMOVED***this***REMOVED***platform
needs***REMOVED***the***REMOVED***"${pkg}"***REMOVED***package***REMOVED***instead.***REMOVED***People***REMOVED***often***REMOVED***get***REMOVED***into***REMOVED***this
situation***REMOVED***by***REMOVED***installing***REMOVED***esbuild***REMOVED***on***REMOVED***Windows***REMOVED***or***REMOVED***macOS***REMOVED***and***REMOVED***copying***REMOVED***"node_modules"
into***REMOVED***a***REMOVED***Docker***REMOVED***image***REMOVED***that***REMOVED***runs***REMOVED***Linux,***REMOVED***or***REMOVED***by***REMOVED***copying***REMOVED***"node_modules"***REMOVED***between
Windows***REMOVED***and***REMOVED***WSL***REMOVED***environments.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***npm,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***not***REMOVED***copying***REMOVED***the***REMOVED***"node_modules"
directory***REMOVED***when***REMOVED***you***REMOVED***copy***REMOVED***the***REMOVED***files***REMOVED***over,***REMOVED***and***REMOVED***running***REMOVED***"npm***REMOVED***ci"***REMOVED***or***REMOVED***"npm***REMOVED***install"
on***REMOVED***the***REMOVED***destination***REMOVED***platform***REMOVED***after***REMOVED***the***REMOVED***copy.***REMOVED***Or***REMOVED***you***REMOVED***could***REMOVED***consider***REMOVED***using***REMOVED***yarn
instead***REMOVED***of***REMOVED***npm***REMOVED***which***REMOVED***has***REMOVED***built-in***REMOVED***support***REMOVED***for***REMOVED***installing***REMOVED***a***REMOVED***package***REMOVED***on***REMOVED***multiple
platforms***REMOVED***simultaneously.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***yarn,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***listing***REMOVED***both***REMOVED***this***REMOVED***platform***REMOVED***and***REMOVED***the
other***REMOVED***platform***REMOVED***in***REMOVED***your***REMOVED***".yarnrc.yml"***REMOVED***file***REMOVED***using***REMOVED***the***REMOVED***"supportedArchitectures"
feature:***REMOVED***https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep***REMOVED***in***REMOVED***mind***REMOVED***that***REMOVED***this***REMOVED***means***REMOVED***multiple***REMOVED***copies***REMOVED***of***REMOVED***esbuild***REMOVED***will***REMOVED***be***REMOVED***present.
`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pkg***REMOVED***===***REMOVED***packageDarwin_x64***REMOVED***&&***REMOVED***otherPkg***REMOVED***===***REMOVED***packageDarwin_arm64***REMOVED***||***REMOVED***pkg***REMOVED***===***REMOVED***packageDarwin_arm64***REMOVED***&&***REMOVED***otherPkg***REMOVED***===***REMOVED***packageDarwin_x64)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***suggestions***REMOVED***=***REMOVED***`
Specifically***REMOVED***the***REMOVED***"${otherPkg}"***REMOVED***package***REMOVED***is***REMOVED***present***REMOVED***but***REMOVED***this***REMOVED***platform
needs***REMOVED***the***REMOVED***"${pkg}"***REMOVED***package***REMOVED***instead.***REMOVED***People***REMOVED***often***REMOVED***get***REMOVED***into***REMOVED***this
situation***REMOVED***by***REMOVED***installing***REMOVED***esbuild***REMOVED***with***REMOVED***npm***REMOVED***running***REMOVED***inside***REMOVED***of***REMOVED***Rosetta***REMOVED***2***REMOVED***and***REMOVED***then
trying***REMOVED***to***REMOVED***use***REMOVED***it***REMOVED***with***REMOVED***node***REMOVED***running***REMOVED***outside***REMOVED***of***REMOVED***Rosetta***REMOVED***2,***REMOVED***or***REMOVED***vice***REMOVED***versa***REMOVED***(Rosetta
2***REMOVED***is***REMOVED***Apple's***REMOVED***on-the-fly***REMOVED***x86_64-to-arm64***REMOVED***translation***REMOVED***service).

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***npm,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***ensuring***REMOVED***that***REMOVED***both***REMOVED***npm***REMOVED***and***REMOVED***node***REMOVED***are
not***REMOVED***running***REMOVED***under***REMOVED***Rosetta***REMOVED***2***REMOVED***and***REMOVED***then***REMOVED***reinstalling***REMOVED***esbuild.***REMOVED***This***REMOVED***likely***REMOVED***involves
changing***REMOVED***how***REMOVED***you***REMOVED***installed***REMOVED***npm***REMOVED***and/or***REMOVED***node.***REMOVED***For***REMOVED***example,***REMOVED***installing***REMOVED***node***REMOVED***with
the***REMOVED***universal***REMOVED***installer***REMOVED***here***REMOVED***should***REMOVED***work:***REMOVED***https://nodejs.org/en/download/.***REMOVED***Or
you***REMOVED***could***REMOVED***consider***REMOVED***using***REMOVED***yarn***REMOVED***instead***REMOVED***of***REMOVED***npm***REMOVED***which***REMOVED***has***REMOVED***built-in***REMOVED***support***REMOVED***for
installing***REMOVED***a***REMOVED***package***REMOVED***on***REMOVED***multiple***REMOVED***platforms***REMOVED***simultaneously.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***with***REMOVED***yarn,***REMOVED***you***REMOVED***can***REMOVED***try***REMOVED***listing***REMOVED***both***REMOVED***"arm64"***REMOVED***and***REMOVED***"x64"
in***REMOVED***your***REMOVED***".yarnrc.yml"***REMOVED***file***REMOVED***using***REMOVED***the***REMOVED***"supportedArchitectures"***REMOVED***feature:
https://yarnpkg.com/configuration/yarnrc/#supportedArchitectures
Keep***REMOVED***in***REMOVED***mind***REMOVED***that***REMOVED***this***REMOVED***means***REMOVED***multiple***REMOVED***copies***REMOVED***of***REMOVED***esbuild***REMOVED***will***REMOVED***be***REMOVED***present.
`;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`
You***REMOVED***installed***REMOVED***esbuild***REMOVED***for***REMOVED***another***REMOVED***platform***REMOVED***than***REMOVED***the***REMOVED***one***REMOVED***you're***REMOVED***currently***REMOVED***using.
This***REMOVED***won't***REMOVED***work***REMOVED***because***REMOVED***esbuild***REMOVED***is***REMOVED***written***REMOVED***with***REMOVED***native***REMOVED***code***REMOVED***and***REMOVED***needs***REMOVED***to
install***REMOVED***a***REMOVED***platform-specific***REMOVED***binary***REMOVED***executable.
${suggestions}
Another***REMOVED***alternative***REMOVED***is***REMOVED***to***REMOVED***use***REMOVED***the***REMOVED***"esbuild-wasm"***REMOVED***package***REMOVED***instead,***REMOVED***which***REMOVED***works
the***REMOVED***same***REMOVED***way***REMOVED***on***REMOVED***all***REMOVED***platforms.***REMOVED***But***REMOVED***it***REMOVED***comes***REMOVED***with***REMOVED***a***REMOVED***heavy***REMOVED***performance***REMOVED***cost***REMOVED***and
can***REMOVED***sometimes***REMOVED***be***REMOVED***10x***REMOVED***slower***REMOVED***than***REMOVED***the***REMOVED***"esbuild"***REMOVED***package,***REMOVED***so***REMOVED***you***REMOVED***may***REMOVED***also***REMOVED***not
want***REMOVED***to***REMOVED***do***REMOVED***that.
`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***package***REMOVED***"${pkg}"***REMOVED***could***REMOVED***not***REMOVED***be***REMOVED***found,***REMOVED***and***REMOVED***is***REMOVED***needed***REMOVED***by***REMOVED***esbuild.

If***REMOVED***you***REMOVED***are***REMOVED***installing***REMOVED***esbuild***REMOVED***with***REMOVED***npm,***REMOVED***make***REMOVED***sure***REMOVED***that***REMOVED***you***REMOVED***don't***REMOVED***specify***REMOVED***the
"--no-optional"***REMOVED***or***REMOVED***"--omit=optional"***REMOVED***flags.***REMOVED***The***REMOVED***"optionalDependencies"***REMOVED***feature
of***REMOVED***"package.json"***REMOVED***is***REMOVED***used***REMOVED***by***REMOVED***esbuild***REMOVED***to***REMOVED***install***REMOVED***the***REMOVED***correct***REMOVED***binary***REMOVED***executable
for***REMOVED***your***REMOVED***current***REMOVED***platform.`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***e;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(/\.zip\//.test(binPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***pnpapi;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***pnpapi***REMOVED***=***REMOVED***require("pnpapi");
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(pnpapi)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***root***REMOVED***=***REMOVED***pnpapi.getPackageInformation(pnpapi.topLevel).packageLocation;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***binTargetPath***REMOVED***=***REMOVED***path.join(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***root,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"node_modules",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***".cache",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***"esbuild",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`pnpapi-${pkg.replace("/",***REMOVED***"-")}-${"0.18.20"}-${path.basename(subpath)}`
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs.existsSync(binTargetPath))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs.mkdirSync(path.dirname(binTargetPath),***REMOVED***{***REMOVED***recursive:***REMOVED***true***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs.copyFileSync(binPath,***REMOVED***binTargetPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs.chmodSync(binTargetPath,***REMOVED***493);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{***REMOVED***binPath:***REMOVED***binTargetPath,***REMOVED***isWASM***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***binPath,***REMOVED***isWASM***REMOVED***};
}

//***REMOVED***lib/npm/node.ts
var***REMOVED***child_process***REMOVED***=***REMOVED***require("child_process");
var***REMOVED***crypto***REMOVED***=***REMOVED***require("crypto");
var***REMOVED***path2***REMOVED***=***REMOVED***require("path");
var***REMOVED***fs2***REMOVED***=***REMOVED***require("fs");
var***REMOVED***os2***REMOVED***=***REMOVED***require("os");
var***REMOVED***tty***REMOVED***=***REMOVED***require("tty");
var***REMOVED***worker_threads;
if***REMOVED***(process.env.ESBUILD_WORKER_THREADS***REMOVED***!==***REMOVED***"0")***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***worker_threads***REMOVED***=***REMOVED***require("worker_threads");
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***[major,***REMOVED***minor]***REMOVED***=***REMOVED***process.versions.node.split(".");
***REMOVED******REMOVED***if***REMOVED***(
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***<v12.17.0***REMOVED***does***REMOVED***not***REMOVED***work
***REMOVED******REMOVED******REMOVED******REMOVED***+major***REMOVED***<***REMOVED***12***REMOVED***||***REMOVED***+major***REMOVED***===***REMOVED***12***REMOVED***&&***REMOVED***+minor***REMOVED***<***REMOVED***17***REMOVED***||***REMOVED***+major***REMOVED***===***REMOVED***13***REMOVED***&&***REMOVED***+minor***REMOVED***<***REMOVED***13
***REMOVED******REMOVED***)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***worker_threads***REMOVED***=***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED***}
}
var***REMOVED***_a;
var***REMOVED***isInternalWorkerThread***REMOVED***=***REMOVED***((_a***REMOVED***=***REMOVED***worker_threads***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***worker_threads.workerData)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.esbuildVersion)***REMOVED***===***REMOVED***"0.18.20";
var***REMOVED***esbuildCommandAndArgs***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***((!ESBUILD_BINARY_PATH***REMOVED***||***REMOVED***false)***REMOVED***&&***REMOVED***(path2.basename(__filename)***REMOVED***!==***REMOVED***"main.js"***REMOVED***||***REMOVED***path2.basename(__dirname)***REMOVED***!==***REMOVED***"lib"))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`The***REMOVED***esbuild***REMOVED***JavaScript***REMOVED***API***REMOVED***cannot***REMOVED***be***REMOVED***bundled.***REMOVED***Please***REMOVED***mark***REMOVED***the***REMOVED***"esbuild"***REMOVED***package***REMOVED***as***REMOVED***external***REMOVED***so***REMOVED***it's***REMOVED***not***REMOVED***included***REMOVED***in***REMOVED***the***REMOVED***bundle.

More***REMOVED***information:***REMOVED***The***REMOVED***file***REMOVED***containing***REMOVED***the***REMOVED***code***REMOVED***for***REMOVED***esbuild's***REMOVED***JavaScript***REMOVED***API***REMOVED***(${__filename})***REMOVED***does***REMOVED***not***REMOVED***appear***REMOVED***to***REMOVED***be***REMOVED***inside***REMOVED***the***REMOVED***esbuild***REMOVED***package***REMOVED***on***REMOVED***the***REMOVED***file***REMOVED***system,***REMOVED***which***REMOVED***usually***REMOVED***means***REMOVED***that***REMOVED***the***REMOVED***esbuild***REMOVED***package***REMOVED***was***REMOVED***bundled***REMOVED***into***REMOVED***another***REMOVED***file.***REMOVED***This***REMOVED***is***REMOVED***problematic***REMOVED***because***REMOVED***the***REMOVED***API***REMOVED***needs***REMOVED***to***REMOVED***run***REMOVED***a***REMOVED***binary***REMOVED***executable***REMOVED***inside***REMOVED***the***REMOVED***esbuild***REMOVED***package***REMOVED***which***REMOVED***is***REMOVED***located***REMOVED***using***REMOVED***a***REMOVED***relative***REMOVED***path***REMOVED***from***REMOVED***the***REMOVED***API***REMOVED***code***REMOVED***to***REMOVED***the***REMOVED***executable.***REMOVED***If***REMOVED***the***REMOVED***esbuild***REMOVED***package***REMOVED***is***REMOVED***bundled,***REMOVED***the***REMOVED***relative***REMOVED***path***REMOVED***will***REMOVED***be***REMOVED***incorrect***REMOVED***and***REMOVED***the***REMOVED***executable***REMOVED***won't***REMOVED***be***REMOVED***found.`
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(false)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***["node",***REMOVED***[path2.join(__dirname,***REMOVED***"..",***REMOVED***"bin",***REMOVED***"esbuild")]];
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***binPath,***REMOVED***isWASM***REMOVED***}***REMOVED***=***REMOVED***generateBinPath();
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(isWASM)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***["node",***REMOVED***[binPath]];
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***[binPath,***REMOVED***[]];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
};
var***REMOVED***isTTY***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***tty.isatty(2);
var***REMOVED***fsSync***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***readFile(tempFile,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***contents***REMOVED***=***REMOVED***fs2.readFileSync(tempFile,***REMOVED***"utf8");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.unlinkSync(tempFile);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null,***REMOVED***contents);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(err,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***},
***REMOVED******REMOVED***writeFile(contents,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***tempFile***REMOVED***=***REMOVED***randomFileName();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.writeFileSync(tempFile,***REMOVED***contents);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(tempFile);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
};
var***REMOVED***fsAsync***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***readFile(tempFile,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.readFile(tempFile,***REMOVED***"utf8",***REMOVED***(err,***REMOVED***contents)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.unlink(tempFile,***REMOVED***()***REMOVED***=>***REMOVED***callback(err,***REMOVED***contents));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(err,***REMOVED***contents);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(err,***REMOVED***null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***},
***REMOVED******REMOVED***writeFile(contents,***REMOVED***callback)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***tempFile***REMOVED***=***REMOVED***randomFileName();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.writeFile(tempFile,***REMOVED***contents,***REMOVED***(err)***REMOVED***=>***REMOVED***err***REMOVED***!==***REMOVED***null***REMOVED***?***REMOVED***callback(null)***REMOVED***:***REMOVED***callback(tempFile));
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback(null);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
};
var***REMOVED***version***REMOVED***=***REMOVED***"0.18.20";
var***REMOVED***build***REMOVED***=***REMOVED***(options)***REMOVED***=>***REMOVED***ensureServiceIsRunning().build(options);
var***REMOVED***context***REMOVED***=***REMOVED***(buildOptions)***REMOVED***=>***REMOVED***ensureServiceIsRunning().context(buildOptions);
var***REMOVED***transform***REMOVED***=***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***ensureServiceIsRunning().transform(input,***REMOVED***options);
var***REMOVED***formatMessages***REMOVED***=***REMOVED***(messages,***REMOVED***options)***REMOVED***=>***REMOVED***ensureServiceIsRunning().formatMessages(messages,***REMOVED***options);
var***REMOVED***analyzeMetafile***REMOVED***=***REMOVED***(messages,***REMOVED***options)***REMOVED***=>***REMOVED***ensureServiceIsRunning().analyzeMetafile(messages,***REMOVED***options);
var***REMOVED***buildSync***REMOVED***=***REMOVED***(options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(worker_threads***REMOVED***&&***REMOVED***!isInternalWorkerThread)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!workerThreadService)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerThreadService***REMOVED***=***REMOVED***startWorkerThreadService(worker_threads);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***workerThreadService.buildSync(options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***result;
***REMOVED******REMOVED***runServiceSync((service)***REMOVED***=>***REMOVED***service.buildOrContext({
***REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"buildSync",
***REMOVED******REMOVED******REMOVED******REMOVED***refs:***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED***isTTY:***REMOVED***isTTY(),
***REMOVED******REMOVED******REMOVED******REMOVED***defaultWD,
***REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***res;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}));
***REMOVED******REMOVED***return***REMOVED***result;
};
var***REMOVED***transformSync***REMOVED***=***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(worker_threads***REMOVED***&&***REMOVED***!isInternalWorkerThread)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!workerThreadService)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerThreadService***REMOVED***=***REMOVED***startWorkerThreadService(worker_threads);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***workerThreadService.transformSync(input,***REMOVED***options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***result;
***REMOVED******REMOVED***runServiceSync((service)***REMOVED***=>***REMOVED***service.transform({
***REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"transformSync",
***REMOVED******REMOVED******REMOVED******REMOVED***refs:***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED***input,
***REMOVED******REMOVED******REMOVED******REMOVED***options:***REMOVED***options***REMOVED***||***REMOVED***{},
***REMOVED******REMOVED******REMOVED******REMOVED***isTTY:***REMOVED***isTTY(),
***REMOVED******REMOVED******REMOVED******REMOVED***fs:***REMOVED***fsSync,
***REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***res;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}));
***REMOVED******REMOVED***return***REMOVED***result;
};
var***REMOVED***formatMessagesSync***REMOVED***=***REMOVED***(messages,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(worker_threads***REMOVED***&&***REMOVED***!isInternalWorkerThread)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!workerThreadService)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerThreadService***REMOVED***=***REMOVED***startWorkerThreadService(worker_threads);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***workerThreadService.formatMessagesSync(messages,***REMOVED***options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***result;
***REMOVED******REMOVED***runServiceSync((service)***REMOVED***=>***REMOVED***service.formatMessages({
***REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"formatMessagesSync",
***REMOVED******REMOVED******REMOVED******REMOVED***refs:***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED***messages,
***REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***res;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}));
***REMOVED******REMOVED***return***REMOVED***result;
};
var***REMOVED***analyzeMetafileSync***REMOVED***=***REMOVED***(metafile,***REMOVED***options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(worker_threads***REMOVED***&&***REMOVED***!isInternalWorkerThread)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!workerThreadService)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerThreadService***REMOVED***=***REMOVED***startWorkerThreadService(worker_threads);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***workerThreadService.analyzeMetafileSync(metafile,***REMOVED***options);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***result;
***REMOVED******REMOVED***runServiceSync((service)***REMOVED***=>***REMOVED***service.analyzeMetafile({
***REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"analyzeMetafileSync",
***REMOVED******REMOVED******REMOVED******REMOVED***refs:***REMOVED***null,
***REMOVED******REMOVED******REMOVED******REMOVED***metafile:***REMOVED***typeof***REMOVED***metafile***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***metafile***REMOVED***:***REMOVED***JSON.stringify(metafile),
***REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***result***REMOVED***=***REMOVED***res;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}));
***REMOVED******REMOVED***return***REMOVED***result;
};
var***REMOVED***initializeWasCalled***REMOVED***=***REMOVED***false;
var***REMOVED***initialize***REMOVED***=***REMOVED***(options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***options***REMOVED***=***REMOVED***validateInitializeOptions(options***REMOVED***||***REMOVED***{});
***REMOVED******REMOVED***if***REMOVED***(options.wasmURL)
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***"wasmURL"***REMOVED***option***REMOVED***only***REMOVED***works***REMOVED***in***REMOVED***the***REMOVED***browser`);
***REMOVED******REMOVED***if***REMOVED***(options.wasmModule)
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***"wasmModule"***REMOVED***option***REMOVED***only***REMOVED***works***REMOVED***in***REMOVED***the***REMOVED***browser`);
***REMOVED******REMOVED***if***REMOVED***(options.worker)
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***"worker"***REMOVED***option***REMOVED***only***REMOVED***works***REMOVED***in***REMOVED***the***REMOVED***browser`);
***REMOVED******REMOVED***if***REMOVED***(initializeWasCalled)
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error('Cannot***REMOVED***call***REMOVED***"initialize"***REMOVED***more***REMOVED***than***REMOVED***once');
***REMOVED******REMOVED***ensureServiceIsRunning();
***REMOVED******REMOVED***initializeWasCalled***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***return***REMOVED***Promise.resolve();
};
var***REMOVED***defaultWD***REMOVED***=***REMOVED***process.cwd();
var***REMOVED***longLivedService;
var***REMOVED***ensureServiceIsRunning***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(longLivedService)
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***longLivedService;
***REMOVED******REMOVED***let***REMOVED***[command,***REMOVED***args]***REMOVED***=***REMOVED***esbuildCommandAndArgs();
***REMOVED******REMOVED***let***REMOVED***child***REMOVED***=***REMOVED***child_process.spawn(command,***REMOVED***args.concat(`--service=${"0.18.20"}`,***REMOVED***"--ping"),***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***windowsHide:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***stdio:***REMOVED***["pipe",***REMOVED***"pipe",***REMOVED***"inherit"],
***REMOVED******REMOVED******REMOVED******REMOVED***cwd:***REMOVED***defaultWD
***REMOVED******REMOVED***});
***REMOVED******REMOVED***let***REMOVED***{***REMOVED***readFromStdout,***REMOVED***afterClose,***REMOVED***service***REMOVED***}***REMOVED***=***REMOVED***createChannel({
***REMOVED******REMOVED******REMOVED******REMOVED***writeToStdin(bytes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***child.stdin.write(bytes,***REMOVED***(err)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(err)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***afterClose(err);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***readFileSync:***REMOVED***fs2.readFileSync,
***REMOVED******REMOVED******REMOVED******REMOVED***isSync:***REMOVED***false,
***REMOVED******REMOVED******REMOVED******REMOVED***hasFS:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***esbuild:***REMOVED***node_exports
***REMOVED******REMOVED***});
***REMOVED******REMOVED***child.stdin.on("error",***REMOVED***afterClose);
***REMOVED******REMOVED***child.on("error",***REMOVED***afterClose);
***REMOVED******REMOVED***const***REMOVED***stdin***REMOVED***=***REMOVED***child.stdin;
***REMOVED******REMOVED***const***REMOVED***stdout***REMOVED***=***REMOVED***child.stdout;
***REMOVED******REMOVED***stdout.on("data",***REMOVED***readFromStdout);
***REMOVED******REMOVED***stdout.on("end",***REMOVED***afterClose);
***REMOVED******REMOVED***let***REMOVED***refCount***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***child.unref();
***REMOVED******REMOVED***if***REMOVED***(stdin.unref)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stdin.unref();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(stdout.unref)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stdout.unref();
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***refs***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***ref()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(++refCount***REMOVED***===***REMOVED***1)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***child.ref();
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***unref()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(--refCount***REMOVED***===***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***child.unref();
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***longLivedService***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***build:***REMOVED***(options)***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***service.buildOrContext({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"build",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isTTY:***REMOVED***isTTY(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***defaultWD,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***err***REMOVED***?***REMOVED***reject(err)***REMOVED***:***REMOVED***resolve(res)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}),
***REMOVED******REMOVED******REMOVED******REMOVED***context:***REMOVED***(options)***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***service.buildOrContext({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"context",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isTTY:***REMOVED***isTTY(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***defaultWD,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***err***REMOVED***?***REMOVED***reject(err)***REMOVED***:***REMOVED***resolve(res)
***REMOVED******REMOVED******REMOVED******REMOVED***})),
***REMOVED******REMOVED******REMOVED******REMOVED***transform:***REMOVED***(input,***REMOVED***options)***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***service.transform({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"transform",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***input,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options:***REMOVED***options***REMOVED***||***REMOVED***{},
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isTTY:***REMOVED***isTTY(),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs:***REMOVED***fsAsync,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***err***REMOVED***?***REMOVED***reject(err)***REMOVED***:***REMOVED***resolve(res)
***REMOVED******REMOVED******REMOVED******REMOVED***})),
***REMOVED******REMOVED******REMOVED******REMOVED***formatMessages:***REMOVED***(messages,***REMOVED***options)***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***service.formatMessages({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"formatMessages",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***messages,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***err***REMOVED***?***REMOVED***reject(err)***REMOVED***:***REMOVED***resolve(res)
***REMOVED******REMOVED******REMOVED******REMOVED***})),
***REMOVED******REMOVED******REMOVED******REMOVED***analyzeMetafile:***REMOVED***(metafile,***REMOVED***options)***REMOVED***=>***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***service.analyzeMetafile({
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callName:***REMOVED***"analyzeMetafile",
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***refs,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***metafile:***REMOVED***typeof***REMOVED***metafile***REMOVED***===***REMOVED***"string"***REMOVED***?***REMOVED***metafile***REMOVED***:***REMOVED***JSON.stringify(metafile),
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***options,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***callback:***REMOVED***(err,***REMOVED***res)***REMOVED***=>***REMOVED***err***REMOVED***?***REMOVED***reject(err)***REMOVED***:***REMOVED***resolve(res)
***REMOVED******REMOVED******REMOVED******REMOVED***}))
***REMOVED******REMOVED***};
***REMOVED******REMOVED***return***REMOVED***longLivedService;
};
var***REMOVED***runServiceSync***REMOVED***=***REMOVED***(callback)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***[command,***REMOVED***args]***REMOVED***=***REMOVED***esbuildCommandAndArgs();
***REMOVED******REMOVED***let***REMOVED***stdin***REMOVED***=***REMOVED***new***REMOVED***Uint8Array();
***REMOVED******REMOVED***let***REMOVED***{***REMOVED***readFromStdout,***REMOVED***afterClose,***REMOVED***service***REMOVED***}***REMOVED***=***REMOVED***createChannel({
***REMOVED******REMOVED******REMOVED******REMOVED***writeToStdin(bytes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stdin.length***REMOVED***!==***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Must***REMOVED***run***REMOVED***at***REMOVED***most***REMOVED***one***REMOVED***command");
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdin***REMOVED***=***REMOVED***bytes;
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***isSync:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***hasFS:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***esbuild:***REMOVED***node_exports
***REMOVED******REMOVED***});
***REMOVED******REMOVED***callback(service);
***REMOVED******REMOVED***let***REMOVED***stdout***REMOVED***=***REMOVED***child_process.execFileSync(command,***REMOVED***args.concat(`--service=${"0.18.20"}`),***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***cwd:***REMOVED***defaultWD,
***REMOVED******REMOVED******REMOVED******REMOVED***windowsHide:***REMOVED***true,
***REMOVED******REMOVED******REMOVED******REMOVED***input:***REMOVED***stdin,
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***We***REMOVED***don't***REMOVED***know***REMOVED***how***REMOVED***large***REMOVED***the***REMOVED***output***REMOVED***could***REMOVED***be.***REMOVED***If***REMOVED***it's***REMOVED***too***REMOVED***large,***REMOVED***the
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***command***REMOVED***will***REMOVED***fail***REMOVED***with***REMOVED***ENOBUFS.***REMOVED***Reserve***REMOVED***16mb***REMOVED***for***REMOVED***now***REMOVED***since***REMOVED***that***REMOVED***feels
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***like***REMOVED***it***REMOVED***should***REMOVED***be***REMOVED***enough.***REMOVED***Also***REMOVED***allow***REMOVED***overriding***REMOVED***this***REMOVED***with***REMOVED***an***REMOVED***environment
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***variable.
***REMOVED******REMOVED******REMOVED******REMOVED***maxBuffer:***REMOVED***+process.env.ESBUILD_MAX_BUFFER***REMOVED***||***REMOVED***16***REMOVED*******REMOVED***1024***REMOVED*******REMOVED***1024
***REMOVED******REMOVED***});
***REMOVED******REMOVED***readFromStdout(stdout);
***REMOVED******REMOVED***afterClose(null);
};
var***REMOVED***randomFileName***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***path2.join(os2.tmpdir(),***REMOVED***`esbuild-${crypto.randomBytes(32).toString("hex")}`);
};
var***REMOVED***workerThreadService***REMOVED***=***REMOVED***null;
var***REMOVED***startWorkerThreadService***REMOVED***=***REMOVED***(worker_threads2)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***{***REMOVED***port1:***REMOVED***mainPort,***REMOVED***port2:***REMOVED***workerPort***REMOVED***}***REMOVED***=***REMOVED***new***REMOVED***worker_threads2.MessageChannel();
***REMOVED******REMOVED***let***REMOVED***worker***REMOVED***=***REMOVED***new***REMOVED***worker_threads2.Worker(__filename,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***workerData:***REMOVED***{***REMOVED***workerPort,***REMOVED***defaultWD,***REMOVED***esbuildVersion:***REMOVED***"0.18.20"***REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***transferList:***REMOVED***[workerPort],
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***From***REMOVED***node's***REMOVED***documentation:***REMOVED***https://nodejs.org/api/worker_threads.html
***REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***Take***REMOVED***care***REMOVED***when***REMOVED***launching***REMOVED***worker***REMOVED***threads***REMOVED***from***REMOVED***preload***REMOVED***scripts***REMOVED***(scripts***REMOVED***loaded
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***and***REMOVED***run***REMOVED***using***REMOVED***the***REMOVED***`-r`***REMOVED***command***REMOVED***line***REMOVED***flag).***REMOVED***Unless***REMOVED***the***REMOVED***`execArgv`***REMOVED***option***REMOVED***is
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***explicitly***REMOVED***set,***REMOVED***new***REMOVED***Worker***REMOVED***threads***REMOVED***automatically***REMOVED***inherit***REMOVED***the***REMOVED***command***REMOVED***line***REMOVED***flags
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***from***REMOVED***the***REMOVED***running***REMOVED***process***REMOVED***and***REMOVED***will***REMOVED***preload***REMOVED***the***REMOVED***same***REMOVED***preload***REMOVED***scripts***REMOVED***as***REMOVED***the***REMOVED***main
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***thread.***REMOVED***If***REMOVED***the***REMOVED***preload***REMOVED***script***REMOVED***unconditionally***REMOVED***launches***REMOVED***a***REMOVED***worker***REMOVED***thread,***REMOVED***every
***REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED******REMOVED******REMOVED***thread***REMOVED***spawned***REMOVED***will***REMOVED***spawn***REMOVED***another***REMOVED***until***REMOVED***the***REMOVED***application***REMOVED***crashes.
***REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED***execArgv:***REMOVED***[]
***REMOVED******REMOVED***});
***REMOVED******REMOVED***let***REMOVED***nextID***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***let***REMOVED***fakeBuildError***REMOVED***=***REMOVED***(text)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***error***REMOVED***=***REMOVED***new***REMOVED***Error(`Build***REMOVED***failed***REMOVED***with***REMOVED***1***REMOVED***error:
error:***REMOVED***${text}`);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***errors***REMOVED***=***REMOVED***[{***REMOVED***id:***REMOVED***"",***REMOVED***pluginName:***REMOVED***"",***REMOVED***text,***REMOVED***location:***REMOVED***null,***REMOVED***notes:***REMOVED***[],***REMOVED***detail:***REMOVED***void***REMOVED***0***REMOVED***}];
***REMOVED******REMOVED******REMOVED******REMOVED***error.errors***REMOVED***=***REMOVED***errors;
***REMOVED******REMOVED******REMOVED******REMOVED***error.warnings***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***error;
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***validateBuildSyncOptions***REMOVED***=***REMOVED***(options)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!options)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***plugins***REMOVED***=***REMOVED***options.plugins;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(plugins***REMOVED***&&***REMOVED***plugins.length***REMOVED***>***REMOVED***0)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***fakeBuildError(`Cannot***REMOVED***use***REMOVED***plugins***REMOVED***in***REMOVED***synchronous***REMOVED***API***REMOVED***calls`);
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***applyProperties***REMOVED***=***REMOVED***(object,***REMOVED***properties)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***properties)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***object[key]***REMOVED***=***REMOVED***properties[key];
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
***REMOVED******REMOVED***let***REMOVED***runCallSync***REMOVED***=***REMOVED***(command,***REMOVED***args)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***id***REMOVED***=***REMOVED***nextID++;
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sharedBuffer***REMOVED***=***REMOVED***new***REMOVED***SharedArrayBuffer(8);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sharedBufferView***REMOVED***=***REMOVED***new***REMOVED***Int32Array(sharedBuffer);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***msg***REMOVED***=***REMOVED***{***REMOVED***sharedBuffer,***REMOVED***id,***REMOVED***command,***REMOVED***args***REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED***worker.postMessage(msg);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***status***REMOVED***=***REMOVED***Atomics.wait(sharedBufferView,***REMOVED***0,***REMOVED***0);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(status***REMOVED***!==***REMOVED***"ok"***REMOVED***&&***REMOVED***status***REMOVED***!==***REMOVED***"not-equal")
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error("Internal***REMOVED***error:***REMOVED***Atomics.wait()***REMOVED***failed:***REMOVED***"***REMOVED***+***REMOVED***status);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{***REMOVED***message:***REMOVED***{***REMOVED***id:***REMOVED***id2,***REMOVED***resolve,***REMOVED***reject,***REMOVED***properties***REMOVED***}***REMOVED***}***REMOVED***=***REMOVED***worker_threads2.receiveMessageOnPort(mainPort);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(id***REMOVED***!==***REMOVED***id2)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Internal***REMOVED***error:***REMOVED***Expected***REMOVED***id***REMOVED***${id}***REMOVED***but***REMOVED***got***REMOVED***id***REMOVED***${id2}`);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(reject)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***applyProperties(reject,***REMOVED***properties);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***reject;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***resolve;
***REMOVED******REMOVED***};
***REMOVED******REMOVED***worker.unref();
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***buildSync(options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***validateBuildSyncOptions(options);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***runCallSync("build",***REMOVED***[options]);
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***transformSync(input,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***runCallSync("transform",***REMOVED***[input,***REMOVED***options]);
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***formatMessagesSync(messages,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***runCallSync("formatMessages",***REMOVED***[messages,***REMOVED***options]);
***REMOVED******REMOVED******REMOVED******REMOVED***},
***REMOVED******REMOVED******REMOVED******REMOVED***analyzeMetafileSync(metafile,***REMOVED***options)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***runCallSync("analyzeMetafile",***REMOVED***[metafile,***REMOVED***options]);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***};
};
var***REMOVED***startSyncServiceWorker***REMOVED***=***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***workerPort***REMOVED***=***REMOVED***worker_threads.workerData.workerPort;
***REMOVED******REMOVED***let***REMOVED***parentPort***REMOVED***=***REMOVED***worker_threads.parentPort;
***REMOVED******REMOVED***let***REMOVED***extractProperties***REMOVED***=***REMOVED***(object)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***properties***REMOVED***=***REMOVED***{};
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(object***REMOVED***&&***REMOVED***typeof***REMOVED***object***REMOVED***===***REMOVED***"object")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***in***REMOVED***object)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***properties[key]***REMOVED***=***REMOVED***object[key];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***properties;
***REMOVED******REMOVED***};
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***service***REMOVED***=***REMOVED***ensureServiceIsRunning();
***REMOVED******REMOVED******REMOVED******REMOVED***defaultWD***REMOVED***=***REMOVED***worker_threads.workerData.defaultWD;
***REMOVED******REMOVED******REMOVED******REMOVED***parentPort.on("message",***REMOVED***(msg)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(async***REMOVED***()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{***REMOVED***sharedBuffer,***REMOVED***id,***REMOVED***command,***REMOVED***args***REMOVED***}***REMOVED***=***REMOVED***msg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sharedBufferView***REMOVED***=***REMOVED***new***REMOVED***Int32Array(sharedBuffer);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***switch***REMOVED***(command)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"build":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerPort.postMessage({***REMOVED***id,***REMOVED***resolve:***REMOVED***await***REMOVED***service.build(args[0])***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"transform":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerPort.postMessage({***REMOVED***id,***REMOVED***resolve:***REMOVED***await***REMOVED***service.transform(args[0],***REMOVED***args[1])***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"formatMessages":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerPort.postMessage({***REMOVED***id,***REMOVED***resolve:***REMOVED***await***REMOVED***service.formatMessages(args[0],***REMOVED***args[1])***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***case***REMOVED***"analyzeMetafile":
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerPort.postMessage({***REMOVED***id,***REMOVED***resolve:***REMOVED***await***REMOVED***service.analyzeMetafile(args[0],***REMOVED***args[1])***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***break;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***default:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***command:***REMOVED***${command}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(reject)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerPort.postMessage({***REMOVED***id,***REMOVED***reject,***REMOVED***properties:***REMOVED***extractProperties(reject)***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Atomics.add(sharedBufferView,***REMOVED***0,***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Atomics.notify(sharedBufferView,***REMOVED***0,***REMOVED***Infinity);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***})();
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(reject)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***parentPort.on("message",***REMOVED***(msg)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***{***REMOVED***sharedBuffer,***REMOVED***id***REMOVED***}***REMOVED***=***REMOVED***msg;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***sharedBufferView***REMOVED***=***REMOVED***new***REMOVED***Int32Array(sharedBuffer);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***workerPort.postMessage({***REMOVED***id,***REMOVED***reject,***REMOVED***properties:***REMOVED***extractProperties(reject)***REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Atomics.add(sharedBufferView,***REMOVED***0,***REMOVED***1);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***Atomics.notify(sharedBufferView,***REMOVED***0,***REMOVED***Infinity);
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED***}
};
if***REMOVED***(isInternalWorkerThread)***REMOVED***{
***REMOVED******REMOVED***startSyncServiceWorker();
}
var***REMOVED***node_default***REMOVED***=***REMOVED***node_exports;
//***REMOVED***Annotate***REMOVED***the***REMOVED***CommonJS***REMOVED***export***REMOVED***names***REMOVED***for***REMOVED***ESM***REMOVED***import***REMOVED***in***REMOVED***node:
0***REMOVED***&&***REMOVED***(module.exports***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***analyzeMetafile,
***REMOVED******REMOVED***analyzeMetafileSync,
***REMOVED******REMOVED***build,
***REMOVED******REMOVED***buildSync,
***REMOVED******REMOVED***context,
***REMOVED******REMOVED***formatMessages,
***REMOVED******REMOVED***formatMessagesSync,
***REMOVED******REMOVED***initialize,
***REMOVED******REMOVED***transform,
***REMOVED******REMOVED***transformSync,
***REMOVED******REMOVED***version
});
