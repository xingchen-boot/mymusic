"use***REMOVED***strict";
var***REMOVED***__create***REMOVED***=***REMOVED***Object.create;
var***REMOVED***__defProp***REMOVED***=***REMOVED***Object.defineProperty;
var***REMOVED***__getOwnPropDesc***REMOVED***=***REMOVED***Object.getOwnPropertyDescriptor;
var***REMOVED***__getOwnPropNames***REMOVED***=***REMOVED***Object.getOwnPropertyNames;
var***REMOVED***__getProtoOf***REMOVED***=***REMOVED***Object.getPrototypeOf;
var***REMOVED***__hasOwnProp***REMOVED***=***REMOVED***Object.prototype.hasOwnProperty;
var***REMOVED***__copyProps***REMOVED***=***REMOVED***(to,***REMOVED***from,***REMOVED***except,***REMOVED***desc)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(from***REMOVED***&&***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"object"***REMOVED***||***REMOVED***typeof***REMOVED***from***REMOVED***===***REMOVED***"function")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***key***REMOVED***of***REMOVED***__getOwnPropNames(from))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!__hasOwnProp.call(to,***REMOVED***key)***REMOVED***&&***REMOVED***key***REMOVED***!==***REMOVED***except)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***__defProp(to,***REMOVED***key,***REMOVED***{***REMOVED***get:***REMOVED***()***REMOVED***=>***REMOVED***from[key],***REMOVED***enumerable:***REMOVED***!(desc***REMOVED***=***REMOVED***__getOwnPropDesc(from,***REMOVED***key))***REMOVED***||***REMOVED***desc.enumerable***REMOVED***});
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***to;
};
var***REMOVED***__toESM***REMOVED***=***REMOVED***(mod,***REMOVED***isNodeMode,***REMOVED***target)***REMOVED***=>***REMOVED***(target***REMOVED***=***REMOVED***mod***REMOVED***!=***REMOVED***null***REMOVED***?***REMOVED***__create(__getProtoOf(mod))***REMOVED***:***REMOVED***{},***REMOVED***__copyProps(
***REMOVED******REMOVED***//***REMOVED***If***REMOVED***the***REMOVED***importer***REMOVED***is***REMOVED***in***REMOVED***node***REMOVED***compatibility***REMOVED***mode***REMOVED***or***REMOVED***this***REMOVED***is***REMOVED***not***REMOVED***an***REMOVED***ESM
***REMOVED******REMOVED***//***REMOVED***file***REMOVED***that***REMOVED***has***REMOVED***been***REMOVED***converted***REMOVED***to***REMOVED***a***REMOVED***CommonJS***REMOVED***file***REMOVED***using***REMOVED***a***REMOVED***Babel-
***REMOVED******REMOVED***//***REMOVED***compatible***REMOVED***transform***REMOVED***(i.e.***REMOVED***"__esModule"***REMOVED***has***REMOVED***not***REMOVED***been***REMOVED***set),***REMOVED***then***REMOVED***set
***REMOVED******REMOVED***//***REMOVED***"default"***REMOVED***to***REMOVED***the***REMOVED***CommonJS***REMOVED***"module.exports"***REMOVED***for***REMOVED***node***REMOVED***compatibility.
***REMOVED******REMOVED***isNodeMode***REMOVED***||***REMOVED***!mod***REMOVED***||***REMOVED***!mod.__esModule***REMOVED***?***REMOVED***__defProp(target,***REMOVED***"default",***REMOVED***{***REMOVED***value:***REMOVED***mod,***REMOVED***enumerable:***REMOVED***true***REMOVED***})***REMOVED***:***REMOVED***target,
***REMOVED******REMOVED***mod
));

//***REMOVED***lib/npm/node-platform.ts
var***REMOVED***fs***REMOVED***=***REMOVED***require("fs");
var***REMOVED***os***REMOVED***=***REMOVED***require("os");
var***REMOVED***path***REMOVED***=***REMOVED***require("path");
var***REMOVED***ESBUILD_BINARY_PATH***REMOVED***=***REMOVED***process.env.ESBUILD_BINARY_PATH***REMOVED***||***REMOVED***ESBUILD_BINARY_PATH;
var***REMOVED***isValidBinaryPath***REMOVED***=***REMOVED***(x)***REMOVED***=>***REMOVED***!!x***REMOVED***&&***REMOVED***x***REMOVED***!==***REMOVED***"/usr/bin/esbuild";
var***REMOVED***knownWindowsPackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"win32***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/win32-arm64",
***REMOVED******REMOVED***"win32***REMOVED***ia32***REMOVED***LE":***REMOVED***"@esbuild/win32-ia32",
***REMOVED******REMOVED***"win32***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/win32-x64"
};
var***REMOVED***knownUnixlikePackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"android***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/android-arm64",
***REMOVED******REMOVED***"darwin***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/darwin-arm64",
***REMOVED******REMOVED***"darwin***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/darwin-x64",
***REMOVED******REMOVED***"freebsd***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/freebsd-arm64",
***REMOVED******REMOVED***"freebsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/freebsd-x64",
***REMOVED******REMOVED***"linux***REMOVED***arm***REMOVED***LE":***REMOVED***"@esbuild/linux-arm",
***REMOVED******REMOVED***"linux***REMOVED***arm64***REMOVED***LE":***REMOVED***"@esbuild/linux-arm64",
***REMOVED******REMOVED***"linux***REMOVED***ia32***REMOVED***LE":***REMOVED***"@esbuild/linux-ia32",
***REMOVED******REMOVED***"linux***REMOVED***mips64el***REMOVED***LE":***REMOVED***"@esbuild/linux-mips64el",
***REMOVED******REMOVED***"linux***REMOVED***ppc64***REMOVED***LE":***REMOVED***"@esbuild/linux-ppc64",
***REMOVED******REMOVED***"linux***REMOVED***riscv64***REMOVED***LE":***REMOVED***"@esbuild/linux-riscv64",
***REMOVED******REMOVED***"linux***REMOVED***s390x***REMOVED***BE":***REMOVED***"@esbuild/linux-s390x",
***REMOVED******REMOVED***"linux***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/linux-x64",
***REMOVED******REMOVED***"linux***REMOVED***loong64***REMOVED***LE":***REMOVED***"@esbuild/linux-loong64",
***REMOVED******REMOVED***"netbsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/netbsd-x64",
***REMOVED******REMOVED***"openbsd***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/openbsd-x64",
***REMOVED******REMOVED***"sunos***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/sunos-x64"
};
var***REMOVED***knownWebAssemblyFallbackPackages***REMOVED***=***REMOVED***{
***REMOVED******REMOVED***"android***REMOVED***arm***REMOVED***LE":***REMOVED***"@esbuild/android-arm",
***REMOVED******REMOVED***"android***REMOVED***x64***REMOVED***LE":***REMOVED***"@esbuild/android-x64"
};
function***REMOVED***pkgAndSubpathForCurrentPlatform()***REMOVED***{
***REMOVED******REMOVED***let***REMOVED***pkg;
***REMOVED******REMOVED***let***REMOVED***subpath;
***REMOVED******REMOVED***let***REMOVED***isWASM***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED***let***REMOVED***platformKey***REMOVED***=***REMOVED***`${process.platform}***REMOVED***${os.arch()}***REMOVED***${os.endianness()}`;
***REMOVED******REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownWindowsPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownWindowsPackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"esbuild.exe";
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownUnixlikePackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownUnixlikePackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"bin/esbuild";
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***if***REMOVED***(platformKey***REMOVED***in***REMOVED***knownWebAssemblyFallbackPackages)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***pkg***REMOVED***=***REMOVED***knownWebAssemblyFallbackPackages[platformKey];
***REMOVED******REMOVED******REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***"bin/esbuild";
***REMOVED******REMOVED******REMOVED******REMOVED***isWASM***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Unsupported***REMOVED***platform:***REMOVED***${platformKey}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***{***REMOVED***pkg,***REMOVED***subpath,***REMOVED***isWASM***REMOVED***};
}
function***REMOVED***downloadedBinPath(pkg,***REMOVED***subpath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***esbuildLibDir***REMOVED***=***REMOVED***path.dirname(require.resolve("esbuild"));
***REMOVED******REMOVED***return***REMOVED***path.join(esbuildLibDir,***REMOVED***`downloaded-${pkg.replace("/",***REMOVED***"-")}-${path.basename(subpath)}`);
}

//***REMOVED***lib/npm/node-install.ts
var***REMOVED***fs2***REMOVED***=***REMOVED***require("fs");
var***REMOVED***os2***REMOVED***=***REMOVED***require("os");
var***REMOVED***path2***REMOVED***=***REMOVED***require("path");
var***REMOVED***zlib***REMOVED***=***REMOVED***require("zlib");
var***REMOVED***https***REMOVED***=***REMOVED***require("https");
var***REMOVED***child_process***REMOVED***=***REMOVED***require("child_process");
var***REMOVED***versionFromPackageJSON***REMOVED***=***REMOVED***require(path2.join(__dirname,***REMOVED***"package.json")).version;
var***REMOVED***toPath***REMOVED***=***REMOVED***path2.join(__dirname,***REMOVED***"bin",***REMOVED***"esbuild");
var***REMOVED***isToPathJS***REMOVED***=***REMOVED***true;
function***REMOVED***validateBinaryVersion(...command)***REMOVED***{
***REMOVED******REMOVED***command.push("--version");
***REMOVED******REMOVED***let***REMOVED***stdout;
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***stdout***REMOVED***=***REMOVED***child_process.execFileSync(command.shift(),***REMOVED***command,***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***Without***REMOVED***this,***REMOVED***this***REMOVED***install***REMOVED***script***REMOVED***strangely***REMOVED***crashes***REMOVED***with***REMOVED***the***REMOVED***error
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***"EACCES:***REMOVED***permission***REMOVED***denied,***REMOVED***write"***REMOVED***but***REMOVED***only***REMOVED***on***REMOVED***Ubuntu***REMOVED***Linux***REMOVED***when***REMOVED***node***REMOVED***is
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***installed***REMOVED***from***REMOVED***the***REMOVED***Snap***REMOVED***Store.***REMOVED***This***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***problem***REMOVED***when***REMOVED***you***REMOVED***download
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***the***REMOVED***official***REMOVED***version***REMOVED***of***REMOVED***node.***REMOVED***The***REMOVED***problem***REMOVED***appears***REMOVED***to***REMOVED***be***REMOVED***that***REMOVED***stderr
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***(i.e.***REMOVED***file***REMOVED***descriptor***REMOVED***2)***REMOVED***isn't***REMOVED***writable?
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***More***REMOVED***info:
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***-***REMOVED***https://snapcraft.io/***REMOVED***(what***REMOVED***the***REMOVED***Snap***REMOVED***Store***REMOVED***is)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***-***REMOVED***https://nodejs.org/dist/***REMOVED***(download***REMOVED***the***REMOVED***official***REMOVED***version***REMOVED***of***REMOVED***node)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//***REMOVED***-***REMOVED***https://github.com/evanw/esbuild/issues/1711#issuecomment-1027554035
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***//
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stdio:***REMOVED***"pipe"
***REMOVED******REMOVED******REMOVED******REMOVED***}).toString().trim();
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(os2.platform()***REMOVED***===***REMOVED***"darwin"***REMOVED***&&***REMOVED***/_SecTrustEvaluateWithError/.test(err***REMOVED***+***REMOVED***""))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***os3***REMOVED***=***REMOVED***"this***REMOVED***version***REMOVED***of***REMOVED***macOS";
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***os3***REMOVED***=***REMOVED***"macOS***REMOVED***"***REMOVED***+***REMOVED***child_process.execFileSync("sw_vers",***REMOVED***["-productVersion"]).toString().trim();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`The***REMOVED***"esbuild"***REMOVED***package***REMOVED***cannot***REMOVED***be***REMOVED***installed***REMOVED***because***REMOVED***${os3}***REMOVED***is***REMOVED***too***REMOVED***outdated.

The***REMOVED***Go***REMOVED***compiler***REMOVED***(which***REMOVED***esbuild***REMOVED***relies***REMOVED***on)***REMOVED***no***REMOVED***longer***REMOVED***supports***REMOVED***${os3},
which***REMOVED***means***REMOVED***the***REMOVED***"esbuild"***REMOVED***binary***REMOVED***executable***REMOVED***can't***REMOVED***be***REMOVED***run.***REMOVED***You***REMOVED***can***REMOVED***either:

***REMOVED******REMOVED*******REMOVED***Update***REMOVED***your***REMOVED***version***REMOVED***of***REMOVED***macOS***REMOVED***to***REMOVED***one***REMOVED***that***REMOVED***the***REMOVED***Go***REMOVED***compiler***REMOVED***supports
***REMOVED******REMOVED*******REMOVED***Use***REMOVED***the***REMOVED***"esbuild-wasm"***REMOVED***package***REMOVED***instead***REMOVED***of***REMOVED***the***REMOVED***"esbuild"***REMOVED***package
***REMOVED******REMOVED*******REMOVED***Build***REMOVED***esbuild***REMOVED***yourself***REMOVED***using***REMOVED***an***REMOVED***older***REMOVED***version***REMOVED***of***REMOVED***the***REMOVED***Go***REMOVED***compiler
`);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***err;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***if***REMOVED***(stdout***REMOVED***!==***REMOVED***versionFromPackageJSON)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Expected***REMOVED***${JSON.stringify(versionFromPackageJSON)}***REMOVED***but***REMOVED***got***REMOVED***${JSON.stringify(stdout)}`);
***REMOVED******REMOVED***}
}
function***REMOVED***isYarn()***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***npm_config_user_agent***REMOVED***}***REMOVED***=***REMOVED***process.env;
***REMOVED******REMOVED***if***REMOVED***(npm_config_user_agent)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***/\byarn\//.test(npm_config_user_agent);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***return***REMOVED***false;
}
function***REMOVED***fetch(url)***REMOVED***{
***REMOVED******REMOVED***return***REMOVED***new***REMOVED***Promise((resolve,***REMOVED***reject)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***https.get(url,***REMOVED***(res)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***((res.statusCode***REMOVED***===***REMOVED***301***REMOVED***||***REMOVED***res.statusCode***REMOVED***===***REMOVED***302)***REMOVED***&&***REMOVED***res.headers.location)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***fetch(res.headers.location).then(resolve,***REMOVED***reject);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(res.statusCode***REMOVED***!==***REMOVED***200)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***reject(new***REMOVED***Error(`Server***REMOVED***responded***REMOVED***with***REMOVED***${res.statusCode}`));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***chunks***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res.on("data",***REMOVED***(chunk)***REMOVED***=>***REMOVED***chunks.push(chunk));
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***res.on("end",***REMOVED***()***REMOVED***=>***REMOVED***resolve(Buffer.concat(chunks)));
***REMOVED******REMOVED******REMOVED******REMOVED***}).on("error",***REMOVED***reject);
***REMOVED******REMOVED***});
}
function***REMOVED***extractFileFromTarGzip(buffer,***REMOVED***subpath)***REMOVED***{
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***buffer***REMOVED***=***REMOVED***zlib.unzipSync(buffer);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(err)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Invalid***REMOVED***gzip***REMOVED***data***REMOVED***in***REMOVED***archive:***REMOVED***${err***REMOVED***&&***REMOVED***err.message***REMOVED***||***REMOVED***err}`);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***let***REMOVED***str***REMOVED***=***REMOVED***(i,***REMOVED***n)***REMOVED***=>***REMOVED***String.fromCharCode(...buffer.subarray(i,***REMOVED***i***REMOVED***+***REMOVED***n)).replace(/\0.*$/,***REMOVED***"");
***REMOVED******REMOVED***let***REMOVED***offset***REMOVED***=***REMOVED***0;
***REMOVED******REMOVED***subpath***REMOVED***=***REMOVED***`package/${subpath}`;
***REMOVED******REMOVED***while***REMOVED***(offset***REMOVED***<***REMOVED***buffer.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***name***REMOVED***=***REMOVED***str(offset,***REMOVED***100);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***size***REMOVED***=***REMOVED***parseInt(str(offset***REMOVED***+***REMOVED***124,***REMOVED***12),***REMOVED***8);
***REMOVED******REMOVED******REMOVED******REMOVED***offset***REMOVED***+=***REMOVED***512;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isNaN(size))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(name***REMOVED***===***REMOVED***subpath)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***buffer.subarray(offset,***REMOVED***offset***REMOVED***+***REMOVED***size);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***offset***REMOVED***+=***REMOVED***size***REMOVED***+***REMOVED***511***REMOVED***&***REMOVED***~511;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Could***REMOVED***not***REMOVED***find***REMOVED***${JSON.stringify(subpath)}***REMOVED***in***REMOVED***archive`);
}
function***REMOVED***installUsingNPM(pkg,***REMOVED***subpath,***REMOVED***binPath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***env***REMOVED***=***REMOVED***{***REMOVED***...process.env,***REMOVED***npm_config_global:***REMOVED***void***REMOVED***0***REMOVED***};
***REMOVED******REMOVED***const***REMOVED***esbuildLibDir***REMOVED***=***REMOVED***path2.dirname(require.resolve("esbuild"));
***REMOVED******REMOVED***const***REMOVED***installDir***REMOVED***=***REMOVED***path2.join(esbuildLibDir,***REMOVED***"npm-install");
***REMOVED******REMOVED***fs2.mkdirSync(installDir);
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fs2.writeFileSync(path2.join(installDir,***REMOVED***"package.json"),***REMOVED***"{}");
***REMOVED******REMOVED******REMOVED******REMOVED***child_process.execSync(
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***`npm***REMOVED***install***REMOVED***--loglevel=error***REMOVED***--prefer-offline***REMOVED***--no-audit***REMOVED***--progress=false***REMOVED***${pkg}@${versionFromPackageJSON}`,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***{***REMOVED***cwd:***REMOVED***installDir,***REMOVED***stdio:***REMOVED***"pipe",***REMOVED***env***REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***);
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***installedBinPath***REMOVED***=***REMOVED***path2.join(installDir,***REMOVED***"node_modules",***REMOVED***pkg,***REMOVED***subpath);
***REMOVED******REMOVED******REMOVED******REMOVED***fs2.renameSync(installedBinPath,***REMOVED***binPath);
***REMOVED******REMOVED***}***REMOVED***finally***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***removeRecursive(installDir);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}
function***REMOVED***removeRecursive(dir)***REMOVED***{
***REMOVED******REMOVED***for***REMOVED***(const***REMOVED***entry***REMOVED***of***REMOVED***fs2.readdirSync(dir))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***entryPath***REMOVED***=***REMOVED***path2.join(dir,***REMOVED***entry);
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***stats;
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stats***REMOVED***=***REMOVED***fs2.lstatSync(entryPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(stats.isDirectory())
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***removeRecursive(entryPath);
***REMOVED******REMOVED******REMOVED******REMOVED***else
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.unlinkSync(entryPath);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***fs2.rmdirSync(dir);
}
function***REMOVED***applyManualBinaryPathOverride(overridePath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***pathString***REMOVED***=***REMOVED***JSON.stringify(overridePath);
***REMOVED******REMOVED***fs2.writeFileSync(toPath,***REMOVED***`#!/usr/bin/env***REMOVED***node
require('child_process').execFileSync(${pathString},***REMOVED***process.argv.slice(2),***REMOVED***{***REMOVED***stdio:***REMOVED***'inherit'***REMOVED***});
`);
***REMOVED******REMOVED***const***REMOVED***libMain***REMOVED***=***REMOVED***path2.join(__dirname,***REMOVED***"lib",***REMOVED***"main.js");
***REMOVED******REMOVED***const***REMOVED***code***REMOVED***=***REMOVED***fs2.readFileSync(libMain,***REMOVED***"utf8");
***REMOVED******REMOVED***fs2.writeFileSync(libMain,***REMOVED***`var***REMOVED***ESBUILD_BINARY_PATH***REMOVED***=***REMOVED***${pathString};
${code}`);
}
function***REMOVED***maybeOptimizePackage(binPath)***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(os2.platform()***REMOVED***!==***REMOVED***"win32"***REMOVED***&&***REMOVED***!isYarn())***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***tempPath***REMOVED***=***REMOVED***path2.join(__dirname,***REMOVED***"bin-esbuild");
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.linkSync(binPath,***REMOVED***tempPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.renameSync(tempPath,***REMOVED***toPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***isToPathJS***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***fs2.unlinkSync(tempPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
}
async***REMOVED***function***REMOVED***downloadDirectlyFromNPM(pkg,***REMOVED***subpath,***REMOVED***binPath)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***url***REMOVED***=***REMOVED***`https://registry.npmjs.org/${pkg}/-/${pkg.replace("@esbuild/",***REMOVED***"")}-${versionFromPackageJSON}.tgz`;
***REMOVED******REMOVED***console.error(`[esbuild]***REMOVED***Trying***REMOVED***to***REMOVED***download***REMOVED***${JSON.stringify(url)}`);
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***fs2.writeFileSync(binPath,***REMOVED***extractFileFromTarGzip(await***REMOVED***fetch(url),***REMOVED***subpath));
***REMOVED******REMOVED******REMOVED******REMOVED***fs2.chmodSync(binPath,***REMOVED***493);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***console.error(`[esbuild]***REMOVED***Failed***REMOVED***to***REMOVED***download***REMOVED***${JSON.stringify(url)}:***REMOVED***${e***REMOVED***&&***REMOVED***e.message***REMOVED***||***REMOVED***e}`);
***REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***e;
***REMOVED******REMOVED***}
}
async***REMOVED***function***REMOVED***checkAndPreparePackage()***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isValidBinaryPath(ESBUILD_BINARY_PATH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!fs2.existsSync(ESBUILD_BINARY_PATH))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.warn(`[esbuild]***REMOVED***Ignoring***REMOVED***bad***REMOVED***configuration:***REMOVED***ESBUILD_BINARY_PATH=${ESBUILD_BINARY_PATH}`);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***applyManualBinaryPathOverride(ESBUILD_BINARY_PATH);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***pkg,***REMOVED***subpath***REMOVED***}***REMOVED***=***REMOVED***pkgAndSubpathForCurrentPlatform();
***REMOVED******REMOVED***let***REMOVED***binPath;
***REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***binPath***REMOVED***=***REMOVED***require.resolve(`${pkg}/${subpath}`);
***REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***console.error(`[esbuild]***REMOVED***Failed***REMOVED***to***REMOVED***find***REMOVED***package***REMOVED***"${pkg}"***REMOVED***on***REMOVED***the***REMOVED***file***REMOVED***system

This***REMOVED***can***REMOVED***happen***REMOVED***if***REMOVED***you***REMOVED***use***REMOVED***the***REMOVED***"--no-optional"***REMOVED***flag.***REMOVED***The***REMOVED***"optionalDependencies"
package.json***REMOVED***feature***REMOVED***is***REMOVED***used***REMOVED***by***REMOVED***esbuild***REMOVED***to***REMOVED***install***REMOVED***the***REMOVED***correct***REMOVED***binary***REMOVED***executable
for***REMOVED***your***REMOVED***current***REMOVED***platform.***REMOVED***This***REMOVED***install***REMOVED***script***REMOVED***will***REMOVED***now***REMOVED***attempt***REMOVED***to***REMOVED***work***REMOVED***around
this.***REMOVED***If***REMOVED***that***REMOVED***fails,***REMOVED***you***REMOVED***need***REMOVED***to***REMOVED***remove***REMOVED***the***REMOVED***"--no-optional"***REMOVED***flag***REMOVED***to***REMOVED***use***REMOVED***esbuild.
`);
***REMOVED******REMOVED******REMOVED******REMOVED***binPath***REMOVED***=***REMOVED***downloadedBinPath(pkg,***REMOVED***subpath);
***REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.error(`[esbuild]***REMOVED***Trying***REMOVED***to***REMOVED***install***REMOVED***package***REMOVED***"${pkg}"***REMOVED***using***REMOVED***npm`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***installUsingNPM(pkg,***REMOVED***subpath,***REMOVED***binPath);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e2)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***console.error(`[esbuild]***REMOVED***Failed***REMOVED***to***REMOVED***install***REMOVED***package***REMOVED***"${pkg}"***REMOVED***using***REMOVED***npm:***REMOVED***${e2***REMOVED***&&***REMOVED***e2.message***REMOVED***||***REMOVED***e2}`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***try***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***await***REMOVED***downloadDirectlyFromNPM(pkg,***REMOVED***subpath,***REMOVED***binPath);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***catch***REMOVED***(e3)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***throw***REMOVED***new***REMOVED***Error(`Failed***REMOVED***to***REMOVED***install***REMOVED***package***REMOVED***"${pkg}"`);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***maybeOptimizePackage(binPath);
}
checkAndPreparePackage().then(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED***if***REMOVED***(isToPathJS)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***validateBinaryVersion(process.execPath,***REMOVED***toPath);
***REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***validateBinaryVersion(toPath);
***REMOVED******REMOVED***}
});
