'use***REMOVED***strict';

/*****REMOVED***@type***REMOVED***{(t:***REMOVED***import('tape').Test)***REMOVED***=>***REMOVED***false***REMOVED***|***REMOVED***void}***REMOVED****/
//***REMOVED***eslint-disable-next-line***REMOVED***consistent-return
module.exports***REMOVED***=***REMOVED***function***REMOVED***runSymbolTests(t)***REMOVED***{
	t.equal(typeof***REMOVED***Symbol,***REMOVED***'function',***REMOVED***'global***REMOVED***Symbol***REMOVED***is***REMOVED***a***REMOVED***function');

	if***REMOVED***(typeof***REMOVED***Symbol***REMOVED***!==***REMOVED***'function')***REMOVED***{***REMOVED***return***REMOVED***false;***REMOVED***}

	t.notEqual(Symbol(),***REMOVED***Symbol(),***REMOVED***'two***REMOVED***symbols***REMOVED***are***REMOVED***not***REMOVED***equal');

	/*
	t.equal(
		Symbol.prototype.toString.call(Symbol('foo')),
		Symbol.prototype.toString.call(Symbol('foo')),
		'two***REMOVED***symbols***REMOVED***with***REMOVED***the***REMOVED***same***REMOVED***description***REMOVED***stringify***REMOVED***the***REMOVED***same'
	);
	*/

	/*
	var***REMOVED***foo***REMOVED***=***REMOVED***Symbol('foo');

	t.notEqual(
		String(foo),
		String(Symbol('bar')),
		'two***REMOVED***symbols***REMOVED***with***REMOVED***different***REMOVED***descriptions***REMOVED***do***REMOVED***not***REMOVED***stringify***REMOVED***the***REMOVED***same'
	);
	*/

	t.equal(typeof***REMOVED***Symbol.prototype.toString,***REMOVED***'function',***REMOVED***'Symbol#toString***REMOVED***is***REMOVED***a***REMOVED***function');
	//***REMOVED***t.equal(String(foo),***REMOVED***Symbol.prototype.toString.call(foo),***REMOVED***'Symbol#toString***REMOVED***equals***REMOVED***String***REMOVED***of***REMOVED***the***REMOVED***same***REMOVED***symbol');

	t.equal(typeof***REMOVED***Object.getOwnPropertySymbols,***REMOVED***'function',***REMOVED***'Object.getOwnPropertySymbols***REMOVED***is***REMOVED***a***REMOVED***function');

	/*****REMOVED***@type***REMOVED***{{***REMOVED***[k***REMOVED***in***REMOVED***symbol]?:***REMOVED***unknown***REMOVED***}}***REMOVED****/
	var***REMOVED***obj***REMOVED***=***REMOVED***{};
	var***REMOVED***sym***REMOVED***=***REMOVED***Symbol('test');
	var***REMOVED***symObj***REMOVED***=***REMOVED***Object(sym);
	t.notEqual(typeof***REMOVED***sym,***REMOVED***'string',***REMOVED***'Symbol***REMOVED***is***REMOVED***not***REMOVED***a***REMOVED***string');
	t.equal(Object.prototype.toString.call(sym),***REMOVED***'[object***REMOVED***Symbol]',***REMOVED***'symbol***REMOVED***primitive***REMOVED***Object#toStrings***REMOVED***properly');
	t.equal(Object.prototype.toString.call(symObj),***REMOVED***'[object***REMOVED***Symbol]',***REMOVED***'symbol***REMOVED***primitive***REMOVED***Object#toStrings***REMOVED***properly');

	var***REMOVED***symVal***REMOVED***=***REMOVED***42;
	obj[sym]***REMOVED***=***REMOVED***symVal;
	//***REMOVED***eslint-disable-next-line***REMOVED***no-restricted-syntax,***REMOVED***no-unused-vars
	for***REMOVED***(var***REMOVED***_***REMOVED***in***REMOVED***obj)***REMOVED***{***REMOVED***t.fail('symbol***REMOVED***property***REMOVED***key***REMOVED***was***REMOVED***found***REMOVED***in***REMOVED***for..in***REMOVED***of***REMOVED***object');***REMOVED***}

	t.deepEqual(Object.keys(obj),***REMOVED***[],***REMOVED***'no***REMOVED***enumerable***REMOVED***own***REMOVED***keys***REMOVED***on***REMOVED***symbol-valued***REMOVED***object');
	t.deepEqual(Object.getOwnPropertyNames(obj),***REMOVED***[],***REMOVED***'no***REMOVED***own***REMOVED***names***REMOVED***on***REMOVED***symbol-valued***REMOVED***object');
	t.deepEqual(Object.getOwnPropertySymbols(obj),***REMOVED***[sym],***REMOVED***'one***REMOVED***own***REMOVED***symbol***REMOVED***on***REMOVED***symbol-valued***REMOVED***object');
	t.equal(Object.prototype.propertyIsEnumerable.call(obj,***REMOVED***sym),***REMOVED***true,***REMOVED***'symbol***REMOVED***is***REMOVED***enumerable');
	t.deepEqual(Object.getOwnPropertyDescriptor(obj,***REMOVED***sym),***REMOVED***{
		configurable:***REMOVED***true,
		enumerable:***REMOVED***true,
		value:***REMOVED***42,
		writable:***REMOVED***true
	},***REMOVED***'property***REMOVED***descriptor***REMOVED***is***REMOVED***correct');
};
