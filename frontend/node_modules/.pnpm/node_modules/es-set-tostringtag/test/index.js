'use***REMOVED***strict';

var***REMOVED***test***REMOVED***=***REMOVED***require('tape');
var***REMOVED***hasToStringTag***REMOVED***=***REMOVED***require('has-tostringtag/shams')();
var***REMOVED***hasOwn***REMOVED***=***REMOVED***require('hasown');

var***REMOVED***setToStringTag***REMOVED***=***REMOVED***require('../');

test('setToStringTag',***REMOVED***function***REMOVED***(t)***REMOVED***{
	t.equal(typeof***REMOVED***setToStringTag,***REMOVED***'function',***REMOVED***'is***REMOVED***a***REMOVED***function');

	/*****REMOVED***@type***REMOVED***{{***REMOVED***[Symbol.toStringTag]?:***REMOVED***typeof***REMOVED***sentinel***REMOVED***}}***REMOVED****/
	var***REMOVED***obj***REMOVED***=***REMOVED***{};
	var***REMOVED***sentinel***REMOVED***=***REMOVED***{};

	setToStringTag(obj,***REMOVED***sentinel);

	t['throws'](
		//***REMOVED***@ts-expect-error
		function***REMOVED***()***REMOVED***{***REMOVED***setToStringTag(obj,***REMOVED***sentinel,***REMOVED***{***REMOVED***force:***REMOVED***'yes'***REMOVED***});***REMOVED***},
		TypeError,
		'throws***REMOVED***if***REMOVED***options***REMOVED***is***REMOVED***not***REMOVED***an***REMOVED***object'
	);

	t.test('has***REMOVED***Symbol.toStringTag',***REMOVED***{***REMOVED***skip:***REMOVED***!hasToStringTag***REMOVED***},***REMOVED***function***REMOVED***(st)***REMOVED***{
		st.ok(hasOwn(obj,***REMOVED***Symbol.toStringTag),***REMOVED***'has***REMOVED***toStringTag***REMOVED***property');

		st.equal(obj[Symbol.toStringTag],***REMOVED***sentinel,***REMOVED***'toStringTag***REMOVED***property***REMOVED***is***REMOVED***as***REMOVED***expected');

		st.equal(String(obj),***REMOVED***'[object***REMOVED***Object]',***REMOVED***'toStringTag***REMOVED***works');

		/*****REMOVED***@type***REMOVED***{{***REMOVED***[Symbol.toStringTag]?:***REMOVED***string***REMOVED***}}***REMOVED****/
		var***REMOVED***tagged***REMOVED***=***REMOVED***{};
		tagged[Symbol.toStringTag]***REMOVED***=***REMOVED***'already***REMOVED***tagged';
		st.equal(String(tagged),***REMOVED***'[object***REMOVED***already***REMOVED***tagged]',***REMOVED***'toStringTag***REMOVED***works');

		setToStringTag(tagged,***REMOVED***'new***REMOVED***tag');
		st.equal(String(tagged),***REMOVED***'[object***REMOVED***already***REMOVED***tagged]',***REMOVED***'toStringTag***REMOVED***is***REMOVED***unchanged');

		setToStringTag(tagged,***REMOVED***'new***REMOVED***tag',***REMOVED***{***REMOVED***force:***REMOVED***true***REMOVED***});
		st.equal(String(tagged),***REMOVED***'[object***REMOVED***new***REMOVED***tag]',***REMOVED***'toStringTag***REMOVED***is***REMOVED***changed***REMOVED***with***REMOVED***force:***REMOVED***true');

		st.deepEqual(
			Object.getOwnPropertyDescriptor(tagged,***REMOVED***Symbol.toStringTag),
			{
				configurable:***REMOVED***true,
				enumerable:***REMOVED***false,
				value:***REMOVED***'new***REMOVED***tag',
				writable:***REMOVED***false
			},
			'has***REMOVED***expected***REMOVED***property***REMOVED***descriptor'
		);

		setToStringTag(tagged,***REMOVED***'new***REMOVED***tag',***REMOVED***{***REMOVED***force:***REMOVED***true,***REMOVED***nonConfigurable:***REMOVED***true***REMOVED***});
		st.deepEqual(
			Object.getOwnPropertyDescriptor(tagged,***REMOVED***Symbol.toStringTag),
			{
				configurable:***REMOVED***false,
				enumerable:***REMOVED***false,
				value:***REMOVED***'new***REMOVED***tag',
				writable:***REMOVED***false
			},
			'is***REMOVED***nonconfigurable'
		);

		st.end();
	});

	t.test('does***REMOVED***not***REMOVED***have***REMOVED***Symbol.toStringTag',***REMOVED***{***REMOVED***skip:***REMOVED***hasToStringTag***REMOVED***},***REMOVED***function***REMOVED***(st)***REMOVED***{
		var***REMOVED***passed***REMOVED***=***REMOVED***true;
		for***REMOVED***(var***REMOVED***key***REMOVED***in***REMOVED***obj)***REMOVED***{***REMOVED***//***REMOVED***eslint-disable-line***REMOVED***no-restricted-syntax
			if***REMOVED***(hasOwn(obj,***REMOVED***key))***REMOVED***{
				st.fail('object***REMOVED***has***REMOVED***own***REMOVED***key***REMOVED***'***REMOVED***+***REMOVED***key);
				passed***REMOVED***=***REMOVED***false;
			}
		}
		if***REMOVED***(passed)***REMOVED***{
			st.ok(true,***REMOVED***'object***REMOVED***has***REMOVED***no***REMOVED***enumerable***REMOVED***own***REMOVED***keys');
		}

		st.end();
	});

	t.end();
});
