import***REMOVED***{***REMOVED***ref,***REMOVED***shallowRef,***REMOVED***computed,***REMOVED***watch***REMOVED***}***REMOVED***from***REMOVED***'vue';
import***REMOVED***{***REMOVED***TreeOptionsEnum,***REMOVED***NODE_CLICK,***REMOVED***NODE_DROP,***REMOVED***CURRENT_CHANGE,***REMOVED***NODE_EXPAND,***REMOVED***NODE_COLLAPSE***REMOVED***}***REMOVED***from***REMOVED***'../virtual-tree.mjs';
import***REMOVED***{***REMOVED***useCheck***REMOVED***}***REMOVED***from***REMOVED***'./useCheck.mjs';
import***REMOVED***{***REMOVED***useFilter***REMOVED***}***REMOVED***from***REMOVED***'./useFilter.mjs';
import***REMOVED***{***REMOVED***isObject***REMOVED***}***REMOVED***from***REMOVED***'@vue/shared';

function***REMOVED***useTree(props,***REMOVED***emit)***REMOVED***{
***REMOVED******REMOVED***const***REMOVED***expandedKeySet***REMOVED***=***REMOVED***ref(/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Set());
***REMOVED******REMOVED***const***REMOVED***currentKey***REMOVED***=***REMOVED***ref();
***REMOVED******REMOVED***const***REMOVED***tree***REMOVED***=***REMOVED***shallowRef();
***REMOVED******REMOVED***const***REMOVED***listRef***REMOVED***=***REMOVED***ref();
***REMOVED******REMOVED***const***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***isIndeterminate,
***REMOVED******REMOVED******REMOVED******REMOVED***isChecked,
***REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox,
***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedNodes,
***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedNodes,
***REMOVED******REMOVED******REMOVED******REMOVED***setChecked,
***REMOVED******REMOVED******REMOVED******REMOVED***setCheckedKeys
***REMOVED******REMOVED***}***REMOVED***=***REMOVED***useCheck(props,***REMOVED***tree);
***REMOVED******REMOVED***const***REMOVED***{***REMOVED***doFilter,***REMOVED***hiddenNodeKeySet,***REMOVED***isForceHiddenExpandIcon***REMOVED***}***REMOVED***=***REMOVED***useFilter(props,***REMOVED***tree);
***REMOVED******REMOVED***const***REMOVED***valueKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***((_a***REMOVED***=***REMOVED***props.props)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.value)***REMOVED***||***REMOVED***TreeOptionsEnum.KEY;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***childrenKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***((_a***REMOVED***=***REMOVED***props.props)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.children)***REMOVED***||***REMOVED***TreeOptionsEnum.CHILDREN;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***disabledKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***((_a***REMOVED***=***REMOVED***props.props)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.disabled)***REMOVED***||***REMOVED***TreeOptionsEnum.DISABLED;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***labelKey***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***((_a***REMOVED***=***REMOVED***props.props)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.label)***REMOVED***||***REMOVED***TreeOptionsEnum.LABEL;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***flattenTree***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedKeys***REMOVED***=***REMOVED***expandedKeySet.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***hiddenKeys***REMOVED***=***REMOVED***hiddenNodeKeySet.value;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***flattenNodes***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodes***REMOVED***=***REMOVED***((_a***REMOVED***=***REMOVED***tree.value)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.treeNodes)***REMOVED***||***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***stack***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***nodes.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***--i)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack.push(nodes[i]);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(stack.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***stack.pop();
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(hiddenKeys.has(node.key))
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***continue;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***flattenNodes.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node.children***REMOVED***&&***REMOVED***expandedKeys.has(node.key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(let***REMOVED***i***REMOVED***=***REMOVED***node.children.length***REMOVED***-***REMOVED***1;***REMOVED***i***REMOVED***>=***REMOVED***0;***REMOVED***--i)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***stack.push(node.children[i]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***flattenNodes;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***const***REMOVED***isNotEmpty***REMOVED***=***REMOVED***computed(()***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***flattenTree.value.length***REMOVED***>***REMOVED***0;
***REMOVED******REMOVED***});
***REMOVED******REMOVED***function***REMOVED***createTree(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***treeNodeMap***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***levelTreeNodeMap***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Map();
***REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***maxLevel***REMOVED***=***REMOVED***1;
***REMOVED******REMOVED******REMOVED******REMOVED***function***REMOVED***traverse(nodes,***REMOVED***level***REMOVED***=***REMOVED***1,***REMOVED***parent***REMOVED***=***REMOVED***void***REMOVED***0)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***siblings***REMOVED***=***REMOVED***[];
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***for***REMOVED***(const***REMOVED***rawNode***REMOVED***of***REMOVED***nodes)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***value***REMOVED***=***REMOVED***getKey(rawNode);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***level,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***key:***REMOVED***value,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***data:***REMOVED***rawNode
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.label***REMOVED***=***REMOVED***getLabel(rawNode);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.parent***REMOVED***=***REMOVED***parent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***children***REMOVED***=***REMOVED***getChildren(rawNode);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.disabled***REMOVED***=***REMOVED***getDisabled(rawNode);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.isLeaf***REMOVED***=***REMOVED***!children***REMOVED***||***REMOVED***children.length***REMOVED***===***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***expandedKeySet.value.has(value);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(children***REMOVED***&&***REMOVED***children.length)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.children***REMOVED***=***REMOVED***traverse(children,***REMOVED***level***REMOVED***+***REMOVED***1,***REMOVED***node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***siblings.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNodeMap.set(value,***REMOVED***node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!levelTreeNodeMap.has(level))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***levelTreeNodeMap.set(level,***REMOVED***[]);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***levelTreeNodeMap.get(level))***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.push(node);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(level***REMOVED***>***REMOVED***maxLevel)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxLevel***REMOVED***=***REMOVED***level;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***siblings;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***treeNodes***REMOVED***=***REMOVED***traverse(data);
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNodeMap,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***levelTreeNodeMap,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***maxLevel,
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNodes
***REMOVED******REMOVED******REMOVED******REMOVED***};
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***filter(query)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keys***REMOVED***=***REMOVED***doFilter(query);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(keys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value***REMOVED***=***REMOVED***keys;
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getChildren(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[childrenKey.value];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getKey(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***"";
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[valueKey.value];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getDisabled(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[disabledKey.value];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getLabel(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***node[labelKey.value];
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***toggleExpand(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedKeys***REMOVED***=***REMOVED***expandedKeySet.value;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(expandedKeys.has(node.key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***collapseNode(node);
***REMOVED******REMOVED******REMOVED******REMOVED***}***REMOVED***else***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandNode(node);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***setExpandedKeys(keys)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***expandedKeys***REMOVED***=***REMOVED***/****REMOVED***@__PURE__***REMOVED****/***REMOVED***new***REMOVED***Set();
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***nodeMap***REMOVED***=***REMOVED***tree.value.treeNodeMap;
***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value.forEach((key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***nodeMap.get(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value.delete(node.key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***keys.forEach((k)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***let***REMOVED***node***REMOVED***=***REMOVED***nodeMap.get(k);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***while***REMOVED***(node***REMOVED***&&***REMOVED***!expandedKeys.has(node.key))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***expandedKeys.add(node.key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***node***REMOVED***=***REMOVED***node.parent;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value***REMOVED***=***REMOVED***expandedKeys;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***handleNodeClick(node,***REMOVED***e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_CLICK,***REMOVED***node.data,***REMOVED***node,***REMOVED***e);
***REMOVED******REMOVED******REMOVED******REMOVED***handleCurrentChange(node);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(props.expandOnClickNode)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***toggleExpand(node);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(props.showCheckbox***REMOVED***&&***REMOVED***(props.checkOnClickNode***REMOVED***||***REMOVED***node.isLeaf***REMOVED***&&***REMOVED***props.checkOnClickLeaf)***REMOVED***&&***REMOVED***!node.disabled)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox(node,***REMOVED***!isChecked(node),***REMOVED***true);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***handleNodeDrop(node,***REMOVED***e)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_DROP,***REMOVED***node.data,***REMOVED***node,***REMOVED***e);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***handleCurrentChange(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!isCurrent(node))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***currentKey.value***REMOVED***=***REMOVED***node.key;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***emit(CURRENT_CHANGE,***REMOVED***node.data,***REMOVED***node);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***handleNodeCheck(node,***REMOVED***checked)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox(node,***REMOVED***checked);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***expandNode(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***keySet***REMOVED***=***REMOVED***expandedKeySet.value;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(tree.value***REMOVED***&&***REMOVED***props.accordion)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***{***REMOVED***treeNodeMap***REMOVED***}***REMOVED***=***REMOVED***tree.value;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***keySet.forEach((key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***treeNode***REMOVED***=***REMOVED***treeNodeMap.get(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node***REMOVED***&&***REMOVED***node.level***REMOVED***===***REMOVED***(treeNode***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***treeNode.level))***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***keySet.delete(key);
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***treeNode.expanded***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***});
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED******REMOVED******REMOVED***keySet.add(node.key);
***REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***true;
***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_EXPAND,***REMOVED***node.data,***REMOVED***node);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***collapseNode(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value.delete(node.key);
***REMOVED******REMOVED******REMOVED******REMOVED***node.expanded***REMOVED***=***REMOVED***false;
***REMOVED******REMOVED******REMOVED******REMOVED***emit(NODE_COLLAPSE,***REMOVED***node.data,***REMOVED***node);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***isDisabled(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***!!node.disabled;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***isCurrent(node)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***current***REMOVED***=***REMOVED***currentKey.value;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***current***REMOVED***!==***REMOVED***void***REMOVED***0***REMOVED***&&***REMOVED***current***REMOVED***===***REMOVED***node.key;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getCurrentNode()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a,***REMOVED***_b;
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(!currentKey.value)
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***void***REMOVED***0;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(_b***REMOVED***=***REMOVED***(_a***REMOVED***=***REMOVED***tree.value)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.treeNodeMap.get(currentKey.value))***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_b.data;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getCurrentKey()***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***currentKey.value;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***setCurrentKey(key)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***currentKey.value***REMOVED***=***REMOVED***key;
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***setData(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***tree.value***REMOVED***=***REMOVED***createTree(data);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***getNode(data)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***key***REMOVED***=***REMOVED***isObject(data)***REMOVED***?***REMOVED***getKey(data)***REMOVED***:***REMOVED***data;
***REMOVED******REMOVED******REMOVED******REMOVED***return***REMOVED***(_a***REMOVED***=***REMOVED***tree.value)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.treeNodeMap.get(key);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***scrollToNode(key,***REMOVED***strategy***REMOVED***=***REMOVED***"auto")***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***const***REMOVED***node***REMOVED***=***REMOVED***getNode(key);
***REMOVED******REMOVED******REMOVED******REMOVED***if***REMOVED***(node***REMOVED***&&***REMOVED***listRef.value)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED******REMOVED******REMOVED***listRef.value.scrollToItem(flattenTree.value.indexOf(node),***REMOVED***strategy);
***REMOVED******REMOVED******REMOVED******REMOVED***}
***REMOVED******REMOVED***}
***REMOVED******REMOVED***function***REMOVED***scrollTo(offset)***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***var***REMOVED***_a;
***REMOVED******REMOVED******REMOVED******REMOVED***(_a***REMOVED***=***REMOVED***listRef.value)***REMOVED***==***REMOVED***null***REMOVED***?***REMOVED***void***REMOVED***0***REMOVED***:***REMOVED***_a.scrollTo(offset);
***REMOVED******REMOVED***}
***REMOVED******REMOVED***watch(()***REMOVED***=>***REMOVED***props.currentNodeKey,***REMOVED***(key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***currentKey.value***REMOVED***=***REMOVED***key;
***REMOVED******REMOVED***},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***immediate:***REMOVED***true
***REMOVED******REMOVED***});
***REMOVED******REMOVED***watch(()***REMOVED***=>***REMOVED***props.defaultExpandedKeys,***REMOVED***(key)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***expandedKeySet.value***REMOVED***=***REMOVED***new***REMOVED***Set(key);
***REMOVED******REMOVED***},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***immediate:***REMOVED***true
***REMOVED******REMOVED***});
***REMOVED******REMOVED***watch(()***REMOVED***=>***REMOVED***props.data,***REMOVED***(data)***REMOVED***=>***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***setData(data);
***REMOVED******REMOVED***},***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***immediate:***REMOVED***true
***REMOVED******REMOVED***});
***REMOVED******REMOVED***return***REMOVED***{
***REMOVED******REMOVED******REMOVED******REMOVED***tree,
***REMOVED******REMOVED******REMOVED******REMOVED***flattenTree,
***REMOVED******REMOVED******REMOVED******REMOVED***isNotEmpty,
***REMOVED******REMOVED******REMOVED******REMOVED***listRef,
***REMOVED******REMOVED******REMOVED******REMOVED***getKey,
***REMOVED******REMOVED******REMOVED******REMOVED***getChildren,
***REMOVED******REMOVED******REMOVED******REMOVED***toggleExpand,
***REMOVED******REMOVED******REMOVED******REMOVED***toggleCheckbox,
***REMOVED******REMOVED******REMOVED******REMOVED***isChecked,
***REMOVED******REMOVED******REMOVED******REMOVED***isIndeterminate,
***REMOVED******REMOVED******REMOVED******REMOVED***isDisabled,
***REMOVED******REMOVED******REMOVED******REMOVED***isCurrent,
***REMOVED******REMOVED******REMOVED******REMOVED***isForceHiddenExpandIcon,
***REMOVED******REMOVED******REMOVED******REMOVED***handleNodeClick,
***REMOVED******REMOVED******REMOVED******REMOVED***handleNodeDrop,
***REMOVED******REMOVED******REMOVED******REMOVED***handleNodeCheck,
***REMOVED******REMOVED******REMOVED******REMOVED***getCurrentNode,
***REMOVED******REMOVED******REMOVED******REMOVED***getCurrentKey,
***REMOVED******REMOVED******REMOVED******REMOVED***setCurrentKey,
***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***getCheckedNodes,
***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***getHalfCheckedNodes,
***REMOVED******REMOVED******REMOVED******REMOVED***setChecked,
***REMOVED******REMOVED******REMOVED******REMOVED***setCheckedKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***filter,
***REMOVED******REMOVED******REMOVED******REMOVED***setData,
***REMOVED******REMOVED******REMOVED******REMOVED***getNode,
***REMOVED******REMOVED******REMOVED******REMOVED***expandNode,
***REMOVED******REMOVED******REMOVED******REMOVED***collapseNode,
***REMOVED******REMOVED******REMOVED******REMOVED***setExpandedKeys,
***REMOVED******REMOVED******REMOVED******REMOVED***scrollToNode,
***REMOVED******REMOVED******REMOVED******REMOVED***scrollTo
***REMOVED******REMOVED***};
}

export***REMOVED***{***REMOVED***useTree***REMOVED***};
//#***REMOVED***sourceMappingURL=useTree.mjs.map
